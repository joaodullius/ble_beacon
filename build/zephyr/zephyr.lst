
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return pm_state;
}


enum power_states pm_system_suspend(int32_t ticks)
{
   0:	200047a0 	.word	0x200047a0
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
   4:	00014b1d 	.word	0x00014b1d
		   pm_policy_next_state(ticks) : forced_pm_state;
   8:	0001df79 	.word	0x0001df79
   c:	00014b4d 	.word	0x00014b4d
  10:	00014b4d 	.word	0x00014b4d
	if (pm_state == POWER_STATE_ACTIVE) {
  14:	00014b4d 	.word	0x00014b4d
  18:	00014b4d 	.word	0x00014b4d
	...
	pm_power_state_set(pm_state);
  2c:	000148cd 	.word	0x000148cd
	if (!post_ops_done) {
  30:	00014b4d 	.word	0x00014b4d
		post_ops_done = 1;
  34:	00000000 	.word	0x00000000
		forced_pm_state = POWER_STATE_AUTO;
  38:	00014879 	.word	0x00014879
		pm_state_notify(false);
  3c:	0001dbad 	.word	0x0001dbad

00000040 <_irq_vector_table>:
		pm_power_state_exit_post_ops(pm_state);
  40:	00014add 0001f707 00014add 00014add     .J.......J...J..
	return pm_policy_mgr(ticks);
}
  50:	00014add 00014add 00014add 00014add     .J...J...J...J..
  60:	0001f6cf 00014add 00014add 0001f6ed     .....J...J......
  70:	00014add 00014add 00014add 00014add     .J...J...J...J..
  80:	00014add 00014add 00014add 00014add     .J...J...J...J..
  90:	00014add 00014add 00014add 00014add     .J...J...J...J..
  a0:	00014add 00014add 00014add 00014add     .J...J...J...J..
  b0:	00014add 00014add 00014add 00014add     .J...J...J...J..
  c0:	00014add 00014add 00014add 00014add     .J...J...J...J..
  d0:	00014add 00014add 00014add 00014add     .J...J...J...J..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b96c 	b.w	3d0 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	9e08      	ldr	r6, [sp, #32]
     116:	460d      	mov	r5, r1
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	2b00      	cmp	r3, #0
     11e:	f040 8082 	bne.w	226 <CONFIG_MAIN_STACK_SIZE+0x26>
     122:	428a      	cmp	r2, r1
     124:	4617      	mov	r7, r2
     126:	d946      	bls.n	1b6 <__udivmoddi4+0xa6>
     128:	fab2 f282 	clz	r2, r2
     12c:	b14a      	cbz	r2, 142 <__udivmoddi4+0x32>
     12e:	f1c2 0120 	rsb	r1, r2, #32
     132:	fa05 f302 	lsl.w	r3, r5, r2
     136:	fa20 f101 	lsr.w	r1, r0, r1
     13a:	4097      	lsls	r7, r2
     13c:	ea41 0e03 	orr.w	lr, r1, r3
     140:	4094      	lsls	r4, r2
     142:	ea4f 4817 	mov.w	r8, r7, lsr #16
     146:	0c23      	lsrs	r3, r4, #16
     148:	fbbe fcf8 	udiv	ip, lr, r8
     14c:	b2b9      	uxth	r1, r7
     14e:	fb08 ee1c 	mls	lr, r8, ip, lr
     152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     156:	fb0c f001 	mul.w	r0, ip, r1
     15a:	4298      	cmp	r0, r3
     15c:	d90a      	bls.n	174 <__udivmoddi4+0x64>
     15e:	18fb      	adds	r3, r7, r3
     160:	f10c 35ff 	add.w	r5, ip, #4294967295
     164:	f080 8116 	bcs.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x53>
     168:	4298      	cmp	r0, r3
     16a:	f240 8113 	bls.w	394 <CONFIG_BT_DEVICE_APPEARANCE+0x53>
     16e:	f1ac 0c02 	sub.w	ip, ip, #2
     172:	443b      	add	r3, r7
     174:	1a1b      	subs	r3, r3, r0
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f8 	udiv	r0, r3, r8
     17c:	fb08 3310 	mls	r3, r8, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f101 	mul.w	r1, r0, r1
     188:	42a1      	cmp	r1, r4
     18a:	d909      	bls.n	1a0 <__udivmoddi4+0x90>
     18c:	193c      	adds	r4, r7, r4
     18e:	f100 33ff 	add.w	r3, r0, #4294967295
     192:	f080 8101 	bcs.w	398 <CONFIG_BT_DEVICE_APPEARANCE+0x57>
     196:	42a1      	cmp	r1, r4
     198:	f240 80fe 	bls.w	398 <CONFIG_BT_DEVICE_APPEARANCE+0x57>
     19c:	3802      	subs	r0, #2
     19e:	443c      	add	r4, r7
     1a0:	1a64      	subs	r4, r4, r1
     1a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a6:	2100      	movs	r1, #0
     1a8:	b11e      	cbz	r6, 1b2 <__udivmoddi4+0xa2>
     1aa:	40d4      	lsrs	r4, r2
     1ac:	2300      	movs	r3, #0
     1ae:	e9c6 4300 	strd	r4, r3, [r6]
     1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b6:	b902      	cbnz	r2, 1ba <__udivmoddi4+0xaa>
     1b8:	deff      	udf	#255	; 0xff
     1ba:	fab2 f282 	clz	r2, r2
     1be:	2a00      	cmp	r2, #0
     1c0:	d14f      	bne.n	262 <CONFIG_MAIN_STACK_SIZE+0x62>
     1c2:	1bcb      	subs	r3, r1, r7
     1c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c8:	fa1f f887 	uxth.w	r8, r7
     1cc:	2101      	movs	r1, #1
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c25      	lsrs	r5, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1dc:	fb08 f30c 	mul.w	r3, r8, ip
     1e0:	42ab      	cmp	r3, r5
     1e2:	d907      	bls.n	1f4 <__udivmoddi4+0xe4>
     1e4:	197d      	adds	r5, r7, r5
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ea:	d202      	bcs.n	1f2 <__udivmoddi4+0xe2>
     1ec:	42ab      	cmp	r3, r5
     1ee:	f200 80e7 	bhi.w	3c0 <CONFIG_BT_DEVICE_APPEARANCE+0x7f>
     1f2:	4684      	mov	ip, r0
     1f4:	1aed      	subs	r5, r5, r3
     1f6:	b2a3      	uxth	r3, r4
     1f8:	fbb5 f0fe 	udiv	r0, r5, lr
     1fc:	fb0e 5510 	mls	r5, lr, r0, r5
     200:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     204:	fb08 f800 	mul.w	r8, r8, r0
     208:	45a0      	cmp	r8, r4
     20a:	d907      	bls.n	21c <CONFIG_MAIN_STACK_SIZE+0x1c>
     20c:	193c      	adds	r4, r7, r4
     20e:	f100 33ff 	add.w	r3, r0, #4294967295
     212:	d202      	bcs.n	21a <CONFIG_MAIN_STACK_SIZE+0x1a>
     214:	45a0      	cmp	r8, r4
     216:	f200 80d7 	bhi.w	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0x87>
     21a:	4618      	mov	r0, r3
     21c:	eba4 0408 	sub.w	r4, r4, r8
     220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     224:	e7c0      	b.n	1a8 <__udivmoddi4+0x98>
     226:	428b      	cmp	r3, r1
     228:	d908      	bls.n	23c <CONFIG_MAIN_STACK_SIZE+0x3c>
     22a:	2e00      	cmp	r6, #0
     22c:	f000 80af 	beq.w	38e <CONFIG_BT_DEVICE_APPEARANCE+0x4d>
     230:	2100      	movs	r1, #0
     232:	e9c6 0500 	strd	r0, r5, [r6]
     236:	4608      	mov	r0, r1
     238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     23c:	fab3 f183 	clz	r1, r3
     240:	2900      	cmp	r1, #0
     242:	d14b      	bne.n	2dc <CONFIG_MAIN_STACK_SIZE+0xdc>
     244:	42ab      	cmp	r3, r5
     246:	d302      	bcc.n	24e <CONFIG_MAIN_STACK_SIZE+0x4e>
     248:	4282      	cmp	r2, r0
     24a:	f200 80b7 	bhi.w	3bc <CONFIG_BT_DEVICE_APPEARANCE+0x7b>
     24e:	1a84      	subs	r4, r0, r2
     250:	eb65 0303 	sbc.w	r3, r5, r3
     254:	2001      	movs	r0, #1
     256:	469e      	mov	lr, r3
     258:	2e00      	cmp	r6, #0
     25a:	d0aa      	beq.n	1b2 <__udivmoddi4+0xa2>
     25c:	e9c6 4e00 	strd	r4, lr, [r6]
     260:	e7a7      	b.n	1b2 <__udivmoddi4+0xa2>
     262:	f1c2 0c20 	rsb	ip, r2, #32
     266:	fa01 f302 	lsl.w	r3, r1, r2
     26a:	4097      	lsls	r7, r2
     26c:	fa20 f00c 	lsr.w	r0, r0, ip
     270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     274:	fa21 fc0c 	lsr.w	ip, r1, ip
     278:	4318      	orrs	r0, r3
     27a:	fbbc f1fe 	udiv	r1, ip, lr
     27e:	0c05      	lsrs	r5, r0, #16
     280:	fb0e cc11 	mls	ip, lr, r1, ip
     284:	fa1f f887 	uxth.w	r8, r7
     288:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     28c:	fb01 f308 	mul.w	r3, r1, r8
     290:	42ab      	cmp	r3, r5
     292:	fa04 f402 	lsl.w	r4, r4, r2
     296:	d909      	bls.n	2ac <CONFIG_MAIN_STACK_SIZE+0xac>
     298:	197d      	adds	r5, r7, r5
     29a:	f101 3cff 	add.w	ip, r1, #4294967295
     29e:	f080 808b 	bcs.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f240 8088 	bls.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     2a8:	3902      	subs	r1, #2
     2aa:	443d      	add	r5, r7
     2ac:	1aeb      	subs	r3, r5, r3
     2ae:	b285      	uxth	r5, r0
     2b0:	fbb3 f0fe 	udiv	r0, r3, lr
     2b4:	fb0e 3310 	mls	r3, lr, r0, r3
     2b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2bc:	fb00 f308 	mul.w	r3, r0, r8
     2c0:	42ab      	cmp	r3, r5
     2c2:	d907      	bls.n	2d4 <CONFIG_MAIN_STACK_SIZE+0xd4>
     2c4:	197d      	adds	r5, r7, r5
     2c6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ca:	d271      	bcs.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0x6f>
     2cc:	42ab      	cmp	r3, r5
     2ce:	d96f      	bls.n	3b0 <CONFIG_BT_DEVICE_APPEARANCE+0x6f>
     2d0:	3802      	subs	r0, #2
     2d2:	443d      	add	r5, r7
     2d4:	1aeb      	subs	r3, r5, r3
     2d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2da:	e778      	b.n	1ce <__udivmoddi4+0xbe>
     2dc:	f1c1 0c20 	rsb	ip, r1, #32
     2e0:	408b      	lsls	r3, r1
     2e2:	fa22 f70c 	lsr.w	r7, r2, ip
     2e6:	431f      	orrs	r7, r3
     2e8:	fa20 f40c 	lsr.w	r4, r0, ip
     2ec:	fa05 f301 	lsl.w	r3, r5, r1
     2f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f4:	fa25 f50c 	lsr.w	r5, r5, ip
     2f8:	431c      	orrs	r4, r3
     2fa:	0c23      	lsrs	r3, r4, #16
     2fc:	fbb5 f9fe 	udiv	r9, r5, lr
     300:	fa1f f887 	uxth.w	r8, r7
     304:	fb0e 5519 	mls	r5, lr, r9, r5
     308:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     30c:	fb09 fa08 	mul.w	sl, r9, r8
     310:	45aa      	cmp	sl, r5
     312:	fa02 f201 	lsl.w	r2, r2, r1
     316:	fa00 f301 	lsl.w	r3, r0, r1
     31a:	d908      	bls.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     31c:	197d      	adds	r5, r7, r5
     31e:	f109 30ff 	add.w	r0, r9, #4294967295
     322:	d247      	bcs.n	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     324:	45aa      	cmp	sl, r5
     326:	d945      	bls.n	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     328:	f1a9 0902 	sub.w	r9, r9, #2
     32c:	443d      	add	r5, r7
     32e:	eba5 050a 	sub.w	r5, r5, sl
     332:	b2a4      	uxth	r4, r4
     334:	fbb5 f0fe 	udiv	r0, r5, lr
     338:	fb0e 5510 	mls	r5, lr, r0, r5
     33c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     340:	fb00 f808 	mul.w	r8, r0, r8
     344:	45a0      	cmp	r8, r4
     346:	d907      	bls.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     348:	193c      	adds	r4, r7, r4
     34a:	f100 35ff 	add.w	r5, r0, #4294967295
     34e:	d22d      	bcs.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     350:	45a0      	cmp	r8, r4
     352:	d92b      	bls.n	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     35c:	eba4 0408 	sub.w	r4, r4, r8
     360:	fba0 8902 	umull	r8, r9, r0, r2
     364:	454c      	cmp	r4, r9
     366:	46c6      	mov	lr, r8
     368:	464d      	mov	r5, r9
     36a:	d319      	bcc.n	3a0 <CONFIG_BT_DEVICE_APPEARANCE+0x5f>
     36c:	d016      	beq.n	39c <CONFIG_BT_DEVICE_APPEARANCE+0x5b>
     36e:	b15e      	cbz	r6, 388 <CONFIG_BT_DEVICE_APPEARANCE+0x47>
     370:	ebb3 020e 	subs.w	r2, r3, lr
     374:	eb64 0405 	sbc.w	r4, r4, r5
     378:	fa04 fc0c 	lsl.w	ip, r4, ip
     37c:	40ca      	lsrs	r2, r1
     37e:	ea4c 0202 	orr.w	r2, ip, r2
     382:	40cc      	lsrs	r4, r1
     384:	e9c6 2400 	strd	r2, r4, [r6]
     388:	2100      	movs	r1, #0
     38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38e:	4631      	mov	r1, r6
     390:	4630      	mov	r0, r6
     392:	e70e      	b.n	1b2 <__udivmoddi4+0xa2>
     394:	46ac      	mov	ip, r5
     396:	e6ed      	b.n	174 <__udivmoddi4+0x64>
     398:	4618      	mov	r0, r3
     39a:	e701      	b.n	1a0 <__udivmoddi4+0x90>
     39c:	4543      	cmp	r3, r8
     39e:	d2e6      	bcs.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     3a0:	ebb8 0e02 	subs.w	lr, r8, r2
     3a4:	eb69 0507 	sbc.w	r5, r9, r7
     3a8:	3801      	subs	r0, #1
     3aa:	e7e0      	b.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     3ac:	4628      	mov	r0, r5
     3ae:	e7d3      	b.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     3b0:	4660      	mov	r0, ip
     3b2:	e78f      	b.n	2d4 <CONFIG_MAIN_STACK_SIZE+0xd4>
     3b4:	4681      	mov	r9, r0
     3b6:	e7ba      	b.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     3b8:	4661      	mov	r1, ip
     3ba:	e777      	b.n	2ac <CONFIG_MAIN_STACK_SIZE+0xac>
     3bc:	4608      	mov	r0, r1
     3be:	e74b      	b.n	258 <CONFIG_MAIN_STACK_SIZE+0x58>
     3c0:	f1ac 0c02 	sub.w	ip, ip, #2
     3c4:	443d      	add	r5, r7
     3c6:	e715      	b.n	1f4 <__udivmoddi4+0xe4>
     3c8:	3802      	subs	r0, #2
     3ca:	443c      	add	r4, r7
     3cc:	e726      	b.n	21c <CONFIG_MAIN_STACK_SIZE+0x1c>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop

000003d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d6:	4615      	mov	r5, r2
     3d8:	4a0a      	ldr	r2, [pc, #40]	; (404 <CONFIG_BT_RX_STACK_SIZE+0x4>)
     3da:	461c      	mov	r4, r3
     3dc:	6856      	ldr	r6, [r2, #4]
     3de:	b12e      	cbz	r6, 3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     3e0:	b001      	add	sp, #4
     3e2:	462a      	mov	r2, r5
     3e4:	46b4      	mov	ip, r6
     3e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3ea:	4760      	bx	ip
     3ec:	2000      	movs	r0, #0
     3ee:	f88d 0000 	strb.w	r0, [sp]
     3f2:	4668      	mov	r0, sp
     3f4:	f00e fcbe 	bl	ed74 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     3f8:	f89d 0000 	ldrb.w	r0, [sp]
     3fc:	1a28      	subs	r0, r5, r0
     3fe:	7020      	strb	r0, [r4, #0]
     400:	2000      	movs	r0, #0
     402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     404:	20000000 	.word	0x20000000

00000408 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     408:	4801      	ldr	r0, [pc, #4]	; (410 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     40a:	7800      	ldrb	r0, [r0, #0]
     40c:	4770      	bx	lr
     40e:	0000      	.short	0x0000
     410:	20000008 	.word	0x20000008

00000414 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     414:	4904      	ldr	r1, [pc, #16]	; (428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
     416:	780a      	ldrb	r2, [r1, #0]
     418:	4290      	cmp	r0, r2
     41a:	d301      	bcc.n	420 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     41c:	2000      	movs	r0, #0
     41e:	4770      	bx	lr
     420:	6849      	ldr	r1, [r1, #4]
     422:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     426:	4770      	bx	lr
     428:	20000008 	.word	0x20000008
     42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     430:	4615      	mov	r5, r2
     432:	4604      	mov	r4, r0
     434:	f100 0208 	add.w	r2, r0, #8
     438:	1cc8      	adds	r0, r1, #3
     43a:	4241      	negs	r1, r0
     43c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 4dc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x90>
     440:	461f      	mov	r7, r3
     442:	1a28      	subs	r0, r5, r0
     444:	2300      	movs	r3, #0
     446:	9e08      	ldr	r6, [sp, #32]
     448:	ebbc 0c05 	subs.w	ip, ip, r5
     44c:	419b      	sbcs	r3, r3
     44e:	d204      	bcs.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     450:	f240 51e1 	movw	r1, #1505	; 0x5e1
     454:	2070      	movs	r0, #112	; 0x70
     456:	f003 f8f9 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     45a:	4b21      	ldr	r3, [pc, #132]	; (4e0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x94>)
     45c:	4299      	cmp	r1, r3
     45e:	dd04      	ble.n	46a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     460:	f240 51e2 	movw	r1, #1506	; 0x5e2
     464:	2070      	movs	r0, #112	; 0x70
     466:	f003 f8f1 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     46a:	4b1e      	ldr	r3, [pc, #120]	; (4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>)
     46c:	4299      	cmp	r1, r3
     46e:	da04      	bge.n	47a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2e>
     470:	f240 51e3 	movw	r1, #1507	; 0x5e3
     474:	2070      	movs	r0, #112	; 0x70
     476:	f003 f8e9 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     47a:	491b      	ldr	r1, [pc, #108]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     47c:	4288      	cmp	r0, r1
     47e:	bfa8      	it	ge
     480:	491a      	ldrge	r1, [pc, #104]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     482:	da03      	bge.n	48c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>
     484:	2800      	cmp	r0, #0
     486:	bfb8      	it	lt
     488:	4917      	ldrlt	r1, [pc, #92]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     48a:	da00      	bge.n	48e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x42>
     48c:	1840      	adds	r0, r0, r1
     48e:	4621      	mov	r1, r4
     490:	f002 fd4e 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     494:	6820      	ldr	r0, [r4, #0]
     496:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     49a:	19e8      	adds	r0, r5, r7
     49c:	1cc0      	adds	r0, r0, #3
     49e:	6021      	str	r1, [r4, #0]
     4a0:	2e00      	cmp	r6, #0
     4a2:	bf08      	it	eq
     4a4:	307a      	addeq	r0, #122	; 0x7a
     4a6:	d008      	beq.n	4ba <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6e>
     4a8:	2e01      	cmp	r6, #1
     4aa:	bf08      	it	eq
     4ac:	3045      	addeq	r0, #69	; 0x45
     4ae:	d004      	beq.n	4ba <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6e>
     4b0:	f240 6186 	movw	r1, #1670	; 0x686
     4b4:	2070      	movs	r0, #112	; 0x70
     4b6:	f003 f8c9 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4ba:	466a      	mov	r2, sp
     4bc:	1d21      	adds	r1, r4, #4
     4be:	f002 fd37 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     4c2:	f99d 0000 	ldrsb.w	r0, [sp]
     4c6:	2800      	cmp	r0, #0
     4c8:	6860      	ldr	r0, [r4, #4]
     4ca:	bfc4      	itt	gt
     4cc:	1c40      	addgt	r0, r0, #1
     4ce:	6060      	strgt	r0, [r4, #4]
     4d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4d4:	6060      	str	r0, [r4, #4]
     4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     4da:	0000      	.short	0x0000
     4dc:	1e847fff 	.word	0x1e847fff
     4e0:	07a12000 	.word	0x07a12000
     4e4:	f85ee000 	.word	0xf85ee000
     4e8:	1e848000 	.word	0x1e848000
     4ec:	e17b8000 	.word	0xe17b8000
     4f0:	b570      	push	{r4, r5, r6, lr}
     4f2:	4605      	mov	r5, r0
     4f4:	2a20      	cmp	r2, #32
     4f6:	d027      	beq.n	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
     4f8:	4819      	ldr	r0, [pc, #100]	; (560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>)
     4fa:	4c1a      	ldr	r4, [pc, #104]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     4fc:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     500:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     508:	2920      	cmp	r1, #32
     50a:	d022      	beq.n	552 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6a>
     50c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     510:	7840      	ldrb	r0, [r0, #1]
     512:	784c      	ldrb	r4, [r1, #1]
     514:	7048      	strb	r0, [r1, #1]
     516:	4620      	mov	r0, r4
     518:	4601      	mov	r1, r0
     51a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     51e:	4291      	cmp	r1, r2
     520:	7005      	strb	r5, [r0, #0]
     522:	7840      	ldrb	r0, [r0, #1]
     524:	d1f8      	bne.n	518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>
     526:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     52a:	2a20      	cmp	r2, #32
     52c:	bf1a      	itte	ne
     52e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     532:	7054      	strbne	r4, [r2, #1]
     534:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     538:	2220      	movs	r2, #32
     53a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     53e:	f88c 2001 	strb.w	r2, [ip, #1]
     542:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     546:	bd70      	pop	{r4, r5, r6, pc}
     548:	f44f 7122 	mov.w	r1, #648	; 0x288
     54c:	2070      	movs	r0, #112	; 0x70
     54e:	f003 f87d 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     552:	f893 4020 	ldrb.w	r4, [r3, #32]
     556:	7840      	ldrb	r0, [r0, #1]
     558:	f883 0020 	strb.w	r0, [r3, #32]
     55c:	e7db      	b.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     55e:	0000      	.short	0x0000
     560:	20000cb4 	.word	0x20000cb4
     564:	20000d34 	.word	0x20000d34
     568:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     56c:	b087      	sub	sp, #28
     56e:	4604      	mov	r4, r0
     570:	2000      	movs	r0, #0
     572:	9002      	str	r0, [sp, #8]
     574:	489e      	ldr	r0, [pc, #632]	; (7f0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f0>)
     576:	9f08      	ldr	r7, [sp, #32]
     578:	4e9e      	ldr	r6, [pc, #632]	; (7f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f4>)
     57a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     57e:	9003      	str	r0, [sp, #12]
     580:	f890 5020 	ldrb.w	r5, [r0, #32]
     584:	2020      	movs	r0, #32
     586:	46e9      	mov	r9, sp
     588:	f10d 0804 	add.w	r8, sp, #4
     58c:	f88d 0000 	strb.w	r0, [sp]
     590:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     594:	2d20      	cmp	r5, #32
     596:	bf18      	it	ne
     598:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     59c:	d032      	beq.n	604 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     59e:	bf00      	nop
     5a0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     5a4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     5a8:	1d01      	adds	r1, r0, #4
     5aa:	6880      	ldr	r0, [r0, #8]
     5ac:	6822      	ldr	r2, [r4, #0]
     5ae:	1a10      	subs	r0, r2, r0
     5b0:	0200      	lsls	r0, r0, #8
     5b2:	17c2      	asrs	r2, r0, #31
     5b4:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5b8:	1200      	asrs	r0, r0, #8
     5ba:	d423      	bmi.n	604 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     5bc:	8960      	ldrh	r0, [r4, #10]
     5be:	b1d0      	cbz	r0, 5f6 <CONFIG_BT_COMPANY_ID+0x5>
     5c0:	8948      	ldrh	r0, [r1, #10]
     5c2:	b9c0      	cbnz	r0, 5f6 <CONFIG_BT_COMPANY_ID+0x5>
     5c4:	4608      	mov	r0, r1
     5c6:	f000 fcdb 	bl	f80 <CONFIG_ISR_STACK_SIZE+0x780>
     5ca:	aa05      	add	r2, sp, #20
     5cc:	a904      	add	r1, sp, #16
     5ce:	f002 fcaf 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     5d2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     5d6:	2800      	cmp	r0, #0
     5d8:	bfcc      	ite	gt
     5da:	2001      	movgt	r0, #1
     5dc:	2000      	movle	r0, #0
     5de:	f100 0133 	add.w	r1, r0, #51	; 0x33
     5e2:	9804      	ldr	r0, [sp, #16]
     5e4:	6822      	ldr	r2, [r4, #0]
     5e6:	1a10      	subs	r0, r2, r0
     5e8:	0200      	lsls	r0, r0, #8
     5ea:	17c2      	asrs	r2, r0, #31
     5ec:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5f0:	1200      	asrs	r0, r0, #8
     5f2:	4288      	cmp	r0, r1
     5f4:	db06      	blt.n	604 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     5f6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5fa:	f889 5000 	strb.w	r5, [r9]
     5fe:	7845      	ldrb	r5, [r0, #1]
     600:	2d20      	cmp	r5, #32
     602:	d1cd      	bne.n	5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>
     604:	f899 0000 	ldrb.w	r0, [r9]
     608:	f888 0000 	strb.w	r0, [r8]
     60c:	46a1      	mov	r9, r4
     60e:	2d20      	cmp	r5, #32
     610:	bf1c      	itt	ne
     612:	4879      	ldrne	r0, [pc, #484]	; (7f8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f8>)
     614:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     618:	f000 80e5 	beq.w	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     61c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     620:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     624:	f8d9 2004 	ldr.w	r2, [r9, #4]
     628:	f8da 1004 	ldr.w	r1, [sl, #4]
     62c:	4648      	mov	r0, r9
     62e:	1a89      	subs	r1, r1, r2
     630:	0209      	lsls	r1, r1, #8
     632:	17ca      	asrs	r2, r1, #31
     634:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     638:	f10a 0704 	add.w	r7, sl, #4
     63c:	1209      	asrs	r1, r1, #8
     63e:	d41f      	bmi.n	680 <CONFIG_BT_HCI_TX_STACK_SIZE+0x80>
     640:	8979      	ldrh	r1, [r7, #10]
     642:	2900      	cmp	r1, #0
     644:	f000 80cf 	beq.w	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     648:	8941      	ldrh	r1, [r0, #10]
     64a:	2900      	cmp	r1, #0
     64c:	f040 80cb 	bne.w	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     650:	f000 fc96 	bl	f80 <CONFIG_ISR_STACK_SIZE+0x780>
     654:	aa05      	add	r2, sp, #20
     656:	a904      	add	r1, sp, #16
     658:	f002 fc6a 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     65c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     660:	2800      	cmp	r0, #0
     662:	bfcc      	ite	gt
     664:	2001      	movgt	r0, #1
     666:	2000      	movle	r0, #0
     668:	f100 0133 	add.w	r1, r0, #51	; 0x33
     66c:	9804      	ldr	r0, [sp, #16]
     66e:	683a      	ldr	r2, [r7, #0]
     670:	1a10      	subs	r0, r2, r0
     672:	0200      	lsls	r0, r0, #8
     674:	17c2      	asrs	r2, r0, #31
     676:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     67a:	1200      	asrs	r0, r0, #8
     67c:	4288      	cmp	r0, r1
     67e:	da7d      	bge.n	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     680:	f888 5000 	strb.w	r5, [r8]
     684:	f89a 0010 	ldrb.w	r0, [sl, #16]
     688:	f899 100c 	ldrb.w	r1, [r9, #12]
     68c:	4288      	cmp	r0, r1
     68e:	d905      	bls.n	69c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>
     690:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     694:	7845      	ldrb	r5, [r0, #1]
     696:	2d20      	cmp	r5, #32
     698:	d1c0      	bne.n	61c <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c>
     69a:	e0a4      	b.n	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     69c:	f89d 0004 	ldrb.w	r0, [sp, #4]
     6a0:	e9d4 2100 	ldrd	r2, r1, [r4]
     6a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     6a8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     6ac:	1a89      	subs	r1, r1, r2
     6ae:	6880      	ldr	r0, [r0, #8]
     6b0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     6b4:	4408      	add	r0, r1
     6b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6ba:	e9c4 2000 	strd	r2, r0, [r4]
     6be:	2001      	movs	r0, #1
     6c0:	9002      	str	r0, [sp, #8]
     6c2:	484b      	ldr	r0, [pc, #300]	; (7f0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f0>)
     6c4:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     6c8:	b118      	cbz	r0, 6d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     6ca:	b009      	add	sp, #36	; 0x24
     6cc:	2000      	movs	r0, #0
     6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6d2:	9803      	ldr	r0, [sp, #12]
     6d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6d8:	466f      	mov	r7, sp
     6da:	f890 5020 	ldrb.w	r5, [r0, #32]
     6de:	2020      	movs	r0, #32
     6e0:	f10d 0a04 	add.w	sl, sp, #4
     6e4:	f88d 0000 	strb.w	r0, [sp]
     6e8:	2d20      	cmp	r5, #32
     6ea:	bf1c      	itt	ne
     6ec:	4842      	ldrne	r0, [pc, #264]	; (7f8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f8>)
     6ee:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6f2:	d030      	beq.n	756 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     6f4:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     6f8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     6fc:	1d01      	adds	r1, r0, #4
     6fe:	6880      	ldr	r0, [r0, #8]
     700:	6822      	ldr	r2, [r4, #0]
     702:	1a10      	subs	r0, r2, r0
     704:	0200      	lsls	r0, r0, #8
     706:	17c2      	asrs	r2, r0, #31
     708:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     70c:	1200      	asrs	r0, r0, #8
     70e:	d422      	bmi.n	756 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     710:	8960      	ldrh	r0, [r4, #10]
     712:	b1d0      	cbz	r0, 74a <CONFIG_BT_HCI_TX_STACK_SIZE+0x14a>
     714:	8948      	ldrh	r0, [r1, #10]
     716:	b9c0      	cbnz	r0, 74a <CONFIG_BT_HCI_TX_STACK_SIZE+0x14a>
     718:	4608      	mov	r0, r1
     71a:	f000 fc31 	bl	f80 <CONFIG_ISR_STACK_SIZE+0x780>
     71e:	aa05      	add	r2, sp, #20
     720:	a904      	add	r1, sp, #16
     722:	f002 fc05 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     726:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     72a:	2800      	cmp	r0, #0
     72c:	bfcc      	ite	gt
     72e:	2001      	movgt	r0, #1
     730:	2000      	movle	r0, #0
     732:	f100 0133 	add.w	r1, r0, #51	; 0x33
     736:	9804      	ldr	r0, [sp, #16]
     738:	6822      	ldr	r2, [r4, #0]
     73a:	1a10      	subs	r0, r2, r0
     73c:	0200      	lsls	r0, r0, #8
     73e:	17c2      	asrs	r2, r0, #31
     740:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     744:	1200      	asrs	r0, r0, #8
     746:	4288      	cmp	r0, r1
     748:	db05      	blt.n	756 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     74a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     74e:	703d      	strb	r5, [r7, #0]
     750:	7845      	ldrb	r5, [r0, #1]
     752:	2d20      	cmp	r5, #32
     754:	d1ce      	bne.n	6f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf4>
     756:	7838      	ldrb	r0, [r7, #0]
     758:	f88a 0000 	strb.w	r0, [sl]
     75c:	4627      	mov	r7, r4
     75e:	2d20      	cmp	r5, #32
     760:	bf1c      	itt	ne
     762:	4825      	ldrne	r0, [pc, #148]	; (7f8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f8>)
     764:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     768:	d03d      	beq.n	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     76a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     76e:	eb06 0981 	add.w	r9, r6, r1, lsl #2
     772:	4638      	mov	r0, r7
     774:	f109 0804 	add.w	r8, r9, #4
     778:	687a      	ldr	r2, [r7, #4]
     77a:	e000      	b.n	77e <CONFIG_BT_HCI_TX_STACK_SIZE+0x17e>
     77c:	e033      	b.n	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     77e:	f8d9 1004 	ldr.w	r1, [r9, #4]
     782:	1a89      	subs	r1, r1, r2
     784:	0209      	lsls	r1, r1, #8
     786:	17ca      	asrs	r2, r1, #31
     788:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     78c:	1209      	asrs	r1, r1, #8
     78e:	d41d      	bmi.n	7cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1cc>
     790:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     794:	b339      	cbz	r1, 7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     796:	8941      	ldrh	r1, [r0, #10]
     798:	bb29      	cbnz	r1, 7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     79a:	f000 fbf1 	bl	f80 <CONFIG_ISR_STACK_SIZE+0x780>
     79e:	aa05      	add	r2, sp, #20
     7a0:	a904      	add	r1, sp, #16
     7a2:	f002 fbc5 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     7a6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     7aa:	2800      	cmp	r0, #0
     7ac:	bfcc      	ite	gt
     7ae:	2001      	movgt	r0, #1
     7b0:	2000      	movle	r0, #0
     7b2:	f100 0133 	add.w	r1, r0, #51	; 0x33
     7b6:	9804      	ldr	r0, [sp, #16]
     7b8:	f8d8 2000 	ldr.w	r2, [r8]
     7bc:	1a10      	subs	r0, r2, r0
     7be:	0200      	lsls	r0, r0, #8
     7c0:	17c2      	asrs	r2, r0, #31
     7c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7c6:	1200      	asrs	r0, r0, #8
     7c8:	4288      	cmp	r0, r1
     7ca:	da0c      	bge.n	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     7cc:	f88a 5000 	strb.w	r5, [sl]
     7d0:	f899 1010 	ldrb.w	r1, [r9, #16]
     7d4:	7b38      	ldrb	r0, [r7, #12]
     7d6:	4281      	cmp	r1, r0
     7d8:	f67f af60 	bls.w	69c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>
     7dc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     7e0:	7845      	ldrb	r5, [r0, #1]
     7e2:	2d20      	cmp	r5, #32
     7e4:	d1c1      	bne.n	76a <CONFIG_BT_HCI_TX_STACK_SIZE+0x16a>
     7e6:	9802      	ldr	r0, [sp, #8]
     7e8:	b009      	add	sp, #36	; 0x24
     7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7ee:	0000      	.short	0x0000
     7f0:	20000d34 	.word	0x20000d34
     7f4:	20000a34 	.word	0x20000a34
     7f8:	20000cb4 	.word	0x20000cb4
     7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     800:	4604      	mov	r4, r0
     802:	4847      	ldr	r0, [pc, #284]	; (920 <CONFIG_ISR_STACK_SIZE+0x120>)
     804:	460e      	mov	r6, r1
     806:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     80a:	4f46      	ldr	r7, [pc, #280]	; (924 <CONFIG_ISR_STACK_SIZE+0x124>)
     80c:	f890 5020 	ldrb.w	r5, [r0, #32]
     810:	2020      	movs	r0, #32
     812:	b083      	sub	sp, #12
     814:	4698      	mov	r8, r3
     816:	4692      	mov	sl, r2
     818:	7010      	strb	r0, [r2, #0]
     81a:	f507 7920 	add.w	r9, r7, #640	; 0x280
     81e:	2d20      	cmp	r5, #32
     820:	bf18      	it	ne
     822:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     826:	d031      	beq.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     828:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     82c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
     830:	1d01      	adds	r1, r0, #4
     832:	6880      	ldr	r0, [r0, #8]
     834:	6822      	ldr	r2, [r4, #0]
     836:	1a10      	subs	r0, r2, r0
     838:	0200      	lsls	r0, r0, #8
     83a:	17c2      	asrs	r2, r0, #31
     83c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     840:	1200      	asrs	r0, r0, #8
     842:	d423      	bmi.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     844:	8960      	ldrh	r0, [r4, #10]
     846:	b1d0      	cbz	r0, 87e <CONFIG_ISR_STACK_SIZE+0x7e>
     848:	8948      	ldrh	r0, [r1, #10]
     84a:	b9c0      	cbnz	r0, 87e <CONFIG_ISR_STACK_SIZE+0x7e>
     84c:	4608      	mov	r0, r1
     84e:	f000 fb97 	bl	f80 <CONFIG_ISR_STACK_SIZE+0x780>
     852:	aa01      	add	r2, sp, #4
     854:	4669      	mov	r1, sp
     856:	f002 fb6b 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     85a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     85e:	2800      	cmp	r0, #0
     860:	bfcc      	ite	gt
     862:	2001      	movgt	r0, #1
     864:	2000      	movle	r0, #0
     866:	f100 0133 	add.w	r1, r0, #51	; 0x33
     86a:	9800      	ldr	r0, [sp, #0]
     86c:	6822      	ldr	r2, [r4, #0]
     86e:	1a10      	subs	r0, r2, r0
     870:	0200      	lsls	r0, r0, #8
     872:	17c2      	asrs	r2, r0, #31
     874:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     878:	1200      	asrs	r0, r0, #8
     87a:	4288      	cmp	r0, r1
     87c:	db06      	blt.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     87e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     882:	f88a 5000 	strb.w	r5, [sl]
     886:	7845      	ldrb	r5, [r0, #1]
     888:	2d20      	cmp	r5, #32
     88a:	d1cd      	bne.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
     88c:	f89a 0000 	ldrb.w	r0, [sl]
     890:	f888 0000 	strb.w	r0, [r8]
     894:	2d20      	cmp	r5, #32
     896:	bf18      	it	ne
     898:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     89c:	d03c      	beq.n	918 <CONFIG_ISR_STACK_SIZE+0x118>
     89e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     8a2:	eb07 0981 	add.w	r9, r7, r1, lsl #2
     8a6:	6861      	ldr	r1, [r4, #4]
     8a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
     8ac:	4620      	mov	r0, r4
     8ae:	1a51      	subs	r1, r2, r1
     8b0:	0209      	lsls	r1, r1, #8
     8b2:	17ca      	asrs	r2, r1, #31
     8b4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     8b8:	f109 0604 	add.w	r6, r9, #4
     8bc:	1209      	asrs	r1, r1, #8
     8be:	d41b      	bmi.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
     8c0:	8971      	ldrh	r1, [r6, #10]
     8c2:	b349      	cbz	r1, 918 <CONFIG_ISR_STACK_SIZE+0x118>
     8c4:	8941      	ldrh	r1, [r0, #10]
     8c6:	bb39      	cbnz	r1, 918 <CONFIG_ISR_STACK_SIZE+0x118>
     8c8:	f000 fb5a 	bl	f80 <CONFIG_ISR_STACK_SIZE+0x780>
     8cc:	aa01      	add	r2, sp, #4
     8ce:	4669      	mov	r1, sp
     8d0:	f002 fb2e 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     8d4:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     8d8:	2800      	cmp	r0, #0
     8da:	bfcc      	ite	gt
     8dc:	2001      	movgt	r0, #1
     8de:	2000      	movle	r0, #0
     8e0:	f100 0133 	add.w	r1, r0, #51	; 0x33
     8e4:	9800      	ldr	r0, [sp, #0]
     8e6:	6832      	ldr	r2, [r6, #0]
     8e8:	1a10      	subs	r0, r2, r0
     8ea:	0200      	lsls	r0, r0, #8
     8ec:	17c2      	asrs	r2, r0, #31
     8ee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     8f2:	1200      	asrs	r0, r0, #8
     8f4:	4288      	cmp	r0, r1
     8f6:	da0f      	bge.n	918 <CONFIG_ISR_STACK_SIZE+0x118>
     8f8:	f888 5000 	strb.w	r5, [r8]
     8fc:	f899 0010 	ldrb.w	r0, [r9, #16]
     900:	7b21      	ldrb	r1, [r4, #12]
     902:	4288      	cmp	r0, r1
     904:	d803      	bhi.n	90e <CONFIG_ISR_STACK_SIZE+0x10e>
     906:	b003      	add	sp, #12
     908:	2000      	movs	r0, #0
     90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     90e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     912:	7845      	ldrb	r5, [r0, #1]
     914:	2d20      	cmp	r5, #32
     916:	d1c2      	bne.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
     918:	b003      	add	sp, #12
     91a:	2001      	movs	r0, #1
     91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     920:	20000d34 	.word	0x20000d34
     924:	20000a34 	.word	0x20000a34
     928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     92c:	f04f 0800 	mov.w	r8, #0
     930:	b098      	sub	sp, #96	; 0x60
     932:	4616      	mov	r6, r2
     934:	460d      	mov	r5, r1
     936:	46c3      	mov	fp, r8
     938:	f002 f8a2 	bl	2a80 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     93c:	4604      	mov	r4, r0
     93e:	2d01      	cmp	r5, #1
     940:	bf18      	it	ne
     942:	2d02      	cmpne	r5, #2
     944:	d005      	beq.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     946:	f640 1169 	movw	r1, #2409	; 0x969
     94a:	f04f 0070 	mov.w	r0, #112	; 0x70
     94e:	f002 fe7d 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     952:	49ff      	ldr	r1, [pc, #1020]	; (d50 <CONFIG_ISR_STACK_SIZE+0x550>)
     954:	2001      	movs	r0, #1
     956:	6008      	str	r0, [r1, #0]
     958:	49fe      	ldr	r1, [pc, #1016]	; (d54 <CONFIG_ISR_STACK_SIZE+0x554>)
     95a:	6889      	ldr	r1, [r1, #8]
     95c:	6008      	str	r0, [r1, #0]
     95e:	2000      	movs	r0, #0
     960:	9006      	str	r0, [sp, #24]
     962:	1e40      	subs	r0, r0, #1
     964:	9008      	str	r0, [sp, #32]
     966:	49fc      	ldr	r1, [pc, #1008]	; (d58 <CONFIG_ISR_STACK_SIZE+0x558>)
     968:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     96c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
     970:	1d1b      	adds	r3, r3, #4
     972:	af09      	add	r7, sp, #36	; 0x24
     974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     976:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     97a:	a809      	add	r0, sp, #36	; 0x24
     97c:	f000 fb00 	bl	f80 <CONFIG_ISR_STACK_SIZE+0x780>
     980:	9007      	str	r0, [sp, #28]
     982:	48f5      	ldr	r0, [pc, #980]	; (d58 <CONFIG_ISR_STACK_SIZE+0x558>)
     984:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
     988:	f8b0 031c 	ldrh.w	r0, [r0, #796]	; 0x31c
     98c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     990:	f1b9 0f00 	cmp.w	r9, #0
     994:	bf14      	ite	ne
     996:	f04f 0a01 	movne.w	sl, #1
     99a:	f04f 0a00 	moveq.w	sl, #0
     99e:	9809      	ldr	r0, [sp, #36]	; 0x24
     9a0:	9012      	str	r0, [sp, #72]	; 0x48
     9a2:	f1ba 0f00 	cmp.w	sl, #0
     9a6:	d009      	beq.n	9bc <CONFIG_ISR_STACK_SIZE+0x1bc>
     9a8:	48ec      	ldr	r0, [pc, #944]	; (d5c <CONFIG_ISR_STACK_SIZE+0x55c>)
     9aa:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     9ae:	b928      	cbnz	r0, 9bc <CONFIG_ISR_STACK_SIZE+0x1bc>
     9b0:	f002 fde8 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     9b4:	2800      	cmp	r0, #0
     9b6:	bf08      	it	eq
     9b8:	2701      	moveq	r7, #1
     9ba:	d000      	beq.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
     9bc:	2700      	movs	r7, #0
     9be:	48e8      	ldr	r0, [pc, #928]	; (d60 <CONFIG_ISR_STACK_SIZE+0x560>)
     9c0:	2200      	movs	r2, #0
     9c2:	9214      	str	r2, [sp, #80]	; 0x50
     9c4:	7800      	ldrb	r0, [r0, #0]
     9c6:	4616      	mov	r6, r2
     9c8:	2801      	cmp	r0, #1
     9ca:	bf18      	it	ne
     9cc:	2803      	cmpne	r0, #3
     9ce:	d143      	bne.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
     9d0:	48e3      	ldr	r0, [pc, #908]	; (d60 <CONFIG_ISR_STACK_SIZE+0x560>)
     9d2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     9d6:	eba8 0009 	sub.w	r0, r8, r9
     9da:	9014      	str	r0, [sp, #80]	; 0x50
     9dc:	45c1      	cmp	r9, r8
     9de:	d23b      	bcs.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
     9e0:	a803      	add	r0, sp, #12
     9e2:	9005      	str	r0, [sp, #20]
     9e4:	a817      	add	r0, sp, #92	; 0x5c
     9e6:	9010      	str	r0, [sp, #64]	; 0x40
     9e8:	9907      	ldr	r1, [sp, #28]
     9ea:	f108 0003 	add.w	r0, r8, #3
     9ee:	4242      	negs	r2, r0
     9f0:	f8df c370 	ldr.w	ip, [pc, #880]	; d64 <CONFIG_ISR_STACK_SIZE+0x564>
     9f4:	1a08      	subs	r0, r1, r0
     9f6:	2300      	movs	r3, #0
     9f8:	ebbc 0101 	subs.w	r1, ip, r1
     9fc:	eb73 0103 	sbcs.w	r1, r3, r3
     a00:	d204      	bcs.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
     a02:	f240 51e1 	movw	r1, #1505	; 0x5e1
     a06:	2070      	movs	r0, #112	; 0x70
     a08:	f002 fe20 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a0c:	49d6      	ldr	r1, [pc, #856]	; (d68 <CONFIG_ISR_STACK_SIZE+0x568>)
     a0e:	428a      	cmp	r2, r1
     a10:	dd04      	ble.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
     a12:	f240 51e2 	movw	r1, #1506	; 0x5e2
     a16:	2070      	movs	r0, #112	; 0x70
     a18:	f002 fe18 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a1c:	49d3      	ldr	r1, [pc, #844]	; (d6c <CONFIG_ISR_STACK_SIZE+0x56c>)
     a1e:	428a      	cmp	r2, r1
     a20:	da04      	bge.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
     a22:	f240 51e3 	movw	r1, #1507	; 0x5e3
     a26:	2070      	movs	r0, #112	; 0x70
     a28:	f002 fe10 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a2c:	49d0      	ldr	r1, [pc, #832]	; (d70 <CONFIG_ISR_STACK_SIZE+0x570>)
     a2e:	4288      	cmp	r0, r1
     a30:	bfa8      	it	ge
     a32:	49d0      	ldrge	r1, [pc, #832]	; (d74 <CONFIG_ISR_STACK_SIZE+0x574>)
     a34:	da03      	bge.n	a3e <CONFIG_ISR_STACK_SIZE+0x23e>
     a36:	2800      	cmp	r0, #0
     a38:	bfb8      	it	lt
     a3a:	49cd      	ldrlt	r1, [pc, #820]	; (d70 <CONFIG_ISR_STACK_SIZE+0x570>)
     a3c:	da00      	bge.n	a40 <CONFIG_ISR_STACK_SIZE+0x240>
     a3e:	1840      	adds	r0, r0, r1
     a40:	9a10      	ldr	r2, [sp, #64]	; 0x40
     a42:	9905      	ldr	r1, [sp, #20]
     a44:	f002 fa74 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     a48:	9803      	ldr	r0, [sp, #12]
     a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
     a4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a50:	9003      	str	r0, [sp, #12]
     a52:	1a08      	subs	r0, r1, r0
     a54:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     a58:	2f00      	cmp	r7, #0
     a5a:	bf18      	it	ne
     a5c:	2632      	movne	r6, #50	; 0x32
     a5e:	d104      	bne.n	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
     a60:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     a64:	2800      	cmp	r0, #0
     a66:	bf18      	it	ne
     a68:	2602      	movne	r6, #2
     a6a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a6e:	d008      	beq.n	a82 <CONFIG_ISR_STACK_SIZE+0x282>
     a70:	9809      	ldr	r0, [sp, #36]	; 0x24
     a72:	1b00      	subs	r0, r0, r4
     a74:	0200      	lsls	r0, r0, #8
     a76:	17c1      	asrs	r1, r0, #31
     a78:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a7c:	1200      	asrs	r0, r0, #8
     a7e:	2801      	cmp	r0, #1
     a80:	da02      	bge.n	a88 <CONFIG_ISR_STACK_SIZE+0x288>
     a82:	2004      	movs	r0, #4
     a84:	9918      	ldr	r1, [sp, #96]	; 0x60
     a86:	e00b      	b.n	aa0 <CONFIG_ISR_STACK_SIZE+0x2a0>
     a88:	b147      	cbz	r7, a9c <CONFIG_ISR_STACK_SIZE+0x29c>
     a8a:	48b4      	ldr	r0, [pc, #720]	; (d5c <CONFIG_ISR_STACK_SIZE+0x55c>)
     a8c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a90:	b120      	cbz	r0, a9c <CONFIG_ISR_STACK_SIZE+0x29c>
     a92:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     a96:	1c06      	adds	r6, r0, #0
     a98:	bf18      	it	ne
     a9a:	2602      	movne	r6, #2
     a9c:	4621      	mov	r1, r4
     a9e:	2001      	movs	r0, #1
     aa0:	f1b9 0f00 	cmp.w	r9, #0
     aa4:	d002      	beq.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
     aa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
     aa8:	2b1e      	cmp	r3, #30
     aaa:	da02      	bge.n	ab2 <CONFIG_ISR_STACK_SIZE+0x2b2>
     aac:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
     ab0:	b113      	cbz	r3, ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
     ab2:	f04f 0b01 	mov.w	fp, #1
     ab6:	1e40      	subs	r0, r0, #1
     ab8:	1983      	adds	r3, r0, r6
     aba:	48a9      	ldr	r0, [pc, #676]	; (d60 <CONFIG_ISR_STACK_SIZE+0x560>)
     abc:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
     ac0:	7800      	ldrb	r0, [r0, #0]
     ac2:	9015      	str	r0, [sp, #84]	; 0x54
     ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
     ac6:	1a80      	subs	r0, r0, r2
     ac8:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     acc:	ebac 0001 	sub.w	r0, ip, r1
     ad0:	0200      	lsls	r0, r0, #8
     ad2:	ea4f 7ee0 	mov.w	lr, r0, asr #31
     ad6:	eb00 601e 	add.w	r0, r0, lr, lsr #24
     ada:	1200      	asrs	r0, r0, #8
     adc:	4298      	cmp	r0, r3
     ade:	db18      	blt.n	b12 <CONFIG_ISR_STACK_SIZE+0x312>
     ae0:	2a00      	cmp	r2, #0
     ae2:	bf18      	it	ne
     ae4:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
     ae8:	9e09      	ldr	r6, [sp, #36]	; 0x24
     aea:	9710      	str	r7, [sp, #64]	; 0x40
     aec:	2700      	movs	r7, #0
     aee:	f001 fec1 	bl	2874 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     af2:	1a30      	subs	r0, r6, r0
     af4:	0200      	lsls	r0, r0, #8
     af6:	17c1      	asrs	r1, r0, #31
     af8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     afc:	1200      	asrs	r0, r0, #8
     afe:	283e      	cmp	r0, #62	; 0x3e
     b00:	da3e      	bge.n	b80 <CONFIG_ISR_STACK_SIZE+0x380>
     b02:	2d01      	cmp	r5, #1
     b04:	d01f      	beq.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
     b06:	1e70      	subs	r0, r6, #1
     b08:	9910      	ldr	r1, [sp, #64]	; 0x40
     b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b0e:	b311      	cbz	r1, b56 <CONFIG_ISR_STACK_SIZE+0x356>
     b10:	e02c      	b.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
     b12:	b17a      	cbz	r2, b34 <CONFIG_ISR_STACK_SIZE+0x334>
     b14:	2e00      	cmp	r6, #0
     b16:	bf04      	itt	eq
     b18:	9815      	ldreq	r0, [sp, #84]	; 0x54
     b1a:	2803      	cmpeq	r0, #3
     b1c:	d00a      	beq.n	b34 <CONFIG_ISR_STACK_SIZE+0x334>
     b1e:	b927      	cbnz	r7, b2a <CONFIG_ISR_STACK_SIZE+0x32a>
     b20:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b24:	2800      	cmp	r0, #0
     b26:	bf18      	it	ne
     b28:	1e9b      	subne	r3, r3, #2
     b2a:	2200      	movs	r2, #0
     b2c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
     b30:	4690      	mov	r8, r2
     b32:	e7c7      	b.n	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
     b34:	bb07      	cbnz	r7, b78 <CONFIG_ISR_STACK_SIZE+0x378>
     b36:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b3a:	b1e8      	cbz	r0, b78 <CONFIG_ISR_STACK_SIZE+0x378>
     b3c:	2000      	movs	r0, #0
     b3e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
     b42:	1e9b      	subs	r3, r3, #2
     b44:	e7be      	b.n	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
     b46:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b4a:	d120      	bne.n	b8e <CONFIG_ISR_STACK_SIZE+0x38e>
     b4c:	f640 01e2 	movw	r1, #2274	; 0x8e2
     b50:	2070      	movs	r0, #112	; 0x70
     b52:	f002 fd7b 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b56:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b5a:	d007      	beq.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
     b5c:	1a21      	subs	r1, r4, r0
     b5e:	0209      	lsls	r1, r1, #8
     b60:	17ca      	asrs	r2, r1, #31
     b62:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b66:	1209      	asrs	r1, r1, #8
     b68:	2904      	cmp	r1, #4
     b6a:	dd03      	ble.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
     b6c:	4604      	mov	r4, r0
     b6e:	f001 fe87 	bl	2880 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b72:	e00c      	b.n	b8e <CONFIG_ISR_STACK_SIZE+0x38e>
     b74:	2900      	cmp	r1, #0
     b76:	dd0a      	ble.n	b8e <CONFIG_ISR_STACK_SIZE+0x38e>
     b78:	b01b      	add	sp, #108	; 0x6c
     b7a:	2000      	movs	r0, #0
     b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b80:	1e70      	subs	r0, r6, #1
     b82:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b86:	4620      	mov	r0, r4
     b88:	f001 fe7a 	bl	2880 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b8c:	4657      	mov	r7, sl
     b8e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b92:	d028      	beq.n	be6 <CONFIG_ISR_STACK_SIZE+0x3e6>
     b94:	9809      	ldr	r0, [sp, #36]	; 0x24
     b96:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
     b9a:	1b00      	subs	r0, r0, r4
     b9c:	f08b 0301 	eor.w	r3, fp, #1
     ba0:	4a75      	ldr	r2, [pc, #468]	; (d78 <CONFIG_ISR_STACK_SIZE+0x578>)
     ba2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ba6:	ebac 0c04 	sub.w	ip, ip, r4
     baa:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     bae:	4283      	cmp	r3, r0
     bb0:	bf98      	it	ls
     bb2:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     bb6:	d2df      	bcs.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
     bb8:	4562      	cmp	r2, ip
     bba:	d3dd      	bcc.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
     bbc:	4620      	mov	r0, r4
     bbe:	f00e f8f9 	bl	edb4 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     bc2:	4a68      	ldr	r2, [pc, #416]	; (d64 <CONFIG_ISR_STACK_SIZE+0x564>)
     bc4:	9907      	ldr	r1, [sp, #28]
     bc6:	1c53      	adds	r3, r2, #1
     bc8:	1a0e      	subs	r6, r1, r0
     bca:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     bce:	bf24      	itt	cs
     bd0:	eba0 0c01 	subcs.w	ip, r0, r1
     bd4:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     bd8:	d310      	bcc.n	bfc <CONFIG_ISR_STACK_SIZE+0x3fc>
     bda:	42b2      	cmp	r2, r6
     bdc:	d208      	bcs.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
     bde:	1a10      	subs	r0, r2, r0
     be0:	4408      	add	r0, r1
     be2:	1c46      	adds	r6, r0, #1
     be4:	e00a      	b.n	bfc <CONFIG_ISR_STACK_SIZE+0x3fc>
     be6:	f640 2101 	movw	r1, #2561	; 0xa01
     bea:	2070      	movs	r0, #112	; 0x70
     bec:	f002 fd2e 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bf0:	4562      	cmp	r2, ip
     bf2:	d22d      	bcs.n	c50 <CONFIG_ISR_STACK_SIZE+0x450>
     bf4:	1a51      	subs	r1, r2, r1
     bf6:	4408      	add	r0, r1
     bf8:	1c40      	adds	r0, r0, #1
     bfa:	4246      	negs	r6, r0
     bfc:	4857      	ldr	r0, [pc, #348]	; (d5c <CONFIG_ISR_STACK_SIZE+0x55c>)
     bfe:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
     c02:	b350      	cbz	r0, c5a <CONFIG_ISR_STACK_SIZE+0x45a>
     c04:	4628      	mov	r0, r5
     c06:	4645      	mov	r5, r8
     c08:	f04f 0b00 	mov.w	fp, #0
     c0c:	46d8      	mov	r8, fp
     c0e:	2801      	cmp	r0, #1
     c10:	d005      	beq.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
     c12:	2002      	movs	r0, #2
     c14:	f002 f87c 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c18:	2001      	movs	r0, #1
     c1a:	f002 f879 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c1e:	45a9      	cmp	r9, r5
     c20:	d22c      	bcs.n	c7c <CONFIG_ISR_STACK_SIZE+0x47c>
     c22:	eba6 0105 	sub.w	r1, r6, r5
     c26:	f04f 0301 	mov.w	r3, #1
     c2a:	f04f 0203 	mov.w	r2, #3
     c2e:	f04f 0002 	mov.w	r0, #2
     c32:	f001 ffa5 	bl	2b80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c36:	2800      	cmp	r0, #0
     c38:	bf08      	it	eq
     c3a:	f04f 0801 	moveq.w	r8, #1
     c3e:	f1b9 0f00 	cmp.w	r9, #0
     c42:	d035      	beq.n	cb0 <CONFIG_ISR_STACK_SIZE+0x4b0>
     c44:	2301      	movs	r3, #1
     c46:	eba6 0109 	sub.w	r1, r6, r9
     c4a:	2203      	movs	r2, #3
     c4c:	4618      	mov	r0, r3
     c4e:	e023      	b.n	c98 <CONFIG_ISR_STACK_SIZE+0x498>
     c50:	f640 21e1 	movw	r1, #2785	; 0xae1
     c54:	2070      	movs	r0, #112	; 0x70
     c56:	f002 fcf9 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c5a:	45c1      	cmp	r9, r8
     c5c:	bf34      	ite	cc
     c5e:	4640      	movcc	r0, r8
     c60:	4648      	movcs	r0, r9
     c62:	f1bb 0f00 	cmp.w	fp, #0
     c66:	bf14      	ite	ne
     c68:	2100      	movne	r1, #0
     c6a:	211e      	moveq	r1, #30
     c6c:	4408      	add	r0, r1
     c6e:	42b0      	cmp	r0, r6
     c70:	dbc8      	blt.n	c04 <CONFIG_ISR_STACK_SIZE+0x404>
     c72:	f640 2114 	movw	r1, #2580	; 0xa14
     c76:	2070      	movs	r0, #112	; 0x70
     c78:	f002 fce8 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c7c:	d910      	bls.n	ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>
     c7e:	2301      	movs	r3, #1
     c80:	eba6 0109 	sub.w	r1, r6, r9
     c84:	2203      	movs	r2, #3
     c86:	4618      	mov	r0, r3
     c88:	f001 ff7a 	bl	2b80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c8c:	b328      	cbz	r0, cda <CONFIG_ISR_STACK_SIZE+0x4da>
     c8e:	b17d      	cbz	r5, cb0 <CONFIG_ISR_STACK_SIZE+0x4b0>
     c90:	1b71      	subs	r1, r6, r5
     c92:	2301      	movs	r3, #1
     c94:	2203      	movs	r2, #3
     c96:	2002      	movs	r0, #2
     c98:	f001 ff72 	bl	2b80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c9c:	b1e8      	cbz	r0, cda <CONFIG_ISR_STACK_SIZE+0x4da>
     c9e:	e007      	b.n	cb0 <CONFIG_ISR_STACK_SIZE+0x4b0>
     ca0:	ea55 0009 	orrs.w	r0, r5, r9
     ca4:	d004      	beq.n	cb0 <CONFIG_ISR_STACK_SIZE+0x4b0>
     ca6:	f640 114c 	movw	r1, #2380	; 0x94c
     caa:	2070      	movs	r0, #112	; 0x70
     cac:	f002 fcce 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cb0:	2301      	movs	r3, #1
     cb2:	2203      	movs	r2, #3
     cb4:	4631      	mov	r1, r6
     cb6:	2000      	movs	r0, #0
     cb8:	f001 ff62 	bl	2b80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cbc:	b168      	cbz	r0, cda <CONFIG_ISR_STACK_SIZE+0x4da>
     cbe:	2501      	movs	r5, #1
     cc0:	f1b8 0f00 	cmp.w	r8, #0
     cc4:	d003      	beq.n	cce <CONFIG_ISR_STACK_SIZE+0x4ce>
     cc6:	9812      	ldr	r0, [sp, #72]	; 0x48
     cc8:	9009      	str	r0, [sp, #36]	; 0x24
     cca:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
     cce:	f8df 80ac 	ldr.w	r8, [pc, #172]	; d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     cd2:	f1ba 0f00 	cmp.w	sl, #0
     cd6:	d10e      	bne.n	cf6 <CONFIG_ISR_STACK_SIZE+0x4f6>
     cd8:	e009      	b.n	cee <CONFIG_ISR_STACK_SIZE+0x4ee>
     cda:	2002      	movs	r0, #2
     cdc:	f002 f818 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ce0:	2001      	movs	r0, #1
     ce2:	f002 f815 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ce6:	b01b      	add	sp, #108	; 0x6c
     ce8:	2000      	movs	r0, #0
     cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cee:	481b      	ldr	r0, [pc, #108]	; (d5c <CONFIG_ISR_STACK_SIZE+0x55c>)
     cf0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     cf4:	b100      	cbz	r0, cf8 <CONFIG_ISR_STACK_SIZE+0x4f8>
     cf6:	b34f      	cbz	r7, d4c <CONFIG_ISR_STACK_SIZE+0x54c>
     cf8:	f8df a060 	ldr.w	sl, [pc, #96]	; d5c <CONFIG_ISR_STACK_SIZE+0x55c>
     cfc:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d00:	b118      	cbz	r0, d0a <CONFIG_ISR_STACK_SIZE+0x50a>
     d02:	f002 faf1 	bl	32e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d06:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     d0a:	b307      	cbz	r7, d4e <CONFIG_ISR_STACK_SIZE+0x54e>
     d0c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     d10:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d14:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d18:	f8c8 0000 	str.w	r0, [r8]
     d1c:	2300      	movs	r3, #0
     d1e:	2203      	movs	r2, #3
     d20:	2005      	movs	r0, #5
     d22:	f001 ff2d 	bl	2b80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d26:	b378      	cbz	r0, d88 <CONFIG_ISR_STACK_SIZE+0x588>
     d28:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     d2c:	2005      	movs	r0, #5
     d2e:	f002 f8a9 	bl	2e84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     d32:	4913      	ldr	r1, [pc, #76]	; (d80 <CONFIG_ISR_STACK_SIZE+0x580>)
     d34:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     d38:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     d3c:	4911      	ldr	r1, [pc, #68]	; (d84 <CONFIG_ISR_STACK_SIZE+0x584>)
     d3e:	12e0      	asrs	r0, r4, #11
     d40:	6008      	str	r0, [r1, #0]
     d42:	4c06      	ldr	r4, [pc, #24]	; (d5c <CONFIG_ISR_STACK_SIZE+0x55c>)
     d44:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d48:	b3f0      	cbz	r0, dc8 <CONFIG_ISR_STACK_SIZE+0x5c8>
     d4a:	e05d      	b.n	e08 <CONFIG_ISR_STACK_SIZE+0x608>
     d4c:	e01d      	b.n	d8a <CONFIG_ISR_STACK_SIZE+0x58a>
     d4e:	e021      	b.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     d50:	40000508 	.word	0x40000508
     d54:	20000010 	.word	0x20000010
     d58:	20000a34 	.word	0x20000a34
     d5c:	20000d34 	.word	0x20000d34
     d60:	20000012 	.word	0x20000012
     d64:	1e847fff 	.word	0x1e847fff
     d68:	07a12000 	.word	0x07a12000
     d6c:	f85ee000 	.word	0xf85ee000
     d70:	1e848000 	.word	0x1e848000
     d74:	e17b8000 	.word	0xe17b8000
     d78:	003fffff 	.word	0x003fffff
     d7c:	4001f508 	.word	0x4001f508
     d80:	4001f098 	.word	0x4001f098
     d84:	4001f504 	.word	0x4001f504
     d88:	e035      	b.n	df6 <CONFIG_ISR_STACK_SIZE+0x5f6>
     d8a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; e44 <CONFIG_ISR_STACK_SIZE+0x644>
     d8e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d92:	b358      	cbz	r0, dec <CONFIG_ISR_STACK_SIZE+0x5ec>
     d94:	4c2b      	ldr	r4, [pc, #172]	; (e44 <CONFIG_ISR_STACK_SIZE+0x644>)
     d96:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d9a:	b150      	cbz	r0, db2 <CONFIG_ISR_STACK_SIZE+0x5b2>
     d9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     da0:	f8c8 0000 	str.w	r0, [r8]
     da4:	2005      	movs	r0, #5
     da6:	f001 ffb3 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     daa:	f002 fb05 	bl	33b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     dae:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     db2:	ac06      	add	r4, sp, #24
     db4:	4824      	ldr	r0, [pc, #144]	; (e48 <CONFIG_ISR_STACK_SIZE+0x648>)
     db6:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     dba:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
     dbe:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
     dc2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
     dc6:	e000      	b.n	dca <CONFIG_ISR_STACK_SIZE+0x5ca>
     dc8:	e01a      	b.n	e00 <CONFIG_ISR_STACK_SIZE+0x600>
     dca:	f8c0 c30c 	str.w	ip, [r0, #780]	; 0x30c
     dce:	ac0a      	add	r4, sp, #40	; 0x28
     dd0:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     dd4:	f8c0 1310 	str.w	r1, [r0, #784]	; 0x310
     dd8:	f8c0 2314 	str.w	r2, [r0, #788]	; 0x314
     ddc:	f8c0 3318 	str.w	r3, [r0, #792]	; 0x318
     de0:	f8c0 c31c 	str.w	ip, [r0, #796]	; 0x31c
     de4:	b01b      	add	sp, #108	; 0x6c
     de6:	2001      	movs	r0, #1
     de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dec:	f002 fa98 	bl	3320 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     df0:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     df4:	e789      	b.n	d0a <CONFIG_ISR_STACK_SIZE+0x50a>
     df6:	f44f 7152 	mov.w	r1, #840	; 0x348
     dfa:	2070      	movs	r0, #112	; 0x70
     dfc:	f002 fc26 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e00:	f002 facc 	bl	339c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e04:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     e08:	eba6 0009 	sub.w	r0, r6, r9
     e0c:	f1a0 0119 	sub.w	r1, r0, #25
     e10:	2900      	cmp	r1, #0
     e12:	dc04      	bgt.n	e1e <CONFIG_ISR_STACK_SIZE+0x61e>
     e14:	f640 213e 	movw	r1, #2622	; 0xa3e
     e18:	2070      	movs	r0, #112	; 0x70
     e1a:	f002 fc17 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e1e:	2203      	movs	r2, #3
     e20:	2301      	movs	r3, #1
     e22:	4610      	mov	r0, r2
     e24:	f001 feac 	bl	2b80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e28:	b138      	cbz	r0, e3a <CONFIG_ISR_STACK_SIZE+0x63a>
     e2a:	4808      	ldr	r0, [pc, #32]	; (e4c <CONFIG_ISR_STACK_SIZE+0x64c>)
     e2c:	6880      	ldr	r0, [r0, #8]
     e2e:	f8c0 b000 	str.w	fp, [r0]
     e32:	4807      	ldr	r0, [pc, #28]	; (e50 <CONFIG_ISR_STACK_SIZE+0x650>)
     e34:	f8c0 b000 	str.w	fp, [r0]
     e38:	e7bb      	b.n	db2 <CONFIG_ISR_STACK_SIZE+0x5b2>
     e3a:	f640 2149 	movw	r1, #2633	; 0xa49
     e3e:	2070      	movs	r0, #112	; 0x70
     e40:	f002 fc04 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e44:	20000d34 	.word	0x20000d34
     e48:	20000a34 	.word	0x20000a34
     e4c:	20000010 	.word	0x20000010
     e50:	40000508 	.word	0x40000508
     e54:	b510      	push	{r4, lr}
     e56:	4c15      	ldr	r4, [pc, #84]	; (eac <CONFIG_ISR_STACK_SIZE+0x6ac>)
     e58:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     e5c:	2820      	cmp	r0, #32
     e5e:	bf18      	it	ne
     e60:	bd10      	popne	{r4, pc}
     e62:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     e66:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     e6a:	f890 1020 	ldrb.w	r1, [r0, #32]
     e6e:	2920      	cmp	r1, #32
     e70:	d016      	beq.n	ea0 <CONFIG_ISR_STACK_SIZE+0x6a0>
     e72:	f8df c03c 	ldr.w	ip, [pc, #60]	; eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     e76:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     e7a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     e7e:	785b      	ldrb	r3, [r3, #1]
     e80:	f880 3020 	strb.w	r3, [r0, #32]
     e84:	2301      	movs	r3, #1
     e86:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     e8a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     e8e:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     e92:	2002      	movs	r0, #2
     e94:	f000 f8b2 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
     e98:	2000      	movs	r0, #0
     e9a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     e9e:	bd10      	pop	{r4, pc}
     ea0:	f240 3195 	movw	r1, #917	; 0x395
     ea4:	2070      	movs	r0, #112	; 0x70
     ea6:	f002 fbd1 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eaa:	0000      	.short	0x0000
     eac:	20000d34 	.word	0x20000d34
     eb0:	20000cb4 	.word	0x20000cb4
     eb4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     eb8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; f70 <CONFIG_ISR_STACK_SIZE+0x770>
     ebc:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     ec0:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     ec4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     ec8:	2c20      	cmp	r4, #32
     eca:	bf08      	it	eq
     ecc:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     ed0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; f74 <CONFIG_ISR_STACK_SIZE+0x774>
     ed4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f78 <CONFIG_ISR_STACK_SIZE+0x778>
     ed8:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
     edc:	eb09 1785 	add.w	r7, r9, r5, lsl #6
     ee0:	2607      	movs	r6, #7
     ee2:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     ee6:	2801      	cmp	r0, #1
     ee8:	d00e      	beq.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
     eea:	2804      	cmp	r0, #4
     eec:	bf08      	it	eq
     eee:	2602      	moveq	r6, #2
     ef0:	d00a      	beq.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
     ef2:	2805      	cmp	r0, #5
     ef4:	bf0c      	ite	eq
     ef6:	2603      	moveq	r6, #3
     ef8:	2806      	cmpne	r0, #6
     efa:	d005      	beq.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
     efc:	f640 01af 	movw	r1, #2223	; 0x8af
     f00:	f04f 0070 	mov.w	r0, #112	; 0x70
     f04:	f002 fba2 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f08:	f1ba 0f00 	cmp.w	sl, #0
     f0c:	bf18      	it	ne
     f0e:	f3af 8000 	nopne.w
     f12:	f3ef 8010 	mrs	r0, PRIMASK
     f16:	b672      	cpsid	i
     f18:	eb07 0144 	add.w	r1, r7, r4, lsl #1
     f1c:	784a      	ldrb	r2, [r1, #1]
     f1e:	eb08 0185 	add.w	r1, r8, r5, lsl #2
     f22:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
     f26:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
     f2a:	42a2      	cmp	r2, r4
     f2c:	bf04      	itt	eq
     f2e:	2220      	moveq	r2, #32
     f30:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
     f34:	b1a8      	cbz	r0, f62 <CONFIG_ISR_STACK_SIZE+0x762>
     f36:	462a      	mov	r2, r5
     f38:	4621      	mov	r1, r4
     f3a:	2001      	movs	r0, #1
     f3c:	f000 f85e 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
     f40:	eb04 0084 	add.w	r0, r4, r4, lsl #2
     f44:	4631      	mov	r1, r6
     f46:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
     f4a:	4620      	mov	r0, r4
     f4c:	4790      	blx	r2
     f4e:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     f52:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     f56:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     f5a:	2c20      	cmp	r4, #32
     f5c:	d1be      	bne.n	edc <CONFIG_ISR_STACK_SIZE+0x6dc>
     f5e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     f62:	4806      	ldr	r0, [pc, #24]	; (f7c <CONFIG_ISR_STACK_SIZE+0x77c>)
     f64:	2800      	cmp	r0, #0
     f66:	bf18      	it	ne
     f68:	f3af 8000 	nopne.w
     f6c:	b662      	cpsie	i
     f6e:	e7e2      	b.n	f36 <CONFIG_ISR_STACK_SIZE+0x736>
     f70:	20000d34 	.word	0x20000d34
     f74:	00000000 	.word	0x00000000
     f78:	20000cb4 	.word	0x20000cb4
     f7c:	00000000 	.word	0x00000000
     f80:	b510      	push	{r4, lr}
     f82:	4604      	mov	r4, r0
     f84:	6800      	ldr	r0, [r0, #0]
     f86:	f00d ff15 	bl	edb4 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     f8a:	4601      	mov	r1, r0
     f8c:	8960      	ldrh	r0, [r4, #10]
     f8e:	f994 2008 	ldrsb.w	r2, [r4, #8]
     f92:	f8df c054 	ldr.w	ip, [pc, #84]	; fe8 <CONFIG_ISR_STACK_SIZE+0x7e8>
     f96:	4410      	add	r0, r2
     f98:	1cc2      	adds	r2, r0, #3
     f9a:	1888      	adds	r0, r1, r2
     f9c:	2300      	movs	r3, #0
     f9e:	ebbc 0101 	subs.w	r1, ip, r1
     fa2:	eb73 0103 	sbcs.w	r1, r3, r3
     fa6:	d204      	bcs.n	fb2 <CONFIG_ISR_STACK_SIZE+0x7b2>
     fa8:	f240 51e1 	movw	r1, #1505	; 0x5e1
     fac:	2070      	movs	r0, #112	; 0x70
     fae:	f002 fb4d 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fb2:	490e      	ldr	r1, [pc, #56]	; (fec <CONFIG_ISR_STACK_SIZE+0x7ec>)
     fb4:	428a      	cmp	r2, r1
     fb6:	dd04      	ble.n	fc2 <CONFIG_ISR_STACK_SIZE+0x7c2>
     fb8:	f240 51e2 	movw	r1, #1506	; 0x5e2
     fbc:	2070      	movs	r0, #112	; 0x70
     fbe:	f002 fb45 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fc2:	490b      	ldr	r1, [pc, #44]	; (ff0 <CONFIG_ISR_STACK_SIZE+0x7f0>)
     fc4:	428a      	cmp	r2, r1
     fc6:	da04      	bge.n	fd2 <CONFIG_ISR_STACK_SIZE+0x7d2>
     fc8:	f240 51e3 	movw	r1, #1507	; 0x5e3
     fcc:	2070      	movs	r0, #112	; 0x70
     fce:	f002 fb3d 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fd2:	4908      	ldr	r1, [pc, #32]	; (ff4 <CONFIG_ISR_STACK_SIZE+0x7f4>)
     fd4:	4288      	cmp	r0, r1
     fd6:	bfa8      	it	ge
     fd8:	4907      	ldrge	r1, [pc, #28]	; (ff8 <CONFIG_ISR_STACK_SIZE+0x7f8>)
     fda:	da03      	bge.n	fe4 <CONFIG_ISR_STACK_SIZE+0x7e4>
     fdc:	2800      	cmp	r0, #0
     fde:	bfb4      	ite	lt
     fe0:	4904      	ldrlt	r1, [pc, #16]	; (ff4 <CONFIG_ISR_STACK_SIZE+0x7f4>)
     fe2:	bd10      	popge	{r4, pc}
     fe4:	1840      	adds	r0, r0, r1
     fe6:	bd10      	pop	{r4, pc}
     fe8:	1e847fff 	.word	0x1e847fff
     fec:	07a12000 	.word	0x07a12000
     ff0:	f85ee000 	.word	0xf85ee000
     ff4:	1e848000 	.word	0x1e848000
     ff8:	e17b8000 	.word	0xe17b8000
     ffc:	f8df c054 	ldr.w	ip, [pc, #84]	; 1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    1000:	b510      	push	{r4, lr}
    1002:	2300      	movs	r3, #0
    1004:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1008:	2807      	cmp	r0, #7
    100a:	d21e      	bcs.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    100c:	e8df f000 	tbb	[pc, r0]
    1010:	05050505 	.word	0x05050505
    1014:	00040404 	.word	0x00040404
    1018:	2301      	movs	r3, #1
    101a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    101e:	2b00      	cmp	r3, #0
    1020:	bf08      	it	eq
    1022:	bd10      	popeq	{r4, pc}
    1024:	480c      	ldr	r0, [pc, #48]	; (1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
    1026:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    102a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    102e:	2820      	cmp	r0, #32
    1030:	bf0e      	itee	eq
    1032:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1036:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    103a:	7041      	strbne	r1, [r0, #1]
    103c:	2020      	movs	r0, #32
    103e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1042:	7058      	strb	r0, [r3, #1]
    1044:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1048:	bd10      	pop	{r4, pc}
    104a:	f240 215e 	movw	r1, #606	; 0x25e
    104e:	2070      	movs	r0, #112	; 0x70
    1050:	f002 fafc 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1054:	20000cb4 	.word	0x20000cb4
    1058:	20000d34 	.word	0x20000d34
    105c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1060:	b083      	sub	sp, #12
    1062:	485c      	ldr	r0, [pc, #368]	; (11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>)
    1064:	9904      	ldr	r1, [sp, #16]
    1066:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    106a:	9001      	str	r0, [sp, #4]
    106c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1070:	9803      	ldr	r0, [sp, #12]
    1072:	4625      	mov	r5, r4
    1074:	2801      	cmp	r0, #1
    1076:	bf18      	it	ne
    1078:	2802      	cmpne	r0, #2
    107a:	d005      	beq.n	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    107c:	f640 2185 	movw	r1, #2693	; 0xa85
    1080:	f04f 0070 	mov.w	r0, #112	; 0x70
    1084:	f002 fae2 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1088:	2700      	movs	r7, #0
    108a:	2d20      	cmp	r5, #32
    108c:	d04b      	beq.n	1126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
    108e:	4851      	ldr	r0, [pc, #324]	; (11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>)
    1090:	9100      	str	r1, [sp, #0]
    1092:	2600      	movs	r6, #0
    1094:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    1098:	2800      	cmp	r0, #0
    109a:	bf08      	it	eq
    109c:	2602      	moveq	r6, #2
    109e:	f001 fbe9 	bl	2874 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    10a2:	f8df a138 	ldr.w	sl, [pc, #312]	; 11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    10a6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    10aa:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    10ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
    10b2:	684a      	ldr	r2, [r1, #4]
    10b4:	6889      	ldr	r1, [r1, #8]
    10b6:	1a12      	subs	r2, r2, r0
    10b8:	1a09      	subs	r1, r1, r0
    10ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    10be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    10c2:	4296      	cmp	r6, r2
    10c4:	bf98      	it	ls
    10c6:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    10ca:	d201      	bcs.n	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
    10cc:	4589      	cmp	r9, r1
    10ce:	d228      	bcs.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
    10d0:	4a43      	ldr	r2, [pc, #268]	; (11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
    10d2:	9900      	ldr	r1, [sp, #0]
    10d4:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    10d8:	4622      	mov	r2, r4
    10da:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    10de:	784c      	ldrb	r4, [r1, #1]
    10e0:	2c20      	cmp	r4, #32
    10e2:	d016      	beq.n	1112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
    10e4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    10e8:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    10ec:	f8dc 8004 	ldr.w	r8, [ip, #4]
    10f0:	f8dc c008 	ldr.w	ip, [ip, #8]
    10f4:	eba8 0800 	sub.w	r8, r8, r0
    10f8:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    10fc:	ebac 0100 	sub.w	r1, ip, r0
    1100:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1104:	4546      	cmp	r6, r8
    1106:	bf98      	it	ls
    1108:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    110c:	d2e4      	bcs.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
    110e:	4589      	cmp	r9, r1
    1110:	d3e2      	bcc.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
    1112:	2a20      	cmp	r2, #32
    1114:	d005      	beq.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
    1116:	2120      	movs	r1, #32
    1118:	2004      	movs	r0, #4
    111a:	9b00      	ldr	r3, [sp, #0]
    111c:	f7ff f9e8 	bl	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
    1120:	4604      	mov	r4, r0
    1122:	42ac      	cmp	r4, r5
    1124:	d115      	bne.n	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
    1126:	482f      	ldr	r0, [pc, #188]	; (11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>)
    1128:	2800      	cmp	r0, #0
    112a:	bf18      	it	ne
    112c:	f3af 8000 	nopne.w
    1130:	f001 fba0 	bl	2874 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1134:	4c27      	ldr	r4, [pc, #156]	; (11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>)
    1136:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    113a:	2920      	cmp	r1, #32
    113c:	d00d      	beq.n	115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
    113e:	68e1      	ldr	r1, [r4, #12]
    1140:	1c82      	adds	r2, r0, #2
    1142:	1a51      	subs	r1, r2, r1
    1144:	0209      	lsls	r1, r1, #8
    1146:	17ca      	asrs	r2, r1, #31
    1148:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    114c:	1209      	asrs	r1, r1, #8
    114e:	2900      	cmp	r1, #0
    1150:	dd03      	ble.n	115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
    1152:	b005      	add	sp, #20
    1154:	2000      	movs	r0, #0
    1156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    115a:	2d20      	cmp	r5, #32
    115c:	d00d      	beq.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    115e:	462a      	mov	r2, r5
    1160:	9903      	ldr	r1, [sp, #12]
    1162:	f7ff fbe1 	bl	928 <CONFIG_ISR_STACK_SIZE+0x128>
    1166:	b358      	cbz	r0, 11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
    1168:	9801      	ldr	r0, [sp, #4]
    116a:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    116e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1172:	b005      	add	sp, #20
    1174:	2001      	movs	r0, #1
    1176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    117a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    117e:	b118      	cbz	r0, 1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    1180:	f002 f8b2 	bl	32e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1184:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1188:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    118c:	b150      	cbz	r0, 11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
    118e:	4916      	ldr	r1, [pc, #88]	; (11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
    1190:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1194:	6008      	str	r0, [r1, #0]
    1196:	2005      	movs	r0, #5
    1198:	f001 fdba 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    119c:	f002 f90c 	bl	33b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    11a0:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    11a4:	2004      	movs	r0, #4
    11a6:	f001 fdb3 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11aa:	f001 fe0d 	bl	2dc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    11ae:	2020      	movs	r0, #32
    11b0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    11b4:	480d      	ldr	r0, [pc, #52]	; (11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>)
    11b6:	6880      	ldr	r0, [r0, #8]
    11b8:	6007      	str	r7, [r0, #0]
    11ba:	480d      	ldr	r0, [pc, #52]	; (11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>)
    11bc:	6007      	str	r7, [r0, #0]
    11be:	e7d8      	b.n	1172 <CONFIG_FPROTECT_BLOCK_SIZE+0x172>
    11c0:	462a      	mov	r2, r5
    11c2:	2120      	movs	r1, #32
    11c4:	2004      	movs	r0, #4
    11c6:	9b04      	ldr	r3, [sp, #16]
    11c8:	f7ff f992 	bl	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
    11cc:	b005      	add	sp, #20
    11ce:	2000      	movs	r0, #0
    11d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11d4:	20000d34 	.word	0x20000d34
    11d8:	003fffff 	.word	0x003fffff
    11dc:	20000a34 	.word	0x20000a34
    11e0:	20000cb4 	.word	0x20000cb4
    11e4:	00000000 	.word	0x00000000
    11e8:	4001f508 	.word	0x4001f508
    11ec:	20000010 	.word	0x20000010
    11f0:	40000508 	.word	0x40000508

000011f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    11f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11f8:	4e73      	ldr	r6, [pc, #460]	; (13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>)
    11fa:	4607      	mov	r7, r0
    11fc:	b087      	sub	sp, #28
    11fe:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1202:	468a      	mov	sl, r1
    1204:	2820      	cmp	r0, #32
    1206:	d05a      	beq.n	12be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1208:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    120c:	f106 040c 	add.w	r4, r6, #12
    1210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1214:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    1218:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    121c:	2020      	movs	r0, #32
    121e:	f88d 0000 	strb.w	r0, [sp]
    1222:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1226:	aa03      	add	r2, sp, #12
    1228:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    122c:	a901      	add	r1, sp, #4
    122e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1232:	6930      	ldr	r0, [r6, #16]
    1234:	9002      	str	r0, [sp, #8]
    1236:	6830      	ldr	r0, [r6, #0]
    1238:	4438      	add	r0, r7
    123a:	f001 fe79 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    123e:	f99d 000c 	ldrsb.w	r0, [sp, #12]
    1242:	2800      	cmp	r0, #0
    1244:	dd02      	ble.n	124c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    1246:	9801      	ldr	r0, [sp, #4]
    1248:	1c40      	adds	r0, r0, #1
    124a:	9001      	str	r0, [sp, #4]
    124c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    1250:	9901      	ldr	r1, [sp, #4]
    1252:	1843      	adds	r3, r0, r1
    1254:	2f64      	cmp	r7, #100	; 0x64
    1256:	d337      	bcc.n	12c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1258:	495c      	ldr	r1, [pc, #368]	; (13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>)
    125a:	2200      	movs	r2, #0
    125c:	1bc9      	subs	r1, r1, r7
    125e:	eb72 0002 	sbcs.w	r0, r2, r2
    1262:	d331      	bcc.n	12c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1264:	f8d8 0004 	ldr.w	r0, [r8, #4]
    1268:	1a18      	subs	r0, r3, r0
    126a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    126e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1272:	d229      	bcs.n	12c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1274:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
    1278:	6060      	str	r0, [r4, #4]
    127a:	4853      	ldr	r0, [pc, #332]	; (13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>)
    127c:	f884 a00c 	strb.w	sl, [r4, #12]
    1280:	f890 102e 	ldrb.w	r1, [r0, #46]	; 0x2e
    1284:	46ea      	mov	sl, sp
    1286:	2d20      	cmp	r5, #32
    1288:	bf1c      	itt	ne
    128a:	4851      	ldrne	r0, [pc, #324]	; (13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>)
    128c:	eb00 1b81 	addne.w	fp, r0, r1, lsl #6
    1290:	d04a      	beq.n	1328 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1292:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    1296:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    129a:	6860      	ldr	r0, [r4, #4]
    129c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    12a0:	4621      	mov	r1, r4
    12a2:	1a10      	subs	r0, r2, r0
    12a4:	0200      	lsls	r0, r0, #8
    12a6:	17c2      	asrs	r2, r0, #31
    12a8:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    12ac:	f108 0604 	add.w	r6, r8, #4
    12b0:	1200      	asrs	r0, r0, #8
    12b2:	d426      	bmi.n	1302 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10e>
    12b4:	8970      	ldrh	r0, [r6, #10]
    12b6:	b388      	cbz	r0, 131c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x128>
    12b8:	8948      	ldrh	r0, [r1, #10]
    12ba:	b148      	cbz	r0, 12d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xdc>
    12bc:	e034      	b.n	1328 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    12be:	f640 3152 	movw	r1, #2898	; 0xb52
    12c2:	2070      	movs	r0, #112	; 0x70
    12c4:	f002 f9c2 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12c8:	b007      	add	sp, #28
    12ca:	2001      	movs	r0, #1
    12cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d0:	4620      	mov	r0, r4
    12d2:	f7ff fe55 	bl	f80 <CONFIG_ISR_STACK_SIZE+0x780>
    12d6:	aa05      	add	r2, sp, #20
    12d8:	a904      	add	r1, sp, #16
    12da:	f001 fe29 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    12de:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    12e2:	2800      	cmp	r0, #0
    12e4:	bfcc      	ite	gt
    12e6:	2001      	movgt	r0, #1
    12e8:	2000      	movle	r0, #0
    12ea:	f100 0133 	add.w	r1, r0, #51	; 0x33
    12ee:	9804      	ldr	r0, [sp, #16]
    12f0:	6832      	ldr	r2, [r6, #0]
    12f2:	1a10      	subs	r0, r2, r0
    12f4:	0200      	lsls	r0, r0, #8
    12f6:	17c2      	asrs	r2, r0, #31
    12f8:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    12fc:	1200      	asrs	r0, r0, #8
    12fe:	4288      	cmp	r0, r1
    1300:	da12      	bge.n	1328 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1302:	f88a 5000 	strb.w	r5, [sl]
    1306:	f898 1010 	ldrb.w	r1, [r8, #16]
    130a:	7b20      	ldrb	r0, [r4, #12]
    130c:	4281      	cmp	r1, r0
    130e:	d806      	bhi.n	131e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1310:	9802      	ldr	r0, [sp, #8]
    1312:	6060      	str	r0, [r4, #4]
    1314:	b007      	add	sp, #28
    1316:	2003      	movs	r0, #3
    1318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    131c:	e004      	b.n	1328 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    131e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1322:	7845      	ldrb	r5, [r0, #1]
    1324:	2d20      	cmp	r5, #32
    1326:	d1b4      	bne.n	1292 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x9e>
    1328:	4d27      	ldr	r5, [pc, #156]	; (13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>)
    132a:	68a8      	ldr	r0, [r5, #8]
    132c:	f1b0 3fff 	cmp.w	r0, #4294967295
    1330:	d016      	beq.n	1360 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    1332:	f001 fa9f 	bl	2874 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1336:	68a9      	ldr	r1, [r5, #8]
    1338:	1a08      	subs	r0, r1, r0
    133a:	0200      	lsls	r0, r0, #8
    133c:	17c1      	asrs	r1, r0, #31
    133e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1342:	1200      	asrs	r0, r0, #8
    1344:	2802      	cmp	r0, #2
    1346:	dc05      	bgt.n	1354 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x160>
    1348:	9802      	ldr	r0, [sp, #8]
    134a:	6060      	str	r0, [r4, #4]
    134c:	b007      	add	sp, #28
    134e:	2002      	movs	r0, #2
    1350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1354:	2005      	movs	r0, #5
    1356:	f001 fcdb 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    135a:	f04f 30ff 	mov.w	r0, #4294967295
    135e:	60a8      	str	r0, [r5, #8]
    1360:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    1364:	f89d 2000 	ldrb.w	r2, [sp]
    1368:	2120      	movs	r1, #32
    136a:	2a20      	cmp	r2, #32
    136c:	bf13      	iteet	ne
    136e:	2005      	movne	r0, #5
    1370:	eb05 0083 	addeq.w	r0, r5, r3, lsl #2
    1374:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1378:	f7ff f8ba 	blne	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
    137c:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1380:	4913      	ldr	r1, [pc, #76]	; (13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>)
    1382:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1386:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
    138a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    138e:	7048      	strb	r0, [r1, #1]
    1390:	6828      	ldr	r0, [r5, #0]
    1392:	4438      	add	r0, r7
    1394:	6028      	str	r0, [r5, #0]
    1396:	2001      	movs	r0, #1
    1398:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    139c:	7e68      	ldrb	r0, [r5, #25]
    139e:	2801      	cmp	r0, #1
    13a0:	d105      	bne.n	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
    13a2:	6928      	ldr	r0, [r5, #16]
    13a4:	1e40      	subs	r0, r0, #1
    13a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13aa:	f001 fb03 	bl	29b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    13ae:	f89d 0000 	ldrb.w	r0, [sp]
    13b2:	2820      	cmp	r0, #32
    13b4:	d003      	beq.n	13be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36>
    13b6:	4807      	ldr	r0, [pc, #28]	; (13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>)
    13b8:	7840      	ldrb	r0, [r0, #1]
    13ba:	f002 fa17 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    13be:	b007      	add	sp, #28
    13c0:	2000      	movs	r0, #0
    13c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13c6:	0000      	.short	0x0000
    13c8:	20000d34 	.word	0x20000d34
    13cc:	07a11fff 	.word	0x07a11fff
    13d0:	20000cb4 	.word	0x20000cb4
    13d4:	20000010 	.word	0x20000010

000013d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    13d8:	4602      	mov	r2, r0
    13da:	f8df c054 	ldr.w	ip, [pc, #84]	; 1430 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    13de:	b510      	push	{r4, lr}
    13e0:	2300      	movs	r3, #0
    13e2:	ebbc 0202 	subs.w	r2, ip, r2
    13e6:	4408      	add	r0, r1
    13e8:	eb73 0203 	sbcs.w	r2, r3, r3
    13ec:	d204      	bcs.n	13f8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    13ee:	f240 51e1 	movw	r1, #1505	; 0x5e1
    13f2:	2070      	movs	r0, #112	; 0x70
    13f4:	f002 f92a 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13f8:	4a0e      	ldr	r2, [pc, #56]	; (1434 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    13fa:	4291      	cmp	r1, r2
    13fc:	dd04      	ble.n	1408 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    13fe:	f240 51e2 	movw	r1, #1506	; 0x5e2
    1402:	2070      	movs	r0, #112	; 0x70
    1404:	f002 f922 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1408:	4a0b      	ldr	r2, [pc, #44]	; (1438 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    140a:	4291      	cmp	r1, r2
    140c:	da04      	bge.n	1418 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    140e:	f240 51e3 	movw	r1, #1507	; 0x5e3
    1412:	2070      	movs	r0, #112	; 0x70
    1414:	f002 f91a 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1418:	4908      	ldr	r1, [pc, #32]	; (143c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    141a:	4288      	cmp	r0, r1
    141c:	bfa8      	it	ge
    141e:	4908      	ldrge	r1, [pc, #32]	; (1440 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    1420:	da03      	bge.n	142a <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    1422:	2800      	cmp	r0, #0
    1424:	bfb4      	ite	lt
    1426:	4905      	ldrlt	r1, [pc, #20]	; (143c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1428:	bd10      	popge	{r4, pc}
    142a:	1840      	adds	r0, r0, r1
    142c:	bd10      	pop	{r4, pc}
    142e:	0000      	.short	0x0000
    1430:	1e847fff 	.word	0x1e847fff
    1434:	07a12000 	.word	0x07a12000
    1438:	f85ee000 	.word	0xf85ee000
    143c:	1e848000 	.word	0x1e848000
    1440:	e17b8000 	.word	0xe17b8000

00001444 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1444:	4a10      	ldr	r2, [pc, #64]	; (1488 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1446:	1a0b      	subs	r3, r1, r0
    1448:	f102 0c01 	add.w	ip, r2, #1
    144c:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1450:	bf3c      	itt	cc
    1452:	4618      	movcc	r0, r3
    1454:	4770      	bxcc	lr
    1456:	b510      	push	{r4, lr}
    1458:	1a44      	subs	r4, r0, r1
    145a:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    145e:	bf3c      	itt	cc
    1460:	4618      	movcc	r0, r3
    1462:	bd10      	popcc	{r4, pc}
    1464:	429a      	cmp	r2, r3
    1466:	d203      	bcs.n	1470 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1468:	1a10      	subs	r0, r2, r0
    146a:	4408      	add	r0, r1
    146c:	1c40      	adds	r0, r0, #1
    146e:	bd10      	pop	{r4, pc}
    1470:	42a2      	cmp	r2, r4
    1472:	d204      	bcs.n	147e <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1474:	1a51      	subs	r1, r2, r1
    1476:	4408      	add	r0, r1
    1478:	1c40      	adds	r0, r0, #1
    147a:	4240      	negs	r0, r0
    147c:	bd10      	pop	{r4, pc}
    147e:	f640 21e1 	movw	r1, #2785	; 0xae1
    1482:	2070      	movs	r0, #112	; 0x70
    1484:	f002 f8e2 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1488:	1e847fff 	.word	0x1e847fff

0000148c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    148c:	490b      	ldr	r1, [pc, #44]	; (14bc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    148e:	b510      	push	{r4, lr}
    1490:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1494:	2820      	cmp	r0, #32
    1496:	d00c      	beq.n	14b2 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    1498:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    149c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    14a0:	4a07      	ldr	r2, [pc, #28]	; (14c0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    14a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    14a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    14aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    14ae:	2104      	movs	r1, #4
    14b0:	4710      	bx	r2
    14b2:	f640 0193 	movw	r1, #2195	; 0x893
    14b6:	2070      	movs	r0, #112	; 0x70
    14b8:	f002 f8c8 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14bc:	20000d34 	.word	0x20000d34
    14c0:	20000a34 	.word	0x20000a34

000014c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    14c4:	b570      	push	{r4, r5, r6, lr}
    14c6:	4e60      	ldr	r6, [pc, #384]	; (1648 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x184>)
    14c8:	4960      	ldr	r1, [pc, #384]	; (164c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>)
    14ca:	2501      	movs	r5, #1
    14cc:	f506 7440 	add.w	r4, r6, #768	; 0x300
    14d0:	2808      	cmp	r0, #8
    14d2:	d27c      	bcs.n	15ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    14d4:	e8df f000 	tbb	[pc, r0]
    14d8:	9a885704 	.word	0x9a885704
    14dc:	a49f3eb2 	.word	0xa49f3eb2
    14e0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    14e4:	b918      	cbnz	r0, 14ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    14e6:	f001 ff1b 	bl	3320 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    14ea:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    14ee:	8ae0      	ldrh	r0, [r4, #22]
    14f0:	b110      	cbz	r0, 14f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    14f2:	f002 f847 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    14f6:	b188      	cbz	r0, 151c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    14f8:	f7ff fcac 	bl	e54 <CONFIG_ISR_STACK_SIZE+0x654>
    14fc:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    1500:	68a1      	ldr	r1, [r4, #8]
    1502:	f1b1 3fff 	cmp.w	r1, #4294967295
    1506:	d005      	beq.n	1514 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1508:	2301      	movs	r3, #1
    150a:	2203      	movs	r2, #3
    150c:	2005      	movs	r0, #5
    150e:	f001 fb37 	bl	2b80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1512:	b140      	cbz	r0, 1526 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1514:	7e60      	ldrb	r0, [r4, #25]
    1516:	2801      	cmp	r0, #1
    1518:	d110      	bne.n	153c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    151a:	e009      	b.n	1530 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    151c:	f640 014b 	movw	r1, #2123	; 0x84b
    1520:	2070      	movs	r0, #112	; 0x70
    1522:	f002 f893 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1526:	f44f 6105 	mov.w	r1, #2128	; 0x850
    152a:	2070      	movs	r0, #112	; 0x70
    152c:	f002 f88e 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1530:	6920      	ldr	r0, [r4, #16]
    1532:	1e40      	subs	r0, r0, #1
    1534:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1538:	f001 fa3c 	bl	29b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    153c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1540:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1544:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1548:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    154c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1550:	2101      	movs	r1, #1
    1552:	4710      	bx	r2
    1554:	f7ff fc7e 	bl	e54 <CONFIG_ISR_STACK_SIZE+0x654>
    1558:	f04f 30ff 	mov.w	r0, #4294967295
    155c:	60a0      	str	r0, [r4, #8]
    155e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1562:	b158      	cbz	r0, 157c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb8>
    1564:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1568:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    156c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1570:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1578:	2106      	movs	r1, #6
    157a:	4710      	bx	r2
    157c:	f44f 6106 	mov.w	r1, #2144	; 0x860
    1580:	2070      	movs	r0, #112	; 0x70
    1582:	f002 f863 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1586:	f7ff fc65 	bl	e54 <CONFIG_ISR_STACK_SIZE+0x654>
    158a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    158e:	f001 fff9 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1592:	b118      	cbz	r0, 159c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1594:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1598:	b128      	cbz	r0, 15a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe2>
    159a:	e008      	b.n	15ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xea>
    159c:	f640 016f 	movw	r1, #2159	; 0x86f
    15a0:	2070      	movs	r0, #112	; 0x70
    15a2:	f002 f853 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15a6:	f001 febb 	bl	3320 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    15aa:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    15ae:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    15b2:	b158      	cbz	r0, 15cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x108>
    15b4:	4926      	ldr	r1, [pc, #152]	; (1650 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x18c>)
    15b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    15ba:	6008      	str	r0, [r1, #0]
    15bc:	2005      	movs	r0, #5
    15be:	f001 fba7 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    15c2:	f001 fef9 	bl	33b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    15c6:	2000      	movs	r0, #0
    15c8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    15cc:	e000      	b.n	15d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    15ce:	e035      	b.n	163c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x178>
    15d0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    15d4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    15d8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    15dc:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    15e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15e4:	2100      	movs	r1, #0
    15e6:	4710      	bx	r2
    15e8:	f001 fc38 	bl	2e5c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    15ec:	8ae0      	ldrh	r0, [r4, #22]
    15ee:	b110      	cbz	r0, 15f6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x132>
    15f0:	f001 ffc8 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15f4:	b128      	cbz	r0, 1602 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13e>
    15f6:	4817      	ldr	r0, [pc, #92]	; (1654 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x190>)
    15f8:	7800      	ldrb	r0, [r0, #0]
    15fa:	2803      	cmp	r0, #3
    15fc:	bf08      	it	eq
    15fe:	7765      	strbeq	r5, [r4, #29]
    1600:	bd70      	pop	{r4, r5, r6, pc}
    1602:	f640 0179 	movw	r1, #2169	; 0x879
    1606:	2070      	movs	r0, #112	; 0x70
    1608:	f002 f820 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    160c:	4812      	ldr	r0, [pc, #72]	; (1658 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    160e:	6005      	str	r5, [r0, #0]
    1610:	6888      	ldr	r0, [r1, #8]
    1612:	6005      	str	r5, [r0, #0]
    1614:	bd70      	pop	{r4, r5, r6, pc}
    1616:	7808      	ldrb	r0, [r1, #0]
    1618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    161c:	f002 b8e6 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1620:	f7ff fc18 	bl	e54 <CONFIG_ISR_STACK_SIZE+0x654>
    1624:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1628:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    162c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1630:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1638:	2105      	movs	r1, #5
    163a:	4710      	bx	r2
    163c:	f640 018b 	movw	r1, #2187	; 0x88b
    1640:	2070      	movs	r0, #112	; 0x70
    1642:	f002 f803 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1646:	0000      	.short	0x0000
    1648:	20000a34 	.word	0x20000a34
    164c:	20000010 	.word	0x20000010
    1650:	4001f508 	.word	0x4001f508
    1654:	20000012 	.word	0x20000012
    1658:	40000508 	.word	0x40000508

0000165c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    165c:	4803      	ldr	r0, [pc, #12]	; (166c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    165e:	b510      	push	{r4, lr}
    1660:	7840      	ldrb	r0, [r0, #1]
    1662:	f00d fba7 	bl	edb4 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1666:	b280      	uxth	r0, r0
    1668:	bd10      	pop	{r4, pc}
    166a:	0000      	.short	0x0000
    166c:	20000012 	.word	0x20000012

00001670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1670:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1674:	48ff      	ldr	r0, [pc, #1020]	; (1a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    1676:	b093      	sub	sp, #76	; 0x4c
    1678:	4688      	mov	r8, r1
    167a:	6800      	ldr	r0, [r0, #0]
    167c:	4dfe      	ldr	r5, [pc, #1016]	; (1a78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    167e:	05c0      	lsls	r0, r0, #23
    1680:	0dc0      	lsrs	r0, r0, #23
    1682:	d00e      	beq.n	16a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1684:	3810      	subs	r0, #16
    1686:	b240      	sxtb	r0, r0
    1688:	2800      	cmp	r0, #0
    168a:	bfb8      	it	lt
    168c:	f000 000f 	andlt.w	r0, r0, #15
    1690:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1694:	bfac      	ite	ge
    1696:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    169a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    169e:	0940      	lsrs	r0, r0, #5
    16a0:	d00d      	beq.n	16be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    16a2:	f898 0000 	ldrb.w	r0, [r8]
    16a6:	f04f 0b00 	mov.w	fp, #0
    16aa:	2800      	cmp	r0, #0
    16ac:	bf18      	it	ne
    16ae:	2801      	cmpne	r0, #1
    16b0:	d018      	beq.n	16e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    16b2:	f240 7139 	movw	r1, #1849	; 0x739
    16b6:	f04f 0070 	mov.w	r0, #112	; 0x70
    16ba:	f001 ffc7 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16be:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    16c2:	f04f 0b01 	mov.w	fp, #1
    16c6:	2820      	cmp	r0, #32
    16c8:	d007      	beq.n	16da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    16ca:	f898 0000 	ldrb.w	r0, [r8]
    16ce:	b148      	cbz	r0, 16e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    16d0:	f240 7135 	movw	r1, #1845	; 0x735
    16d4:	2070      	movs	r0, #112	; 0x70
    16d6:	f001 ffb9 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16da:	f240 7132 	movw	r1, #1842	; 0x732
    16de:	2070      	movs	r0, #112	; 0x70
    16e0:	f001 ffb4 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16e4:	4ce5      	ldr	r4, [pc, #916]	; (1a7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    16e6:	b124      	cbz	r4, 16f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    16e8:	2100      	movs	r1, #0
    16ea:	f240 703c 	movw	r0, #1852	; 0x73c
    16ee:	f3af 8000 	nop.w
    16f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    16f4:	49e2      	ldr	r1, [pc, #904]	; (1a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    16f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    16fa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    16fe:	f04f 0901 	mov.w	r9, #1
    1702:	9001      	str	r0, [sp, #4]
    1704:	b124      	cbz	r4, 1710 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    1706:	2100      	movs	r1, #0
    1708:	f240 7044 	movw	r0, #1860	; 0x744
    170c:	f3af 8000 	nop.w
    1710:	f1b9 0f00 	cmp.w	r9, #0
    1714:	d00a      	beq.n	172c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    1716:	bf00      	nop
    1718:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    171c:	f04f 0a00 	mov.w	sl, #0
    1720:	f885 a02b 	strb.w	sl, [r5, #43]	; 0x2b
    1724:	f1bb 0f00 	cmp.w	fp, #0
    1728:	d007      	beq.n	173a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    172a:	e02e      	b.n	178a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    172c:	48d5      	ldr	r0, [pc, #852]	; (1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    172e:	2800      	cmp	r0, #0
    1730:	bf18      	it	ne
    1732:	f3af 8000 	nopne.w
    1736:	b662      	cpsie	i
    1738:	e7ee      	b.n	1718 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    173a:	4637      	mov	r7, r6
    173c:	2001      	movs	r0, #1
    173e:	ea20 0607 	bic.w	r6, r0, r7
    1742:	48d1      	ldr	r0, [pc, #836]	; (1a88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    1744:	2240      	movs	r2, #64	; 0x40
    1746:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    174a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    174e:	f002 f8d3 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1752:	b124      	cbz	r4, 175e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    1754:	2100      	movs	r1, #0
    1756:	f240 50a5 	movw	r0, #1445	; 0x5a5
    175a:	f3af 8000 	nop.w
    175e:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1762:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1766:	6a09      	ldr	r1, [r1, #32]
    1768:	6201      	str	r1, [r0, #32]
    176a:	b124      	cbz	r4, 1776 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    176c:	2100      	movs	r1, #0
    176e:	f240 50a9 	movw	r0, #1449	; 0x5a9
    1772:	f3af 8000 	nop.w
    1776:	b124      	cbz	r4, 1782 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    1778:	2100      	movs	r1, #0
    177a:	f240 704e 	movw	r0, #1870	; 0x74e
    177e:	f3af 8000 	nop.w
    1782:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1786:	2800      	cmp	r0, #0
    1788:	d1bc      	bne.n	1704 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    178a:	b124      	cbz	r4, 1796 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    178c:	2100      	movs	r1, #0
    178e:	f44f 60eb 	mov.w	r0, #1880	; 0x758
    1792:	f3af 8000 	nop.w
    1796:	f001 f86d 	bl	2874 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    179a:	4607      	mov	r7, r0
    179c:	f898 0000 	ldrb.w	r0, [r8]
    17a0:	f10d 0908 	add.w	r9, sp, #8
    17a4:	2800      	cmp	r0, #0
    17a6:	f898 000b 	ldrb.w	r0, [r8, #11]
    17aa:	f88d 0015 	strb.w	r0, [sp, #21]
    17ae:	f898 100a 	ldrb.w	r1, [r8, #10]
    17b2:	f88d 1014 	strb.w	r1, [sp, #20]
    17b6:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    17ba:	f8ad 1012 	strh.w	r1, [sp, #18]
    17be:	9000      	str	r0, [sp, #0]
    17c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    17c4:	d013      	beq.n	17ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x17e>
    17c6:	2200      	movs	r2, #0
    17c8:	4648      	mov	r0, r9
    17ca:	f7fe fe2f 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    17ce:	9707      	str	r7, [sp, #28]
    17d0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    17d4:	aa0f      	add	r2, sp, #60	; 0x3c
    17d6:	a90e      	add	r1, sp, #56	; 0x38
    17d8:	f001 fbaa 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    17dc:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    17e0:	2820      	cmp	r0, #32
    17e2:	d00a      	beq.n	17fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x18a>
    17e4:	6928      	ldr	r0, [r5, #16]
    17e6:	1d40      	adds	r0, r0, #5
    17e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17ec:	e01e      	b.n	182c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1bc>
    17ee:	4648      	mov	r0, r9
    17f0:	f8d8 200c 	ldr.w	r2, [r8, #12]
    17f4:	f7fe fe1a 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    17f8:	e04b      	b.n	1892 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x222>
    17fa:	9807      	ldr	r0, [sp, #28]
    17fc:	3009      	adds	r0, #9
    17fe:	9000      	str	r0, [sp, #0]
    1800:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1804:	b128      	cbz	r0, 1812 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a2>
    1806:	f001 febd 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    180a:	b910      	cbnz	r0, 1812 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a2>
    180c:	9800      	ldr	r0, [sp, #0]
    180e:	3032      	adds	r0, #50	; 0x32
    1810:	9000      	str	r0, [sp, #0]
    1812:	489e      	ldr	r0, [pc, #632]	; (1a8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>)
    1814:	7841      	ldrb	r1, [r0, #1]
    1816:	980e      	ldr	r0, [sp, #56]	; 0x38
    1818:	4281      	cmp	r1, r0
    181a:	bf98      	it	ls
    181c:	9800      	ldrls	r0, [sp, #0]
    181e:	d903      	bls.n	1828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1b8>
    1820:	1a09      	subs	r1, r1, r0
    1822:	9800      	ldr	r0, [sp, #0]
    1824:	4408      	add	r0, r1
    1826:	9000      	str	r0, [sp, #0]
    1828:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    182c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1830:	1a89      	subs	r1, r1, r2
    1832:	9002      	str	r0, [sp, #8]
    1834:	4408      	add	r0, r1
    1836:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    183a:	9003      	str	r0, [sp, #12]
    183c:	4631      	mov	r1, r6
    183e:	4648      	mov	r0, r9
    1840:	f7fe fe92 	bl	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
    1844:	f898 000b 	ldrb.w	r0, [r8, #11]
    1848:	9000      	str	r0, [sp, #0]
    184a:	46b9      	mov	r9, r7
    184c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1850:	a80e      	add	r0, sp, #56	; 0x38
    1852:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1856:	f8d8 200c 	ldr.w	r2, [r8, #12]
    185a:	f7fe fde7 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    185e:	9802      	ldr	r0, [sp, #8]
    1860:	9a03      	ldr	r2, [sp, #12]
    1862:	eba0 0009 	sub.w	r0, r0, r9
    1866:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    186a:	eba2 0209 	sub.w	r2, r2, r9
    186e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1870:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1874:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1878:	d201      	bcs.n	187e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20e>
    187a:	4291      	cmp	r1, r2
    187c:	d209      	bcs.n	1892 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x222>
    187e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1882:	1a89      	subs	r1, r1, r2
    1884:	1878      	adds	r0, r7, r1
    1886:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    188a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    188e:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1892:	b124      	cbz	r4, 189e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22e>
    1894:	2100      	movs	r1, #0
    1896:	f240 705f 	movw	r0, #1887	; 0x75f
    189a:	f3af 8000 	nop.w
    189e:	4a7a      	ldr	r2, [pc, #488]	; (1a88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    18a0:	4639      	mov	r1, r7
    18a2:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    18a6:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    18aa:	a802      	add	r0, sp, #8
    18ac:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    18b0:	2a01      	cmp	r2, #1
    18b2:	bf18      	it	ne
    18b4:	2a02      	cmpne	r2, #2
    18b6:	d13d      	bne.n	1934 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    18b8:	9a02      	ldr	r2, [sp, #8]
    18ba:	f8dd c00c 	ldr.w	ip, [sp, #12]
    18be:	eba2 0201 	sub.w	r2, r2, r1
    18c2:	4b73      	ldr	r3, [pc, #460]	; (1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    18c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    18c8:	ebac 0101 	sub.w	r1, ip, r1
    18cc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    18d0:	2a02      	cmp	r2, #2
    18d2:	d369      	bcc.n	19a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    18d4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    18d8:	d266      	bcs.n	19a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    18da:	428b      	cmp	r3, r1
    18dc:	d364      	bcc.n	19a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    18de:	f04f 0a01 	mov.w	sl, #1
    18e2:	ab0e      	add	r3, sp, #56	; 0x38
    18e4:	aa0d      	add	r2, sp, #52	; 0x34
    18e6:	4631      	mov	r1, r6
    18e8:	f7fe ff88 	bl	7fc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1fc>
    18ec:	b3f0      	cbz	r0, 196c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    18ee:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    18f2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    18f6:	4633      	mov	r3, r6
    18f8:	428a      	cmp	r2, r1
    18fa:	d061      	beq.n	19c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    18fc:	2005      	movs	r0, #5
    18fe:	f7fe fdf7 	bl	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
    1902:	bf00      	nop
    1904:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    1908:	7048      	strb	r0, [r1, #1]
    190a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    190e:	2820      	cmp	r0, #32
    1910:	bf03      	ittte	eq
    1912:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1916:	f880 9020 	strbeq.w	r9, [r0, #32]
    191a:	f880 a023 	strbeq.w	sl, [r0, #35]	; 0x23
    191e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1922:	bf18      	it	ne
    1924:	f880 9001 	strbne.w	r9, [r0, #1]
    1928:	4632      	mov	r2, r6
    192a:	4649      	mov	r1, r9
    192c:	f05f 0003 	movs.w	r0, #3
    1930:	f7ff fb64 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
    1934:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1938:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    193c:	b124      	cbz	r4, 1948 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    193e:	2100      	movs	r1, #0
    1940:	f240 7066 	movw	r0, #1894	; 0x766
    1944:	f3af 8000 	nop.w
    1948:	4852      	ldr	r0, [pc, #328]	; (1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    194a:	2800      	cmp	r0, #0
    194c:	bf18      	it	ne
    194e:	f3af 8000 	nopne.w
    1952:	f3ef 8910 	mrs	r9, PRIMASK
    1956:	b672      	cpsid	i
    1958:	b124      	cbz	r4, 1964 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    195a:	2100      	movs	r1, #0
    195c:	f240 706c 	movw	r0, #1900	; 0x76c
    1960:	f3af 8000 	nop.w
    1964:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1968:	2800      	cmp	r0, #0
    196a:	e000      	b.n	196e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fe>
    196c:	e024      	b.n	19b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    196e:	f47f aec9 	bne.w	1704 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1972:	b124      	cbz	r4, 197e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    1974:	2100      	movs	r1, #0
    1976:	f240 7074 	movw	r0, #1908	; 0x774
    197a:	f3af 8000 	nop.w
    197e:	f10d 0e04 	add.w	lr, sp, #4
    1982:	f1ba 0f00 	cmp.w	sl, #0
    1986:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    198a:	f100 0004 	add.w	r0, r0, #4
    198e:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1992:	d041      	beq.n	1a18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    1994:	b124      	cbz	r4, 19a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x330>
    1996:	2100      	movs	r1, #0
    1998:	f240 7081 	movw	r0, #1921	; 0x781
    199c:	f3af 8000 	nop.w
    19a0:	f1bb 0f00 	cmp.w	fp, #0
    19a4:	d12b      	bne.n	19fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38e>
    19a6:	e015      	b.n	19d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    19a8:	4632      	mov	r2, r6
    19aa:	4649      	mov	r1, r9
    19ac:	2004      	movs	r0, #4
    19ae:	f7ff fb25 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
    19b2:	f04f 0a01 	mov.w	sl, #1
    19b6:	e7bd      	b.n	1934 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    19b8:	4632      	mov	r2, r6
    19ba:	4649      	mov	r1, r9
    19bc:	2004      	movs	r0, #4
    19be:	e7b7      	b.n	1930 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>
    19c0:	2920      	cmp	r1, #32
    19c2:	bf19      	ittee	ne
    19c4:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    19c8:	7840      	ldrbne	r0, [r0, #1]
    19ca:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    19ce:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    19d2:	e797      	b.n	1904 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x294>
    19d4:	b19f      	cbz	r7, 19fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38e>
    19d6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    19da:	2820      	cmp	r0, #32
    19dc:	d10f      	bne.n	19fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38e>
    19de:	b124      	cbz	r4, 19ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37a>
    19e0:	2100      	movs	r1, #0
    19e2:	f240 7086 	movw	r0, #1926	; 0x786
    19e6:	f3af 8000 	nop.w
    19ea:	4631      	mov	r1, r6
    19ec:	2002      	movs	r0, #2
    19ee:	f7ff fb35 	bl	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    19f2:	b920      	cbnz	r0, 19fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38e>
    19f4:	f898 0000 	ldrb.w	r0, [r8]
    19f8:	b3d0      	cbz	r0, 1a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    19fa:	2801      	cmp	r0, #1
    19fc:	d05e      	beq.n	1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    19fe:	b124      	cbz	r4, 1a0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    1a00:	2100      	movs	r1, #0
    1a02:	f240 70a3 	movw	r0, #1955	; 0x7a3
    1a06:	f3af 8000 	nop.w
    1a0a:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1a0e:	2001      	movs	r0, #1
    1a10:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1a14:	f04f 0a01 	mov.w	sl, #1
    1a18:	b124      	cbz	r4, 1a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b4>
    1a1a:	2100      	movs	r1, #0
    1a1c:	f240 70ac 	movw	r0, #1964	; 0x7ac
    1a20:	f3af 8000 	nop.w
    1a24:	f1b9 0f00 	cmp.w	r9, #0
    1a28:	d051      	beq.n	1ace <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45e>
    1a2a:	b124      	cbz	r4, 1a36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c6>
    1a2c:	2100      	movs	r1, #0
    1a2e:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    1a32:	f3af 8000 	nop.w
    1a36:	f1ba 0f00 	cmp.w	sl, #0
    1a3a:	d011      	beq.n	1a60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>
    1a3c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1a40:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1a44:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1a48:	2820      	cmp	r0, #32
    1a4a:	d009      	beq.n	1a60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>
    1a4c:	b124      	cbz	r4, 1a58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>
    1a4e:	2100      	movs	r1, #0
    1a50:	f240 70b7 	movw	r0, #1975	; 0x7b7
    1a54:	f3af 8000 	nop.w
    1a58:	480f      	ldr	r0, [pc, #60]	; (1a98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>)
    1a5a:	7840      	ldrb	r0, [r0, #1]
    1a5c:	f001 fec6 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1a60:	b124      	cbz	r4, 1a6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>
    1a62:	2100      	movs	r1, #0
    1a64:	f240 70bc 	movw	r0, #1980	; 0x7bc
    1a68:	f3af 8000 	nop.w
    1a6c:	4650      	mov	r0, sl
    1a6e:	e015      	b.n	1a9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42c>
    1a70:	e017      	b.n	1aa2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x432>
    1a72:	0000      	.short	0x0000
    1a74:	e000ed04 	.word	0xe000ed04
    1a78:	20000d34 	.word	0x20000d34
    1a7c:	00000000 	.word	0x00000000
    1a80:	20000a34 	.word	0x20000a34
    1a84:	00000000 	.word	0x00000000
    1a88:	20000cb4 	.word	0x20000cb4
    1a8c:	20000012 	.word	0x20000012
    1a90:	003fffff 	.word	0x003fffff
    1a94:	00000000 	.word	0x00000000
    1a98:	20000010 	.word	0x20000010
    1a9c:	b015      	add	sp, #84	; 0x54
    1a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aa2:	b124      	cbz	r4, 1aae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43e>
    1aa4:	2100      	movs	r1, #0
    1aa6:	f240 708e 	movw	r0, #1934	; 0x78e
    1aaa:	f3af 8000 	nop.w
    1aae:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1ab2:	2004      	movs	r0, #4
    1ab4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1ab6:	f7ff faa1 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
    1aba:	e7ab      	b.n	1a14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a4>
    1abc:	2c00      	cmp	r4, #0
    1abe:	f43f ae21 	beq.w	1704 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1ac2:	2100      	movs	r1, #0
    1ac4:	f240 7099 	movw	r0, #1945	; 0x799
    1ac8:	f3af 8000 	nop.w
    1acc:	e61a      	b.n	1704 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1ace:	4803      	ldr	r0, [pc, #12]	; (1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>)
    1ad0:	2800      	cmp	r0, #0
    1ad2:	bf18      	it	ne
    1ad4:	f3af 8000 	nopne.w
    1ad8:	b662      	cpsie	i
    1ada:	e7a6      	b.n	1a2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    1adc:	00000000 	.word	0x00000000

00001ae0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ae4:	4605      	mov	r5, r0
    1ae6:	48e1      	ldr	r0, [pc, #900]	; (1e6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1ae8:	b08d      	sub	sp, #52	; 0x34
    1aea:	6800      	ldr	r0, [r0, #0]
    1aec:	05c0      	lsls	r0, r0, #23
    1aee:	0dc0      	lsrs	r0, r0, #23
    1af0:	d011      	beq.n	1b16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    1af2:	3810      	subs	r0, #16
    1af4:	b240      	sxtb	r0, r0
    1af6:	2800      	cmp	r0, #0
    1af8:	bfb8      	it	lt
    1afa:	f000 000f 	andlt.w	r0, r0, #15
    1afe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1b02:	bfac      	ite	ge
    1b04:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1b08:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1b0c:	0940      	lsrs	r0, r0, #5
    1b0e:	bf08      	it	eq
    1b10:	f04f 0b01 	moveq.w	fp, #1
    1b14:	d001      	beq.n	1b1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    1b16:	f04f 0b00 	mov.w	fp, #0
    1b1a:	7828      	ldrb	r0, [r5, #0]
    1b1c:	2800      	cmp	r0, #0
    1b1e:	f04f 0000 	mov.w	r0, #0
    1b22:	bf1c      	itt	ne
    1b24:	b00d      	addne	sp, #52	; 0x34
    1b26:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b2a:	f8df 8344 	ldr.w	r8, [pc, #836]	; 1e70 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>
    1b2e:	4ed1      	ldr	r6, [pc, #836]	; (1e74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>)
    1b30:	f04f 0900 	mov.w	r9, #0
    1b34:	f8cd 0018 	str.w	r0, [sp, #24]
    1b38:	f1b8 0f00 	cmp.w	r8, #0
    1b3c:	d004      	beq.n	1b48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    1b3e:	2100      	movs	r1, #0
    1b40:	f44f 60c6 	mov.w	r0, #1584	; 0x630
    1b44:	f3af 8000 	nop.w
    1b48:	f896 702e 	ldrb.w	r7, [r6, #46]	; 0x2e
    1b4c:	f886 902b 	strb.w	r9, [r6, #43]	; 0x2b
    1b50:	f04f 0a00 	mov.w	sl, #0
    1b54:	f1b8 0f00 	cmp.w	r8, #0
    1b58:	d004      	beq.n	1b64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    1b5a:	2100      	movs	r1, #0
    1b5c:	f240 6035 	movw	r0, #1589	; 0x635
    1b60:	f3af 8000 	nop.w
    1b64:	f1bb 0f00 	cmp.w	fp, #0
    1b68:	d121      	bne.n	1bae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1b6a:	463c      	mov	r4, r7
    1b6c:	2001      	movs	r0, #1
    1b6e:	ea20 0704 	bic.w	r7, r0, r4
    1b72:	48c1      	ldr	r0, [pc, #772]	; (1e78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>)
    1b74:	2240      	movs	r2, #64	; 0x40
    1b76:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    1b7a:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    1b7e:	f001 febb 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1b82:	f1b8 0f00 	cmp.w	r8, #0
    1b86:	d004      	beq.n	1b92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    1b88:	2100      	movs	r1, #0
    1b8a:	f240 50a5 	movw	r0, #1445	; 0x5a5
    1b8e:	f3af 8000 	nop.w
    1b92:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    1b96:	eb06 0087 	add.w	r0, r6, r7, lsl #2
    1b9a:	6a09      	ldr	r1, [r1, #32]
    1b9c:	6201      	str	r1, [r0, #32]
    1b9e:	f1b8 0f00 	cmp.w	r8, #0
    1ba2:	d004      	beq.n	1bae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1ba4:	2100      	movs	r1, #0
    1ba6:	f240 50a9 	movw	r0, #1449	; 0x5a9
    1baa:	f3af 8000 	nop.w
    1bae:	f1b8 0f00 	cmp.w	r8, #0
    1bb2:	d004      	beq.n	1bbe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    1bb4:	2100      	movs	r1, #0
    1bb6:	f240 603d 	movw	r0, #1597	; 0x63d
    1bba:	f3af 8000 	nop.w
    1bbe:	f000 fe59 	bl	2874 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1bc2:	4604      	mov	r4, r0
    1bc4:	a802      	add	r0, sp, #8
    1bc6:	9001      	str	r0, [sp, #4]
    1bc8:	7828      	ldrb	r0, [r5, #0]
    1bca:	2800      	cmp	r0, #0
    1bcc:	7ae8      	ldrb	r0, [r5, #11]
    1bce:	f88d 0015 	strb.w	r0, [sp, #21]
    1bd2:	7aa9      	ldrb	r1, [r5, #10]
    1bd4:	f88d 1014 	strb.w	r1, [sp, #20]
    1bd8:	8929      	ldrh	r1, [r5, #8]
    1bda:	f8ad 1012 	strh.w	r1, [sp, #18]
    1bde:	9000      	str	r0, [sp, #0]
    1be0:	686b      	ldr	r3, [r5, #4]
    1be2:	d013      	beq.n	1c0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12c>
    1be4:	2200      	movs	r2, #0
    1be6:	9801      	ldr	r0, [sp, #4]
    1be8:	f7fe fc20 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1bec:	9400      	str	r4, [sp, #0]
    1bee:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1bf2:	aa08      	add	r2, sp, #32
    1bf4:	a907      	add	r1, sp, #28
    1bf6:	f001 f99b 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1bfa:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1bfe:	2820      	cmp	r0, #32
    1c00:	d009      	beq.n	1c16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x136>
    1c02:	6930      	ldr	r0, [r6, #16]
    1c04:	1d40      	adds	r0, r0, #5
    1c06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c0a:	e01d      	b.n	1c48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    1c0c:	68ea      	ldr	r2, [r5, #12]
    1c0e:	9801      	ldr	r0, [sp, #4]
    1c10:	f7fe fc0c 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1c14:	e046      	b.n	1ca4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    1c16:	9800      	ldr	r0, [sp, #0]
    1c18:	3009      	adds	r0, #9
    1c1a:	9000      	str	r0, [sp, #0]
    1c1c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1c20:	b128      	cbz	r0, 1c2e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14e>
    1c22:	f001 fcaf 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c26:	b910      	cbnz	r0, 1c2e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14e>
    1c28:	9800      	ldr	r0, [sp, #0]
    1c2a:	3032      	adds	r0, #50	; 0x32
    1c2c:	9000      	str	r0, [sp, #0]
    1c2e:	4893      	ldr	r0, [pc, #588]	; (1e7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>)
    1c30:	9907      	ldr	r1, [sp, #28]
    1c32:	7840      	ldrb	r0, [r0, #1]
    1c34:	4288      	cmp	r0, r1
    1c36:	bf98      	it	ls
    1c38:	9800      	ldrls	r0, [sp, #0]
    1c3a:	d903      	bls.n	1c44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x164>
    1c3c:	1a41      	subs	r1, r0, r1
    1c3e:	9800      	ldr	r0, [sp, #0]
    1c40:	4408      	add	r0, r1
    1c42:	9000      	str	r0, [sp, #0]
    1c44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c48:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1c4c:	1a89      	subs	r1, r1, r2
    1c4e:	9002      	str	r0, [sp, #8]
    1c50:	4408      	add	r0, r1
    1c52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c56:	9003      	str	r0, [sp, #12]
    1c58:	4639      	mov	r1, r7
    1c5a:	9801      	ldr	r0, [sp, #4]
    1c5c:	f7fe fc84 	bl	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
    1c60:	9401      	str	r4, [sp, #4]
    1c62:	7ae8      	ldrb	r0, [r5, #11]
    1c64:	9000      	str	r0, [sp, #0]
    1c66:	8929      	ldrh	r1, [r5, #8]
    1c68:	a808      	add	r0, sp, #32
    1c6a:	686b      	ldr	r3, [r5, #4]
    1c6c:	68ea      	ldr	r2, [r5, #12]
    1c6e:	f7fe fbdd 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1c72:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    1c76:	9a03      	ldr	r2, [sp, #12]
    1c78:	1ac0      	subs	r0, r0, r3
    1c7a:	1ad2      	subs	r2, r2, r3
    1c7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c80:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c82:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1c86:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1c8a:	d201      	bcs.n	1c90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    1c8c:	4291      	cmp	r1, r2
    1c8e:	d209      	bcs.n	1ca4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    1c90:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1c94:	1a89      	subs	r1, r1, r2
    1c96:	1860      	adds	r0, r4, r1
    1c98:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    1c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ca0:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1ca4:	f1b8 0f00 	cmp.w	r8, #0
    1ca8:	d004      	beq.n	1cb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    1caa:	2100      	movs	r1, #0
    1cac:	f240 6043 	movw	r0, #1603	; 0x643
    1cb0:	f3af 8000 	nop.w
    1cb4:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1cb8:	2820      	cmp	r0, #32
    1cba:	d014      	beq.n	1ce6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x206>
    1cbc:	6930      	ldr	r0, [r6, #16]
    1cbe:	9902      	ldr	r1, [sp, #8]
    1cc0:	1a09      	subs	r1, r1, r0
    1cc2:	0209      	lsls	r1, r1, #8
    1cc4:	17ca      	asrs	r2, r1, #31
    1cc6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1cca:	1209      	asrs	r1, r1, #8
    1ccc:	d50b      	bpl.n	1ce6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x206>
    1cce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1cd2:	1a89      	subs	r1, r1, r2
    1cd4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1cd8:	4408      	add	r0, r1
    1cda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cde:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1ce2:	f04f 0a01 	mov.w	sl, #1
    1ce6:	f1b8 0f00 	cmp.w	r8, #0
    1cea:	d009      	beq.n	1d00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x220>
    1cec:	2100      	movs	r1, #0
    1cee:	f240 604d 	movw	r0, #1613	; 0x64d
    1cf2:	f3af 8000 	nop.w
    1cf6:	2100      	movs	r1, #0
    1cf8:	f240 6053 	movw	r0, #1619	; 0x653
    1cfc:	f3af 8000 	nop.w
    1d00:	9902      	ldr	r1, [sp, #8]
    1d02:	9a03      	ldr	r2, [sp, #12]
    1d04:	1b09      	subs	r1, r1, r4
    1d06:	1b12      	subs	r2, r2, r4
    1d08:	485d      	ldr	r0, [pc, #372]	; (1e80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>)
    1d0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d0e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1d12:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1d16:	d205      	bcs.n	1d24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    1d18:	4290      	cmp	r0, r2
    1d1a:	d303      	bcc.n	1d24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    1d1c:	f1bb 0f00 	cmp.w	fp, #0
    1d20:	d10b      	bne.n	1d3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25a>
    1d22:	e004      	b.n	1d2e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    1d24:	464f      	mov	r7, r9
    1d26:	f1bb 0f00 	cmp.w	fp, #0
    1d2a:	d039      	beq.n	1da0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1d2c:	e094      	b.n	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1d2e:	4639      	mov	r1, r7
    1d30:	a802      	add	r0, sp, #8
    1d32:	f7fe fc19 	bl	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
    1d36:	ea4a 0a00 	orr.w	sl, sl, r0
    1d3a:	f1ba 0f00 	cmp.w	sl, #0
    1d3e:	d023      	beq.n	1d88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d40:	9802      	ldr	r0, [sp, #8]
    1d42:	f00d f837 	bl	edb4 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1d46:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    1d4a:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1d4e:	f8df c134 	ldr.w	ip, [pc, #308]	; 1e84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1d52:	4411      	add	r1, r2
    1d54:	1cca      	adds	r2, r1, #3
    1d56:	1881      	adds	r1, r0, r2
    1d58:	2400      	movs	r4, #0
    1d5a:	ebbc 0000 	subs.w	r0, ip, r0
    1d5e:	eb74 0009 	sbcs.w	r0, r4, r9
    1d62:	d343      	bcc.n	1dec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1d64:	4848      	ldr	r0, [pc, #288]	; (1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>)
    1d66:	4282      	cmp	r2, r0
    1d68:	dc5b      	bgt.n	1e22 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd6>
    1d6a:	4240      	negs	r0, r0
    1d6c:	4282      	cmp	r2, r0
    1d6e:	db60      	blt.n	1e32 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe6>
    1d70:	f10c 0001 	add.w	r0, ip, #1
    1d74:	4281      	cmp	r1, r0
    1d76:	bfa8      	it	ge
    1d78:	4844      	ldrge	r0, [pc, #272]	; (1e8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>)
    1d7a:	da03      	bge.n	1d84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    1d7c:	2900      	cmp	r1, #0
    1d7e:	bfb8      	it	lt
    1d80:	4843      	ldrlt	r0, [pc, #268]	; (1e90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1d82:	da00      	bge.n	1d86 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a>
    1d84:	1809      	adds	r1, r1, r0
    1d86:	60e9      	str	r1, [r5, #12]
    1d88:	f04f 0001 	mov.w	r0, #1
    1d8c:	9006      	str	r0, [sp, #24]
    1d8e:	f1b8 0f00 	cmp.w	r8, #0
    1d92:	d061      	beq.n	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1d94:	2100      	movs	r1, #0
    1d96:	f240 6066 	movw	r0, #1638	; 0x666
    1d9a:	f3af 8000 	nop.w
    1d9e:	e05b      	b.n	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1da0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1da4:	aa01      	add	r2, sp, #4
    1da6:	4669      	mov	r1, sp
    1da8:	f001 f8c2 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1dac:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1db0:	2820      	cmp	r0, #32
    1db2:	d020      	beq.n	1df6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xaa>
    1db4:	6930      	ldr	r0, [r6, #16]
    1db6:	1d40      	adds	r0, r0, #5
    1db8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1dc0:	1a89      	subs	r1, r1, r2
    1dc2:	4401      	add	r1, r0
    1dc4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1dcc:	f00c fff2 	bl	edb4 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1dd0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    1dd4:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1dd8:	4b2a      	ldr	r3, [pc, #168]	; (1e84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>)
    1dda:	4411      	add	r1, r2
    1ddc:	1cc9      	adds	r1, r1, #3
    1dde:	1842      	adds	r2, r0, r1
    1de0:	f04f 0c00 	mov.w	ip, #0
    1de4:	1a18      	subs	r0, r3, r0
    1de6:	eb7c 0007 	sbcs.w	r0, ip, r7
    1dea:	d217      	bcs.n	1e1c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1dec:	f240 51e1 	movw	r1, #1505	; 0x5e1
    1df0:	2070      	movs	r0, #112	; 0x70
    1df2:	f001 fc2b 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1df6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1dfa:	3409      	adds	r4, #9
    1dfc:	b120      	cbz	r0, 1e08 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>
    1dfe:	f001 fbc1 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e02:	2800      	cmp	r0, #0
    1e04:	bf08      	it	eq
    1e06:	3432      	addeq	r4, #50	; 0x32
    1e08:	481c      	ldr	r0, [pc, #112]	; (1e7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>)
    1e0a:	7841      	ldrb	r1, [r0, #1]
    1e0c:	9800      	ldr	r0, [sp, #0]
    1e0e:	4281      	cmp	r1, r0
    1e10:	bf84      	itt	hi
    1e12:	1a08      	subhi	r0, r1, r0
    1e14:	4404      	addhi	r4, r0
    1e16:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    1e1a:	e7cf      	b.n	1dbc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>
    1e1c:	481a      	ldr	r0, [pc, #104]	; (1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>)
    1e1e:	4281      	cmp	r1, r0
    1e20:	dd04      	ble.n	1e2c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1e22:	f240 51e2 	movw	r1, #1506	; 0x5e2
    1e26:	2070      	movs	r0, #112	; 0x70
    1e28:	f001 fc10 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e2c:	4819      	ldr	r0, [pc, #100]	; (1e94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>)
    1e2e:	4281      	cmp	r1, r0
    1e30:	da04      	bge.n	1e3c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1e32:	f240 51e3 	movw	r1, #1507	; 0x5e3
    1e36:	2070      	movs	r0, #112	; 0x70
    1e38:	f001 fc08 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e3c:	4814      	ldr	r0, [pc, #80]	; (1e90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1e3e:	4282      	cmp	r2, r0
    1e40:	bfa8      	it	ge
    1e42:	4812      	ldrge	r0, [pc, #72]	; (1e8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>)
    1e44:	da03      	bge.n	1e4e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x102>
    1e46:	2a00      	cmp	r2, #0
    1e48:	bfb8      	it	lt
    1e4a:	4811      	ldrlt	r0, [pc, #68]	; (1e90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1e4c:	da00      	bge.n	1e50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>
    1e4e:	1812      	adds	r2, r2, r0
    1e50:	f04f 0001 	mov.w	r0, #1
    1e54:	60ea      	str	r2, [r5, #12]
    1e56:	9006      	str	r0, [sp, #24]
    1e58:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    1e5c:	2800      	cmp	r0, #0
    1e5e:	f47f ae6b 	bne.w	1b38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1e62:	9806      	ldr	r0, [sp, #24]
    1e64:	b00d      	add	sp, #52	; 0x34
    1e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e6a:	0000      	.short	0x0000
    1e6c:	e000ed04 	.word	0xe000ed04
    1e70:	00000000 	.word	0x00000000
    1e74:	20000d34 	.word	0x20000d34
    1e78:	20000cb4 	.word	0x20000cb4
    1e7c:	20000012 	.word	0x20000012
    1e80:	003fffff 	.word	0x003fffff
    1e84:	1e847fff 	.word	0x1e847fff
    1e88:	07a12000 	.word	0x07a12000
    1e8c:	e17b8000 	.word	0xe17b8000
    1e90:	1e848000 	.word	0x1e848000
    1e94:	f85ee000 	.word	0xf85ee000

00001e98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1e98:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e9c:	4d80      	ldr	r5, [pc, #512]	; (20a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    1e9e:	b08c      	sub	sp, #48	; 0x30
    1ea0:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1ea4:	2000      	movs	r0, #0
    1ea6:	9009      	str	r0, [sp, #36]	; 0x24
    1ea8:	2001      	movs	r0, #1
    1eaa:	4c7e      	ldr	r4, [pc, #504]	; (20a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    1eac:	f04f 0800 	mov.w	r8, #0
    1eb0:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1eb4:	4683      	mov	fp, r0
    1eb6:	9008      	str	r0, [sp, #32]
    1eb8:	b124      	cbz	r4, 1ec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1eba:	2100      	movs	r1, #0
    1ebc:	f240 70cb 	movw	r0, #1995	; 0x7cb
    1ec0:	f3af 8000 	nop.w
    1ec4:	9808      	ldr	r0, [sp, #32]
    1ec6:	b390      	cbz	r0, 1f2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1ec8:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1ecc:	b124      	cbz	r4, 1ed8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1ece:	2100      	movs	r1, #0
    1ed0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1ed4:	f3af 8000 	nop.w
    1ed8:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    1edc:	2240      	movs	r2, #64	; 0x40
    1ede:	ea2b 0609 	bic.w	r6, fp, r9
    1ee2:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1ee6:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1eea:	4682      	mov	sl, r0
    1eec:	f001 fd04 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ef0:	b124      	cbz	r4, 1efc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1ef2:	2100      	movs	r1, #0
    1ef4:	f240 50a5 	movw	r0, #1445	; 0x5a5
    1ef8:	f3af 8000 	nop.w
    1efc:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f00:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1f04:	9000      	str	r0, [sp, #0]
    1f06:	6a09      	ldr	r1, [r1, #32]
    1f08:	6201      	str	r1, [r0, #32]
    1f0a:	b124      	cbz	r4, 1f16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1f0c:	2100      	movs	r1, #0
    1f0e:	f240 50a9 	movw	r0, #1449	; 0x5a9
    1f12:	f3af 8000 	nop.w
    1f16:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f1a:	b180      	cbz	r0, 1f3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1f1c:	2c00      	cmp	r4, #0
    1f1e:	bf1c      	itt	ne
    1f20:	2100      	movne	r1, #0
    1f22:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    1f26:	d0c7      	beq.n	1eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f28:	f3af 8000 	nop.w
    1f2c:	e7c4      	b.n	1eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f2e:	e7ff      	b.n	1f30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1f30:	485d      	ldr	r0, [pc, #372]	; (20a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1f32:	2800      	cmp	r0, #0
    1f34:	bf18      	it	ne
    1f36:	f3af 8000 	nopne.w
    1f3a:	b662      	cpsie	i
    1f3c:	e7c4      	b.n	1ec8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1f3e:	b124      	cbz	r4, 1f4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1f40:	2100      	movs	r1, #0
    1f42:	f240 70da 	movw	r0, #2010	; 0x7da
    1f46:	f3af 8000 	nop.w
    1f4a:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f4c:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1f50:	2803      	cmp	r0, #3
    1f52:	d178      	bne.n	2046 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1f54:	f8dd 9000 	ldr.w	r9, [sp]
    1f58:	f8cd 9018 	str.w	r9, [sp, #24]
    1f5c:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f5e:	f899 0020 	ldrb.w	r0, [r9, #32]
    1f62:	4288      	cmp	r0, r1
    1f64:	bf14      	ite	ne
    1f66:	f04f 0a00 	movne.w	sl, #0
    1f6a:	f04f 0a01 	moveq.w	sl, #1
    1f6e:	f109 0c20 	add.w	ip, r9, #32
    1f72:	4686      	mov	lr, r0
    1f74:	2220      	movs	r2, #32
    1f76:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1f7a:	e003      	b.n	1f84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1f7c:	4602      	mov	r2, r0
    1f7e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1f82:	7840      	ldrb	r0, [r0, #1]
    1f84:	4288      	cmp	r0, r1
    1f86:	d002      	beq.n	1f8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1f88:	2820      	cmp	r0, #32
    1f8a:	d00a      	beq.n	1fa2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1f8c:	e7f6      	b.n	1f7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1f8e:	2820      	cmp	r0, #32
    1f90:	d007      	beq.n	1fa2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1f92:	4586      	cmp	lr, r0
    1f94:	d107      	bne.n	1fa6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1f96:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1f9a:	7840      	ldrb	r0, [r0, #1]
    1f9c:	f88c 0000 	strb.w	r0, [ip]
    1fa0:	e007      	b.n	1fb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    1fa2:	4640      	mov	r0, r8
    1fa4:	e00c      	b.n	1fc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    1fa6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1faa:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1fae:	7840      	ldrb	r0, [r0, #1]
    1fb0:	7048      	strb	r0, [r1, #1]
    1fb2:	b124      	cbz	r4, 1fbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    1fb4:	2100      	movs	r1, #0
    1fb6:	f240 502a 	movw	r0, #1322	; 0x52a
    1fba:	f3af 8000 	nop.w
    1fbe:	4658      	mov	r0, fp
    1fc0:	ea10 0f0a 	tst.w	r0, sl
    1fc4:	bf18      	it	ne
    1fc6:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    1fca:	b3e0      	cbz	r0, 2046 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1fcc:	b124      	cbz	r4, 1fd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    1fce:	2100      	movs	r1, #0
    1fd0:	f240 70df 	movw	r0, #2015	; 0x7df
    1fd4:	f3af 8000 	nop.w
    1fd8:	4632      	mov	r2, r6
    1fda:	2001      	movs	r0, #1
    1fdc:	990c      	ldr	r1, [sp, #48]	; 0x30
    1fde:	f7ff f80d 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
    1fe2:	9806      	ldr	r0, [sp, #24]
    1fe4:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    1fe8:	b124      	cbz	r4, 1ff4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    1fea:	2100      	movs	r1, #0
    1fec:	f240 70ea 	movw	r0, #2026	; 0x7ea
    1ff0:	f3af 8000 	nop.w
    1ff4:	482d      	ldr	r0, [pc, #180]	; (20ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    1ff6:	2800      	cmp	r0, #0
    1ff8:	bf18      	it	ne
    1ffa:	f3af 8000 	nopne.w
    1ffe:	f3ef 8010 	mrs	r0, PRIMASK
    2002:	b672      	cpsid	i
    2004:	9008      	str	r0, [sp, #32]
    2006:	b124      	cbz	r4, 2012 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    2008:	2100      	movs	r1, #0
    200a:	f240 70ef 	movw	r0, #2031	; 0x7ef
    200e:	f3af 8000 	nop.w
    2012:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2016:	b138      	cbz	r0, 2028 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    2018:	2c00      	cmp	r4, #0
    201a:	bf1c      	itt	ne
    201c:	2100      	movne	r1, #0
    201e:	f240 70f3 	movwne	r0, #2035	; 0x7f3
    2022:	f43f af49 	beq.w	1eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2026:	e77f      	b.n	1f28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    2028:	f1b9 0f00 	cmp.w	r9, #0
    202c:	d008      	beq.n	2040 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    202e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2032:	2820      	cmp	r0, #32
    2034:	d104      	bne.n	2040 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2036:	4631      	mov	r1, r6
    2038:	2002      	movs	r0, #2
    203a:	f7ff f80f 	bl	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    203e:	b1f8      	cbz	r0, 2080 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2040:	b134      	cbz	r4, 2050 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    2042:	2100      	movs	r1, #0
    2044:	e000      	b.n	2048 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    2046:	e009      	b.n	205c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    2048:	f640 0007 	movw	r0, #2055	; 0x807
    204c:	f3af 8000 	nop.w
    2050:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    2054:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    2058:	2001      	movs	r0, #1
    205a:	9009      	str	r0, [sp, #36]	; 0x24
    205c:	b124      	cbz	r4, 2068 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    205e:	2100      	movs	r1, #0
    2060:	f44f 6001 	mov.w	r0, #2064	; 0x810
    2064:	f3af 8000 	nop.w
    2068:	9808      	ldr	r0, [sp, #32]
    206a:	b188      	cbz	r0, 2090 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    206c:	b124      	cbz	r4, 2078 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    206e:	2100      	movs	r1, #0
    2070:	f640 0014 	movw	r0, #2068	; 0x814
    2074:	f3af 8000 	nop.w
    2078:	9809      	ldr	r0, [sp, #36]	; 0x24
    207a:	b00d      	add	sp, #52	; 0x34
    207c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2080:	2c00      	cmp	r4, #0
    2082:	d0f1      	beq.n	2068 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2084:	2100      	movs	r1, #0
    2086:	f640 0002 	movw	r0, #2050	; 0x802
    208a:	f3af 8000 	nop.w
    208e:	e7e6      	b.n	205e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2090:	4805      	ldr	r0, [pc, #20]	; (20a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2092:	2800      	cmp	r0, #0
    2094:	bf18      	it	ne
    2096:	f3af 8000 	nopne.w
    209a:	b662      	cpsie	i
    209c:	e7e6      	b.n	206c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    209e:	0000      	.short	0x0000
    20a0:	20000d34 	.word	0x20000d34
	...

000020b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    20b0:	b510      	push	{r4, lr}
    20b2:	2820      	cmp	r0, #32
    20b4:	d211      	bcs.n	20da <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    20b6:	490e      	ldr	r1, [pc, #56]	; (20f0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    20b8:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    20bc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    20c0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    20c4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    20c8:	b13b      	cbz	r3, 20da <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    20ca:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    20ce:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    20d2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    20d6:	2a01      	cmp	r2, #1
    20d8:	d001      	beq.n	20de <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    20da:	2000      	movs	r0, #0
    20dc:	bd10      	pop	{r4, pc}
    20de:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    20e2:	4601      	mov	r1, r0
    20e4:	2000      	movs	r0, #0
    20e6:	f7fe ff89 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
    20ea:	2001      	movs	r0, #1
    20ec:	bd10      	pop	{r4, pc}
    20ee:	0000      	.short	0x0000
    20f0:	20000d34 	.word	0x20000d34

000020f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    20f4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    20f8:	4e7e      	ldr	r6, [pc, #504]	; (22f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    20fa:	4680      	mov	r8, r0
    20fc:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2100:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2104:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2108:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    210c:	2800      	cmp	r0, #0
    210e:	d065      	beq.n	21dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2110:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2114:	4d78      	ldr	r5, [pc, #480]	; (22f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    2116:	b125      	cbz	r5, 2122 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2118:	2100      	movs	r1, #0
    211a:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    211e:	f3af 8000 	nop.w
    2122:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2126:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    212a:	2801      	cmp	r0, #1
    212c:	d018      	beq.n	2160 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    212e:	b2c0      	uxtb	r0, r0
    2130:	2804      	cmp	r0, #4
    2132:	bf1c      	itt	ne
    2134:	2805      	cmpne	r0, #5
    2136:	2806      	cmpne	r0, #6
    2138:	d055      	beq.n	21e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    213a:	b12d      	cbz	r5, 2148 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    213c:	f04f 0100 	mov.w	r1, #0
    2140:	f640 30ac 	movw	r0, #2988	; 0xbac
    2144:	f3af 8000 	nop.w
    2148:	f001 fba6 	bl	3898 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    214c:	b125      	cbz	r5, 2158 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    214e:	2100      	movs	r1, #0
    2150:	f44f 603b 	mov.w	r0, #2992	; 0xbb0
    2154:	f3af 8000 	nop.w
    2158:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    215c:	2801      	cmp	r0, #1
    215e:	d1e6      	bne.n	212e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2160:	2401      	movs	r4, #1
    2162:	b125      	cbz	r5, 216e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2164:	2100      	movs	r1, #0
    2166:	f640 30b7 	movw	r0, #2999	; 0xbb7
    216a:	f3af 8000 	nop.w
    216e:	b3a4      	cbz	r4, 21da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    2170:	2000      	movs	r0, #0
    2172:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2176:	b125      	cbz	r5, 2182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    2178:	2100      	movs	r1, #0
    217a:	f640 30bc 	movw	r0, #3004	; 0xbbc
    217e:	f3af 8000 	nop.w
    2182:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2186:	2001      	movs	r0, #1
    2188:	ea20 090b 	bic.w	r9, r0, fp
    218c:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2190:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2194:	2240      	movs	r2, #64	; 0x40
    2196:	f001 fbaf 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    219a:	b125      	cbz	r5, 21a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    219c:	2100      	movs	r1, #0
    219e:	f240 50a5 	movw	r0, #1445	; 0x5a5
    21a2:	f3af 8000 	nop.w
    21a6:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    21aa:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    21ae:	6a00      	ldr	r0, [r0, #32]
    21b0:	f8ca 0020 	str.w	r0, [sl, #32]
    21b4:	b125      	cbz	r5, 21c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    21b6:	2100      	movs	r1, #0
    21b8:	f240 50a9 	movw	r0, #1449	; 0x5a9
    21bc:	f3af 8000 	nop.w
    21c0:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    21c4:	b1e0      	cbz	r0, 2200 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    21c6:	2d00      	cmp	r5, #0
    21c8:	bf1c      	itt	ne
    21ca:	2100      	movne	r1, #0
    21cc:	f640 30c2 	movwne	r0, #3010	; 0xbc2
    21d0:	d0c7      	beq.n	2162 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    21d2:	bf00      	nop
    21d4:	f3af 8000 	nop.w
    21d8:	e7c3      	b.n	2162 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    21da:	e00a      	b.n	21f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    21dc:	f640 3197 	movw	r1, #2967	; 0xb97
    21e0:	2070      	movs	r0, #112	; 0x70
    21e2:	f001 fa33 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21e6:	464a      	mov	r2, r9
    21e8:	4641      	mov	r1, r8
    21ea:	2001      	movs	r0, #1
    21ec:	f7fe ff06 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
    21f0:	e7ac      	b.n	214c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    21f2:	4842      	ldr	r0, [pc, #264]	; (22fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    21f4:	2800      	cmp	r0, #0
    21f6:	bf18      	it	ne
    21f8:	f3af 8000 	nopne.w
    21fc:	b662      	cpsie	i
    21fe:	e7b7      	b.n	2170 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2200:	b125      	cbz	r5, 220c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    2202:	2100      	movs	r1, #0
    2204:	f640 30c6 	movw	r0, #3014	; 0xbc6
    2208:	f3af 8000 	nop.w
    220c:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2210:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2214:	4640      	mov	r0, r8
    2216:	461c      	mov	r4, r3
    2218:	f04f 0b20 	mov.w	fp, #32
    221c:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2220:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2224:	e004      	b.n	2230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    2226:	46a3      	mov	fp, r4
    2228:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    222c:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2230:	4284      	cmp	r4, r0
    2232:	d002      	beq.n	223a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2234:	2c20      	cmp	r4, #32
    2236:	d02b      	beq.n	2290 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2238:	e7f5      	b.n	2226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    223a:	2c20      	cmp	r4, #32
    223c:	d028      	beq.n	2290 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    223e:	42a3      	cmp	r3, r4
    2240:	d104      	bne.n	224c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    2242:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2246:	7840      	ldrb	r0, [r0, #1]
    2248:	7008      	strb	r0, [r1, #0]
    224a:	e005      	b.n	2258 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    224c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2250:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2254:	7840      	ldrb	r0, [r0, #1]
    2256:	7048      	strb	r0, [r1, #1]
    2258:	f1ba 0f00 	cmp.w	sl, #0
    225c:	d011      	beq.n	2282 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    225e:	b125      	cbz	r5, 226a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    2260:	2100      	movs	r1, #0
    2262:	f240 5022 	movw	r0, #1314	; 0x522
    2266:	f3af 8000 	nop.w
    226a:	f89a 0000 	ldrb.w	r0, [sl]
    226e:	42a0      	cmp	r0, r4
    2270:	d107      	bne.n	2282 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2272:	b125      	cbz	r5, 227e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    2274:	2100      	movs	r1, #0
    2276:	f240 5025 	movw	r0, #1317	; 0x525
    227a:	f3af 8000 	nop.w
    227e:	f88a b000 	strb.w	fp, [sl]
    2282:	b15d      	cbz	r5, 229c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2284:	2100      	movs	r1, #0
    2286:	f240 502a 	movw	r0, #1322	; 0x52a
    228a:	f3af 8000 	nop.w
    228e:	e000      	b.n	2292 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2290:	b125      	cbz	r5, 229c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2292:	2100      	movs	r1, #0
    2294:	f640 30ca 	movw	r0, #3018	; 0xbca
    2298:	f3af 8000 	nop.w
    229c:	4818      	ldr	r0, [pc, #96]	; (2300 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    229e:	2800      	cmp	r0, #0
    22a0:	bf18      	it	ne
    22a2:	f3af 8000 	nopne.w
    22a6:	f3ef 8410 	mrs	r4, PRIMASK
    22aa:	b672      	cpsid	i
    22ac:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22b0:	b138      	cbz	r0, 22c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    22b2:	2d00      	cmp	r5, #0
    22b4:	bf1c      	itt	ne
    22b6:	2100      	movne	r1, #0
    22b8:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    22bc:	f43f af51 	beq.w	2162 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22c0:	e788      	b.n	21d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    22c2:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    22c6:	2001      	movs	r0, #1
    22c8:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    22cc:	b154      	cbz	r4, 22e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    22ce:	2d00      	cmp	r5, #0
    22d0:	bf08      	it	eq
    22d2:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    22d6:	2100      	movs	r1, #0
    22d8:	f640 30dd 	movw	r0, #3037	; 0xbdd
    22dc:	f3af 8000 	nop.w
    22e0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    22e4:	4805      	ldr	r0, [pc, #20]	; (22fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    22e6:	2800      	cmp	r0, #0
    22e8:	bf18      	it	ne
    22ea:	f3af 8000 	nopne.w
    22ee:	b662      	cpsie	i
    22f0:	e7ed      	b.n	22ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    22f2:	0000      	.short	0x0000
    22f4:	20000d34 	.word	0x20000d34
	...

00002304 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2304:	b570      	push	{r4, r5, r6, lr}
    2306:	4605      	mov	r5, r0
    2308:	f001 f92a 	bl	3560 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    230c:	480d      	ldr	r0, [pc, #52]	; (2344 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    230e:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2312:	2400      	movs	r4, #0
    2314:	3880      	subs	r0, #128	; 0x80
    2316:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    231a:	bf00      	nop
    231c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2320:	b129      	cbz	r1, 232e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2322:	1c61      	adds	r1, r4, #1
    2324:	b2cc      	uxtb	r4, r1
    2326:	2c20      	cmp	r4, #32
    2328:	d3f8      	bcc.n	231c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    232a:	2020      	movs	r0, #32
    232c:	bd70      	pop	{r4, r5, r6, pc}
    232e:	4906      	ldr	r1, [pc, #24]	; (2348 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    2330:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2334:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
    2338:	4621      	mov	r1, r4
    233a:	2001      	movs	r0, #1
    233c:	f7fe fe5e 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
    2340:	4620      	mov	r0, r4
    2342:	bd70      	pop	{r4, r5, r6, pc}
    2344:	20000d34 	.word	0x20000d34
    2348:	20000a34 	.word	0x20000a34

0000234c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    234c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2350:	f000 fa90 	bl	2874 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2354:	4605      	mov	r5, r0
    2356:	f000 fd37 	bl	2dc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    235a:	4c48      	ldr	r4, [pc, #288]	; (247c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x130>)
    235c:	68a0      	ldr	r0, [r4, #8]
    235e:	f1b0 3fff 	cmp.w	r0, #4294967295
    2362:	bf1c      	itt	ne
    2364:	f04f 30ff 	movne.w	r0, #4294967295
    2368:	60a0      	strne	r0, [r4, #8]
    236a:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    236e:	b9a8      	cbnz	r0, 239c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x50>
    2370:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2374:	1a08      	subs	r0, r1, r0
    2376:	0200      	lsls	r0, r0, #8
    2378:	17c1      	asrs	r1, r0, #31
    237a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    237e:	1200      	asrs	r0, r0, #8
    2380:	f44f 710c 	mov.w	r1, #560	; 0x230
    2384:	f00c fd43 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2388:	6921      	ldr	r1, [r4, #16]
    238a:	4408      	add	r0, r1
    238c:	1a28      	subs	r0, r5, r0
    238e:	0200      	lsls	r0, r0, #8
    2390:	17c1      	asrs	r1, r0, #31
    2392:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2396:	1200      	asrs	r0, r0, #8
    2398:	0fc0      	lsrs	r0, r0, #31
    239a:	d00b      	beq.n	23b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x68>
    239c:	7e60      	ldrb	r0, [r4, #25]
    239e:	b1c8      	cbz	r0, 23d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    23a0:	f000 fb74 	bl	2a8c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    23a4:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    23a8:	b1d0      	cbz	r0, 23e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    23aa:	f44f 6189 	mov.w	r1, #1096	; 0x448
    23ae:	2070      	movs	r0, #112	; 0x70
    23b0:	f001 f94c 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23b4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    23b8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    23bc:	4a30      	ldr	r2, [pc, #192]	; (2480 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x134>)
    23be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    23c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    23c6:	2108      	movs	r1, #8
    23c8:	4790      	blx	r2
    23ca:	f240 4137 	movw	r1, #1079	; 0x437
    23ce:	2070      	movs	r0, #112	; 0x70
    23d0:	f001 f93c 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23d4:	1ce8      	adds	r0, r5, #3
    23d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23da:	f000 fa51 	bl	2880 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    23de:	e7e1      	b.n	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    23e0:	2601      	movs	r6, #1
    23e2:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    23e6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    23ea:	2820      	cmp	r0, #32
    23ec:	d025      	beq.n	243a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xee>
    23ee:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    23f2:	2020      	movs	r0, #32
    23f4:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    23f8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    23fc:	2500      	movs	r5, #0
    23fe:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    2402:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    2406:	481f      	ldr	r0, [pc, #124]	; (2484 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x138>)
    2408:	6025      	str	r5, [r4, #0]
    240a:	7800      	ldrb	r0, [r0, #0]
    240c:	2802      	cmp	r0, #2
    240e:	bf16      	itet	ne
    2410:	2803      	cmpne	r0, #3
    2412:	2001      	moveq	r0, #1
    2414:	2000      	movne	r0, #0
    2416:	7720      	strb	r0, [r4, #28]
    2418:	f894 802e 	ldrb.w	r8, [r4, #46]	; 0x2e
    241c:	f04f 0001 	mov.w	r0, #1
    2420:	4641      	mov	r1, r8
    2422:	f7fe fe1b 	bl	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    2426:	2800      	cmp	r0, #0
    2428:	d0f8      	beq.n	241c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xd0>
    242a:	4817      	ldr	r0, [pc, #92]	; (2488 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13c>)
    242c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2430:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    2434:	2802      	cmp	r0, #2
    2436:	d005      	beq.n	2444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf8>
    2438:	e009      	b.n	244e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x102>
    243a:	f240 414b 	movw	r1, #1099	; 0x44b
    243e:	2070      	movs	r0, #112	; 0x70
    2440:	f001 f904 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2444:	4642      	mov	r2, r8
    2446:	4639      	mov	r1, r7
    2448:	2006      	movs	r0, #6
    244a:	f7fe fdd7 	bl	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
    244e:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
    2452:	eb04 0088 	add.w	r0, r4, r8, lsl #2
    2456:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    245a:	2820      	cmp	r0, #32
    245c:	d003      	beq.n	2466 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x11a>
    245e:	480b      	ldr	r0, [pc, #44]	; (248c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x140>)
    2460:	7840      	ldrb	r0, [r0, #1]
    2462:	f001 f9c3 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2466:	7f20      	ldrb	r0, [r4, #28]
    2468:	2800      	cmp	r0, #0
    246a:	bf08      	it	eq
    246c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2470:	f000 fcf4 	bl	2e5c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2474:	7725      	strb	r5, [r4, #28]
    2476:	7765      	strb	r5, [r4, #29]
    2478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    247c:	20000d34 	.word	0x20000d34
    2480:	20000a34 	.word	0x20000a34
    2484:	20000012 	.word	0x20000012
    2488:	20000cb4 	.word	0x20000cb4
    248c:	20000010 	.word	0x20000010

00002490 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2490:	b530      	push	{r4, r5, lr}
    2492:	4c30      	ldr	r4, [pc, #192]	; (2554 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    2494:	b083      	sub	sp, #12
    2496:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    249a:	2920      	cmp	r1, #32
    249c:	d008      	beq.n	24b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    249e:	68a1      	ldr	r1, [r4, #8]
    24a0:	f1b1 3fff 	cmp.w	r1, #4294967295
    24a4:	d009      	beq.n	24ba <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    24a6:	f640 21be 	movw	r1, #2750	; 0xabe
    24aa:	2070      	movs	r0, #112	; 0x70
    24ac:	f001 f8ce 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24b0:	f640 21bd 	movw	r1, #2749	; 0xabd
    24b4:	2070      	movs	r0, #112	; 0x70
    24b6:	f001 f8c9 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24ba:	6861      	ldr	r1, [r4, #4]
    24bc:	f8df c098 	ldr.w	ip, [pc, #152]	; 2558 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    24c0:	180b      	adds	r3, r1, r0
    24c2:	2200      	movs	r2, #0
    24c4:	ebbc 0101 	subs.w	r1, ip, r1
    24c8:	eb72 0102 	sbcs.w	r1, r2, r2
    24cc:	d204      	bcs.n	24d8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    24ce:	f240 51e1 	movw	r1, #1505	; 0x5e1
    24d2:	2070      	movs	r0, #112	; 0x70
    24d4:	f001 f8ba 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24d8:	4920      	ldr	r1, [pc, #128]	; (255c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    24da:	4288      	cmp	r0, r1
    24dc:	dd04      	ble.n	24e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    24de:	f240 51e2 	movw	r1, #1506	; 0x5e2
    24e2:	2070      	movs	r0, #112	; 0x70
    24e4:	f001 f8b2 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24e8:	491d      	ldr	r1, [pc, #116]	; (2560 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    24ea:	4288      	cmp	r0, r1
    24ec:	da04      	bge.n	24f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    24ee:	f240 51e3 	movw	r1, #1507	; 0x5e3
    24f2:	2070      	movs	r0, #112	; 0x70
    24f4:	f001 f8aa 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24f8:	481a      	ldr	r0, [pc, #104]	; (2564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    24fa:	4283      	cmp	r3, r0
    24fc:	bfa8      	it	ge
    24fe:	481a      	ldrge	r0, [pc, #104]	; (2568 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2500:	da03      	bge.n	250a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    2502:	2b00      	cmp	r3, #0
    2504:	bfb8      	it	lt
    2506:	4817      	ldrlt	r0, [pc, #92]	; (2564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2508:	da00      	bge.n	250c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    250a:	181b      	adds	r3, r3, r0
    250c:	4618      	mov	r0, r3
    250e:	aa01      	add	r2, sp, #4
    2510:	4669      	mov	r1, sp
    2512:	f000 fd0d 	bl	2f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2516:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    251a:	280f      	cmp	r0, #15
    251c:	bfcc      	ite	gt
    251e:	2001      	movgt	r0, #1
    2520:	2000      	movle	r0, #0
    2522:	9900      	ldr	r1, [sp, #0]
    2524:	4408      	add	r0, r1
    2526:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    252a:	60a1      	str	r1, [r4, #8]
    252c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2530:	2800      	cmp	r0, #0
    2532:	bf04      	itt	eq
    2534:	b003      	addeq	sp, #12
    2536:	bd30      	popeq	{r4, r5, pc}
    2538:	2301      	movs	r3, #1
    253a:	2203      	movs	r2, #3
    253c:	2005      	movs	r0, #5
    253e:	f000 fb1f 	bl	2b80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2542:	2800      	cmp	r0, #0
    2544:	bf1c      	itt	ne
    2546:	b003      	addne	sp, #12
    2548:	bd30      	popne	{r4, r5, pc}
    254a:	f640 21c6 	movw	r1, #2758	; 0xac6
    254e:	2070      	movs	r0, #112	; 0x70
    2550:	f001 f87c 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2554:	20000d34 	.word	0x20000d34
    2558:	1e847fff 	.word	0x1e847fff
    255c:	07a12000 	.word	0x07a12000
    2560:	f85ee000 	.word	0xf85ee000
    2564:	1e848000 	.word	0x1e848000
    2568:	e17b8000 	.word	0xe17b8000

0000256c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    256c:	4a1e      	ldr	r2, [pc, #120]	; (25e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    256e:	b510      	push	{r4, lr}
    2570:	2120      	movs	r1, #32
    2572:	f882 1020 	strb.w	r1, [r2, #32]
    2576:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
    257a:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    257e:	2000      	movs	r0, #0
    2580:	f882 0023 	strb.w	r0, [r2, #35]	; 0x23
    2584:	f882 002e 	strb.w	r0, [r2, #46]	; 0x2e
    2588:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
    258c:	1e43      	subs	r3, r0, #1
    258e:	6093      	str	r3, [r2, #8]
    2590:	6010      	str	r0, [r2, #0]
    2592:	f882 0028 	strb.w	r0, [r2, #40]	; 0x28
    2596:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
    259a:	7710      	strb	r0, [r2, #28]
    259c:	7750      	strb	r0, [r2, #29]
    259e:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    25a2:	f882 002c 	strb.w	r0, [r2, #44]	; 0x2c
    25a6:	4911      	ldr	r1, [pc, #68]	; (25ec <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    25a8:	f882 002d 	strb.w	r0, [r2, #45]	; 0x2d
    25ac:	f882 0031 	strb.w	r0, [r2, #49]	; 0x31
    25b0:	7008      	strb	r0, [r1, #0]
    25b2:	7048      	strb	r0, [r1, #1]
    25b4:	8048      	strh	r0, [r1, #2]
    25b6:	f1a2 0182 	sub.w	r1, r2, #130	; 0x82
    25ba:	2310      	movs	r3, #16
    25bc:	7088      	strb	r0, [r1, #2]
    25be:	f801 0f04 	strb.w	r0, [r1, #4]!
    25c2:	1e5b      	subs	r3, r3, #1
    25c4:	d1fa      	bne.n	25bc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x50>
    25c6:	2001      	movs	r0, #1
    25c8:	4c09      	ldr	r4, [pc, #36]	; (25f0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    25ca:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
    25ce:	20ff      	movs	r0, #255	; 0xff
    25d0:	7020      	strb	r0, [r4, #0]
    25d2:	4808      	ldr	r0, [pc, #32]	; (25f4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    25d4:	f001 f8ec 	bl	37b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    25d8:	7060      	strb	r0, [r4, #1]
    25da:	f001 f947 	bl	386c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    25de:	60a0      	str	r0, [r4, #8]
    25e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    25e4:	f000 bc68 	b.w	2eb8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    25e8:	20000d34 	.word	0x20000d34
    25ec:	20000012 	.word	0x20000012
    25f0:	20000010 	.word	0x20000010
    25f4:	00000eb5 	.word	0x00000eb5

000025f8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    25f8:	b570      	push	{r4, r5, r6, lr}
    25fa:	4605      	mov	r5, r0
    25fc:	2001      	movs	r0, #1
    25fe:	fa00 f405 	lsl.w	r4, r0, r5
    2602:	460e      	mov	r6, r1
    2604:	2a00      	cmp	r2, #0
    2606:	bf08      	it	eq
    2608:	4808      	ldreq	r0, [pc, #32]	; (262c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    260a:	d00c      	beq.n	2626 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    260c:	2000      	movs	r0, #0
    260e:	f000 fc39 	bl	2e84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2612:	00e9      	lsls	r1, r5, #3
    2614:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2618:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    261c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2620:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2624:	4802      	ldr	r0, [pc, #8]	; (2630 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2626:	6004      	str	r4, [r0, #0]
    2628:	bd70      	pop	{r4, r5, r6, pc}
    262a:	0000      	.short	0x0000
    262c:	4001f508 	.word	0x4001f508
    2630:	4001f504 	.word	0x4001f504

00002634 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2634:	b570      	push	{r4, r5, r6, lr}
    2636:	4604      	mov	r4, r0
    2638:	4615      	mov	r5, r2
    263a:	4608      	mov	r0, r1
    263c:	f00c fbba 	bl	edb4 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2640:	4a0f      	ldr	r2, [pc, #60]	; (2680 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    2642:	1b01      	subs	r1, r0, r4
    2644:	f102 0c01 	add.w	ip, r2, #1
    2648:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    264c:	bf24      	itt	cs
    264e:	1a23      	subcs	r3, r4, r0
    2650:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    2654:	d30b      	bcc.n	266e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2656:	428a      	cmp	r2, r1
    2658:	d203      	bcs.n	2662 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    265a:	1b11      	subs	r1, r2, r4
    265c:	4408      	add	r0, r1
    265e:	1c41      	adds	r1, r0, #1
    2660:	e005      	b.n	266e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2662:	429a      	cmp	r2, r3
    2664:	d207      	bcs.n	2676 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    2666:	1a10      	subs	r0, r2, r0
    2668:	4420      	add	r0, r4
    266a:	1c40      	adds	r0, r0, #1
    266c:	4241      	negs	r1, r0
    266e:	f101 000f 	add.w	r0, r1, #15
    2672:	1a28      	subs	r0, r5, r0
    2674:	bd70      	pop	{r4, r5, r6, pc}
    2676:	f640 21e1 	movw	r1, #2785	; 0xae1
    267a:	2070      	movs	r0, #112	; 0x70
    267c:	f000 ffe6 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2680:	1e847fff 	.word	0x1e847fff

00002684 <MPSL_IRQ_RTC0_Handler>:
    2684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2688:	4c24      	ldr	r4, [pc, #144]	; (271c <MPSL_IRQ_RTC0_Handler+0x98>)
    268a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    268e:	f04f 0500 	mov.w	r5, #0
    2692:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2696:	f44f 6600 	mov.w	r6, #2048	; 0x800
    269a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    269e:	bf1c      	itt	ne
    26a0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    26a4:	2800      	cmpne	r0, #0
    26a6:	d00b      	beq.n	26c0 <MPSL_IRQ_RTC0_Handler+0x3c>
    26a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    26ac:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26b0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    26b4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26b8:	f04f 0004 	mov.w	r0, #4
    26bc:	f7fe ff02 	bl	14c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26c0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26c4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    26c8:	bf1c      	itt	ne
    26ca:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    26ce:	2800      	cmpne	r0, #0
    26d0:	d00b      	beq.n	26ea <MPSL_IRQ_RTC0_Handler+0x66>
    26d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    26d6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26da:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    26de:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26e2:	f04f 0005 	mov.w	r0, #5
    26e6:	f7fe feed 	bl	14c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26ea:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26ee:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    26f2:	bf1a      	itte	ne
    26f4:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    26f8:	2800      	cmpne	r0, #0
    26fa:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    26fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2702:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2706:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    270a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    270e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2712:	f04f 0006 	mov.w	r0, #6
    2716:	f7fe bed5 	b.w	14c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    271a:	0000      	.short	0x0000
    271c:	4000b000 	.word	0x4000b000

00002720 <MPSL_IRQ_TIMER0_Handler>:
    2720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2724:	4d3a      	ldr	r5, [pc, #232]	; (2810 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2726:	7828      	ldrb	r0, [r5, #0]
    2728:	2804      	cmp	r0, #4
    272a:	d06c      	beq.n	2806 <MPSL_IRQ_TIMER0_Handler+0xe6>
    272c:	1ce8      	adds	r0, r5, #3
    272e:	2201      	movs	r2, #1
    2730:	7801      	ldrb	r1, [r0, #0]
    2732:	b159      	cbz	r1, 274c <MPSL_IRQ_TIMER0_Handler+0x2c>
    2734:	2901      	cmp	r1, #1
    2736:	bf08      	it	eq
    2738:	706a      	strbeq	r2, [r5, #1]
    273a:	d002      	beq.n	2742 <MPSL_IRQ_TIMER0_Handler+0x22>
    273c:	7869      	ldrb	r1, [r5, #1]
    273e:	2900      	cmp	r1, #0
    2740:	d05c      	beq.n	27fc <MPSL_IRQ_TIMER0_Handler+0xdc>
    2742:	2102      	movs	r1, #2
    2744:	7001      	strb	r1, [r0, #0]
    2746:	7840      	ldrb	r0, [r0, #1]
    2748:	f000 fae2 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    274c:	4c31      	ldr	r4, [pc, #196]	; (2814 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    274e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2752:	f04f 0800 	mov.w	r8, #0
    2756:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    275a:	f44f 7680 	mov.w	r6, #256	; 0x100
    275e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2762:	bf1c      	itt	ne
    2764:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2768:	2800      	cmpne	r0, #0
    276a:	d008      	beq.n	277e <MPSL_IRQ_TIMER0_Handler+0x5e>
    276c:	f04f 0003 	mov.w	r0, #3
    2770:	f000 face 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2774:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2778:	2003      	movs	r0, #3
    277a:	f7fe fea3 	bl	14c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    277e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2782:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2786:	bf1c      	itt	ne
    2788:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    278c:	2800      	cmpne	r0, #0
    278e:	d008      	beq.n	27a2 <MPSL_IRQ_TIMER0_Handler+0x82>
    2790:	f04f 0002 	mov.w	r0, #2
    2794:	f000 fabc 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2798:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    279c:	2002      	movs	r0, #2
    279e:	f7fe fe91 	bl	14c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27a2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27a6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    27aa:	bf1c      	itt	ne
    27ac:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    27b0:	2800      	cmpne	r0, #0
    27b2:	d008      	beq.n	27c6 <MPSL_IRQ_TIMER0_Handler+0xa6>
    27b4:	f04f 0001 	mov.w	r0, #1
    27b8:	f000 faaa 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27bc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27c0:	2001      	movs	r0, #1
    27c2:	f7fe fe7f 	bl	14c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27ca:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27ce:	bf1a      	itte	ne
    27d0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27d4:	2800      	cmpne	r0, #0
    27d6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27da:	f04f 0000 	mov.w	r0, #0
    27de:	f000 fa97 	bl	2d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27e2:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27e6:	2004      	movs	r0, #4
    27e8:	7028      	strb	r0, [r5, #0]
    27ea:	f8c5 8008 	str.w	r8, [r5, #8]
    27ee:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    27f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    27f6:	2000      	movs	r0, #0
    27f8:	f7fe be64 	b.w	14c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27fc:	f240 3172 	movw	r1, #882	; 0x372
    2800:	206c      	movs	r0, #108	; 0x6c
    2802:	f000 ff23 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    280a:	2007      	movs	r0, #7
    280c:	f7fe be5a 	b.w	14c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2810:	2000001c 	.word	0x2000001c
    2814:	40008000 	.word	0x40008000
    2818:	2201      	movs	r2, #1
    281a:	0213      	lsls	r3, r2, #8
    281c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2820:	2000      	movs	r0, #0
    2822:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    2826:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    282a:	f3bf 8f4f 	dsb	sy
    282e:	f3bf 8f6f 	isb	sy
    2832:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    2836:	490c      	ldr	r1, [pc, #48]	; (2868 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2838:	604a      	str	r2, [r1, #4]
    283a:	1e43      	subs	r3, r0, #1
    283c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2840:	4b0a      	ldr	r3, [pc, #40]	; (286c <MPSL_IRQ_TIMER0_Handler+0x14c>)
    2842:	6018      	str	r0, [r3, #0]
    2844:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2848:	1d1b      	adds	r3, r3, #4
    284a:	6018      	str	r0, [r3, #0]
    284c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2850:	1d1b      	adds	r3, r3, #4
    2852:	6018      	str	r0, [r3, #0]
    2854:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2858:	1d1b      	adds	r3, r3, #4
    285a:	6018      	str	r0, [r3, #0]
    285c:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2860:	610a      	str	r2, [r1, #16]
    2862:	4903      	ldr	r1, [pc, #12]	; (2870 <MPSL_IRQ_TIMER0_Handler+0x150>)
    2864:	7048      	strb	r0, [r1, #1]
    2866:	4770      	bx	lr
    2868:	40008000 	.word	0x40008000
    286c:	40008540 	.word	0x40008540
    2870:	2000001c 	.word	0x2000001c

00002874 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2874:	4801      	ldr	r0, [pc, #4]	; (287c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2876:	6800      	ldr	r0, [r0, #0]
    2878:	4770      	bx	lr
    287a:	0000      	.short	0x0000
    287c:	4000b504 	.word	0x4000b504

00002880 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2880:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2884:	4e41      	ldr	r6, [pc, #260]	; (298c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2886:	4604      	mov	r4, r0
    2888:	1ef7      	subs	r7, r6, #3
    288a:	f896 c000 	ldrb.w	ip, [r6]
    288e:	68f8      	ldr	r0, [r7, #12]
    2890:	f1bc 0f01 	cmp.w	ip, #1
    2894:	bf04      	itt	eq
    2896:	42a0      	cmpeq	r0, r4
    2898:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    289c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    28a0:	4a3b      	ldr	r2, [pc, #236]	; (2990 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    28a2:	6011      	str	r1, [r2, #0]
    28a4:	493b      	ldr	r1, [pc, #236]	; (2994 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    28a6:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    28aa:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    28ae:	4a3a      	ldr	r2, [pc, #232]	; (2998 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    28b0:	f04f 0500 	mov.w	r5, #0
    28b4:	f1bc 0f00 	cmp.w	ip, #0
    28b8:	d057      	beq.n	296a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    28ba:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    28be:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    28c2:	6015      	str	r5, [r2, #0]
    28c4:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    28c8:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    28cc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    28d0:	f04f 0801 	mov.w	r8, #1
    28d4:	2a00      	cmp	r2, #0
    28d6:	bf04      	itt	eq
    28d8:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    28dc:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    28e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    28e4:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    28e8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    28ec:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    28f0:	4a2a      	ldr	r2, [pc, #168]	; (299c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    28f2:	f8d2 a000 	ldr.w	sl, [r2]
    28f6:	eba4 0a0a 	sub.w	sl, r4, sl
    28fa:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    28fe:	f1bb 0f02 	cmp.w	fp, #2
    2902:	d33c      	bcc.n	297e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2904:	f04f 0a02 	mov.w	sl, #2
    2908:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    290c:	d237      	bcs.n	297e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    290e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2912:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2916:	f1bc 0f00 	cmp.w	ip, #0
    291a:	d005      	beq.n	2928 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    291c:	6811      	ldr	r1, [r2, #0]
    291e:	1a41      	subs	r1, r0, r1
    2920:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2924:	2902      	cmp	r1, #2
    2926:	d3f9      	bcc.n	291c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2928:	f8c7 8008 	str.w	r8, [r7, #8]
    292c:	703d      	strb	r5, [r7, #0]
    292e:	f7ff ff73 	bl	2818 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2932:	481b      	ldr	r0, [pc, #108]	; (29a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2934:	6005      	str	r5, [r0, #0]
    2936:	1d00      	adds	r0, r0, #4
    2938:	f8c0 a000 	str.w	sl, [r0]
    293c:	4919      	ldr	r1, [pc, #100]	; (29a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    293e:	2004      	movs	r0, #4
    2940:	6008      	str	r0, [r1, #0]
    2942:	4919      	ldr	r1, [pc, #100]	; (29a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2944:	f8c1 800c 	str.w	r8, [r1, #12]
    2948:	68ba      	ldr	r2, [r7, #8]
    294a:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    294e:	0181      	lsls	r1, r0, #6
    2950:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2954:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2958:	4a14      	ldr	r2, [pc, #80]	; (29ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    295a:	0741      	lsls	r1, r0, #29
    295c:	6011      	str	r1, [r2, #0]
    295e:	60fc      	str	r4, [r7, #12]
    2960:	7070      	strb	r0, [r6, #1]
    2962:	f886 8000 	strb.w	r8, [r6]
    2966:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    296a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    296e:	4b10      	ldr	r3, [pc, #64]	; (29b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2970:	601d      	str	r5, [r3, #0]
    2972:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2976:	6015      	str	r5, [r2, #0]
    2978:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    297c:	e7a4      	b.n	28c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    297e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2982:	f240 11a5 	movw	r1, #421	; 0x1a5
    2986:	206c      	movs	r0, #108	; 0x6c
    2988:	f000 fe60 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    298c:	2000001f 	.word	0x2000001f
    2990:	4001f508 	.word	0x4001f508
    2994:	4000b000 	.word	0x4000b000
    2998:	4000b544 	.word	0x4000b544
    299c:	4000b504 	.word	0x4000b504
    29a0:	40008504 	.word	0x40008504
    29a4:	40008510 	.word	0x40008510
    29a8:	40008000 	.word	0x40008000
    29ac:	4001f504 	.word	0x4001f504
    29b0:	4000b540 	.word	0x4000b540

000029b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    29b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29b8:	4c2b      	ldr	r4, [pc, #172]	; (2a68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    29ba:	68e1      	ldr	r1, [r4, #12]
    29bc:	4281      	cmp	r1, r0
    29be:	bf14      	ite	ne
    29c0:	2201      	movne	r2, #1
    29c2:	2200      	moveq	r2, #0
    29c4:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2a6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    29c8:	f89c 7000 	ldrb.w	r7, [ip]
    29cc:	2f02      	cmp	r7, #2
    29ce:	d002      	beq.n	29d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    29d0:	2a00      	cmp	r2, #0
    29d2:	d038      	beq.n	2a46 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    29d4:	e003      	b.n	29de <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    29d6:	2a00      	cmp	r2, #0
    29d8:	bf08      	it	eq
    29da:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29de:	7862      	ldrb	r2, [r4, #1]
    29e0:	b382      	cbz	r2, 2a44 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    29e2:	4b23      	ldr	r3, [pc, #140]	; (2a70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    29e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29e8:	601a      	str	r2, [r3, #0]
    29ea:	4b22      	ldr	r3, [pc, #136]	; (2a74 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    29ec:	1395      	asrs	r5, r2, #14
    29ee:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    29f2:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    29f6:	2600      	movs	r6, #0
    29f8:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    29fc:	4a1e      	ldr	r2, [pc, #120]	; (2a78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    29fe:	f8d2 8000 	ldr.w	r8, [r2]
    2a02:	eba0 0808 	sub.w	r8, r0, r8
    2a06:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2a0a:	f1b8 0f02 	cmp.w	r8, #2
    2a0e:	d324      	bcc.n	2a5a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a10:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2a14:	d221      	bcs.n	2a5a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a16:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a1a:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2a1e:	b12f      	cbz	r7, 2a2c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2a20:	6813      	ldr	r3, [r2, #0]
    2a22:	1acb      	subs	r3, r1, r3
    2a24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a28:	2b02      	cmp	r3, #2
    2a2a:	d3f9      	bcc.n	2a20 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2a2c:	4b13      	ldr	r3, [pc, #76]	; (2a7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2a2e:	2102      	movs	r1, #2
    2a30:	074a      	lsls	r2, r1, #29
    2a32:	601a      	str	r2, [r3, #0]
    2a34:	60e0      	str	r0, [r4, #12]
    2a36:	2004      	movs	r0, #4
    2a38:	f88c 0001 	strb.w	r0, [ip, #1]
    2a3c:	f88c 1000 	strb.w	r1, [ip]
    2a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a44:	e004      	b.n	2a50 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2a46:	f240 11b3 	movw	r1, #435	; 0x1b3
    2a4a:	206c      	movs	r0, #108	; 0x6c
    2a4c:	f000 fdfe 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a50:	f240 11b7 	movw	r1, #439	; 0x1b7
    2a54:	206c      	movs	r0, #108	; 0x6c
    2a56:	f000 fdf9 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a5a:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2a5e:	f240 11c3 	movw	r1, #451	; 0x1c3
    2a62:	206c      	movs	r0, #108	; 0x6c
    2a64:	f000 fdf2 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a68:	2000001c 	.word	0x2000001c
    2a6c:	2000001f 	.word	0x2000001f
    2a70:	4001f508 	.word	0x4001f508
    2a74:	4000b000 	.word	0x4000b000
    2a78:	4000b504 	.word	0x4000b504
    2a7c:	4001f504 	.word	0x4001f504

00002a80 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2a80:	4801      	ldr	r0, [pc, #4]	; (2a88 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2a82:	68c0      	ldr	r0, [r0, #12]
    2a84:	4770      	bx	lr
    2a86:	0000      	.short	0x0000
    2a88:	2000001c 	.word	0x2000001c

00002a8c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a90:	4833      	ldr	r0, [pc, #204]	; (2b60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2a92:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2a96:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2a9a:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2b64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2a9e:	4a32      	ldr	r2, [pc, #200]	; (2b68 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2aa0:	2100      	movs	r1, #0
    2aa2:	f89c 3000 	ldrb.w	r3, [ip]
    2aa6:	b163      	cbz	r3, 2ac2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2aa8:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2aac:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2ab0:	6011      	str	r1, [r2, #0]
    2ab2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2ab6:	bf00      	nop
    2ab8:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2abc:	2201      	movs	r2, #1
    2abe:	b980      	cbnz	r0, 2ae2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2ac0:	e009      	b.n	2ad6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2ac2:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2ac6:	4c29      	ldr	r4, [pc, #164]	; (2b6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2ac8:	6021      	str	r1, [r4, #0]
    2aca:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2ace:	6011      	str	r1, [r2, #0]
    2ad0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2ad4:	e7f0      	b.n	2ab8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2ad6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2ada:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2ade:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2ae2:	2b02      	cmp	r3, #2
    2ae4:	d004      	beq.n	2af0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2ae6:	f240 11cf 	movw	r1, #463	; 0x1cf
    2aea:	206c      	movs	r0, #108	; 0x6c
    2aec:	f000 fdae 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2af0:	4e1f      	ldr	r6, [pc, #124]	; (2b70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2af2:	6830      	ldr	r0, [r6, #0]
    2af4:	4c1f      	ldr	r4, [pc, #124]	; (2b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2af6:	1cc0      	adds	r0, r0, #3
    2af8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2afc:	68e3      	ldr	r3, [r4, #12]
    2afe:	4d1e      	ldr	r5, [pc, #120]	; (2b78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2b00:	4298      	cmp	r0, r3
    2b02:	d00b      	beq.n	2b1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b04:	6837      	ldr	r7, [r6, #0]
    2b06:	1bdf      	subs	r7, r3, r7
    2b08:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2b0c:	2f04      	cmp	r7, #4
    2b0e:	d305      	bcc.n	2b1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b10:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2b14:	d202      	bcs.n	2b1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b16:	f7ff feb3 	bl	2880 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2b1a:	e01b      	b.n	2b54 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b1c:	6830      	ldr	r0, [r6, #0]
    2b1e:	1a18      	subs	r0, r3, r0
    2b20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b24:	2802      	cmp	r0, #2
    2b26:	d313      	bcc.n	2b50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b28:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2b2c:	d210      	bcs.n	2b50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b2e:	4b13      	ldr	r3, [pc, #76]	; (2b7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2b30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2b34:	6018      	str	r0, [r3, #0]
    2b36:	60a2      	str	r2, [r4, #8]
    2b38:	7021      	strb	r1, [r4, #0]
    2b3a:	606a      	str	r2, [r5, #4]
    2b3c:	60ea      	str	r2, [r5, #12]
    2b3e:	0040      	lsls	r0, r0, #1
    2b40:	1f19      	subs	r1, r3, #4
    2b42:	6008      	str	r0, [r1, #0]
    2b44:	2004      	movs	r0, #4
    2b46:	f88c 0001 	strb.w	r0, [ip, #1]
    2b4a:	f88c 2000 	strb.w	r2, [ip]
    2b4e:	e001      	b.n	2b54 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b50:	60a2      	str	r2, [r4, #8]
    2b52:	7021      	strb	r1, [r4, #0]
    2b54:	68a0      	ldr	r0, [r4, #8]
    2b56:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b5e:	0000      	.short	0x0000
    2b60:	4000b000 	.word	0x4000b000
    2b64:	2000001f 	.word	0x2000001f
    2b68:	4000b544 	.word	0x4000b544
    2b6c:	4000b540 	.word	0x4000b540
    2b70:	4000b504 	.word	0x4000b504
    2b74:	2000001c 	.word	0x2000001c
    2b78:	40008000 	.word	0x40008000
    2b7c:	4001f508 	.word	0x4001f508

00002b80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b84:	f8df c174 	ldr.w	ip, [pc, #372]	; 2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2b88:	2701      	movs	r7, #1
    2b8a:	f04f 0800 	mov.w	r8, #0
    2b8e:	f89c 5000 	ldrb.w	r5, [ip]
    2b92:	f89c c001 	ldrb.w	ip, [ip, #1]
    2b96:	2807      	cmp	r0, #7
    2b98:	d27e      	bcs.n	2c98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2b9a:	e8df f000 	tbb	[pc, r0]
    2b9e:	0404      	.short	0x0404
    2ba0:	6a6a0404 	.word	0x6a6a0404
    2ba4:	006a      	.short	0x006a
    2ba6:	4c56      	ldr	r4, [pc, #344]	; (2d00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2ba8:	68e6      	ldr	r6, [r4, #12]
    2baa:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2bae:	bf04      	itt	eq
    2bb0:	7864      	ldrbeq	r4, [r4, #1]
    2bb2:	2c00      	cmpeq	r4, #0
    2bb4:	d002      	beq.n	2bbc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2bb6:	2d02      	cmp	r5, #2
    2bb8:	d005      	beq.n	2bc6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2bba:	e03c      	b.n	2c36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2bbc:	f240 2102 	movw	r1, #514	; 0x202
    2bc0:	206c      	movs	r0, #108	; 0x6c
    2bc2:	f000 fd43 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bc6:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2bca:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2bce:	f1ac 0404 	sub.w	r4, ip, #4
    2bd2:	0624      	lsls	r4, r4, #24
    2bd4:	0da4      	lsrs	r4, r4, #22
    2bd6:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2bda:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2bde:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2be2:	2400      	movs	r4, #0
    2be4:	2d01      	cmp	r5, #1
    2be6:	d002      	beq.n	2bee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2be8:	2d02      	cmp	r5, #2
    2bea:	d011      	beq.n	2c10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2bec:	e020      	b.n	2c30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2bee:	f1bc 0f04 	cmp.w	ip, #4
    2bf2:	d205      	bcs.n	2c00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2bf4:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2bf8:	f1ba 0f00 	cmp.w	sl, #0
    2bfc:	d118      	bne.n	2c30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2bfe:	e004      	b.n	2c0a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2c00:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c04:	f1ba 0f00 	cmp.w	sl, #0
    2c08:	d112      	bne.n	2c30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c0a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2c0e:	e00f      	b.n	2c30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c10:	f1bc 0f04 	cmp.w	ip, #4
    2c14:	d205      	bcs.n	2c22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2c16:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c1a:	f1ba 0f00 	cmp.w	sl, #0
    2c1e:	d107      	bne.n	2c30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c20:	e004      	b.n	2c2c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2c22:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c26:	f1ba 0f00 	cmp.w	sl, #0
    2c2a:	d101      	bne.n	2c30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c2c:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2c30:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2c34:	d1d5      	bne.n	2be2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2c36:	4c33      	ldr	r4, [pc, #204]	; (2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2c38:	f100 0c10 	add.w	ip, r0, #16
    2c3c:	fa07 fc0c 	lsl.w	ip, r7, ip
    2c40:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2c44:	0080      	lsls	r0, r0, #2
    2c46:	4420      	add	r0, r4
    2c48:	b152      	cbz	r2, 2c60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2c4a:	6407      	str	r7, [r0, #64]	; 0x40
    2c4c:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2c50:	1b8d      	subs	r5, r1, r6
    2c52:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2c56:	42aa      	cmp	r2, r5
    2c58:	bf98      	it	ls
    2c5a:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2c5e:	d243      	bcs.n	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2c60:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2c64:	2b01      	cmp	r3, #1
    2c66:	bf08      	it	eq
    2c68:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2c6c:	2001      	movs	r0, #1
    2c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c72:	b135      	cbz	r5, 2c82 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c74:	4584      	cmp	ip, r0
    2c76:	d104      	bne.n	2c82 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c78:	f240 2129 	movw	r1, #553	; 0x229
    2c7c:	206c      	movs	r0, #108	; 0x6c
    2c7e:	f000 fce5 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c82:	1f00      	subs	r0, r0, #4
    2c84:	b2c0      	uxtb	r0, r0
    2c86:	2b01      	cmp	r3, #1
    2c88:	bf0c      	ite	eq
    2c8a:	2401      	moveq	r4, #1
    2c8c:	2400      	movne	r4, #0
    2c8e:	2803      	cmp	r0, #3
    2c90:	d306      	bcc.n	2ca0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2c92:	f240 1103 	movw	r1, #259	; 0x103
    2c96:	e000      	b.n	2c9a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2c98:	e02b      	b.n	2cf2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2c9a:	206c      	movs	r0, #108	; 0x6c
    2c9c:	f000 fcd6 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ca0:	f8df c064 	ldr.w	ip, [pc, #100]	; 2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2ca4:	f100 0310 	add.w	r3, r0, #16
    2ca8:	fa07 f303 	lsl.w	r3, r7, r3
    2cac:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2cb0:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2cb4:	0080      	lsls	r0, r0, #2
    2cb6:	4460      	add	r0, ip
    2cb8:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2cbc:	b14a      	cbz	r2, 2cd2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2cbe:	4d13      	ldr	r5, [pc, #76]	; (2d0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2cc0:	682e      	ldr	r6, [r5, #0]
    2cc2:	1b8d      	subs	r5, r1, r6
    2cc4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2cc8:	42aa      	cmp	r2, r5
    2cca:	bf98      	it	ls
    2ccc:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2cd0:	d20a      	bcs.n	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2cd2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2cd6:	2c00      	cmp	r4, #0
    2cd8:	bf18      	it	ne
    2cda:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2cde:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2ce2:	2001      	movs	r0, #1
    2ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ce8:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2cec:	2000      	movs	r0, #0
    2cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cf2:	f240 212e 	movw	r1, #558	; 0x22e
    2cf6:	206c      	movs	r0, #108	; 0x6c
    2cf8:	f000 fca8 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cfc:	2000001f 	.word	0x2000001f
    2d00:	2000001c 	.word	0x2000001c
    2d04:	40008000 	.word	0x40008000
    2d08:	4000b000 	.word	0x4000b000
    2d0c:	4000b504 	.word	0x4000b504

00002d10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d12:	2701      	movs	r7, #1
    2d14:	2400      	movs	r4, #0
    2d16:	2807      	cmp	r0, #7
    2d18:	d243      	bcs.n	2da2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x92>
    2d1a:	e8df f000 	tbb	[pc, r0]
    2d1e:	0404      	.short	0x0404
    2d20:	16160404 	.word	0x16160404
    2d24:	0016      	.short	0x0016
    2d26:	4a21      	ldr	r2, [pc, #132]	; (2dac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x9c>)
    2d28:	f100 0110 	add.w	r1, r0, #16
    2d2c:	fa07 f101 	lsl.w	r1, r7, r1
    2d30:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2d34:	0081      	lsls	r1, r0, #2
    2d36:	4411      	add	r1, r2
    2d38:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2d3c:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2d40:	491b      	ldr	r1, [pc, #108]	; (2db0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa0>)
    2d42:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2d46:	9000      	str	r0, [sp, #0]
    2d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d4a:	4d1a      	ldr	r5, [pc, #104]	; (2db4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>)
    2d4c:	1f01      	subs	r1, r0, #4
    2d4e:	b2ce      	uxtb	r6, r1
    2d50:	7829      	ldrb	r1, [r5, #0]
    2d52:	b179      	cbz	r1, 2d74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d54:	786a      	ldrb	r2, [r5, #1]
    2d56:	4282      	cmp	r2, r0
    2d58:	d10c      	bne.n	2d74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d5a:	4a17      	ldr	r2, [pc, #92]	; (2db8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>)
    2d5c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2d60:	6010      	str	r0, [r2, #0]
    2d62:	2901      	cmp	r1, #1
    2d64:	bf08      	it	eq
    2d66:	f7ff fd57 	bleq	2818 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2d6a:	702c      	strb	r4, [r5, #0]
    2d6c:	4913      	ldr	r1, [pc, #76]	; (2dbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xac>)
    2d6e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2d72:	60c8      	str	r0, [r1, #12]
    2d74:	f106 0010 	add.w	r0, r6, #16
    2d78:	fa07 f100 	lsl.w	r1, r7, r0
    2d7c:	4810      	ldr	r0, [pc, #64]	; (2dc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2d7e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2d82:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2d86:	00b0      	lsls	r0, r6, #2
    2d88:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2d8c:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2d90:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2d94:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2d98:	480a      	ldr	r0, [pc, #40]	; (2dc4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2d9a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2d9e:	9000      	str	r0, [sp, #0]
    2da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2da2:	f240 219b 	movw	r1, #667	; 0x29b
    2da6:	206c      	movs	r0, #108	; 0x6c
    2da8:	f000 fc50 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dac:	40008000 	.word	0x40008000
    2db0:	40008140 	.word	0x40008140
    2db4:	2000001f 	.word	0x2000001f
    2db8:	4001f508 	.word	0x4001f508
    2dbc:	2000001c 	.word	0x2000001c
    2dc0:	4000b000 	.word	0x4000b000
    2dc4:	4000b140 	.word	0x4000b140

00002dc8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2dc8:	491e      	ldr	r1, [pc, #120]	; (2e44 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2dca:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2dce:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2dd2:	481d      	ldr	r0, [pc, #116]	; (2e48 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2dd4:	4a1d      	ldr	r2, [pc, #116]	; (2e4c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2dd6:	f890 c000 	ldrb.w	ip, [r0]
    2dda:	2000      	movs	r0, #0
    2ddc:	f1bc 0f00 	cmp.w	ip, #0
    2de0:	d00a      	beq.n	2df8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2de2:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2de6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2dea:	6010      	str	r0, [r2, #0]
    2dec:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2df0:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2df4:	b981      	cbnz	r1, 2e18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2df6:	e009      	b.n	2e0c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2df8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2dfc:	4b14      	ldr	r3, [pc, #80]	; (2e50 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2dfe:	6018      	str	r0, [r3, #0]
    2e00:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e04:	6010      	str	r0, [r2, #0]
    2e06:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e0a:	e7f1      	b.n	2df0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2e0c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2e10:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2e14:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2e18:	490e      	ldr	r1, [pc, #56]	; (2e54 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2e1a:	f04f 32ff 	mov.w	r2, #4294967295
    2e1e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2e22:	4a0d      	ldr	r2, [pc, #52]	; (2e58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2e24:	6010      	str	r0, [r2, #0]
    2e26:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e2a:	1d12      	adds	r2, r2, #4
    2e2c:	6010      	str	r0, [r2, #0]
    2e2e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e32:	1d12      	adds	r2, r2, #4
    2e34:	6010      	str	r0, [r2, #0]
    2e36:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2e3a:	1d12      	adds	r2, r2, #4
    2e3c:	6010      	str	r0, [r2, #0]
    2e3e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2e42:	4770      	bx	lr
    2e44:	4000b000 	.word	0x4000b000
    2e48:	2000001f 	.word	0x2000001f
    2e4c:	4000b544 	.word	0x4000b544
    2e50:	4000b540 	.word	0x4000b540
    2e54:	40008000 	.word	0x40008000
    2e58:	40008540 	.word	0x40008540

00002e5c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2e5c:	4808      	ldr	r0, [pc, #32]	; (2e80 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2e5e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2e62:	2800      	cmp	r0, #0
    2e64:	bfb8      	it	lt
    2e66:	4770      	bxlt	lr
    2e68:	f000 011f 	and.w	r1, r0, #31
    2e6c:	2201      	movs	r2, #1
    2e6e:	fa02 f101 	lsl.w	r1, r2, r1
    2e72:	0940      	lsrs	r0, r0, #5
    2e74:	0080      	lsls	r0, r0, #2
    2e76:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2e7a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2e7e:	4770      	bx	lr
    2e80:	2000001c 	.word	0x2000001c

00002e84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2e84:	b510      	push	{r4, lr}
    2e86:	2807      	cmp	r0, #7
    2e88:	d20d      	bcs.n	2ea6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2e8a:	e8df f000 	tbb	[pc, r0]
    2e8e:	0404      	.short	0x0404
    2e90:	06060404 	.word	0x06060404
    2e94:	0006      	.short	0x0006
    2e96:	4906      	ldr	r1, [pc, #24]	; (2eb0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2e98:	e002      	b.n	2ea0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2e9a:	1f00      	subs	r0, r0, #4
    2e9c:	4905      	ldr	r1, [pc, #20]	; (2eb4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2e9e:	b2c0      	uxtb	r0, r0
    2ea0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2ea4:	bd10      	pop	{r4, pc}
    2ea6:	f240 2152 	movw	r1, #594	; 0x252
    2eaa:	206c      	movs	r0, #108	; 0x6c
    2eac:	f000 fbce 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2eb0:	40008140 	.word	0x40008140
    2eb4:	4000b140 	.word	0x4000b140

00002eb8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2eb8:	b570      	push	{r4, r5, r6, lr}
    2eba:	4819      	ldr	r0, [pc, #100]	; (2f20 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    2ebc:	2400      	movs	r4, #0
    2ebe:	2104      	movs	r1, #4
    2ec0:	7004      	strb	r4, [r0, #0]
    2ec2:	1ec0      	subs	r0, r0, #3
    2ec4:	7001      	strb	r1, [r0, #0]
    2ec6:	0589      	lsls	r1, r1, #22
    2ec8:	60c1      	str	r1, [r0, #12]
    2eca:	f7ff fca5 	bl	2818 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2ece:	2501      	movs	r5, #1
    2ed0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2ed4:	02eb      	lsls	r3, r5, #11
    2ed6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2eda:	f3bf 8f4f 	dsb	sy
    2ede:	f3bf 8f6f 	isb	sy
    2ee2:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    2ee6:	4a0f      	ldr	r2, [pc, #60]	; (2f24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    2ee8:	6055      	str	r5, [r2, #4]
    2eea:	6095      	str	r5, [r2, #8]
    2eec:	480e      	ldr	r0, [pc, #56]	; (2f28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    2eee:	6801      	ldr	r1, [r0, #0]
    2ef0:	2900      	cmp	r1, #0
    2ef2:	d1fc      	bne.n	2eee <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    2ef4:	1e48      	subs	r0, r1, #1
    2ef6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2efa:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2efe:	480b      	ldr	r0, [pc, #44]	; (2f2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    2f00:	6004      	str	r4, [r0, #0]
    2f02:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2f06:	1d00      	adds	r0, r0, #4
    2f08:	6004      	str	r4, [r0, #0]
    2f0a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2f0e:	1d00      	adds	r0, r0, #4
    2f10:	6004      	str	r4, [r0, #0]
    2f12:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    2f16:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    2f1a:	6015      	str	r5, [r2, #0]
    2f1c:	bd70      	pop	{r4, r5, r6, pc}
    2f1e:	0000      	.short	0x0000
    2f20:	2000001f 	.word	0x2000001f
    2f24:	4000b000 	.word	0x4000b000
    2f28:	4000b504 	.word	0x4000b504
    2f2c:	4000b540 	.word	0x4000b540

00002f30 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    2f30:	0b43      	lsrs	r3, r0, #13
    2f32:	f248 6c37 	movw	ip, #34359	; 0x8637
    2f36:	fb03 f30c 	mul.w	r3, r3, ip
    2f3a:	0c1b      	lsrs	r3, r3, #16
    2f3c:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    2f40:	f8c1 c000 	str.w	ip, [r1]
    2f44:	f8df c038 	ldr.w	ip, [pc, #56]	; 2f80 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    2f48:	fb03 030c 	mla	r3, r3, ip, r0
    2f4c:	480d      	ldr	r0, [pc, #52]	; (2f84 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    2f4e:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    2f52:	4358      	muls	r0, r3
    2f54:	0d40      	lsrs	r0, r0, #21
    2f56:	fb10 fc0c 	smulbb	ip, r0, ip
    2f5a:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    2f5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2f62:	125b      	asrs	r3, r3, #9
    2f64:	7013      	strb	r3, [r2, #0]
    2f66:	680b      	ldr	r3, [r1, #0]
    2f68:	4418      	add	r0, r3
    2f6a:	6008      	str	r0, [r1, #0]
    2f6c:	7810      	ldrb	r0, [r2, #0]
    2f6e:	281f      	cmp	r0, #31
    2f70:	bf18      	it	ne
    2f72:	4770      	bxne	lr
    2f74:	2000      	movs	r0, #0
    2f76:	7010      	strb	r0, [r2, #0]
    2f78:	6808      	ldr	r0, [r1, #0]
    2f7a:	1c40      	adds	r0, r0, #1
    2f7c:	6008      	str	r0, [r1, #0]
    2f7e:	4770      	bx	lr
    2f80:	ffffc2f7 	.word	0xffffc2f7
    2f84:	00010c6f 	.word	0x00010c6f

00002f88 <MPSL_IRQ_CLOCK_Handler>:
    2f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f8c:	4c16      	ldr	r4, [pc, #88]	; (2fe8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    2f8e:	7a60      	ldrb	r0, [r4, #9]
    2f90:	2800      	cmp	r0, #0
    2f92:	d027      	beq.n	2fe4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    2f94:	f44f 7180 	mov.w	r1, #256	; 0x100
    2f98:	058d      	lsls	r5, r1, #22
    2f9a:	4628      	mov	r0, r5
    2f9c:	f00b ff5b 	bl	ee56 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fa0:	4680      	mov	r8, r0
    2fa2:	f44f 7182 	mov.w	r1, #260	; 0x104
    2fa6:	4628      	mov	r0, r5
    2fa8:	f00b ff55 	bl	ee56 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fac:	2600      	movs	r6, #0
    2fae:	4607      	mov	r7, r0
    2fb0:	f1b8 0f00 	cmp.w	r8, #0
    2fb4:	d009      	beq.n	2fca <MPSL_IRQ_CLOCK_Handler+0x42>
    2fb6:	2001      	movs	r0, #1
    2fb8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fbc:	7920      	ldrb	r0, [r4, #4]
    2fbe:	b120      	cbz	r0, 2fca <MPSL_IRQ_CLOCK_Handler+0x42>
    2fc0:	7126      	strb	r6, [r4, #4]
    2fc2:	69e0      	ldr	r0, [r4, #28]
    2fc4:	b108      	cbz	r0, 2fca <MPSL_IRQ_CLOCK_Handler+0x42>
    2fc6:	4780      	blx	r0
    2fc8:	61e6      	str	r6, [r4, #28]
    2fca:	b137      	cbz	r7, 2fda <MPSL_IRQ_CLOCK_Handler+0x52>
    2fcc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    2fd0:	2002      	movs	r0, #2
    2fd2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fd6:	f000 fa89 	bl	34ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    2fda:	4640      	mov	r0, r8
    2fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fe0:	f000 b85a 	b.w	3098 <MPSL_IRQ_CLOCK_Handler+0x110>
    2fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fe8:	2000002c 	.word	0x2000002c
    2fec:	b510      	push	{r4, lr}
    2fee:	f00b ffdc 	bl	efaa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    2ff2:	b930      	cbnz	r0, 3002 <MPSL_IRQ_CLOCK_Handler+0x7a>
    2ff4:	f00b fffa 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    2ff8:	b918      	cbnz	r0, 3002 <MPSL_IRQ_CLOCK_Handler+0x7a>
    2ffa:	f00c f82d 	bl	f058 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    2ffe:	2800      	cmp	r0, #0
    3000:	d002      	beq.n	3008 <MPSL_IRQ_CLOCK_Handler+0x80>
    3002:	4902      	ldr	r1, [pc, #8]	; (300c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3004:	2002      	movs	r0, #2
    3006:	6008      	str	r0, [r1, #0]
    3008:	bd10      	pop	{r4, pc}
    300a:	0000      	.short	0x0000
    300c:	40000c34 	.word	0x40000c34
    3010:	b570      	push	{r4, r5, r6, lr}
    3012:	f000 f985 	bl	3320 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3016:	f000 fab5 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    301a:	4c09      	ldr	r4, [pc, #36]	; (3040 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    301c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3020:	b130      	cbz	r0, 3030 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3022:	f7ff ffe3 	bl	2fec <MPSL_IRQ_CLOCK_Handler+0x64>
    3026:	2001      	movs	r0, #1
    3028:	6128      	str	r0, [r5, #16]
    302a:	2003      	movs	r0, #3
    302c:	72a0      	strb	r0, [r4, #10]
    302e:	e004      	b.n	303a <MPSL_IRQ_CLOCK_Handler+0xb2>
    3030:	2002      	movs	r0, #2
    3032:	72a0      	strb	r0, [r4, #10]
    3034:	2001      	movs	r0, #1
    3036:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    303a:	2000      	movs	r0, #0
    303c:	71e0      	strb	r0, [r4, #7]
    303e:	bd70      	pop	{r4, r5, r6, pc}
    3040:	2000002c 	.word	0x2000002c
    3044:	b570      	push	{r4, r5, r6, lr}
    3046:	4c13      	ldr	r4, [pc, #76]	; (3094 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3048:	79a0      	ldrb	r0, [r4, #6]
    304a:	b1f0      	cbz	r0, 308a <MPSL_IRQ_CLOCK_Handler+0x102>
    304c:	2801      	cmp	r0, #1
    304e:	d003      	beq.n	3058 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3050:	79e1      	ldrb	r1, [r4, #7]
    3052:	1e40      	subs	r0, r0, #1
    3054:	4281      	cmp	r1, r0
    3056:	da18      	bge.n	308a <MPSL_IRQ_CLOCK_Handler+0x102>
    3058:	f000 fa94 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    305c:	4605      	mov	r5, r0
    305e:	f000 fb65 	bl	372c <mpsl_temperature_get>
    3062:	79a1      	ldrb	r1, [r4, #6]
    3064:	2901      	cmp	r1, #1
    3066:	d902      	bls.n	306e <MPSL_IRQ_CLOCK_Handler+0xe6>
    3068:	79e1      	ldrb	r1, [r4, #7]
    306a:	1c49      	adds	r1, r1, #1
    306c:	71e1      	strb	r1, [r4, #7]
    306e:	b10d      	cbz	r5, 3074 <MPSL_IRQ_CLOCK_Handler+0xec>
    3070:	6961      	ldr	r1, [r4, #20]
    3072:	e000      	b.n	3076 <MPSL_IRQ_CLOCK_Handler+0xee>
    3074:	6921      	ldr	r1, [r4, #16]
    3076:	1a41      	subs	r1, r0, r1
    3078:	2902      	cmp	r1, #2
    307a:	da02      	bge.n	3082 <MPSL_IRQ_CLOCK_Handler+0xfa>
    307c:	f111 0f02 	cmn.w	r1, #2
    3080:	dc07      	bgt.n	3092 <MPSL_IRQ_CLOCK_Handler+0x10a>
    3082:	b10d      	cbz	r5, 3088 <MPSL_IRQ_CLOCK_Handler+0x100>
    3084:	6160      	str	r0, [r4, #20]
    3086:	e000      	b.n	308a <MPSL_IRQ_CLOCK_Handler+0x102>
    3088:	6120      	str	r0, [r4, #16]
    308a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    308e:	f7ff bfbf 	b.w	3010 <MPSL_IRQ_CLOCK_Handler+0x88>
    3092:	bd70      	pop	{r4, r5, r6, pc}
    3094:	2000002c 	.word	0x2000002c
    3098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    309c:	4606      	mov	r6, r0
    309e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    30a2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    30a6:	4628      	mov	r0, r5
    30a8:	f00b fed5 	bl	ee56 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30ac:	4680      	mov	r8, r0
    30ae:	f44f 7188 	mov.w	r1, #272	; 0x110
    30b2:	4628      	mov	r0, r5
    30b4:	f00b fecf 	bl	ee56 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30b8:	4c26      	ldr	r4, [pc, #152]	; (3154 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    30ba:	4682      	mov	sl, r0
    30bc:	f894 9000 	ldrb.w	r9, [r4]
    30c0:	f104 0008 	add.w	r0, r4, #8
    30c4:	f00b ff3b 	bl	ef3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    30c8:	b110      	cbz	r0, 30d0 <MPSL_IRQ_CLOCK_Handler+0x148>
    30ca:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    30ce:	e014      	b.n	30fa <MPSL_IRQ_CLOCK_Handler+0x172>
    30d0:	2701      	movs	r7, #1
    30d2:	b13e      	cbz	r6, 30e4 <MPSL_IRQ_CLOCK_Handler+0x15c>
    30d4:	7aa0      	ldrb	r0, [r4, #10]
    30d6:	2802      	cmp	r0, #2
    30d8:	d104      	bne.n	30e4 <MPSL_IRQ_CLOCK_Handler+0x15c>
    30da:	2003      	movs	r0, #3
    30dc:	72a0      	strb	r0, [r4, #10]
    30de:	f7ff ff85 	bl	2fec <MPSL_IRQ_CLOCK_Handler+0x64>
    30e2:	612f      	str	r7, [r5, #16]
    30e4:	2600      	movs	r6, #0
    30e6:	f1b8 0f00 	cmp.w	r8, #0
    30ea:	d017      	beq.n	311c <MPSL_IRQ_CLOCK_Handler+0x194>
    30ec:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    30f0:	7aa0      	ldrb	r0, [r4, #10]
    30f2:	2803      	cmp	r0, #3
    30f4:	d004      	beq.n	3100 <MPSL_IRQ_CLOCK_Handler+0x178>
    30f6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    30fa:	206d      	movs	r0, #109	; 0x6d
    30fc:	f000 faa6 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3100:	f00b ff53 	bl	efaa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3104:	b928      	cbnz	r0, 3112 <MPSL_IRQ_CLOCK_Handler+0x18a>
    3106:	f00b ff71 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    310a:	b910      	cbnz	r0, 3112 <MPSL_IRQ_CLOCK_Handler+0x18a>
    310c:	f00b ffa4 	bl	f058 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3110:	b108      	cbz	r0, 3116 <MPSL_IRQ_CLOCK_Handler+0x18e>
    3112:	4811      	ldr	r0, [pc, #68]	; (3158 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3114:	6006      	str	r6, [r0, #0]
    3116:	72a7      	strb	r7, [r4, #10]
    3118:	f000 f8e6 	bl	32e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    311c:	f1ba 0f00 	cmp.w	sl, #0
    3120:	d007      	beq.n	3132 <MPSL_IRQ_CLOCK_Handler+0x1aa>
    3122:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3126:	7aa0      	ldrb	r0, [r4, #10]
    3128:	2801      	cmp	r0, #1
    312a:	d101      	bne.n	3130 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    312c:	f7ff ff8a 	bl	3044 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3130:	616f      	str	r7, [r5, #20]
    3132:	f1b9 0f00 	cmp.w	r9, #0
    3136:	d007      	beq.n	3148 <MPSL_IRQ_CLOCK_Handler+0x1c0>
    3138:	7026      	strb	r6, [r4, #0]
    313a:	7aa0      	ldrb	r0, [r4, #10]
    313c:	2801      	cmp	r0, #1
    313e:	d101      	bne.n	3144 <MPSL_IRQ_CLOCK_Handler+0x1bc>
    3140:	f7ff ff66 	bl	3010 <MPSL_IRQ_CLOCK_Handler+0x88>
    3144:	f000 f8d0 	bl	32e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3148:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    314c:	4801      	ldr	r0, [pc, #4]	; (3154 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    314e:	3008      	adds	r0, #8
    3150:	f00b bf0c 	b.w	ef6c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3154:	2000002c 	.word	0x2000002c
    3158:	40000c34 	.word	0x40000c34
    315c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3160:	4c5c      	ldr	r4, [pc, #368]	; (32d4 <MPSL_IRQ_CLOCK_Handler+0x34c>)
    3162:	2600      	movs	r6, #0
    3164:	4605      	mov	r5, r0
    3166:	61a6      	str	r6, [r4, #24]
    3168:	7842      	ldrb	r2, [r0, #1]
    316a:	7881      	ldrb	r1, [r0, #2]
    316c:	7800      	ldrb	r0, [r0, #0]
    316e:	72e0      	strb	r0, [r4, #11]
    3170:	7162      	strb	r2, [r4, #5]
    3172:	71a1      	strb	r1, [r4, #6]
    3174:	2701      	movs	r7, #1
    3176:	71e6      	strb	r6, [r4, #7]
    3178:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    317c:	2805      	cmp	r0, #5
    317e:	d221      	bcs.n	31c4 <MPSL_IRQ_CLOCK_Handler+0x23c>
    3180:	e8df f000 	tbb	[pc, r0]
    3184:	1c05030f 	.word	0x1c05030f
    3188:	001e      	.short	0x001e
    318a:	61a7      	str	r7, [r4, #24]
    318c:	e009      	b.n	31a2 <MPSL_IRQ_CLOCK_Handler+0x21a>
    318e:	f000 f8c7 	bl	3320 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3192:	2101      	movs	r1, #1
    3194:	4648      	mov	r0, r9
    3196:	f00b fe63 	bl	ee60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    319a:	2800      	cmp	r0, #0
    319c:	d0f9      	beq.n	3192 <MPSL_IRQ_CLOCK_Handler+0x20a>
    319e:	2002      	movs	r0, #2
    31a0:	61a0      	str	r0, [r4, #24]
    31a2:	f00b fe89 	bl	eeb8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    31a6:	b198      	cbz	r0, 31d0 <MPSL_IRQ_CLOCK_Handler+0x248>
    31a8:	f000 fa06 	bl	35b8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    31ac:	7e21      	ldrb	r1, [r4, #24]
    31ae:	f001 0103 	and.w	r1, r1, #3
    31b2:	4288      	cmp	r0, r1
    31b4:	d10c      	bne.n	31d0 <MPSL_IRQ_CLOCK_Handler+0x248>
    31b6:	79a8      	ldrb	r0, [r5, #6]
    31b8:	b138      	cbz	r0, 31ca <MPSL_IRQ_CLOCK_Handler+0x242>
    31ba:	e06f      	b.n	329c <MPSL_IRQ_CLOCK_Handler+0x314>
    31bc:	4846      	ldr	r0, [pc, #280]	; (32d8 <MPSL_IRQ_CLOCK_Handler+0x350>)
    31be:	e7ef      	b.n	31a0 <MPSL_IRQ_CLOCK_Handler+0x218>
    31c0:	4846      	ldr	r0, [pc, #280]	; (32dc <MPSL_IRQ_CLOCK_Handler+0x354>)
    31c2:	e7ed      	b.n	31a0 <MPSL_IRQ_CLOCK_Handler+0x218>
    31c4:	f44f 714c 	mov.w	r1, #816	; 0x330
    31c8:	e04e      	b.n	3268 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    31ca:	f000 f9c9 	bl	3560 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    31ce:	e065      	b.n	329c <MPSL_IRQ_CLOCK_Handler+0x314>
    31d0:	46c8      	mov	r8, r9
    31d2:	f8c9 700c 	str.w	r7, [r9, #12]
    31d6:	f44f 7a82 	mov.w	sl, #260	; 0x104
    31da:	f8c9 6104 	str.w	r6, [r9, #260]	; 0x104
    31de:	69a1      	ldr	r1, [r4, #24]
    31e0:	f8c9 1518 	str.w	r1, [r9, #1304]	; 0x518
    31e4:	f00b fecd 	bl	ef82 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    31e8:	b940      	cbnz	r0, 31fc <MPSL_IRQ_CLOCK_Handler+0x274>
    31ea:	f00b fed4 	bl	ef96 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    31ee:	b928      	cbnz	r0, 31fc <MPSL_IRQ_CLOCK_Handler+0x274>
    31f0:	f00b fee8 	bl	efc4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    31f4:	b910      	cbnz	r0, 31fc <MPSL_IRQ_CLOCK_Handler+0x274>
    31f6:	f00b fef9 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    31fa:	b138      	cbz	r0, 320c <MPSL_IRQ_CLOCK_Handler+0x284>
    31fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3200:	4837      	ldr	r0, [pc, #220]	; (32e0 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3202:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3206:	f3c1 3142 	ubfx	r1, r1, #13, #3
    320a:	6001      	str	r1, [r0, #0]
    320c:	f00b feb9 	bl	ef82 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3210:	b940      	cbnz	r0, 3224 <MPSL_IRQ_CLOCK_Handler+0x29c>
    3212:	f00b fec0 	bl	ef96 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3216:	b928      	cbnz	r0, 3224 <MPSL_IRQ_CLOCK_Handler+0x29c>
    3218:	f00b fed4 	bl	efc4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    321c:	b910      	cbnz	r0, 3224 <MPSL_IRQ_CLOCK_Handler+0x29c>
    321e:	f00b fee5 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3222:	b110      	cbz	r0, 322a <MPSL_IRQ_CLOCK_Handler+0x2a2>
    3224:	482e      	ldr	r0, [pc, #184]	; (32e0 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3226:	3010      	adds	r0, #16
    3228:	6007      	str	r7, [r0, #0]
    322a:	4640      	mov	r0, r8
    322c:	f8c8 7008 	str.w	r7, [r8, #8]
    3230:	2102      	movs	r1, #2
    3232:	f8c8 1304 	str.w	r1, [r8, #772]	; 0x304
    3236:	79a9      	ldrb	r1, [r5, #6]
    3238:	bb81      	cbnz	r1, 329c <MPSL_IRQ_CLOCK_Handler+0x314>
    323a:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
    323e:	f011 0f02 	tst.w	r1, #2
    3242:	d00f      	beq.n	3264 <MPSL_IRQ_CLOCK_Handler+0x2dc>
    3244:	f8df 809c 	ldr.w	r8, [pc, #156]	; 32e4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    3248:	f8d8 2000 	ldr.w	r2, [r8]
    324c:	43d2      	mvns	r2, r2
    324e:	f342 1700 	sbfx	r7, r2, #4, #1
    3252:	f8d8 2000 	ldr.w	r2, [r8]
    3256:	f042 0210 	orr.w	r2, r2, #16
    325a:	f8c8 2000 	str.w	r2, [r8]
    325e:	4681      	mov	r9, r0
    3260:	1c7f      	adds	r7, r7, #1
    3262:	e007      	b.n	3274 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    3264:	f240 21f1 	movw	r1, #753	; 0x2f1
    3268:	206d      	movs	r0, #109	; 0x6d
    326a:	f000 f9ef 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    326e:	bf00      	nop
    3270:	f000 fb12 	bl	3898 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3274:	4651      	mov	r1, sl
    3276:	4648      	mov	r0, r9
    3278:	f00b fded 	bl	ee56 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    327c:	2800      	cmp	r0, #0
    327e:	d0f7      	beq.n	3270 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    3280:	f000 f96e 	bl	3560 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3284:	b92f      	cbnz	r7, 3292 <MPSL_IRQ_CLOCK_Handler+0x30a>
    3286:	f8d8 1000 	ldr.w	r1, [r8]
    328a:	f021 0110 	bic.w	r1, r1, #16
    328e:	f8c8 1000 	str.w	r1, [r8]
    3292:	2102      	movs	r1, #2
    3294:	f8c9 1308 	str.w	r1, [r9, #776]	; 0x308
    3298:	f8c9 6104 	str.w	r6, [r9, #260]	; 0x104
    329c:	79a0      	ldrb	r0, [r4, #6]
    329e:	b170      	cbz	r0, 32be <MPSL_IRQ_CLOCK_Handler+0x336>
    32a0:	7828      	ldrb	r0, [r5, #0]
    32a2:	b960      	cbnz	r0, 32be <MPSL_IRQ_CLOCK_Handler+0x336>
    32a4:	f000 f96e 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32a8:	4605      	mov	r5, r0
    32aa:	f000 fa3f 	bl	372c <mpsl_temperature_get>
    32ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    32b2:	b115      	cbz	r5, 32ba <MPSL_IRQ_CLOCK_Handler+0x332>
    32b4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    32b8:	e001      	b.n	32be <MPSL_IRQ_CLOCK_Handler+0x336>
    32ba:	e9c4 0204 	strd	r0, r2, [r4, #16]
    32be:	2101      	movs	r1, #1
    32c0:	4648      	mov	r0, r9
    32c2:	f00b fdcd 	bl	ee60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    32c6:	b108      	cbz	r0, 32cc <MPSL_IRQ_CLOCK_Handler+0x344>
    32c8:	f000 f956 	bl	3578 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    32cc:	72a6      	strb	r6, [r4, #10]
    32ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32d2:	0000      	.short	0x0000
    32d4:	2000002c 	.word	0x2000002c
    32d8:	00020001 	.word	0x00020001
    32dc:	00030001 	.word	0x00030001
    32e0:	4000053c 	.word	0x4000053c
    32e4:	e000ed10 	.word	0xe000ed10

000032e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    32e8:	b510      	push	{r4, lr}
    32ea:	f3ef 8410 	mrs	r4, PRIMASK
    32ee:	b672      	cpsid	i
    32f0:	480a      	ldr	r0, [pc, #40]	; (331c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    32f2:	7841      	ldrb	r1, [r0, #1]
    32f4:	b129      	cbz	r1, 3302 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    32f6:	7841      	ldrb	r1, [r0, #1]
    32f8:	1e49      	subs	r1, r1, #1
    32fa:	7041      	strb	r1, [r0, #1]
    32fc:	7841      	ldrb	r1, [r0, #1]
    32fe:	b129      	cbz	r1, 330c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3300:	e008      	b.n	3314 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3302:	f44f 7183 	mov.w	r1, #262	; 0x106
    3306:	206d      	movs	r0, #109	; 0x6d
    3308:	f000 f9a0 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    330c:	7880      	ldrb	r0, [r0, #2]
    330e:	b908      	cbnz	r0, 3314 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3310:	f000 f946 	bl	35a0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3314:	2c00      	cmp	r4, #0
    3316:	d100      	bne.n	331a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3318:	b662      	cpsie	i
    331a:	bd10      	pop	{r4, pc}
    331c:	2000002c 	.word	0x2000002c

00003320 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3320:	b510      	push	{r4, lr}
    3322:	f3ef 8410 	mrs	r4, PRIMASK
    3326:	b672      	cpsid	i
    3328:	4806      	ldr	r0, [pc, #24]	; (3344 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    332a:	7841      	ldrb	r1, [r0, #1]
    332c:	1c49      	adds	r1, r1, #1
    332e:	7041      	strb	r1, [r0, #1]
    3330:	7840      	ldrb	r0, [r0, #1]
    3332:	2801      	cmp	r0, #1
    3334:	d101      	bne.n	333a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3336:	f00b fdaa 	bl	ee8e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    333a:	2c00      	cmp	r4, #0
    333c:	d100      	bne.n	3340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    333e:	b662      	cpsie	i
    3340:	bd10      	pop	{r4, pc}
    3342:	0000      	.short	0x0000
    3344:	2000002c 	.word	0x2000002c

00003348 <mpsl_clock_hfclk_release>:
    3348:	4805      	ldr	r0, [pc, #20]	; (3360 <mpsl_clock_hfclk_release+0x18>)
    334a:	b510      	push	{r4, lr}
    334c:	78c1      	ldrb	r1, [r0, #3]
    334e:	b121      	cbz	r1, 335a <mpsl_clock_hfclk_release+0x12>
    3350:	2100      	movs	r1, #0
    3352:	7101      	strb	r1, [r0, #4]
    3354:	70c1      	strb	r1, [r0, #3]
    3356:	f7ff ffc7 	bl	32e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    335a:	2000      	movs	r0, #0
    335c:	bd10      	pop	{r4, pc}
    335e:	0000      	.short	0x0000
    3360:	2000002c 	.word	0x2000002c

00003364 <mpsl_clock_hfclk_request>:
    3364:	b570      	push	{r4, r5, r6, lr}
    3366:	4c0c      	ldr	r4, [pc, #48]	; (3398 <mpsl_clock_hfclk_request+0x34>)
    3368:	78e1      	ldrb	r1, [r4, #3]
    336a:	b961      	cbnz	r1, 3386 <mpsl_clock_hfclk_request+0x22>
    336c:	2501      	movs	r5, #1
    336e:	70e5      	strb	r5, [r4, #3]
    3370:	61e0      	str	r0, [r4, #28]
    3372:	f7ff ffd5 	bl	3320 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3376:	f000 f905 	bl	3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    337a:	b130      	cbz	r0, 338a <mpsl_clock_hfclk_request+0x26>
    337c:	69e0      	ldr	r0, [r4, #28]
    337e:	b110      	cbz	r0, 3386 <mpsl_clock_hfclk_request+0x22>
    3380:	4780      	blx	r0
    3382:	2000      	movs	r0, #0
    3384:	61e0      	str	r0, [r4, #28]
    3386:	2000      	movs	r0, #0
    3388:	bd70      	pop	{r4, r5, r6, pc}
    338a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    338e:	7125      	strb	r5, [r4, #4]
    3390:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3394:	e7f7      	b.n	3386 <mpsl_clock_hfclk_request+0x22>
    3396:	0000      	.short	0x0000
    3398:	2000002c 	.word	0x2000002c

0000339c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    339c:	f3ef 8010 	mrs	r0, PRIMASK
    33a0:	b672      	cpsid	i
    33a2:	4904      	ldr	r1, [pc, #16]	; (33b4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    33a4:	788a      	ldrb	r2, [r1, #2]
    33a6:	1c52      	adds	r2, r2, #1
    33a8:	708a      	strb	r2, [r1, #2]
    33aa:	2800      	cmp	r0, #0
    33ac:	d100      	bne.n	33b0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    33ae:	b662      	cpsie	i
    33b0:	4770      	bx	lr
    33b2:	0000      	.short	0x0000
    33b4:	2000002c 	.word	0x2000002c

000033b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    33b8:	b510      	push	{r4, lr}
    33ba:	f3ef 8410 	mrs	r4, PRIMASK
    33be:	b672      	cpsid	i
    33c0:	480a      	ldr	r0, [pc, #40]	; (33ec <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    33c2:	7881      	ldrb	r1, [r0, #2]
    33c4:	b129      	cbz	r1, 33d2 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    33c6:	7881      	ldrb	r1, [r0, #2]
    33c8:	1e49      	subs	r1, r1, #1
    33ca:	7081      	strb	r1, [r0, #2]
    33cc:	7841      	ldrb	r1, [r0, #1]
    33ce:	b129      	cbz	r1, 33dc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    33d0:	e008      	b.n	33e4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    33d2:	f44f 7195 	mov.w	r1, #298	; 0x12a
    33d6:	206d      	movs	r0, #109	; 0x6d
    33d8:	f000 f938 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33dc:	7880      	ldrb	r0, [r0, #2]
    33de:	b908      	cbnz	r0, 33e4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    33e0:	f000 f8de 	bl	35a0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    33e4:	2c00      	cmp	r4, #0
    33e6:	d100      	bne.n	33ea <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    33e8:	b662      	cpsie	i
    33ea:	bd10      	pop	{r4, pc}
    33ec:	2000002c 	.word	0x2000002c

000033f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    33f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33f4:	0004      	movs	r4, r0
    33f6:	f06f 0015 	mvn.w	r0, #21
    33fa:	d03c      	beq.n	3476 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    33fc:	7821      	ldrb	r1, [r4, #0]
    33fe:	2904      	cmp	r1, #4
    3400:	d839      	bhi.n	3476 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3402:	2900      	cmp	r1, #0
    3404:	7861      	ldrb	r1, [r4, #1]
    3406:	d038      	beq.n	347a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3408:	2900      	cmp	r1, #0
    340a:	d134      	bne.n	3476 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    340c:	78a1      	ldrb	r1, [r4, #2]
    340e:	2900      	cmp	r1, #0
    3410:	d131      	bne.n	3476 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3412:	2000      	movs	r0, #0
    3414:	f00b fcea 	bl	edec <MPSL_IRQ_RADIO_Handler+0x1e>
    3418:	2000      	movs	r0, #0
    341a:	f00b fcda 	bl	edd2 <MPSL_IRQ_RADIO_Handler+0x4>
    341e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3422:	f04f 31ff 	mov.w	r1, #4294967295
    3426:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    342a:	2600      	movs	r6, #0
    342c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3430:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3434:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3438:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    343c:	4f14      	ldr	r7, [pc, #80]	; (3490 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    343e:	707e      	strb	r6, [r7, #1]
    3440:	88a0      	ldrh	r0, [r4, #4]
    3442:	81b8      	strh	r0, [r7, #12]
    3444:	f00b fd1a 	bl	ee7c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3448:	2501      	movs	r5, #1
    344a:	b108      	cbz	r0, 3450 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    344c:	70fd      	strb	r5, [r7, #3]
    344e:	707d      	strb	r5, [r7, #1]
    3450:	2101      	movs	r1, #1
    3452:	4640      	mov	r0, r8
    3454:	f00b fd04 	bl	ee60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3458:	b108      	cbz	r0, 345e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    345a:	f000 f88d 	bl	3578 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    345e:	4620      	mov	r0, r4
    3460:	f7ff fe7c 	bl	315c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    3464:	727d      	strb	r5, [r7, #9]
    3466:	2000      	movs	r0, #0
    3468:	f00b fcb3 	bl	edd2 <MPSL_IRQ_RADIO_Handler+0x4>
    346c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3470:	4630      	mov	r0, r6
    3472:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    347a:	2900      	cmp	r1, #0
    347c:	d0fb      	beq.n	3476 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    347e:	2920      	cmp	r1, #32
    3480:	d8f9      	bhi.n	3476 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3482:	78a1      	ldrb	r1, [r4, #2]
    3484:	2921      	cmp	r1, #33	; 0x21
    3486:	d8f6      	bhi.n	3476 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3488:	2901      	cmp	r1, #1
    348a:	d1c2      	bne.n	3412 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    348c:	e7f3      	b.n	3476 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    348e:	0000      	.short	0x0000
    3490:	2000002c 	.word	0x2000002c

00003494 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3494:	4801      	ldr	r0, [pc, #4]	; (349c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3496:	8980      	ldrh	r0, [r0, #12]
    3498:	4770      	bx	lr
    349a:	0000      	.short	0x0000
    349c:	2000002c 	.word	0x2000002c

000034a0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    34a0:	b510      	push	{r4, lr}
    34a2:	480d      	ldr	r0, [pc, #52]	; (34d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    34a4:	f00b fd4b 	bl	ef3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    34a8:	490b      	ldr	r1, [pc, #44]	; (34d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    34aa:	3908      	subs	r1, #8
    34ac:	b148      	cbz	r0, 34c2 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    34ae:	2001      	movs	r0, #1
    34b0:	7008      	strb	r0, [r1, #0]
    34b2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    34b6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    34ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34be:	f7ff bf2f 	b.w	3320 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    34c2:	7a88      	ldrb	r0, [r1, #10]
    34c4:	2801      	cmp	r0, #1
    34c6:	d101      	bne.n	34cc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    34c8:	f7ff fda2 	bl	3010 <MPSL_IRQ_CLOCK_Handler+0x88>
    34cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34d0:	4801      	ldr	r0, [pc, #4]	; (34d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    34d2:	f00b bd4b 	b.w	ef6c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    34d6:	0000      	.short	0x0000
    34d8:	20000034 	.word	0x20000034

000034dc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    34dc:	4802      	ldr	r0, [pc, #8]	; (34e8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    34de:	7a80      	ldrb	r0, [r0, #10]
    34e0:	2800      	cmp	r0, #0
    34e2:	d000      	beq.n	34e6 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    34e4:	2001      	movs	r0, #1
    34e6:	4770      	bx	lr
    34e8:	2000002c 	.word	0x2000002c

000034ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    34ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34ee:	4d1b      	ldr	r5, [pc, #108]	; (355c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x70>)
    34f0:	7ae8      	ldrb	r0, [r5, #11]
    34f2:	2800      	cmp	r0, #0
    34f4:	d131      	bne.n	355a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6e>
    34f6:	7e28      	ldrb	r0, [r5, #24]
    34f8:	f000 0003 	and.w	r0, r0, #3
    34fc:	f00b fccc 	bl	ee98 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3500:	2800      	cmp	r0, #0
    3502:	d02a      	beq.n	355a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6e>
    3504:	f7ff ffea 	bl	34dc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3508:	2800      	cmp	r0, #0
    350a:	d126      	bne.n	355a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6e>
    350c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3510:	2018      	movs	r0, #24
    3512:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3516:	2601      	movs	r6, #1
    3518:	61a6      	str	r6, [r4, #24]
    351a:	f44f 7020 	mov.w	r0, #640	; 0x280
    351e:	f8ad 0000 	strh.w	r0, [sp]
    3522:	bf00      	nop
    3524:	f8bd 0000 	ldrh.w	r0, [sp]
    3528:	1e41      	subs	r1, r0, #1
    352a:	f8ad 1000 	strh.w	r1, [sp]
    352e:	d2f9      	bcs.n	3524 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x38>
    3530:	2700      	movs	r7, #0
    3532:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3536:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    353a:	4808      	ldr	r0, [pc, #32]	; (355c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x70>)
    353c:	3008      	adds	r0, #8
    353e:	f00b fd11 	bl	ef64 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3542:	702f      	strb	r7, [r5, #0]
    3544:	f7ff fd64 	bl	3010 <MPSL_IRQ_CLOCK_Handler+0x88>
    3548:	6166      	str	r6, [r4, #20]
    354a:	7968      	ldrb	r0, [r5, #5]
    354c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3550:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3554:	2018      	movs	r0, #24
    3556:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    355c:	2000002c 	.word	0x2000002c

00003560 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3560:	b510      	push	{r4, lr}
    3562:	4c04      	ldr	r4, [pc, #16]	; (3574 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3564:	7e20      	ldrb	r0, [r4, #24]
    3566:	f000 0003 	and.w	r0, r0, #3
    356a:	f00b fc95 	bl	ee98 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    356e:	2800      	cmp	r0, #0
    3570:	d0f8      	beq.n	3564 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3572:	bd10      	pop	{r4, pc}
    3574:	2000002c 	.word	0x2000002c

00003578 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3578:	4901      	ldr	r1, [pc, #4]	; (3580 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    357a:	2001      	movs	r0, #1
    357c:	7008      	strb	r0, [r1, #0]
    357e:	4770      	bx	lr
    3580:	200003a8 	.word	0x200003a8

00003584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3584:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3588:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    358c:	b918      	cbnz	r0, 3596 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    358e:	4803      	ldr	r0, [pc, #12]	; (359c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3590:	7800      	ldrb	r0, [r0, #0]
    3592:	2800      	cmp	r0, #0
    3594:	d000      	beq.n	3598 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3596:	2001      	movs	r0, #1
    3598:	4770      	bx	lr
    359a:	0000      	.short	0x0000
    359c:	200003a8 	.word	0x200003a8

000035a0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    35a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    35a4:	2101      	movs	r1, #1
    35a6:	6041      	str	r1, [r0, #4]
    35a8:	2100      	movs	r1, #0
    35aa:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    35ae:	4801      	ldr	r0, [pc, #4]	; (35b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    35b0:	7001      	strb	r1, [r0, #0]
    35b2:	4770      	bx	lr
    35b4:	200003a8 	.word	0x200003a8

000035b8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    35b8:	4802      	ldr	r0, [pc, #8]	; (35c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    35ba:	6800      	ldr	r0, [r0, #0]
    35bc:	f000 0003 	and.w	r0, r0, #3
    35c0:	4770      	bx	lr
    35c2:	0000      	.short	0x0000
    35c4:	4000041c 	.word	0x4000041c
    35c8:	b510      	push	{r4, lr}
    35ca:	b131      	cbz	r1, 35da <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    35cc:	2901      	cmp	r1, #1
    35ce:	d007      	beq.n	35e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    35d0:	f44f 7142 	mov.w	r1, #776	; 0x308
    35d4:	a005      	add	r0, pc, #20	; (adr r0, 35ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    35d6:	f000 f80f 	bl	35f8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    35da:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    35de:	e001      	b.n	35e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    35e0:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    35e4:	f000 0001 	and.w	r0, r0, #1
    35e8:	bd10      	pop	{r4, pc}
    35ea:	0000      	.short	0x0000
    35ec:	5f66726e 	.word	0x5f66726e
    35f0:	636f6c63 	.word	0x636f6c63
    35f4:	00682e6b 	.word	0x00682e6b

000035f8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    35f8:	4a02      	ldr	r2, [pc, #8]	; (3604 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    35fa:	6852      	ldr	r2, [r2, #4]
    35fc:	b102      	cbz	r2, 3600 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    35fe:	4710      	bx	r2
    3600:	e7fe      	b.n	3600 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3602:	0000      	.short	0x0000
    3604:	2000004c 	.word	0x2000004c
    3608:	4806      	ldr	r0, [pc, #24]	; (3624 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    360a:	b510      	push	{r4, lr}
    360c:	2100      	movs	r1, #0
    360e:	6001      	str	r1, [r0, #0]
    3610:	2101      	movs	r1, #1
    3612:	6001      	str	r1, [r0, #0]
    3614:	4608      	mov	r0, r1
    3616:	f00b fc66 	bl	eee6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    361a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    361e:	2001      	movs	r0, #1
    3620:	f00b bc54 	b.w	eecc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3624:	40001ffc 	.word	0x40001ffc
    3628:	4807      	ldr	r0, [pc, #28]	; (3648 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    362a:	b510      	push	{r4, lr}
    362c:	2101      	movs	r1, #1
    362e:	6041      	str	r1, [r0, #4]
    3630:	1e89      	subs	r1, r1, #2
    3632:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3636:	200c      	movs	r0, #12
    3638:	f00b fc55 	bl	eee6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    363c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3640:	200c      	movs	r0, #12
    3642:	f00b bc43 	b.w	eecc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3646:	0000      	.short	0x0000
    3648:	4000c000 	.word	0x4000c000

0000364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    364c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    364e:	4a10      	ldr	r2, [pc, #64]	; (3690 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3650:	6855      	ldr	r5, [r2, #4]
    3652:	b1e5      	cbz	r5, 368e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3654:	2200      	movs	r2, #0
    3656:	4603      	mov	r3, r0
    3658:	466e      	mov	r6, sp
    365a:	240a      	movs	r4, #10
    365c:	e003      	b.n	3666 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    365e:	fbb0 f0f4 	udiv	r0, r0, r4
    3662:	1c52      	adds	r2, r2, #1
    3664:	b2d2      	uxtb	r2, r2
    3666:	2800      	cmp	r0, #0
    3668:	d1f9      	bne.n	365e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    366a:	54b0      	strb	r0, [r6, r2]
    366c:	e00a      	b.n	3684 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    366e:	bf00      	nop
    3670:	fbb3 f0f4 	udiv	r0, r3, r4
    3674:	fb04 3010 	mls	r0, r4, r0, r3
    3678:	fbb3 f3f4 	udiv	r3, r3, r4
    367c:	1e52      	subs	r2, r2, #1
    367e:	b2d2      	uxtb	r2, r2
    3680:	3030      	adds	r0, #48	; 0x30
    3682:	54b0      	strb	r0, [r6, r2]
    3684:	2a00      	cmp	r2, #0
    3686:	d1f3      	bne.n	3670 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3688:	4630      	mov	r0, r6
    368a:	47a8      	blx	r5
    368c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    368e:	e7fe      	b.n	368e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3690:	2000004c 	.word	0x2000004c

00003694 <mpsl_init>:
    3694:	b570      	push	{r4, r5, r6, lr}
    3696:	4c17      	ldr	r4, [pc, #92]	; (36f4 <mpsl_init+0x60>)
    3698:	4606      	mov	r6, r0
    369a:	460d      	mov	r5, r1
    369c:	7860      	ldrb	r0, [r4, #1]
    369e:	b110      	cbz	r0, 36a6 <mpsl_init+0x12>
    36a0:	f04f 30ff 	mov.w	r0, #4294967295
    36a4:	bd70      	pop	{r4, r5, r6, pc}
    36a6:	b906      	cbnz	r6, 36aa <mpsl_init+0x16>
    36a8:	4e13      	ldr	r6, [pc, #76]	; (36f8 <mpsl_init+0x64>)
    36aa:	6062      	str	r2, [r4, #4]
    36ac:	7025      	strb	r5, [r4, #0]
    36ae:	f7ff ffab 	bl	3608 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    36b2:	f7ff ffb9 	bl	3628 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    36b6:	4630      	mov	r0, r6
    36b8:	f7ff fe9a 	bl	33f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    36bc:	0006      	movs	r6, r0
    36be:	d1f1      	bne.n	36a4 <mpsl_init+0x10>
    36c0:	f7fe ff54 	bl	256c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    36c4:	f7ff ff12 	bl	34ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    36c8:	f00b fb5a 	bl	ed80 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    36cc:	4628      	mov	r0, r5
    36ce:	f00b fbfd 	bl	eecc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    36d2:	2001      	movs	r0, #1
    36d4:	2d00      	cmp	r5, #0
    36d6:	db09      	blt.n	36ec <mpsl_init+0x58>
    36d8:	f005 011f 	and.w	r1, r5, #31
    36dc:	fa00 f101 	lsl.w	r1, r0, r1
    36e0:	096a      	lsrs	r2, r5, #5
    36e2:	0092      	lsls	r2, r2, #2
    36e4:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    36e8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    36ec:	7060      	strb	r0, [r4, #1]
    36ee:	4630      	mov	r0, r6
    36f0:	bd70      	pop	{r4, r5, r6, pc}
    36f2:	0000      	.short	0x0000
    36f4:	2000004c 	.word	0x2000004c
    36f8:	0000ef08 	.word	0x0000ef08

000036fc <mpsl_is_initialized>:
    36fc:	4801      	ldr	r0, [pc, #4]	; (3704 <mpsl_is_initialized+0x8>)
    36fe:	7840      	ldrb	r0, [r0, #1]
    3700:	4770      	bx	lr
    3702:	0000      	.short	0x0000
    3704:	2000004c 	.word	0x2000004c

00003708 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3708:	4807      	ldr	r0, [pc, #28]	; (3728 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    370a:	f990 0000 	ldrsb.w	r0, [r0]
    370e:	2800      	cmp	r0, #0
    3710:	db09      	blt.n	3726 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3712:	f000 021f 	and.w	r2, r0, #31
    3716:	2101      	movs	r1, #1
    3718:	4091      	lsls	r1, r2
    371a:	0940      	lsrs	r0, r0, #5
    371c:	0080      	lsls	r0, r0, #2
    371e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3722:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3726:	4770      	bx	lr
    3728:	2000004c 	.word	0x2000004c

0000372c <mpsl_temperature_get>:
    372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3730:	2601      	movs	r6, #1
    3732:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3736:	0331      	lsls	r1, r6, #12
    3738:	f04f 0800 	mov.w	r8, #0
    373c:	4640      	mov	r0, r8
    373e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3742:	f3bf 8f4f 	dsb	sy
    3746:	f3bf 8f6f 	isb	sy
    374a:	4c16      	ldr	r4, [pc, #88]	; (37a4 <mpsl_temperature_get+0x78>)
    374c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3750:	200c      	movs	r0, #12
    3752:	f00b fbe7 	bl	ef24 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3756:	4d14      	ldr	r5, [pc, #80]	; (37a8 <mpsl_temperature_get+0x7c>)
    3758:	6828      	ldr	r0, [r5, #0]
    375a:	43c0      	mvns	r0, r0
    375c:	f340 1700 	sbfx	r7, r0, #4, #1
    3760:	6828      	ldr	r0, [r5, #0]
    3762:	f040 0010 	orr.w	r0, r0, #16
    3766:	6028      	str	r0, [r5, #0]
    3768:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    376c:	6026      	str	r6, [r4, #0]
    376e:	1c7f      	adds	r7, r7, #1
    3770:	e002      	b.n	3778 <mpsl_temperature_get+0x4c>
    3772:	bf00      	nop
    3774:	f000 f890 	bl	3898 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3778:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    377c:	2800      	cmp	r0, #0
    377e:	d0f9      	beq.n	3774 <mpsl_temperature_get+0x48>
    3780:	b91f      	cbnz	r7, 378a <mpsl_temperature_get+0x5e>
    3782:	6828      	ldr	r0, [r5, #0]
    3784:	f020 0010 	bic.w	r0, r0, #16
    3788:	6028      	str	r0, [r5, #0]
    378a:	4808      	ldr	r0, [pc, #32]	; (37ac <mpsl_temperature_get+0x80>)
    378c:	6805      	ldr	r5, [r0, #0]
    378e:	6066      	str	r6, [r4, #4]
    3790:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3794:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3798:	200c      	movs	r0, #12
    379a:	f00b fbc3 	bl	ef24 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    379e:	4628      	mov	r0, r5
    37a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37a4:	4000c000 	.word	0x4000c000
    37a8:	e000ed10 	.word	0xe000ed10
    37ac:	4000c508 	.word	0x4000c508

000037b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    37b0:	b510      	push	{r4, lr}
    37b2:	4602      	mov	r2, r0
    37b4:	2005      	movs	r0, #5
    37b6:	490c      	ldr	r1, [pc, #48]	; (37e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    37b8:	e004      	b.n	37c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    37ba:	bf00      	nop
    37bc:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    37c0:	791b      	ldrb	r3, [r3, #4]
    37c2:	b133      	cbz	r3, 37d2 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    37c4:	1e40      	subs	r0, r0, #1
    37c6:	b2c0      	uxtb	r0, r0
    37c8:	d2f8      	bcs.n	37bc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    37ca:	214b      	movs	r1, #75	; 0x4b
    37cc:	2069      	movs	r0, #105	; 0x69
    37ce:	f7ff ff3d 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37d2:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    37d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    37da:	2200      	movs	r2, #0
    37dc:	714a      	strb	r2, [r1, #5]
    37de:	718a      	strb	r2, [r1, #6]
    37e0:	2201      	movs	r2, #1
    37e2:	710a      	strb	r2, [r1, #4]
    37e4:	bd10      	pop	{r4, pc}
    37e6:	0000      	.short	0x0000
    37e8:	20000d68 	.word	0x20000d68

000037ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    37ec:	b510      	push	{r4, lr}
    37ee:	2805      	cmp	r0, #5
    37f0:	d301      	bcc.n	37f6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    37f2:	215a      	movs	r1, #90	; 0x5a
    37f4:	e006      	b.n	3804 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    37f6:	490a      	ldr	r1, [pc, #40]	; (3820 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    37f8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    37fc:	7901      	ldrb	r1, [r0, #4]
    37fe:	2901      	cmp	r1, #1
    3800:	d003      	beq.n	380a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3802:	215b      	movs	r1, #91	; 0x5b
    3804:	2069      	movs	r0, #105	; 0x69
    3806:	f7ff ff21 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    380a:	7941      	ldrb	r1, [r0, #5]
    380c:	7982      	ldrb	r2, [r0, #6]
    380e:	1c49      	adds	r1, r1, #1
    3810:	b2c9      	uxtb	r1, r1
    3812:	428a      	cmp	r2, r1
    3814:	d000      	beq.n	3818 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3816:	7141      	strb	r1, [r0, #5]
    3818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    381c:	f7ff bf74 	b.w	3708 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3820:	20000d68 	.word	0x20000d68

00003824 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3824:	b570      	push	{r4, r5, r6, lr}
    3826:	2505      	movs	r5, #5
    3828:	4e0e      	ldr	r6, [pc, #56]	; (3864 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    382a:	4c0f      	ldr	r4, [pc, #60]	; (3868 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    382c:	e016      	b.n	385c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    382e:	7821      	ldrb	r1, [r4, #0]
    3830:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3834:	7902      	ldrb	r2, [r0, #4]
    3836:	2a01      	cmp	r2, #1
    3838:	d108      	bne.n	384c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    383a:	7942      	ldrb	r2, [r0, #5]
    383c:	7983      	ldrb	r3, [r0, #6]
    383e:	429a      	cmp	r2, r3
    3840:	d004      	beq.n	384c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3842:	7942      	ldrb	r2, [r0, #5]
    3844:	7182      	strb	r2, [r0, #6]
    3846:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    384a:	4780      	blx	r0
    384c:	7820      	ldrb	r0, [r4, #0]
    384e:	1c40      	adds	r0, r0, #1
    3850:	b2c0      	uxtb	r0, r0
    3852:	7020      	strb	r0, [r4, #0]
    3854:	2805      	cmp	r0, #5
    3856:	d301      	bcc.n	385c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3858:	2000      	movs	r0, #0
    385a:	7020      	strb	r0, [r4, #0]
    385c:	1e6d      	subs	r5, r5, #1
    385e:	b2ed      	uxtb	r5, r5
    3860:	d2e5      	bcs.n	382e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3862:	bd70      	pop	{r4, r5, r6, pc}
    3864:	20000d68 	.word	0x20000d68
    3868:	200003a9 	.word	0x200003a9

0000386c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    386c:	b500      	push	{lr}
    386e:	f00b fb88 	bl	ef82 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3872:	b940      	cbnz	r0, 3886 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3874:	f00b fb8f 	bl	ef96 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3878:	b928      	cbnz	r0, 3886 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    387a:	f00b fba3 	bl	efc4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    387e:	b910      	cbnz	r0, 3886 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3880:	f00b fbb4 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3884:	b108      	cbz	r0, 388a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3886:	4802      	ldr	r0, [pc, #8]	; (3890 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3888:	bd00      	pop	{pc}
    388a:	4802      	ldr	r0, [pc, #8]	; (3894 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    388c:	bd00      	pop	{pc}
    388e:	0000      	.short	0x0000
    3890:	4000050c 	.word	0x4000050c
    3894:	4001e700 	.word	0x4001e700

00003898 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3898:	b510      	push	{r4, lr}
    389a:	f00b fba7 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    389e:	b330      	cbz	r0, 38ee <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    38a0:	f3ef 8010 	mrs	r0, PRIMASK
    38a4:	b1c8      	cbz	r0, 38da <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    38a6:	2100      	movs	r1, #0
    38a8:	b672      	cpsid	i
    38aa:	4812      	ldr	r0, [pc, #72]	; (38f4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    38ac:	6802      	ldr	r2, [r0, #0]
    38ae:	6803      	ldr	r3, [r0, #0]
    38b0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    38b4:	f043 0310 	orr.w	r3, r3, #16
    38b8:	6003      	str	r3, [r0, #0]
    38ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    38be:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    38c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    38c6:	431c      	orrs	r4, r3
    38c8:	d000      	beq.n	38cc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    38ca:	bf40      	sev
    38cc:	bf20      	wfe
    38ce:	bf00      	nop
    38d0:	bf00      	nop
    38d2:	bf00      	nop
    38d4:	bf00      	nop
    38d6:	b112      	cbz	r2, 38de <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    38d8:	e005      	b.n	38e6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    38da:	2101      	movs	r1, #1
    38dc:	e7e4      	b.n	38a8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    38de:	6802      	ldr	r2, [r0, #0]
    38e0:	f022 0210 	bic.w	r2, r2, #16
    38e4:	6002      	str	r2, [r0, #0]
    38e6:	2900      	cmp	r1, #0
    38e8:	d000      	beq.n	38ec <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    38ea:	b662      	cpsie	i
    38ec:	bd10      	pop	{r4, pc}
    38ee:	bf20      	wfe
    38f0:	bd10      	pop	{r4, pc}
    38f2:	0000      	.short	0x0000
    38f4:	e000ed10 	.word	0xe000ed10

000038f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    38f8:	b510      	push	{r4, lr}
    38fa:	ea80 0401 	eor.w	r4, r0, r1
    38fe:	4603      	mov	r3, r0
    3900:	07a4      	lsls	r4, r4, #30
    3902:	d007      	beq.n	3914 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x1c>
    3904:	e015      	b.n	3932 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    3906:	2a00      	cmp	r2, #0
    3908:	d015      	beq.n	3936 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3e>
    390a:	f811 4b01 	ldrb.w	r4, [r1], #1
    390e:	f803 4b01 	strb.w	r4, [r3], #1
    3912:	1e52      	subs	r2, r2, #1
    3914:	079c      	lsls	r4, r3, #30
    3916:	d1f6      	bne.n	3906 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe>
    3918:	e002      	b.n	3920 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x28>
    391a:	c910      	ldmia	r1!, {r4}
    391c:	1f12      	subs	r2, r2, #4
    391e:	c310      	stmia	r3!, {r4}
    3920:	2a04      	cmp	r2, #4
    3922:	d2fa      	bcs.n	391a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x22>
    3924:	e005      	b.n	3932 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    3926:	bf00      	nop
    3928:	f811 4b01 	ldrb.w	r4, [r1], #1
    392c:	f803 4b01 	strb.w	r4, [r3], #1
    3930:	1e52      	subs	r2, r2, #1
    3932:	2a00      	cmp	r2, #0
    3934:	d1f8      	bne.n	3928 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x30>
    3936:	bd10      	pop	{r4, pc}
    3938:	b570      	push	{r4, r5, r6, lr}
    393a:	4c0e      	ldr	r4, [pc, #56]	; (3974 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7c>)
    393c:	7860      	ldrb	r0, [r4, #1]
    393e:	2800      	cmp	r0, #0
    3940:	d117      	bne.n	3972 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    3942:	7820      	ldrb	r0, [r4, #0]
    3944:	2500      	movs	r5, #0
    3946:	2801      	cmp	r0, #1
    3948:	d106      	bne.n	3958 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    394a:	2002      	movs	r0, #2
    394c:	7020      	strb	r0, [r4, #0]
    394e:	68a0      	ldr	r0, [r4, #8]
    3950:	b110      	cbz	r0, 3958 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    3952:	68a0      	ldr	r0, [r4, #8]
    3954:	4780      	blx	r0
    3956:	60a5      	str	r5, [r4, #8]
    3958:	7820      	ldrb	r0, [r4, #0]
    395a:	2803      	cmp	r0, #3
    395c:	d109      	bne.n	3972 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    395e:	7025      	strb	r5, [r4, #0]
    3960:	68a0      	ldr	r0, [r4, #8]
    3962:	2800      	cmp	r0, #0
    3964:	d005      	beq.n	3972 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    3966:	6860      	ldr	r0, [r4, #4]
    3968:	6940      	ldr	r0, [r0, #20]
    396a:	4780      	blx	r0
    396c:	68a0      	ldr	r0, [r4, #8]
    396e:	4780      	blx	r0
    3970:	60a5      	str	r5, [r4, #8]
    3972:	bd70      	pop	{r4, r5, r6, pc}
    3974:	20000054 	.word	0x20000054

00003978 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    3978:	b510      	push	{r4, lr}
    397a:	4c08      	ldr	r4, [pc, #32]	; (399c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    397c:	7820      	ldrb	r0, [r4, #0]
    397e:	2802      	cmp	r0, #2
    3980:	d002      	beq.n	3988 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    3982:	7820      	ldrb	r0, [r4, #0]
    3984:	2803      	cmp	r0, #3
    3986:	d102      	bne.n	398e <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    3988:	6860      	ldr	r0, [r4, #4]
    398a:	6880      	ldr	r0, [r0, #8]
    398c:	4780      	blx	r0
    398e:	2000      	movs	r0, #0
    3990:	7060      	strb	r0, [r4, #1]
    3992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3996:	f7ff bfcf 	b.w	3938 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    399a:	0000      	.short	0x0000
    399c:	20000054 	.word	0x20000054

000039a0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    39a0:	b538      	push	{r3, r4, r5, lr}
    39a2:	4604      	mov	r4, r0
    39a4:	2805      	cmp	r0, #5
    39a6:	d304      	bcc.n	39b2 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    39a8:	f44f 7189 	mov.w	r1, #274	; 0x112
    39ac:	2068      	movs	r0, #104	; 0x68
    39ae:	f7ff fe4d 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39b2:	f7ff ffc1 	bl	3938 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    39b6:	4d0e      	ldr	r5, [pc, #56]	; (39f0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>)
    39b8:	2001      	movs	r0, #1
    39ba:	7068      	strb	r0, [r5, #1]
    39bc:	7828      	ldrb	r0, [r5, #0]
    39be:	2802      	cmp	r0, #2
    39c0:	d115      	bne.n	39ee <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x4e>
    39c2:	6868      	ldr	r0, [r5, #4]
    39c4:	68c1      	ldr	r1, [r0, #12]
    39c6:	4620      	mov	r0, r4
    39c8:	4788      	blx	r1
    39ca:	490a      	ldr	r1, [pc, #40]	; (39f4 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x54>)
    39cc:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    39d0:	7852      	ldrb	r2, [r2, #1]
    39d2:	4282      	cmp	r2, r0
    39d4:	d201      	bcs.n	39da <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3a>
    39d6:	2001      	movs	r0, #1
    39d8:	e001      	b.n	39de <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3e>
    39da:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    39de:	f88d 0000 	strb.w	r0, [sp]
    39e2:	f88d 4001 	strb.w	r4, [sp, #1]
    39e6:	6868      	ldr	r0, [r5, #4]
    39e8:	6801      	ldr	r1, [r0, #0]
    39ea:	4668      	mov	r0, sp
    39ec:	4788      	blx	r1
    39ee:	bd38      	pop	{r3, r4, r5, pc}
    39f0:	20000054 	.word	0x20000054
    39f4:	2000177e 	.word	0x2000177e

000039f8 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    39f8:	4905      	ldr	r1, [pc, #20]	; (3a10 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    39fa:	780a      	ldrb	r2, [r1, #0]
    39fc:	2a02      	cmp	r2, #2
    39fe:	d004      	beq.n	3a0a <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3a00:	780a      	ldrb	r2, [r1, #0]
    3a02:	2a03      	cmp	r2, #3
    3a04:	d001      	beq.n	3a0a <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3a06:	2000      	movs	r0, #0
    3a08:	4770      	bx	lr
    3a0a:	6849      	ldr	r1, [r1, #4]
    3a0c:	6909      	ldr	r1, [r1, #16]
    3a0e:	4708      	bx	r1
    3a10:	20000054 	.word	0x20000054

00003a14 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    3a14:	b510      	push	{r4, lr}
    3a16:	b158      	cbz	r0, 3a30 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    3a18:	4908      	ldr	r1, [pc, #32]	; (3a3c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    3a1a:	780a      	ldrb	r2, [r1, #0]
    3a1c:	2a02      	cmp	r2, #2
    3a1e:	d002      	beq.n	3a26 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    3a20:	780a      	ldrb	r2, [r1, #0]
    3a22:	2a03      	cmp	r2, #3
    3a24:	d109      	bne.n	3a3a <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    3a26:	6849      	ldr	r1, [r1, #4]
    3a28:	6849      	ldr	r1, [r1, #4]
    3a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3a2e:	4708      	bx	r1
    3a30:	f240 1127 	movw	r1, #295	; 0x127
    3a34:	2068      	movs	r0, #104	; 0x68
    3a36:	f7ff fe09 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a3a:	bd10      	pop	{r4, pc}
    3a3c:	20000054 	.word	0x20000054

00003a40 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    3a40:	4805      	ldr	r0, [pc, #20]	; (3a58 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    3a42:	7801      	ldrb	r1, [r0, #0]
    3a44:	2902      	cmp	r1, #2
    3a46:	d004      	beq.n	3a52 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3a48:	7801      	ldrb	r1, [r0, #0]
    3a4a:	2903      	cmp	r1, #3
    3a4c:	d001      	beq.n	3a52 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3a4e:	2000      	movs	r0, #0
    3a50:	4770      	bx	lr
    3a52:	6840      	ldr	r0, [r0, #4]
    3a54:	6980      	ldr	r0, [r0, #24]
    3a56:	4700      	bx	r0
    3a58:	20000054 	.word	0x20000054
    3a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a5e:	4c18      	ldr	r4, [pc, #96]	; (3ac0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x80>)
    3a60:	7960      	ldrb	r0, [r4, #5]
    3a62:	2803      	cmp	r0, #3
    3a64:	d203      	bcs.n	3a6e <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x2e>
    3a66:	bf00      	nop
    3a68:	f04f 0103 	mov.w	r1, #3
    3a6c:	e000      	b.n	3a70 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x30>
    3a6e:	4601      	mov	r1, r0
    3a70:	f88d 1001 	strb.w	r1, [sp, #1]
    3a74:	d201      	bcs.n	3a7a <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x3a>
    3a76:	f04f 0003 	mov.w	r0, #3
    3a7a:	f88d 0000 	strb.w	r0, [sp]
    3a7e:	78e0      	ldrb	r0, [r4, #3]
    3a80:	f8ad 0004 	strh.w	r0, [sp, #4]
    3a84:	78a0      	ldrb	r0, [r4, #2]
    3a86:	f8ad 0002 	strh.w	r0, [sp, #2]
    3a8a:	4668      	mov	r0, sp
    3a8c:	f008 ff1e 	bl	c8cc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3a90:	b108      	cbz	r0, 3a96 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x56>
    3a92:	219c      	movs	r1, #156	; 0x9c
    3a94:	e010      	b.n	3ab8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3a96:	68a0      	ldr	r0, [r4, #8]
    3a98:	9002      	str	r0, [sp, #8]
    3a9a:	a802      	add	r0, sp, #8
    3a9c:	f008 ff2e 	bl	c8fc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3aa0:	b108      	cbz	r0, 3aa6 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x66>
    3aa2:	21a0      	movs	r1, #160	; 0xa0
    3aa4:	e008      	b.n	3ab8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3aa6:	4807      	ldr	r0, [pc, #28]	; (3ac4 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x84>)
    3aa8:	6800      	ldr	r0, [r0, #0]
    3aaa:	9003      	str	r0, [sp, #12]
    3aac:	a803      	add	r0, sp, #12
    3aae:	f00e f978 	bl	11da2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3ab2:	2800      	cmp	r0, #0
    3ab4:	d003      	beq.n	3abe <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x7e>
    3ab6:	21a4      	movs	r1, #164	; 0xa4
    3ab8:	2003      	movs	r0, #3
    3aba:	f000 f8a9 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3abe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3ac0:	2000006c 	.word	0x2000006c
    3ac4:	00003d04 	.word	0x00003d04

00003ac8 <sdc_build_revision_get>:
    3ac8:	b510      	push	{r4, lr}
    3aca:	b128      	cbz	r0, 3ad8 <sdc_build_revision_get+0x10>
    3acc:	2214      	movs	r2, #20
    3ace:	4904      	ldr	r1, [pc, #16]	; (3ae0 <sdc_build_revision_get+0x18>)
    3ad0:	f7ff ff12 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3ad4:	2000      	movs	r0, #0
    3ad6:	bd10      	pop	{r4, pc}
    3ad8:	f06f 0015 	mvn.w	r0, #21
    3adc:	bd10      	pop	{r4, pc}
    3ade:	0000      	.short	0x0000
    3ae0:	00003d36 	.word	0x00003d36

00003ae4 <sdc_cfg_set>:
    3ae4:	b510      	push	{r4, lr}
    3ae6:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    3aea:	bb18      	cbnz	r0, 3b34 <sdc_cfg_set+0x50>
    3aec:	b1c9      	cbz	r1, 3b22 <sdc_cfg_set+0x3e>
    3aee:	b14a      	cbz	r2, 3b04 <sdc_cfg_set+0x20>
    3af0:	4b11      	ldr	r3, [pc, #68]	; (3b38 <sdc_cfg_set+0x54>)
    3af2:	2901      	cmp	r1, #1
    3af4:	d009      	beq.n	3b0a <sdc_cfg_set+0x26>
    3af6:	2902      	cmp	r1, #2
    3af8:	d00a      	beq.n	3b10 <sdc_cfg_set+0x2c>
    3afa:	2903      	cmp	r1, #3
    3afc:	d00b      	beq.n	3b16 <sdc_cfg_set+0x32>
    3afe:	2904      	cmp	r1, #4
    3b00:	d118      	bne.n	3b34 <sdc_cfg_set+0x50>
    3b02:	e00c      	b.n	3b1e <sdc_cfg_set+0x3a>
    3b04:	f06f 0015 	mvn.w	r0, #21
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	7810      	ldrb	r0, [r2, #0]
    3b0c:	7218      	strb	r0, [r3, #8]
    3b0e:	e008      	b.n	3b22 <sdc_cfg_set+0x3e>
    3b10:	7810      	ldrb	r0, [r2, #0]
    3b12:	7258      	strb	r0, [r3, #9]
    3b14:	e005      	b.n	3b22 <sdc_cfg_set+0x3e>
    3b16:	6810      	ldr	r0, [r2, #0]
    3b18:	f8c3 000a 	str.w	r0, [r3, #10]
    3b1c:	e001      	b.n	3b22 <sdc_cfg_set+0x3e>
    3b1e:	6810      	ldr	r0, [r2, #0]
    3b20:	6118      	str	r0, [r3, #16]
    3b22:	4905      	ldr	r1, [pc, #20]	; (3b38 <sdc_cfg_set+0x54>)
    3b24:	2201      	movs	r2, #1
    3b26:	3108      	adds	r1, #8
    3b28:	2000      	movs	r0, #0
    3b2a:	f00b facb 	bl	f0c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    3b2e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3b32:	dbe9      	blt.n	3b08 <sdc_cfg_set+0x24>
    3b34:	4620      	mov	r0, r4
    3b36:	bd10      	pop	{r4, pc}
    3b38:	20000064 	.word	0x20000064

00003b3c <sdc_enable>:
    3b3c:	b538      	push	{r3, r4, r5, lr}
    3b3e:	460d      	mov	r5, r1
    3b40:	b1d0      	cbz	r0, 3b78 <sdc_enable+0x3c>
    3b42:	b1cd      	cbz	r5, 3b78 <sdc_enable+0x3c>
    3b44:	f7ff fe34 	bl	37b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3b48:	4c0d      	ldr	r4, [pc, #52]	; (3b80 <sdc_enable+0x44>)
    3b4a:	2200      	movs	r2, #0
    3b4c:	f104 0108 	add.w	r1, r4, #8
    3b50:	7020      	strb	r0, [r4, #0]
    3b52:	4628      	mov	r0, r5
    3b54:	f00b fab6 	bl	f0c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    3b58:	f00e fdf3 	bl	12742 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3b5c:	2100      	movs	r1, #0
    3b5e:	7820      	ldrb	r0, [r4, #0]
    3b60:	f009 fa08 	bl	cf74 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3b64:	7860      	ldrb	r0, [r4, #1]
    3b66:	f88d 0000 	strb.w	r0, [sp]
    3b6a:	4668      	mov	r0, sp
    3b6c:	f00e f907 	bl	11d7e <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3b70:	2001      	movs	r0, #1
    3b72:	70a0      	strb	r0, [r4, #2]
    3b74:	2000      	movs	r0, #0
    3b76:	bd38      	pop	{r3, r4, r5, pc}
    3b78:	f06f 0015 	mvn.w	r0, #21
    3b7c:	bd38      	pop	{r3, r4, r5, pc}
    3b7e:	0000      	.short	0x0000
    3b80:	20000064 	.word	0x20000064

00003b84 <sdc_init>:
    3b84:	b570      	push	{r4, r5, r6, lr}
    3b86:	0004      	movs	r4, r0
    3b88:	d00b      	beq.n	3ba2 <sdc_init+0x1e>
    3b8a:	f7ff fdb7 	bl	36fc <mpsl_is_initialized>
    3b8e:	f04f 35ff 	mov.w	r5, #4294967295
    3b92:	b120      	cbz	r0, 3b9e <sdc_init+0x1a>
    3b94:	f7ff fc7e 	bl	3494 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3b98:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3b9c:	d904      	bls.n	3ba8 <sdc_init+0x24>
    3b9e:	4628      	mov	r0, r5
    3ba0:	bd70      	pop	{r4, r5, r6, pc}
    3ba2:	f06f 0015 	mvn.w	r0, #21
    3ba6:	bd70      	pop	{r4, r5, r6, pc}
    3ba8:	2200      	movs	r2, #0
    3baa:	4b14      	ldr	r3, [pc, #80]	; (3bfc <sdc_init+0x78>)
    3bac:	4611      	mov	r1, r2
    3bae:	bf00      	nop
    3bb0:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    3bb4:	4285      	cmp	r5, r0
    3bb6:	d303      	bcc.n	3bc0 <sdc_init+0x3c>
    3bb8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3bbc:	7882      	ldrb	r2, [r0, #2]
    3bbe:	e003      	b.n	3bc8 <sdc_init+0x44>
    3bc0:	1c49      	adds	r1, r1, #1
    3bc2:	b2c9      	uxtb	r1, r1
    3bc4:	290c      	cmp	r1, #12
    3bc6:	d3f3      	bcc.n	3bb0 <sdc_init+0x2c>
    3bc8:	480d      	ldr	r0, [pc, #52]	; (3c00 <sdc_init+0x7c>)
    3bca:	7042      	strb	r2, [r0, #1]
    3bcc:	6044      	str	r4, [r0, #4]
    3bce:	480d      	ldr	r0, [pc, #52]	; (3c04 <sdc_init+0x80>)
    3bd0:	f000 f9e2 	bl	3f98 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3bd4:	f3ef 8410 	mrs	r4, PRIMASK
    3bd8:	b672      	cpsid	i
    3bda:	480b      	ldr	r0, [pc, #44]	; (3c08 <sdc_init+0x84>)
    3bdc:	f06f 010c 	mvn.w	r1, #12
    3be0:	f000 fce4 	bl	45ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3be4:	4809      	ldr	r0, [pc, #36]	; (3c0c <sdc_init+0x88>)
    3be6:	f000 fda7 	bl	4738 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3bea:	b118      	cbz	r0, 3bf4 <sdc_init+0x70>
    3bec:	21b3      	movs	r1, #179	; 0xb3
    3bee:	2003      	movs	r0, #3
    3bf0:	f000 f80e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bf4:	b904      	cbnz	r4, 3bf8 <sdc_init+0x74>
    3bf6:	b662      	cpsie	i
    3bf8:	2000      	movs	r0, #0
    3bfa:	bd70      	pop	{r4, r5, r6, pc}
    3bfc:	00003d06 	.word	0x00003d06
    3c00:	20000064 	.word	0x20000064
    3c04:	00003a5d 	.word	0x00003a5d
    3c08:	4000e000 	.word	0x4000e000
    3c0c:	00003d4d 	.word	0x00003d4d

00003c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3c10:	b50e      	push	{r1, r2, r3, lr}
    3c12:	b672      	cpsid	i
    3c14:	4a15      	ldr	r2, [pc, #84]	; (3c6c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3c16:	6855      	ldr	r5, [r2, #4]
    3c18:	b1d5      	cbz	r5, 3c50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3c1a:	2200      	movs	r2, #0
    3c1c:	4603      	mov	r3, r0
    3c1e:	466e      	mov	r6, sp
    3c20:	240a      	movs	r4, #10
    3c22:	e003      	b.n	3c2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3c24:	fbb0 f0f4 	udiv	r0, r0, r4
    3c28:	1c52      	adds	r2, r2, #1
    3c2a:	b2d2      	uxtb	r2, r2
    3c2c:	2800      	cmp	r0, #0
    3c2e:	d1f9      	bne.n	3c24 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3c30:	54b0      	strb	r0, [r6, r2]
    3c32:	e009      	b.n	3c48 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3c34:	fbb3 f0f4 	udiv	r0, r3, r4
    3c38:	fb04 3010 	mls	r0, r4, r0, r3
    3c3c:	fbb3 f3f4 	udiv	r3, r3, r4
    3c40:	1e52      	subs	r2, r2, #1
    3c42:	b2d2      	uxtb	r2, r2
    3c44:	3030      	adds	r0, #48	; 0x30
    3c46:	54b0      	strb	r0, [r6, r2]
    3c48:	2a00      	cmp	r2, #0
    3c4a:	d1f3      	bne.n	3c34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3c4c:	4630      	mov	r0, r6
    3c4e:	47a8      	blx	r5
    3c50:	f3bf 8f4f 	dsb	sy
    3c54:	4806      	ldr	r0, [pc, #24]	; (3c70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3c56:	6801      	ldr	r1, [r0, #0]
    3c58:	4a06      	ldr	r2, [pc, #24]	; (3c74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3c5a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3c5e:	4311      	orrs	r1, r2
    3c60:	6001      	str	r1, [r0, #0]
    3c62:	f3bf 8f4f 	dsb	sy
    3c66:	bf00      	nop
    3c68:	e7fd      	b.n	3c66 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3c6a:	0000      	.short	0x0000
    3c6c:	20000064 	.word	0x20000064
    3c70:	e000ed0c 	.word	0xe000ed0c
    3c74:	05fa0004 	.word	0x05fa0004

00003c78 <sdc_support_adv>:
    3c78:	4805      	ldr	r0, [pc, #20]	; (3c90 <sdc_support_adv+0x18>)
    3c7a:	b510      	push	{r4, lr}
    3c7c:	7880      	ldrb	r0, [r0, #2]
    3c7e:	b110      	cbz	r0, 3c86 <sdc_support_adv+0xe>
    3c80:	f04f 30ff 	mov.w	r0, #4294967295
    3c84:	bd10      	pop	{r4, pc}
    3c86:	f009 f997 	bl	cfb8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3c8a:	2000      	movs	r0, #0
    3c8c:	bd10      	pop	{r4, pc}
    3c8e:	0000      	.short	0x0000
    3c90:	20000064 	.word	0x20000064

00003c94 <sdc_support_dle>:
    3c94:	4805      	ldr	r0, [pc, #20]	; (3cac <sdc_support_dle+0x18>)
    3c96:	b510      	push	{r4, lr}
    3c98:	7880      	ldrb	r0, [r0, #2]
    3c9a:	b110      	cbz	r0, 3ca2 <sdc_support_dle+0xe>
    3c9c:	f04f 30ff 	mov.w	r0, #4294967295
    3ca0:	bd10      	pop	{r4, pc}
    3ca2:	f008 fea9 	bl	c9f8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3ca6:	2000      	movs	r0, #0
    3ca8:	bd10      	pop	{r4, pc}
    3caa:	0000      	.short	0x0000
    3cac:	20000064 	.word	0x20000064

00003cb0 <sdc_support_le_2m_phy>:
    3cb0:	4805      	ldr	r0, [pc, #20]	; (3cc8 <sdc_support_le_2m_phy+0x18>)
    3cb2:	b510      	push	{r4, lr}
    3cb4:	7880      	ldrb	r0, [r0, #2]
    3cb6:	b110      	cbz	r0, 3cbe <sdc_support_le_2m_phy+0xe>
    3cb8:	f04f 30ff 	mov.w	r0, #4294967295
    3cbc:	bd10      	pop	{r4, pc}
    3cbe:	f00e f9e9 	bl	12094 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3cc2:	2000      	movs	r0, #0
    3cc4:	bd10      	pop	{r4, pc}
    3cc6:	0000      	.short	0x0000
    3cc8:	20000064 	.word	0x20000064

00003ccc <sdc_support_le_coded_phy>:
    3ccc:	4805      	ldr	r0, [pc, #20]	; (3ce4 <sdc_support_le_coded_phy+0x18>)
    3cce:	b510      	push	{r4, lr}
    3cd0:	7880      	ldrb	r0, [r0, #2]
    3cd2:	b110      	cbz	r0, 3cda <sdc_support_le_coded_phy+0xe>
    3cd4:	f04f 30ff 	mov.w	r0, #4294967295
    3cd8:	bd10      	pop	{r4, pc}
    3cda:	f00e f9e5 	bl	120a8 <sym_RJCZ3TUNFFUZPTNFXG35SLVXYYJ7NVMTPNXKOXY>
    3cde:	2000      	movs	r0, #0
    3ce0:	bd10      	pop	{r4, pc}
    3ce2:	0000      	.short	0x0000
    3ce4:	20000064 	.word	0x20000064

00003ce8 <sdc_support_slave>:
    3ce8:	4805      	ldr	r0, [pc, #20]	; (3d00 <sdc_support_slave+0x18>)
    3cea:	b510      	push	{r4, lr}
    3cec:	7880      	ldrb	r0, [r0, #2]
    3cee:	b110      	cbz	r0, 3cf6 <sdc_support_slave+0xe>
    3cf0:	f04f 30ff 	mov.w	r0, #4294967295
    3cf4:	bd10      	pop	{r4, pc}
    3cf6:	f009 f971 	bl	cfdc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3cfa:	2000      	movs	r0, #0
    3cfc:	bd10      	pop	{r4, pc}
    3cfe:	0000      	.short	0x0000
    3d00:	20000064 	.word	0x20000064
    3d04:	00010001 	.word	0x00010001
    3d08:	0002000b 	.word	0x0002000b
    3d0c:	0005000a 	.word	0x0005000a
    3d10:	000a0009 	.word	0x000a0009
    3d14:	00140008 	.word	0x00140008
    3d18:	001e0007 	.word	0x001e0007
    3d1c:	00320006 	.word	0x00320006
    3d20:	004b0005 	.word	0x004b0005
    3d24:	00640004 	.word	0x00640004
    3d28:	00960003 	.word	0x00960003
    3d2c:	00fa0002 	.word	0x00fa0002
    3d30:	01f40001 	.word	0x01f40001
    3d34:	c7e50000 	.word	0xc7e50000
    3d38:	0091d99c 	.word	0x0091d99c
    3d3c:	fbea661d 	.word	0xfbea661d
    3d40:	2f987b6e 	.word	0x2f987b6e
    3d44:	60f10d42 	.word	0x60f10d42
    3d48:	0000c893 	.word	0x0000c893

00003d4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d4e:	4c12      	ldr	r4, [pc, #72]	; (3d98 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3d50:	2600      	movs	r6, #0
    3d52:	6825      	ldr	r5, [r4, #0]
    3d54:	e011      	b.n	3d7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d56:	9800      	ldr	r0, [sp, #0]
    3d58:	2802      	cmp	r0, #2
    3d5a:	d002      	beq.n	3d62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3d5c:	2803      	cmp	r0, #3
    3d5e:	d10c      	bne.n	3d7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d60:	e006      	b.n	3d70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3d62:	6820      	ldr	r0, [r4, #0]
    3d64:	b110      	cbz	r0, 3d6c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3d66:	2000      	movs	r0, #0
    3d68:	6026      	str	r6, [r4, #0]
    3d6a:	e005      	b.n	3d78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3d6c:	2126      	movs	r1, #38	; 0x26
    3d6e:	e00c      	b.n	3d8a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3d70:	6820      	ldr	r0, [r4, #0]
    3d72:	b168      	cbz	r0, 3d90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3d74:	2001      	movs	r0, #1
    3d76:	6026      	str	r6, [r4, #0]
    3d78:	47a8      	blx	r5
    3d7a:	4668      	mov	r0, sp
    3d7c:	f000 fcae 	bl	46dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3d80:	2800      	cmp	r0, #0
    3d82:	d0e8      	beq.n	3d56 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3d84:	2805      	cmp	r0, #5
    3d86:	d005      	beq.n	3d94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3d88:	2133      	movs	r1, #51	; 0x33
    3d8a:	2004      	movs	r0, #4
    3d8c:	f7ff ff40 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d90:	212b      	movs	r1, #43	; 0x2b
    3d92:	e7fa      	b.n	3d8a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d96:	0000      	.short	0x0000
    3d98:	20000078 	.word	0x20000078

00003d9c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    3d9c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3d9e:	4d22      	ldr	r5, [pc, #136]	; (3e28 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x8c>)
    3da0:	4606      	mov	r6, r0
    3da2:	7828      	ldrb	r0, [r5, #0]
    3da4:	b148      	cbz	r0, 3dba <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3da6:	78ac      	ldrb	r4, [r5, #2]
    3da8:	1c69      	adds	r1, r5, #1
    3daa:	1ca4      	adds	r4, r4, #2
    3dac:	4622      	mov	r2, r4
    3dae:	4630      	mov	r0, r6
    3db0:	f7ff fda2 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3db4:	2000      	movs	r0, #0
    3db6:	7028      	strb	r0, [r5, #0]
    3db8:	e020      	b.n	3dfc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x60>
    3dba:	481c      	ldr	r0, [pc, #112]	; (3e2c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>)
    3dbc:	f008 fe7c 	bl	cab8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3dc0:	2800      	cmp	r0, #0
    3dc2:	d02f      	beq.n	3e24 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x88>
    3dc4:	4c19      	ldr	r4, [pc, #100]	; (3e2c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>)
    3dc6:	7820      	ldrb	r0, [r4, #0]
    3dc8:	2814      	cmp	r0, #20
    3dca:	d104      	bne.n	3dd6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x3a>
    3dcc:	210a      	movs	r1, #10
    3dce:	203e      	movs	r0, #62	; 0x3e
    3dd0:	f000 f82e 	bl	3e30 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>
    3dd4:	b118      	cbz	r0, 3dde <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    3dd6:	7820      	ldrb	r0, [r4, #0]
    3dd8:	280a      	cmp	r0, #10
    3dda:	d005      	beq.n	3de8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4c>
    3ddc:	e009      	b.n	3df2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x56>
    3dde:	4913      	ldr	r1, [pc, #76]	; (3e2c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>)
    3de0:	4630      	mov	r0, r6
    3de2:	f00b fc8a 	bl	f6fa <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3de6:	e008      	b.n	3dfa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5e>
    3de8:	2105      	movs	r1, #5
    3dea:	203e      	movs	r0, #62	; 0x3e
    3dec:	f000 f820 	bl	3e30 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>
    3df0:	b158      	cbz	r0, 3e0a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x6e>
    3df2:	490e      	ldr	r1, [pc, #56]	; (3e2c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>)
    3df4:	4630      	mov	r0, r6
    3df6:	f00b fa43 	bl	f280 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3dfa:	4604      	mov	r4, r0
    3dfc:	b18c      	cbz	r4, 3e22 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x86>
    3dfe:	78b1      	ldrb	r1, [r6, #2]
    3e00:	7830      	ldrb	r0, [r6, #0]
    3e02:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    3e06:	f000 b813 	b.w	3e30 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x94>
    3e0a:	88a0      	ldrh	r0, [r4, #4]
    3e0c:	f8ad 0000 	strh.w	r0, [sp]
    3e10:	a901      	add	r1, sp, #4
    3e12:	4668      	mov	r0, sp
    3e14:	f00b fd86 	bl	f924 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3e18:	b118      	cbz	r0, 3e22 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x86>
    3e1a:	2195      	movs	r1, #149	; 0x95
    3e1c:	2008      	movs	r0, #8
    3e1e:	f7ff fef7 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e22:	2000      	movs	r0, #0
    3e24:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3e26:	0000      	.short	0x0000
    3e28:	20000eb0 	.word	0x20000eb0
    3e2c:	20000d90 	.word	0x20000d90
    3e30:	b570      	push	{r4, r5, r6, lr}
    3e32:	460c      	mov	r4, r1
    3e34:	4605      	mov	r5, r0
    3e36:	f000 f84b 	bl	3ed0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    3e3a:	2800      	cmp	r0, #0
    3e3c:	d002      	beq.n	3e44 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xa8>
    3e3e:	2d3e      	cmp	r5, #62	; 0x3e
    3e40:	d001      	beq.n	3e46 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xaa>
    3e42:	2001      	movs	r0, #1
    3e44:	bd70      	pop	{r4, r5, r6, pc}
    3e46:	2c12      	cmp	r4, #18
    3e48:	d106      	bne.n	3e58 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xbc>
    3e4a:	4806      	ldr	r0, [pc, #24]	; (3e64 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xc8>)
    3e4c:	7801      	ldrb	r1, [r0, #0]
    3e4e:	2902      	cmp	r1, #2
    3e50:	d002      	beq.n	3e58 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xbc>
    3e52:	7840      	ldrb	r0, [r0, #1]
    3e54:	2800      	cmp	r0, #0
    3e56:	d0f5      	beq.n	3e44 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0xa8>
    3e58:	4620      	mov	r0, r4
    3e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3e5e:	f000 b853 	b.w	3f08 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    3e62:	0000      	.short	0x0000
    3e64:	200003aa 	.word	0x200003aa

00003e68 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    3e68:	4901      	ldr	r1, [pc, #4]	; (3e70 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    3e6a:	7048      	strb	r0, [r1, #1]
    3e6c:	4770      	bx	lr
    3e6e:	0000      	.short	0x0000
    3e70:	200003aa 	.word	0x200003aa
    3e74:	b570      	push	{r4, r5, r6, lr}
    3e76:	780a      	ldrb	r2, [r1, #0]
    3e78:	7082      	strb	r2, [r0, #2]
    3e7a:	b33a      	cbz	r2, 3ecc <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    3e7c:	2a01      	cmp	r2, #1
    3e7e:	d825      	bhi.n	3ecc <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    3e80:	2313      	movs	r3, #19
    3e82:	7003      	strb	r3, [r0, #0]
    3e84:	2300      	movs	r3, #0
    3e86:	e00a      	b.n	3e9e <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    3e88:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3e8c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3e90:	78a6      	ldrb	r6, [r4, #2]
    3e92:	70ee      	strb	r6, [r5, #3]
    3e94:	8864      	ldrh	r4, [r4, #2]
    3e96:	0a24      	lsrs	r4, r4, #8
    3e98:	1c5b      	adds	r3, r3, #1
    3e9a:	712c      	strb	r4, [r5, #4]
    3e9c:	b2db      	uxtb	r3, r3
    3e9e:	4293      	cmp	r3, r2
    3ea0:	d3f2      	bcc.n	3e88 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    3ea2:	2300      	movs	r3, #0
    3ea4:	e00b      	b.n	3ebe <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    3ea6:	bf00      	nop
    3ea8:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3eac:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3eb0:	792e      	ldrb	r6, [r5, #4]
    3eb2:	7166      	strb	r6, [r4, #5]
    3eb4:	88ad      	ldrh	r5, [r5, #4]
    3eb6:	0a2d      	lsrs	r5, r5, #8
    3eb8:	1c5b      	adds	r3, r3, #1
    3eba:	71a5      	strb	r5, [r4, #6]
    3ebc:	b2db      	uxtb	r3, r3
    3ebe:	4293      	cmp	r3, r2
    3ec0:	d3f2      	bcc.n	3ea8 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    3ec2:	2101      	movs	r1, #1
    3ec4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3ec8:	b2c0      	uxtb	r0, r0
    3eca:	bd70      	pop	{r4, r5, r6, pc}
    3ecc:	2000      	movs	r0, #0
    3ece:	bd70      	pop	{r4, r5, r6, pc}

00003ed0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3ed0:	2101      	movs	r1, #1
    3ed2:	4a0c      	ldr	r2, [pc, #48]	; (3f04 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3ed4:	2840      	cmp	r0, #64	; 0x40
    3ed6:	d20c      	bcs.n	3ef2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3ed8:	2820      	cmp	r0, #32
    3eda:	d803      	bhi.n	3ee4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3edc:	1e40      	subs	r0, r0, #1
    3ede:	4081      	lsls	r1, r0
    3ee0:	6810      	ldr	r0, [r2, #0]
    3ee2:	e002      	b.n	3eea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3ee4:	3821      	subs	r0, #33	; 0x21
    3ee6:	4081      	lsls	r1, r0
    3ee8:	6850      	ldr	r0, [r2, #4]
    3eea:	4201      	tst	r1, r0
    3eec:	d107      	bne.n	3efe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3eee:	2000      	movs	r0, #0
    3ef0:	4770      	bx	lr
    3ef2:	28ff      	cmp	r0, #255	; 0xff
    3ef4:	d003      	beq.n	3efe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3ef6:	3840      	subs	r0, #64	; 0x40
    3ef8:	4081      	lsls	r1, r0
    3efa:	6890      	ldr	r0, [r2, #8]
    3efc:	e7f5      	b.n	3eea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3efe:	2001      	movs	r0, #1
    3f00:	4770      	bx	lr
    3f02:	0000      	.short	0x0000
    3f04:	2000007c 	.word	0x2000007c

00003f08 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3f08:	2101      	movs	r1, #1
    3f0a:	1e40      	subs	r0, r0, #1
    3f0c:	4081      	lsls	r1, r0
    3f0e:	4804      	ldr	r0, [pc, #16]	; (3f20 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3f10:	68c0      	ldr	r0, [r0, #12]
    3f12:	4201      	tst	r1, r0
    3f14:	d001      	beq.n	3f1a <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3f16:	2001      	movs	r0, #1
    3f18:	4770      	bx	lr
    3f1a:	2000      	movs	r0, #0
    3f1c:	4770      	bx	lr
    3f1e:	0000      	.short	0x0000
    3f20:	2000007c 	.word	0x2000007c

00003f24 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3f24:	4901      	ldr	r1, [pc, #4]	; (3f2c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3f26:	6800      	ldr	r0, [r0, #0]
    3f28:	60c8      	str	r0, [r1, #12]
    3f2a:	4770      	bx	lr
    3f2c:	2000007c 	.word	0x2000007c

00003f30 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3f30:	4904      	ldr	r1, [pc, #16]	; (3f44 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3f32:	6802      	ldr	r2, [r0, #0]
    3f34:	6840      	ldr	r0, [r0, #4]
    3f36:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3f3a:	600a      	str	r2, [r1, #0]
    3f3c:	4a02      	ldr	r2, [pc, #8]	; (3f48 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3f3e:	4310      	orrs	r0, r2
    3f40:	6048      	str	r0, [r1, #4]
    3f42:	4770      	bx	lr
    3f44:	2000007c 	.word	0x2000007c
    3f48:	024007f8 	.word	0x024007f8

00003f4c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    3f4c:	4901      	ldr	r1, [pc, #4]	; (3f54 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    3f4e:	6800      	ldr	r0, [r0, #0]
    3f50:	6088      	str	r0, [r1, #8]
    3f52:	4770      	bx	lr
    3f54:	2000007c 	.word	0x2000007c

00003f58 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3f58:	4805      	ldr	r0, [pc, #20]	; (3f70 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    3f5a:	f04f 31ff 	mov.w	r1, #4294967295
    3f5e:	6001      	str	r1, [r0, #0]
    3f60:	0cc9      	lsrs	r1, r1, #19
    3f62:	6041      	str	r1, [r0, #4]
    3f64:	2100      	movs	r1, #0
    3f66:	6081      	str	r1, [r0, #8]
    3f68:	211f      	movs	r1, #31
    3f6a:	60c1      	str	r1, [r0, #12]
    3f6c:	4770      	bx	lr
    3f6e:	0000      	.short	0x0000
    3f70:	2000007c 	.word	0x2000007c

00003f74 <sdc_hci_cmd_cb_reset>:
    3f74:	b510      	push	{r4, lr}
    3f76:	f7ff ffef 	bl	3f58 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3f7a:	2000      	movs	r0, #0
    3f7c:	f7ff ff74 	bl	3e68 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    3f80:	f00d ffe9 	bl	11f56 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3f84:	4604      	mov	r4, r0
    3f86:	4803      	ldr	r0, [pc, #12]	; (3f94 <sdc_hci_cmd_cb_reset+0x20>)
    3f88:	6800      	ldr	r0, [r0, #0]
    3f8a:	b100      	cbz	r0, 3f8e <sdc_hci_cmd_cb_reset+0x1a>
    3f8c:	4780      	blx	r0
    3f8e:	4620      	mov	r0, r4
    3f90:	bd10      	pop	{r4, pc}
    3f92:	0000      	.short	0x0000
    3f94:	2000008c 	.word	0x2000008c

00003f98 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    3f98:	4901      	ldr	r1, [pc, #4]	; (3fa0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    3f9a:	6008      	str	r0, [r1, #0]
    3f9c:	4770      	bx	lr
    3f9e:	0000      	.short	0x0000
    3fa0:	2000008c 	.word	0x2000008c

00003fa4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    3fa4:	2102      	movs	r1, #2
    3fa6:	8001      	strh	r1, [r0, #0]
    3fa8:	8041      	strh	r1, [r0, #2]
    3faa:	2100      	movs	r1, #0
    3fac:	7101      	strb	r1, [r0, #4]
    3fae:	21e5      	movs	r1, #229	; 0xe5
    3fb0:	7141      	strb	r1, [r0, #5]
    3fb2:	f649 41c7 	movw	r1, #40135	; 0x9cc7
    3fb6:	80c1      	strh	r1, [r0, #6]
    3fb8:	4901      	ldr	r1, [pc, #4]	; (3fc0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    3fba:	6081      	str	r1, [r0, #8]
    3fbc:	2000      	movs	r0, #0
    3fbe:	4770      	bx	lr
    3fc0:	1d0091d9 	.word	0x1d0091d9

00003fc4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>:
    3fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fc8:	4607      	mov	r7, r0
    3fca:	b111      	cbz	r1, 3fd2 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xe>
    3fcc:	2000      	movs	r0, #0
    3fce:	b960      	cbnz	r0, 3fea <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    3fd0:	e001      	b.n	3fd6 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x12>
    3fd2:	2001      	movs	r0, #1
    3fd4:	e7fb      	b.n	3fce <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xa>
    3fd6:	2901      	cmp	r1, #1
    3fd8:	d007      	beq.n	3fea <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    3fda:	2000      	movs	r0, #0
    3fdc:	2800      	cmp	r0, #0
    3fde:	d01f      	beq.n	4020 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x5c>
    3fe0:	2400      	movs	r4, #0
    3fe2:	4812      	ldr	r0, [pc, #72]	; (402c <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x68>)
    3fe4:	2901      	cmp	r1, #1
    3fe6:	d002      	beq.n	3fee <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2a>
    3fe8:	e002      	b.n	3ff0 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2c>
    3fea:	2001      	movs	r0, #1
    3fec:	e7f6      	b.n	3fdc <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x18>
    3fee:	7804      	ldrb	r4, [r0, #0]
    3ff0:	2300      	movs	r3, #0
    3ff2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3ff6:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    3ffa:	f810 e001 	ldrb.w	lr, [r0, r1]
    3ffe:	e008      	b.n	4012 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x4e>
    4000:	1918      	adds	r0, r3, r4
    4002:	f8dc 500c 	ldr.w	r5, [ip, #12]
    4006:	b280      	uxth	r0, r0
    4008:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    400c:	b125      	cbz	r5, 4018 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x54>
    400e:	1c5b      	adds	r3, r3, #1
    4010:	b29b      	uxth	r3, r3
    4012:	459e      	cmp	lr, r3
    4014:	d8f4      	bhi.n	4000 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x3c>
    4016:	4630      	mov	r0, r6
    4018:	8038      	strh	r0, [r7, #0]
    401a:	42b0      	cmp	r0, r6
    401c:	d102      	bne.n	4024 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x60>
    401e:	2000      	movs	r0, #0
    4020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4028:	f000 b8b4 	b.w	4194 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x74>
    402c:	20000fb4 	.word	0x20000fb4

00004030 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4030:	b510      	push	{r4, lr}
    4032:	2802      	cmp	r0, #2
    4034:	d304      	bcc.n	4040 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4036:	f240 1153 	movw	r1, #339	; 0x153
    403a:	2017      	movs	r0, #23
    403c:	f7ff fde8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4040:	4901      	ldr	r1, [pc, #4]	; (4048 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4042:	5c08      	ldrb	r0, [r1, r0]
    4044:	bd10      	pop	{r4, pc}
    4046:	0000      	.short	0x0000
    4048:	20000fb4 	.word	0x20000fb4

0000404c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    404e:	4605      	mov	r5, r0
    4050:	18c8      	adds	r0, r1, r3
    4052:	28ff      	cmp	r0, #255	; 0xff
    4054:	d902      	bls.n	405c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    4056:	f240 1121 	movw	r1, #289	; 0x121
    405a:	e00f      	b.n	407c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    405c:	429a      	cmp	r2, r3
    405e:	d902      	bls.n	4066 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
    4060:	f44f 7191 	mov.w	r1, #290	; 0x122
    4064:	e00a      	b.n	407c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    4066:	b2c4      	uxtb	r4, r0
    4068:	9500      	str	r5, [sp, #0]
    406a:	b155      	cbz	r5, 4082 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x36>
    406c:	2600      	movs	r6, #0
    406e:	1ce8      	adds	r0, r5, #3
    4070:	f020 0003 	bic.w	r0, r0, #3
    4074:	42a8      	cmp	r0, r5
    4076:	d006      	beq.n	4086 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    4078:	f44f 7194 	mov.w	r1, #296	; 0x128
    407c:	2017      	movs	r0, #23
    407e:	f7ff fdc7 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4082:	2601      	movs	r6, #1
    4084:	e7f3      	b.n	406e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    4086:	4f12      	ldr	r7, [pc, #72]	; (40d0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x84>)
    4088:	4668      	mov	r0, sp
    408a:	703b      	strb	r3, [r7, #0]
    408c:	7079      	strb	r1, [r7, #1]
    408e:	4631      	mov	r1, r6
    4090:	f000 f8c6 	bl	4220 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    4094:	2100      	movs	r1, #0
    4096:	468c      	mov	ip, r1
    4098:	9800      	ldr	r0, [sp, #0]
    409a:	1cc0      	adds	r0, r0, #3
    409c:	f020 0003 	bic.w	r0, r0, #3
    40a0:	9000      	str	r0, [sp, #0]
    40a2:	b95e      	cbnz	r6, 40bc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x70>
    40a4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    40a8:	60d8      	str	r0, [r3, #12]
    40aa:	2000      	movs	r0, #0
    40ac:	e004      	b.n	40b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x6c>
    40ae:	68da      	ldr	r2, [r3, #12]
    40b0:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    40b4:	1c40      	adds	r0, r0, #1
    40b6:	b2c0      	uxtb	r0, r0
    40b8:	42a0      	cmp	r0, r4
    40ba:	d3f8      	bcc.n	40ae <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x62>
    40bc:	9800      	ldr	r0, [sp, #0]
    40be:	1c49      	adds	r1, r1, #1
    40c0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    40c4:	b2c9      	uxtb	r1, r1
    40c6:	9000      	str	r0, [sp, #0]
    40c8:	2902      	cmp	r1, #2
    40ca:	d3e5      	bcc.n	4098 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x4c>
    40cc:	1b40      	subs	r0, r0, r5
    40ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40d0:	20000fb4 	.word	0x20000fb4

000040d4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    40d4:	b570      	push	{r4, r5, r6, lr}
    40d6:	4604      	mov	r4, r0
    40d8:	f00c f944 	bl	10364 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    40dc:	b108      	cbz	r0, 40e2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    40de:	2010      	movs	r0, #16
    40e0:	bd70      	pop	{r4, r5, r6, pc}
    40e2:	7825      	ldrb	r5, [r4, #0]
    40e4:	f000 f84e 	bl	4184 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    40e8:	4602      	mov	r2, r0
    40ea:	480c      	ldr	r0, [pc, #48]	; (411c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    40ec:	8861      	ldrh	r1, [r4, #2]
    40ee:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    40f2:	e00e      	b.n	4112 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    40f4:	68c3      	ldr	r3, [r0, #12]
    40f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    40fa:	b143      	cbz	r3, 410e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    40fc:	1c4a      	adds	r2, r1, #1
    40fe:	8062      	strh	r2, [r4, #2]
    4100:	80a1      	strh	r1, [r4, #4]
    4102:	68c0      	ldr	r0, [r0, #12]
    4104:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4108:	60a0      	str	r0, [r4, #8]
    410a:	2000      	movs	r0, #0
    410c:	bd70      	pop	{r4, r5, r6, pc}
    410e:	1c49      	adds	r1, r1, #1
    4110:	b289      	uxth	r1, r1
    4112:	4291      	cmp	r1, r2
    4114:	d3ee      	bcc.n	40f4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4116:	8061      	strh	r1, [r4, #2]
    4118:	2005      	movs	r0, #5
    411a:	bd70      	pop	{r4, r5, r6, pc}
    411c:	20000fb4 	.word	0x20000fb4

00004120 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4124:	4607      	mov	r7, r0
    4126:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    412a:	460c      	mov	r4, r1
    412c:	f243 0602 	movw	r6, #12290	; 0x3002
    4130:	38ff      	subs	r0, #255	; 0xff
    4132:	d020      	beq.n	4176 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4134:	2c02      	cmp	r4, #2
    4136:	d302      	bcc.n	413e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4138:	2007      	movs	r0, #7
    413a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    413e:	4638      	mov	r0, r7
    4140:	f000 f85e 	bl	4200 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4144:	0005      	movs	r5, r0
    4146:	d016      	beq.n	4176 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4148:	480c      	ldr	r0, [pc, #48]	; (417c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    414a:	4629      	mov	r1, r5
    414c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4150:	4638      	mov	r0, r7
    4152:	4790      	blx	r2
    4154:	480a      	ldr	r0, [pc, #40]	; (4180 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4156:	2100      	movs	r1, #0
    4158:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    415c:	68f0      	ldr	r0, [r6, #12]
    415e:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    4162:	4620      	mov	r0, r4
    4164:	f000 f88e 	bl	4284 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    4168:	4602      	mov	r2, r0
    416a:	4629      	mov	r1, r5
    416c:	6870      	ldr	r0, [r6, #4]
    416e:	f00c f831 	bl	101d4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4172:	2000      	movs	r0, #0
    4174:	e7e1      	b.n	413a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4176:	4630      	mov	r0, r6
    4178:	e7df      	b.n	413a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    417a:	0000      	.short	0x0000
    417c:	000042a4 	.word	0x000042a4
    4180:	20000fb4 	.word	0x20000fb4
    4184:	4902      	ldr	r1, [pc, #8]	; (4190 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x70>)
    4186:	7808      	ldrb	r0, [r1, #0]
    4188:	7849      	ldrb	r1, [r1, #1]
    418a:	4408      	add	r0, r1
    418c:	b2c0      	uxtb	r0, r0
    418e:	4770      	bx	lr
    4190:	20000fb4 	.word	0x20000fb4
    4194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4198:	4690      	mov	r8, r2
    419a:	460e      	mov	r6, r1
    419c:	4607      	mov	r7, r0
    419e:	f00c f853 	bl	10248 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    41a2:	b140      	cbz	r0, 41b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x96>
    41a4:	4814      	ldr	r0, [pc, #80]	; (41f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>)
    41a6:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    41aa:	68e0      	ldr	r0, [r4, #12]
    41ac:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    41b0:	b118      	cbz	r0, 41ba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9a>
    41b2:	21f4      	movs	r1, #244	; 0xf4
    41b4:	e013      	b.n	41de <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    41b6:	21f3      	movs	r1, #243	; 0xf3
    41b8:	e011      	b.n	41de <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    41ba:	6860      	ldr	r0, [r4, #4]
    41bc:	2800      	cmp	r0, #0
    41be:	d019      	beq.n	41f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    41c0:	4630      	mov	r0, r6
    41c2:	f000 f85f 	bl	4284 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    41c6:	4601      	mov	r1, r0
    41c8:	6860      	ldr	r0, [r4, #4]
    41ca:	f00b ffb5 	bl	10138 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    41ce:	0005      	movs	r5, r0
    41d0:	d00f      	beq.n	41f2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd2>
    41d2:	68e0      	ldr	r0, [r4, #12]
    41d4:	2e02      	cmp	r6, #2
    41d6:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    41da:	d303      	bcc.n	41e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    41dc:	21ff      	movs	r1, #255	; 0xff
    41de:	2017      	movs	r0, #23
    41e0:	f7ff fd16 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41e4:	4805      	ldr	r0, [pc, #20]	; (41fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xdc>)
    41e6:	4642      	mov	r2, r8
    41e8:	4629      	mov	r1, r5
    41ea:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    41ee:	4638      	mov	r0, r7
    41f0:	4798      	blx	r3
    41f2:	4628      	mov	r0, r5
    41f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41f8:	20000fb4 	.word	0x20000fb4
    41fc:	0000429c 	.word	0x0000429c
    4200:	b570      	push	{r4, r5, r6, lr}
    4202:	460c      	mov	r4, r1
    4204:	4605      	mov	r5, r0
    4206:	f00c f81f 	bl	10248 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    420a:	2800      	cmp	r0, #0
    420c:	d005      	beq.n	421a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfa>
    420e:	4803      	ldr	r0, [pc, #12]	; (421c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfc>)
    4210:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4214:	68c0      	ldr	r0, [r0, #12]
    4216:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    421a:	bd70      	pop	{r4, r5, r6, pc}
    421c:	20000fb4 	.word	0x20000fb4
    4220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4224:	4f16      	ldr	r7, [pc, #88]	; (4280 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x160>)
    4226:	4688      	mov	r8, r1
    4228:	4605      	mov	r5, r0
    422a:	2400      	movs	r4, #0
    422c:	6828      	ldr	r0, [r5, #0]
    422e:	1cc0      	adds	r0, r0, #3
    4230:	f020 0003 	bic.w	r0, r0, #3
    4234:	6028      	str	r0, [r5, #0]
    4236:	4620      	mov	r0, r4
    4238:	f000 f824 	bl	4284 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    423c:	5d39      	ldrb	r1, [r7, r4]
    423e:	4341      	muls	r1, r0
    4240:	f1b8 0f00 	cmp.w	r8, #0
    4244:	d001      	beq.n	424a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    4246:	2000      	movs	r0, #0
    4248:	e000      	b.n	424c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12c>
    424a:	6828      	ldr	r0, [r5, #0]
    424c:	9000      	str	r0, [sp, #0]
    424e:	b118      	cbz	r0, 4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4250:	2600      	movs	r6, #0
    4252:	b11e      	cbz	r6, 425c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13c>
    4254:	2000      	movs	r0, #0
    4256:	e002      	b.n	425e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4258:	2601      	movs	r6, #1
    425a:	e7fa      	b.n	4252 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    425c:	4668      	mov	r0, sp
    425e:	f00b ff98 	bl	10192 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4262:	b91e      	cbnz	r6, 426c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    4264:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    4268:	9a00      	ldr	r2, [sp, #0]
    426a:	604a      	str	r2, [r1, #4]
    426c:	6829      	ldr	r1, [r5, #0]
    426e:	1c64      	adds	r4, r4, #1
    4270:	4408      	add	r0, r1
    4272:	b2e4      	uxtb	r4, r4
    4274:	6028      	str	r0, [r5, #0]
    4276:	2c02      	cmp	r4, #2
    4278:	d3d8      	bcc.n	422c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    427a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    427e:	0000      	.short	0x0000
    4280:	20000fb4 	.word	0x20000fb4
    4284:	4903      	ldr	r1, [pc, #12]	; (4294 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x174>)
    4286:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    428a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    428e:	1cc0      	adds	r0, r0, #3
    4290:	4008      	ands	r0, r1
    4292:	4770      	bx	lr
    4294:	00004298 	.word	0x00004298
    4298:	022801e0 	.word	0x022801e0
    429c:	00011779 	.word	0x00011779
    42a0:	00011549 	.word	0x00011549
    42a4:	000117a5 	.word	0x000117a5
    42a8:	0001155f 	.word	0x0001155f

000042ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    42ac:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42b0:	4c26      	ldr	r4, [pc, #152]	; (434c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    42b2:	4680      	mov	r8, r0
    42b4:	b081      	sub	sp, #4
    42b6:	6820      	ldr	r0, [r4, #0]
    42b8:	469a      	mov	sl, r3
    42ba:	4693      	mov	fp, r2
    42bc:	b158      	cbz	r0, 42d6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    42be:	7a02      	ldrb	r2, [r0, #8]
    42c0:	4542      	cmp	r2, r8
    42c2:	d903      	bls.n	42cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    42c4:	6841      	ldr	r1, [r0, #4]
    42c6:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    42ca:	b140      	cbz	r0, 42de <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    42cc:	f243 0002 	movw	r0, #12290	; 0x3002
    42d0:	b005      	add	sp, #20
    42d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42d6:	21a5      	movs	r1, #165	; 0xa5
    42d8:	2018      	movs	r0, #24
    42da:	f7ff fc99 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42de:	4619      	mov	r1, r3
    42e0:	9802      	ldr	r0, [sp, #8]
    42e2:	f00b ffd2 	bl	1028a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    42e6:	b287      	uxth	r7, r0
    42e8:	4658      	mov	r0, fp
    42ea:	990e      	ldr	r1, [sp, #56]	; 0x38
    42ec:	f00b ffc4 	bl	10278 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    42f0:	b286      	uxth	r6, r0
    42f2:	19b8      	adds	r0, r7, r6
    42f4:	1d00      	adds	r0, r0, #4
    42f6:	b285      	uxth	r5, r0
    42f8:	6820      	ldr	r0, [r4, #0]
    42fa:	46a1      	mov	r9, r4
    42fc:	4629      	mov	r1, r5
    42fe:	6800      	ldr	r0, [r0, #0]
    4300:	f00b ff1a 	bl	10138 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4304:	0004      	movs	r4, r0
    4306:	d01f      	beq.n	4348 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4308:	8065      	strh	r5, [r4, #2]
    430a:	8026      	strh	r6, [r4, #0]
    430c:	980e      	ldr	r0, [sp, #56]	; 0x38
    430e:	1d25      	adds	r5, r4, #4
    4310:	9000      	str	r0, [sp, #0]
    4312:	4631      	mov	r1, r6
    4314:	465a      	mov	r2, fp
    4316:	2301      	movs	r3, #1
    4318:	4628      	mov	r0, r5
    431a:	f00b fe48 	bl	ffae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    431e:	8820      	ldrh	r0, [r4, #0]
    4320:	4639      	mov	r1, r7
    4322:	4428      	add	r0, r5
    4324:	2301      	movs	r3, #1
    4326:	9a02      	ldr	r2, [sp, #8]
    4328:	f8cd a000 	str.w	sl, [sp]
    432c:	f00b fe3f 	bl	ffae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4330:	8820      	ldrh	r0, [r4, #0]
    4332:	1941      	adds	r1, r0, r5
    4334:	4628      	mov	r0, r5
    4336:	f00b fe70 	bl	1001a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    433a:	f8d9 0000 	ldr.w	r0, [r9]
    433e:	6841      	ldr	r1, [r0, #4]
    4340:	2000      	movs	r0, #0
    4342:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4346:	e7c3      	b.n	42d0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4348:	2004      	movs	r0, #4
    434a:	e7c1      	b.n	42d0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    434c:	20000090 	.word	0x20000090

00004350 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4350:	b570      	push	{r4, r5, r6, lr}
    4352:	4c14      	ldr	r4, [pc, #80]	; (43a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4354:	6823      	ldr	r3, [r4, #0]
    4356:	b18b      	cbz	r3, 437c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4358:	7a19      	ldrb	r1, [r3, #8]
    435a:	4281      	cmp	r1, r0
    435c:	d912      	bls.n	4384 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    435e:	685a      	ldr	r2, [r3, #4]
    4360:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4364:	b171      	cbz	r1, 4384 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4366:	2500      	movs	r5, #0
    4368:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    436c:	884a      	ldrh	r2, [r1, #2]
    436e:	6818      	ldr	r0, [r3, #0]
    4370:	f00b ff30 	bl	101d4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4374:	6821      	ldr	r1, [r4, #0]
    4376:	2000      	movs	r0, #0
    4378:	7a0a      	ldrb	r2, [r1, #8]
    437a:	e00c      	b.n	4396 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    437c:	21c8      	movs	r1, #200	; 0xc8
    437e:	2018      	movs	r0, #24
    4380:	f7ff fc46 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4384:	f243 0002 	movw	r0, #12290	; 0x3002
    4388:	bd70      	pop	{r4, r5, r6, pc}
    438a:	684b      	ldr	r3, [r1, #4]
    438c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4390:	b933      	cbnz	r3, 43a0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4392:	1c40      	adds	r0, r0, #1
    4394:	b2c0      	uxtb	r0, r0
    4396:	4282      	cmp	r2, r0
    4398:	d8f7      	bhi.n	438a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    439a:	6808      	ldr	r0, [r1, #0]
    439c:	f00b ff0f 	bl	101be <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    43a0:	2000      	movs	r0, #0
    43a2:	bd70      	pop	{r4, r5, r6, pc}
    43a4:	20000090 	.word	0x20000090

000043a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    43a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43ac:	460d      	mov	r5, r1
    43ae:	0004      	movs	r4, r0
    43b0:	4690      	mov	r8, r2
    43b2:	f04f 0600 	mov.w	r6, #0
    43b6:	d009      	beq.n	43cc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    43b8:	2700      	movs	r7, #0
    43ba:	1ce0      	adds	r0, r4, #3
    43bc:	f020 0003 	bic.w	r0, r0, #3
    43c0:	42a0      	cmp	r0, r4
    43c2:	d005      	beq.n	43d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    43c4:	2186      	movs	r1, #134	; 0x86
    43c6:	2018      	movs	r0, #24
    43c8:	f7ff fc22 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43cc:	2701      	movs	r7, #1
    43ce:	e7f4      	b.n	43ba <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    43d0:	b1cd      	cbz	r5, 4406 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    43d2:	4611      	mov	r1, r2
    43d4:	2000      	movs	r0, #0
    43d6:	f00b fedc 	bl	10192 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    43da:	300c      	adds	r0, #12
    43dc:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    43e0:	b98f      	cbnz	r7, 4406 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    43e2:	4f0a      	ldr	r7, [pc, #40]	; (440c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    43e4:	f104 000c 	add.w	r0, r4, #12
    43e8:	00aa      	lsls	r2, r5, #2
    43ea:	603c      	str	r4, [r7, #0]
    43ec:	7225      	strb	r5, [r4, #8]
    43ee:	6060      	str	r0, [r4, #4]
    43f0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    43f4:	6020      	str	r0, [r4, #0]
    43f6:	2100      	movs	r1, #0
    43f8:	6860      	ldr	r0, [r4, #4]
    43fa:	f00a fe47 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    43fe:	4641      	mov	r1, r8
    4400:	6838      	ldr	r0, [r7, #0]
    4402:	f00b fec6 	bl	10192 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4406:	4630      	mov	r0, r6
    4408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    440c:	20000090 	.word	0x20000090

00004410 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4410:	b570      	push	{r4, r5, r6, lr}
    4412:	4d08      	ldr	r5, [pc, #32]	; (4434 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4414:	6828      	ldr	r0, [r5, #0]
    4416:	2800      	cmp	r0, #0
    4418:	d00a      	beq.n	4430 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    441a:	2400      	movs	r4, #0
    441c:	e004      	b.n	4428 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    441e:	4620      	mov	r0, r4
    4420:	f7ff ff96 	bl	4350 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4424:	1c64      	adds	r4, r4, #1
    4426:	b2e4      	uxtb	r4, r4
    4428:	6828      	ldr	r0, [r5, #0]
    442a:	7a00      	ldrb	r0, [r0, #8]
    442c:	42a0      	cmp	r0, r4
    442e:	d8f6      	bhi.n	441e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4430:	bd70      	pop	{r4, r5, r6, pc}
    4432:	0000      	.short	0x0000
    4434:	20000090 	.word	0x20000090

00004438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4438:	4909      	ldr	r1, [pc, #36]	; (4460 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    443a:	b510      	push	{r4, lr}
    443c:	4602      	mov	r2, r0
    443e:	6809      	ldr	r1, [r1, #0]
    4440:	2000      	movs	r0, #0
    4442:	b149      	cbz	r1, 4458 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4444:	7a0b      	ldrb	r3, [r1, #8]
    4446:	4293      	cmp	r3, r2
    4448:	d905      	bls.n	4456 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    444a:	6849      	ldr	r1, [r1, #4]
    444c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4450:	2900      	cmp	r1, #0
    4452:	d000      	beq.n	4456 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4454:	1d08      	adds	r0, r1, #4
    4456:	bd10      	pop	{r4, pc}
    4458:	21ee      	movs	r1, #238	; 0xee
    445a:	2018      	movs	r0, #24
    445c:	f7ff fbd8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4460:	20000090 	.word	0x20000090

00004464 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4464:	490a      	ldr	r1, [pc, #40]	; (4490 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4466:	b510      	push	{r4, lr}
    4468:	4602      	mov	r2, r0
    446a:	6809      	ldr	r1, [r1, #0]
    446c:	2000      	movs	r0, #0
    446e:	b159      	cbz	r1, 4488 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4470:	7a0b      	ldrb	r3, [r1, #8]
    4472:	4293      	cmp	r3, r2
    4474:	d907      	bls.n	4486 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4476:	6849      	ldr	r1, [r1, #4]
    4478:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    447c:	2900      	cmp	r1, #0
    447e:	d002      	beq.n	4486 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4480:	f831 0b04 	ldrh.w	r0, [r1], #4
    4484:	4408      	add	r0, r1
    4486:	bd10      	pop	{r4, pc}
    4488:	21fc      	movs	r1, #252	; 0xfc
    448a:	2018      	movs	r0, #24
    448c:	f7ff fbc0 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4490:	20000090 	.word	0x20000090
    4494:	4909      	ldr	r1, [pc, #36]	; (44bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x58>)
    4496:	b510      	push	{r4, lr}
    4498:	4807      	ldr	r0, [pc, #28]	; (44b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x54>)
    449a:	6008      	str	r0, [r1, #0]
    449c:	4b08      	ldr	r3, [pc, #32]	; (44c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x5c>)
    449e:	2011      	movs	r0, #17
    44a0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    44a4:	2200      	movs	r2, #0
    44a6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    44aa:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    44ae:	1c40      	adds	r0, r0, #1
    44b0:	b2c0      	uxtb	r0, r0
    44b2:	2814      	cmp	r0, #20
    44b4:	d3f4      	bcc.n	44a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x3c>
    44b6:	bd10      	pop	{r4, pc}
    44b8:	fffe0000 	.word	0xfffe0000
    44bc:	4001f508 	.word	0x4001f508
    44c0:	4001f000 	.word	0x4001f000
    44c4:	b570      	push	{r4, r5, r6, lr}
    44c6:	2420      	movs	r4, #32
    44c8:	2100      	movs	r1, #0
    44ca:	2301      	movs	r3, #1
    44cc:	fa20 f201 	lsr.w	r2, r0, r1
    44d0:	07d2      	lsls	r2, r2, #31
    44d2:	d020      	beq.n	4516 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    44d4:	b24a      	sxtb	r2, r1
    44d6:	2a00      	cmp	r2, #0
    44d8:	db10      	blt.n	44fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x98>
    44da:	bf00      	nop
    44dc:	ea4f 1652 	mov.w	r6, r2, lsr #5
    44e0:	ea4f 0686 	mov.w	r6, r6, lsl #2
    44e4:	f002 051f 	and.w	r5, r2, #31
    44e8:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    44ec:	fa03 f505 	lsl.w	r5, r3, r5
    44f0:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    44f4:	f3bf 8f4f 	dsb	sy
    44f8:	f3bf 8f6f 	isb	sy
    44fc:	db0b      	blt.n	4516 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    44fe:	f002 051f 	and.w	r5, r2, #31
    4502:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4506:	ea4f 0282 	mov.w	r2, r2, lsl #2
    450a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    450e:	fa03 f505 	lsl.w	r5, r3, r5
    4512:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4516:	f101 0101 	add.w	r1, r1, #1
    451a:	42a1      	cmp	r1, r4
    451c:	d3d6      	bcc.n	44cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    451e:	bd70      	pop	{r4, r5, r6, pc}
    4520:	b570      	push	{r4, r5, r6, lr}
    4522:	0041      	lsls	r1, r0, #1
    4524:	f04f 0300 	mov.w	r3, #0
    4528:	d501      	bpl.n	452e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xca>
    452a:	491a      	ldr	r1, [pc, #104]	; (4594 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x130>)
    452c:	600b      	str	r3, [r1, #0]
    452e:	0484      	lsls	r4, r0, #18
    4530:	f04f 0101 	mov.w	r1, #1
    4534:	f04f 32ff 	mov.w	r2, #4294967295
    4538:	d507      	bpl.n	454a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xe6>
    453a:	4c17      	ldr	r4, [pc, #92]	; (4598 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x134>)
    453c:	6061      	str	r1, [r4, #4]
    453e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    4542:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    4546:	4c15      	ldr	r4, [pc, #84]	; (459c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x138>)
    4548:	6023      	str	r3, [r4, #0]
    454a:	f3c0 3480 	ubfx	r4, r0, #14, #1
    454e:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    4552:	42ac      	cmp	r4, r5
    4554:	d003      	beq.n	455e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xfa>
    4556:	2172      	movs	r1, #114	; 0x72
    4558:	201b      	movs	r0, #27
    455a:	f7ff fb59 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    455e:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4562:	d012      	beq.n	458a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x126>
    4564:	480e      	ldr	r0, [pc, #56]	; (45a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x13c>)
    4566:	6041      	str	r1, [r0, #4]
    4568:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    456c:	480d      	ldr	r0, [pc, #52]	; (45a4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x140>)
    456e:	6081      	str	r1, [r0, #8]
    4570:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4574:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4578:	4c0b      	ldr	r4, [pc, #44]	; (45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x144>)
    457a:	6023      	str	r3, [r4, #0]
    457c:	1d25      	adds	r5, r4, #4
    457e:	6029      	str	r1, [r5, #0]
    4580:	6081      	str	r1, [r0, #8]
    4582:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4586:	6023      	str	r3, [r4, #0]
    4588:	6029      	str	r1, [r5, #0]
    458a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    458e:	f7ff bf81 	b.w	4494 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4592:	0000      	.short	0x0000
    4594:	4001e504 	.word	0x4001e504
    4598:	4000d000 	.word	0x4000d000
    459c:	4000d504 	.word	0x4000d504
    45a0:	4000e000 	.word	0x4000e000
    45a4:	4000f000 	.word	0x4000f000
    45a8:	4000f500 	.word	0x4000f500

000045ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    45ac:	b570      	push	{r4, r5, r6, lr}
    45ae:	4c0b      	ldr	r4, [pc, #44]	; (45dc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x30>)
    45b0:	460d      	mov	r5, r1
    45b2:	6020      	str	r0, [r4, #0]
    45b4:	f7ff ffb4 	bl	4520 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xbc>
    45b8:	6820      	ldr	r0, [r4, #0]
    45ba:	f7ff ff83 	bl	44c4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x60>
    45be:	f000 f879 	bl	46b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    45c2:	f000 f959 	bl	4878 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>
    45c6:	f7ff ff65 	bl	4494 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    45ca:	f00b fe94 	bl	102f6 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    45ce:	4628      	mov	r0, r5
    45d0:	f000 f8aa 	bl	4728 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    45d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45d8:	f000 b8c2 	b.w	4760 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    45dc:	20000094 	.word	0x20000094

000045e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    45e0:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    45e4:	4e2f      	ldr	r6, [pc, #188]	; (46a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    45e6:	4683      	mov	fp, r0
    45e8:	6830      	ldr	r0, [r6, #0]
    45ea:	9001      	str	r0, [sp, #4]
    45ec:	2701      	movs	r7, #1
    45ee:	482e      	ldr	r0, [pc, #184]	; (46a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    45f0:	f00a fca5 	bl	ef3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    45f4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 46a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    45f8:	b920      	cbnz	r0, 4604 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    45fa:	2700      	movs	r7, #0
    45fc:	f108 0001 	add.w	r0, r8, #1
    4600:	f00a fcb4 	bl	ef6c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4604:	4c29      	ldr	r4, [pc, #164]	; (46ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    4606:	2500      	movs	r5, #0
    4608:	f04f 0903 	mov.w	r9, #3
    460c:	2001      	movs	r0, #1
    460e:	6060      	str	r0, [r4, #4]
    4610:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4614:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4618:	f8c6 b000 	str.w	fp, [r6]
    461c:	6020      	str	r0, [r4, #0]
    461e:	f8df a090 	ldr.w	sl, [pc, #144]	; 46b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    4622:	e017      	b.n	4654 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4624:	f8da 0000 	ldr.w	r0, [sl]
    4628:	06c0      	lsls	r0, r0, #27
    462a:	d513      	bpl.n	4654 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    462c:	200e      	movs	r0, #14
    462e:	f00b fe35 	bl	1029c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4632:	f3ef 8010 	mrs	r0, PRIMASK
    4636:	9000      	str	r0, [sp, #0]
    4638:	b672      	cpsid	i
    463a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    463e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4642:	b920      	cbnz	r0, 464e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4644:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4648:	b908      	cbnz	r0, 464e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    464a:	f7ff f925 	bl	3898 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    464e:	9800      	ldr	r0, [sp, #0]
    4650:	b900      	cbnz	r0, 4654 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4652:	b662      	cpsie	i
    4654:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4658:	b918      	cbnz	r0, 4662 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    465a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    465e:	2800      	cmp	r0, #0
    4660:	d0e0      	beq.n	4624 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4662:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4666:	2800      	cmp	r0, #0
    4668:	d1d0      	bne.n	460c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    466a:	b137      	cbz	r7, 467a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    466c:	9801      	ldr	r0, [sp, #4]
    466e:	6030      	str	r0, [r6, #0]
    4670:	f108 0001 	add.w	r0, r8, #1
    4674:	f00a fc63 	bl	ef3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4678:	e011      	b.n	469e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    467a:	f108 0001 	add.w	r0, r8, #1
    467e:	f00a fc5e 	bl	ef3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4682:	2800      	cmp	r0, #0
    4684:	d1ba      	bne.n	45fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4686:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    468a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    468e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4692:	200e      	movs	r0, #14
    4694:	f00b fe02 	bl	1029c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4698:	4803      	ldr	r0, [pc, #12]	; (46a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    469a:	f00a fc67 	bl	ef6c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    469e:	2000      	movs	r0, #0
    46a0:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    46a4:	4000e504 	.word	0x4000e504
    46a8:	200003ac 	.word	0x200003ac
    46ac:	4000e000 	.word	0x4000e000
    46b0:	e000ed10 	.word	0xe000ed10

000046b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    46b4:	b510      	push	{r4, lr}
    46b6:	4808      	ldr	r0, [pc, #32]	; (46d8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    46b8:	f00a fc54 	bl	ef64 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    46bc:	b108      	cbz	r0, 46c2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    46be:	2124      	movs	r1, #36	; 0x24
    46c0:	e006      	b.n	46d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    46c2:	4805      	ldr	r0, [pc, #20]	; (46d8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    46c4:	1c40      	adds	r0, r0, #1
    46c6:	f00a fc4d 	bl	ef64 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    46ca:	2800      	cmp	r0, #0
    46cc:	d003      	beq.n	46d6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    46ce:	2128      	movs	r1, #40	; 0x28
    46d0:	201d      	movs	r0, #29
    46d2:	f7ff fa9d 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46d6:	bd10      	pop	{r4, pc}
    46d8:	200003ac 	.word	0x200003ac

000046dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    46dc:	b570      	push	{r4, r5, r6, lr}
    46de:	4911      	ldr	r1, [pc, #68]	; (4724 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    46e0:	680a      	ldr	r2, [r1, #0]
    46e2:	b1ea      	cbz	r2, 4720 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    46e4:	2300      	movs	r3, #0
    46e6:	461d      	mov	r5, r3
    46e8:	2401      	movs	r4, #1
    46ea:	684a      	ldr	r2, [r1, #4]
    46ec:	1c52      	adds	r2, r2, #1
    46ee:	604a      	str	r2, [r1, #4]
    46f0:	2a0c      	cmp	r2, #12
    46f2:	d300      	bcc.n	46f6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    46f4:	604d      	str	r5, [r1, #4]
    46f6:	790e      	ldrb	r6, [r1, #4]
    46f8:	fa04 f206 	lsl.w	r2, r4, r6
    46fc:	680e      	ldr	r6, [r1, #0]
    46fe:	4216      	tst	r6, r2
    4700:	d00b      	beq.n	471a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4702:	f3ef 8310 	mrs	r3, PRIMASK
    4706:	b672      	cpsid	i
    4708:	680c      	ldr	r4, [r1, #0]
    470a:	4394      	bics	r4, r2
    470c:	600c      	str	r4, [r1, #0]
    470e:	b903      	cbnz	r3, 4712 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4710:	b662      	cpsie	i
    4712:	6849      	ldr	r1, [r1, #4]
    4714:	6001      	str	r1, [r0, #0]
    4716:	2000      	movs	r0, #0
    4718:	bd70      	pop	{r4, r5, r6, pc}
    471a:	1c5b      	adds	r3, r3, #1
    471c:	2b0c      	cmp	r3, #12
    471e:	d3e4      	bcc.n	46ea <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4720:	2005      	movs	r0, #5
    4722:	bd70      	pop	{r4, r5, r6, pc}
    4724:	20000098 	.word	0x20000098

00004728 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4728:	4802      	ldr	r0, [pc, #8]	; (4734 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    472a:	2100      	movs	r1, #0
    472c:	6001      	str	r1, [r0, #0]
    472e:	6041      	str	r1, [r0, #4]
    4730:	4770      	bx	lr
    4732:	0000      	.short	0x0000
    4734:	20000098 	.word	0x20000098

00004738 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4738:	b510      	push	{r4, lr}
    473a:	4c08      	ldr	r4, [pc, #32]	; (475c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    473c:	7861      	ldrb	r1, [r4, #1]
    473e:	b109      	cbz	r1, 4744 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4740:	200f      	movs	r0, #15
    4742:	bd10      	pop	{r4, pc}
    4744:	f7ff f834 	bl	37b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4748:	7020      	strb	r0, [r4, #0]
    474a:	28ff      	cmp	r0, #255	; 0xff
    474c:	d001      	beq.n	4752 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    474e:	2000      	movs	r0, #0
    4750:	bd10      	pop	{r4, pc}
    4752:	2176      	movs	r1, #118	; 0x76
    4754:	201f      	movs	r0, #31
    4756:	f7ff fa5b 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    475a:	0000      	.short	0x0000
    475c:	200000a0 	.word	0x200000a0

00004760 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4760:	4901      	ldr	r1, [pc, #4]	; (4768 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4762:	2000      	movs	r0, #0
    4764:	7048      	strb	r0, [r1, #1]
    4766:	4770      	bx	lr
    4768:	200000a0 	.word	0x200000a0

0000476c <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>:
    476c:	4906      	ldr	r1, [pc, #24]	; (4788 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1c>)
    476e:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
    4772:	2801      	cmp	r0, #1
    4774:	d107      	bne.n	4786 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1a>
    4776:	4805      	ldr	r0, [pc, #20]	; (478c <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x20>)
    4778:	6800      	ldr	r0, [r0, #0]
    477a:	2200      	movs	r2, #0
    477c:	b2c0      	uxtb	r0, r0
    477e:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    4782:	f000 b8df 	b.w	4944 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>
    4786:	4770      	bx	lr
    4788:	4000d000 	.word	0x4000d000
    478c:	4000d508 	.word	0x4000d508

00004790 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>:
    4790:	4901      	ldr	r1, [pc, #4]	; (4798 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ+0x8>)
    4792:	2001      	movs	r0, #1
    4794:	6008      	str	r0, [r1, #0]
    4796:	4770      	bx	lr
    4798:	4000d504 	.word	0x4000d504

0000479c <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>:
    479c:	b510      	push	{r4, lr}
    479e:	4806      	ldr	r0, [pc, #24]	; (47b8 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x1c>)
    47a0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    47a4:	2900      	cmp	r1, #0
    47a6:	d0fb      	beq.n	47a0 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x4>
    47a8:	f7ff ffe0 	bl	476c <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>
    47ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    47b0:	200d      	movs	r0, #13
    47b2:	f00b bd82 	b.w	102ba <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    47b6:	0000      	.short	0x0000
    47b8:	4000d000 	.word	0x4000d000

000047bc <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>:
    47bc:	b570      	push	{r4, r5, r6, lr}
    47be:	200d      	movs	r0, #13
    47c0:	f00b fd88 	bl	102d4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    47c4:	4c08      	ldr	r4, [pc, #32]	; (47e8 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY+0x2c>)
    47c6:	2000      	movs	r0, #0
    47c8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    47cc:	2501      	movs	r5, #1
    47ce:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    47d2:	200d      	movs	r0, #13
    47d4:	f00b fd71 	bl	102ba <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    47d8:	6025      	str	r5, [r4, #0]
    47da:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    47de:	1460      	asrs	r0, r4, #17
    47e0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    47e4:	bd70      	pop	{r4, r5, r6, pc}
    47e6:	0000      	.short	0x0000
    47e8:	4000d000 	.word	0x4000d000

000047ec <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>:
    47ec:	b510      	push	{r4, lr}
    47ee:	200d      	movs	r0, #13
    47f0:	f00b fd70 	bl	102d4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    47f4:	4805      	ldr	r0, [pc, #20]	; (480c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x20>)
    47f6:	2101      	movs	r1, #1
    47f8:	6041      	str	r1, [r0, #4]
    47fa:	2100      	movs	r1, #0
    47fc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4804:	200d      	movs	r0, #13
    4806:	f00b bd58 	b.w	102ba <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    480a:	0000      	.short	0x0000
    480c:	4000d000 	.word	0x4000d000
    4810:	b510      	push	{r4, lr}
    4812:	4805      	ldr	r0, [pc, #20]	; (4828 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x3c>)
    4814:	f00a fb93 	bl	ef3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4818:	2800      	cmp	r0, #0
    481a:	d103      	bne.n	4824 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x38>
    481c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4820:	f7ff bfcc 	b.w	47bc <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>
    4824:	bd10      	pop	{r4, pc}
    4826:	0000      	.short	0x0000
    4828:	200000bc 	.word	0x200000bc
    482c:	b570      	push	{r4, r5, r6, lr}
    482e:	4615      	mov	r5, r2
    4830:	460e      	mov	r6, r1
    4832:	4604      	mov	r4, r0
    4834:	f00b fd79 	bl	1032a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    4838:	42a8      	cmp	r0, r5
    483a:	d318      	bcc.n	486e <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x82>
    483c:	2000      	movs	r0, #0
    483e:	2141      	movs	r1, #65	; 0x41
    4840:	e00f      	b.n	4862 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x76>
    4842:	bf00      	nop
    4844:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    4848:	5ce3      	ldrb	r3, [r4, r3]
    484a:	5433      	strb	r3, [r6, r0]
    484c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    4850:	1c52      	adds	r2, r2, #1
    4852:	fbb2 f3f1 	udiv	r3, r2, r1
    4856:	fb01 2213 	mls	r2, r1, r3, r2
    485a:	1c40      	adds	r0, r0, #1
    485c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    4860:	b2c0      	uxtb	r0, r0
    4862:	42a8      	cmp	r0, r5
    4864:	d3ee      	bcc.n	4844 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x58>
    4866:	f7ff ffd3 	bl	4810 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    486a:	4628      	mov	r0, r5
    486c:	bd70      	pop	{r4, r5, r6, pc}
    486e:	f7ff ffcf 	bl	4810 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    4872:	2000      	movs	r0, #0
    4874:	bd70      	pop	{r4, r5, r6, pc}
	...

00004878 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>:
    4878:	490e      	ldr	r1, [pc, #56]	; (48b4 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x3c>)
    487a:	b510      	push	{r4, lr}
    487c:	2000      	movs	r0, #0
    487e:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4882:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4886:	3143      	adds	r1, #67	; 0x43
    4888:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    488c:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4890:	3143      	adds	r1, #67	; 0x43
    4892:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4896:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    489a:	4807      	ldr	r0, [pc, #28]	; (48b8 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    489c:	f00a fb62 	bl	ef64 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    48a0:	4805      	ldr	r0, [pc, #20]	; (48b8 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    48a2:	1c40      	adds	r0, r0, #1
    48a4:	f00a fb5e 	bl	ef64 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    48a8:	f7ff ff72 	bl	4790 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>
    48ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48b0:	f7ff bfae 	b.w	4810 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    48b4:	20001788 	.word	0x20001788
    48b8:	200000bc 	.word	0x200000bc

000048bc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>:
    48bc:	460a      	mov	r2, r1
    48be:	4601      	mov	r1, r0
    48c0:	4801      	ldr	r0, [pc, #4]	; (48c8 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y+0xc>)
    48c2:	f7ff bfb3 	b.w	482c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    48c6:	0000      	.short	0x0000
    48c8:	200017cb 	.word	0x200017cb

000048cc <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>:
    48cc:	4801      	ldr	r0, [pc, #4]	; (48d4 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ+0x8>)
    48ce:	f00b bd2c 	b.w	1032a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    48d2:	0000      	.short	0x0000
    48d4:	20001788 	.word	0x20001788

000048d8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>:
    48d8:	460a      	mov	r2, r1
    48da:	b510      	push	{r4, lr}
    48dc:	4601      	mov	r1, r0
    48de:	4803      	ldr	r0, [pc, #12]	; (48ec <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI+0x14>)
    48e0:	f7ff ffa4 	bl	482c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    48e4:	2800      	cmp	r0, #0
    48e6:	d000      	beq.n	48ea <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI+0x12>
    48e8:	2001      	movs	r0, #1
    48ea:	bd10      	pop	{r4, pc}
    48ec:	20001788 	.word	0x20001788

000048f0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>:
    48f0:	b570      	push	{r4, r5, r6, lr}
    48f2:	460c      	mov	r4, r1
    48f4:	4606      	mov	r6, r0
    48f6:	2941      	cmp	r1, #65	; 0x41
    48f8:	d903      	bls.n	4902 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x12>
    48fa:	21fb      	movs	r1, #251	; 0xfb
    48fc:	2023      	movs	r0, #35	; 0x23
    48fe:	f7ff f987 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4902:	480e      	ldr	r0, [pc, #56]	; (493c <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x4c>)
    4904:	6800      	ldr	r0, [r0, #0]
    4906:	3810      	subs	r0, #16
    4908:	b240      	sxtb	r0, r0
    490a:	f00b fcff 	bl	1030c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    490e:	b2c5      	uxtb	r5, r0
    4910:	200d      	movs	r0, #13
    4912:	f00b fcfb 	bl	1030c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    4916:	b2c0      	uxtb	r0, r0
    4918:	4285      	cmp	r5, r0
    491a:	d801      	bhi.n	4920 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x30>
    491c:	2501      	movs	r5, #1
    491e:	e004      	b.n	492a <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    4920:	2500      	movs	r5, #0
    4922:	e002      	b.n	492a <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    4924:	b10d      	cbz	r5, 492a <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    4926:	f7ff ff39 	bl	479c <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>
    492a:	4622      	mov	r2, r4
    492c:	4631      	mov	r1, r6
    492e:	4804      	ldr	r0, [pc, #16]	; (4940 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x50>)
    4930:	f7ff ff7c 	bl	482c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    4934:	2800      	cmp	r0, #0
    4936:	d0f5      	beq.n	4924 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x34>
    4938:	bd70      	pop	{r4, r5, r6, pc}
    493a:	0000      	.short	0x0000
    493c:	e000ed04 	.word	0xe000ed04
    4940:	20001788 	.word	0x20001788

00004944 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>:
    4944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4948:	4f1f      	ldr	r7, [pc, #124]	; (49c8 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    494a:	4606      	mov	r6, r0
    494c:	2500      	movs	r5, #0
    494e:	bf00      	nop
    4950:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
    4954:	4620      	mov	r0, r4
    4956:	f00b fcf4 	bl	10342 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    495a:	b300      	cbz	r0, 499e <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x5a>
    495c:	1c6d      	adds	r5, r5, #1
    495e:	b2ed      	uxtb	r5, r5
    4960:	2d03      	cmp	r5, #3
    4962:	d3f5      	bcc.n	4950 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0xc>
    4964:	4819      	ldr	r0, [pc, #100]	; (49cc <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4966:	f00b fcec 	bl	10342 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    496a:	2800      	cmp	r0, #0
    496c:	d02a      	beq.n	49c4 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    496e:	4817      	ldr	r0, [pc, #92]	; (49cc <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4970:	3843      	subs	r0, #67	; 0x43
    4972:	f00b fce6 	bl	10342 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4976:	2800      	cmp	r0, #0
    4978:	d024      	beq.n	49c4 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    497a:	4814      	ldr	r0, [pc, #80]	; (49cc <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    497c:	3043      	adds	r0, #67	; 0x43
    497e:	f00b fce0 	bl	10342 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4982:	2800      	cmp	r0, #0
    4984:	d01e      	beq.n	49c4 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4986:	f7ff ff31 	bl	47ec <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>
    498a:	480f      	ldr	r0, [pc, #60]	; (49c8 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    498c:	1f00      	subs	r0, r0, #4
    498e:	f00a fad6 	bl	ef3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4992:	3023      	adds	r0, #35	; 0x23
    4994:	d010      	beq.n	49b8 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x74>
    4996:	21b3      	movs	r1, #179	; 0xb3
    4998:	2023      	movs	r0, #35	; 0x23
    499a:	f7ff f939 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    499e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    49a2:	2141      	movs	r1, #65	; 0x41
    49a4:	5426      	strb	r6, [r4, r0]
    49a6:	f814 0f41 	ldrb.w	r0, [r4, #65]!
    49aa:	1c40      	adds	r0, r0, #1
    49ac:	fbb0 f2f1 	udiv	r2, r0, r1
    49b0:	fb01 0012 	mls	r0, r1, r2, r0
    49b4:	7020      	strb	r0, [r4, #0]
    49b6:	e7d5      	b.n	4964 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x20>
    49b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49bc:	4802      	ldr	r0, [pc, #8]	; (49c8 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    49be:	1f00      	subs	r0, r0, #4
    49c0:	f00a bad4 	b.w	ef6c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    49c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49c8:	200000c0 	.word	0x200000c0
    49cc:	200017cb 	.word	0x200017cb

000049d0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    49d0:	4905      	ldr	r1, [pc, #20]	; (49e8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    49d2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49d4:	4282      	cmp	r2, r0
    49d6:	bf18      	it	ne
    49d8:	4770      	bxne	lr
    49da:	2000      	movs	r0, #0
    49dc:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    49e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    49e4:	8488      	strh	r0, [r1, #36]	; 0x24
    49e6:	4770      	bx	lr
    49e8:	20001718 	.word	0x20001718

000049ec <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    49ec:	4806      	ldr	r0, [pc, #24]	; (4a08 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    49ee:	4a07      	ldr	r2, [pc, #28]	; (4a0c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    49f0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    49f2:	8852      	ldrh	r2, [r2, #2]
    49f4:	4291      	cmp	r1, r2
    49f6:	d105      	bne.n	4a04 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
    49f8:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    49fc:	2800      	cmp	r0, #0
    49fe:	bf1c      	itt	ne
    4a00:	2000      	movne	r0, #0
    4a02:	4770      	bxne	lr
    4a04:	2001      	movs	r0, #1
    4a06:	4770      	bx	lr
    4a08:	20001718 	.word	0x20001718
    4a0c:	20000398 	.word	0x20000398

00004a10 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4a10:	4901      	ldr	r1, [pc, #4]	; (4a18 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4a12:	8048      	strh	r0, [r1, #2]
    4a14:	4770      	bx	lr
    4a16:	0000      	.short	0x0000
    4a18:	20000398 	.word	0x20000398

00004a1c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4a1c:	4808      	ldr	r0, [pc, #32]	; (4a40 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4a1e:	4a09      	ldr	r2, [pc, #36]	; (4a44 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4a20:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4a22:	8852      	ldrh	r2, [r2, #2]
    4a24:	4291      	cmp	r1, r2
    4a26:	d109      	bne.n	4a3c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4a28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4a2c:	8481      	strh	r1, [r0, #36]	; 0x24
    4a2e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4a32:	b119      	cbz	r1, 4a3c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4a34:	2100      	movs	r1, #0
    4a36:	7001      	strb	r1, [r0, #0]
    4a38:	2001      	movs	r0, #1
    4a3a:	4770      	bx	lr
    4a3c:	2000      	movs	r0, #0
    4a3e:	4770      	bx	lr
    4a40:	20001718 	.word	0x20001718
    4a44:	20000398 	.word	0x20000398

00004a48 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4a48:	4907      	ldr	r1, [pc, #28]	; (4a68 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4a4a:	f101 0022 	add.w	r0, r1, #34	; 0x22
    4a4e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4a52:	2a01      	cmp	r2, #1
    4a54:	bf04      	itt	eq
    4a56:	2000      	moveq	r0, #0
    4a58:	4770      	bxeq	lr
    4a5a:	2201      	movs	r2, #1
    4a5c:	7002      	strb	r2, [r0, #0]
    4a5e:	4803      	ldr	r0, [pc, #12]	; (4a6c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4a60:	8800      	ldrh	r0, [r0, #0]
    4a62:	8488      	strh	r0, [r1, #36]	; 0x24
    4a64:	4610      	mov	r0, r2
    4a66:	4770      	bx	lr
    4a68:	20001718 	.word	0x20001718
    4a6c:	20000398 	.word	0x20000398

00004a70 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4a70:	4907      	ldr	r1, [pc, #28]	; (4a90 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4a72:	4b08      	ldr	r3, [pc, #32]	; (4a94 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    4a74:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a76:	885b      	ldrh	r3, [r3, #2]
    4a78:	429a      	cmp	r2, r3
    4a7a:	d106      	bne.n	4a8a <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    4a7c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4a80:	2a00      	cmp	r2, #0
    4a82:	bf1e      	ittt	ne
    4a84:	6001      	strne	r1, [r0, #0]
    4a86:	2001      	movne	r0, #1
    4a88:	4770      	bxne	lr
    4a8a:	2000      	movs	r0, #0
    4a8c:	4770      	bx	lr
    4a8e:	0000      	.short	0x0000
    4a90:	20001718 	.word	0x20001718
    4a94:	20000398 	.word	0x20000398

00004a98 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4a98:	4909      	ldr	r1, [pc, #36]	; (4ac0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4a9a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a9c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4aa0:	3bff      	subs	r3, #255	; 0xff
    4aa2:	d003      	beq.n	4aac <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
    4aa4:	2100      	movs	r1, #0
    4aa6:	6001      	str	r1, [r0, #0]
    4aa8:	4608      	mov	r0, r1
    4aaa:	4770      	bx	lr
    4aac:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4ab0:	4903      	ldr	r1, [pc, #12]	; (4ac0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4ab2:	2a01      	cmp	r2, #1
    4ab4:	bf1a      	itte	ne
    4ab6:	6001      	strne	r1, [r0, #0]
    4ab8:	2001      	movne	r0, #1
    4aba:	2000      	moveq	r0, #0
    4abc:	4770      	bx	lr
    4abe:	0000      	.short	0x0000
    4ac0:	20001718 	.word	0x20001718

00004ac4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4ac4:	4901      	ldr	r1, [pc, #4]	; (4acc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4ac6:	8008      	strh	r0, [r1, #0]
    4ac8:	4770      	bx	lr
    4aca:	0000      	.short	0x0000
    4acc:	20000398 	.word	0x20000398

00004ad0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    4ad0:	4905      	ldr	r1, [pc, #20]	; (4ae8 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x18>)
    4ad2:	2000      	movs	r0, #0
    4ad4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4ad8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4adc:	8488      	strh	r0, [r1, #36]	; 0x24
    4ade:	4903      	ldr	r1, [pc, #12]	; (4aec <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x1c>)
    4ae0:	8008      	strh	r0, [r1, #0]
    4ae2:	8048      	strh	r0, [r1, #2]
    4ae4:	4770      	bx	lr
    4ae6:	0000      	.short	0x0000
    4ae8:	20001718 	.word	0x20001718
    4aec:	20000398 	.word	0x20000398

00004af0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4af0:	4905      	ldr	r1, [pc, #20]	; (4b08 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4af2:	2000      	movs	r0, #0
    4af4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4af8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4afc:	8488      	strh	r0, [r1, #36]	; 0x24
    4afe:	4903      	ldr	r1, [pc, #12]	; (4b0c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4b00:	8008      	strh	r0, [r1, #0]
    4b02:	8048      	strh	r0, [r1, #2]
    4b04:	4770      	bx	lr
    4b06:	0000      	.short	0x0000
    4b08:	20001718 	.word	0x20001718
    4b0c:	20000398 	.word	0x20000398

00004b10 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>:
    4b10:	4b0d      	ldr	r3, [pc, #52]	; (4b48 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x38>)
    4b12:	b169      	cbz	r1, 4b30 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x20>
    4b14:	2901      	cmp	r1, #1
    4b16:	bf04      	itt	eq
    4b18:	7899      	ldrbeq	r1, [r3, #2]
    4b1a:	4281      	cmpeq	r1, r0
    4b1c:	d110      	bne.n	4b40 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    4b1e:	f8d3 000f 	ldr.w	r0, [r3, #15]
    4b22:	6010      	str	r0, [r2, #0]
    4b24:	f8b3 0013 	ldrh.w	r0, [r3, #19]
    4b28:	8090      	strh	r0, [r2, #4]
    4b2a:	f04f 0001 	mov.w	r0, #1
    4b2e:	4770      	bx	lr
    4b30:	7858      	ldrb	r0, [r3, #1]
    4b32:	b128      	cbz	r0, 4b40 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    4b34:	f8d3 0003 	ldr.w	r0, [r3, #3]
    4b38:	6010      	str	r0, [r2, #0]
    4b3a:	f8b3 0007 	ldrh.w	r0, [r3, #7]
    4b3e:	e7f3      	b.n	4b28 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x18>
    4b40:	f04f 0000 	mov.w	r0, #0
    4b44:	4770      	bx	lr
    4b46:	0000      	.short	0x0000
    4b48:	200003ae 	.word	0x200003ae

00004b4c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>:
    4b4c:	4a07      	ldr	r2, [pc, #28]	; (4b6c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x20>)
    4b4e:	b129      	cbz	r1, 4b5c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x10>
    4b50:	2901      	cmp	r1, #1
    4b52:	bf04      	itt	eq
    4b54:	7891      	ldrbeq	r1, [r2, #2]
    4b56:	4281      	cmpeq	r1, r0
    4b58:	d002      	beq.n	4b60 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x14>
    4b5a:	e004      	b.n	4b66 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4b5c:	7850      	ldrb	r0, [r2, #1]
    4b5e:	b110      	cbz	r0, 4b66 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4b60:	f04f 0001 	mov.w	r0, #1
    4b64:	4770      	bx	lr
    4b66:	f04f 0000 	mov.w	r0, #0
    4b6a:	4770      	bx	lr
    4b6c:	200003ae 	.word	0x200003ae

00004b70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4b70:	4a0c      	ldr	r2, [pc, #48]	; (4ba4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x34>)
    4b72:	b110      	cbz	r0, 4b7a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4b74:	2801      	cmp	r0, #1
    4b76:	d008      	beq.n	4b8a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x1a>
    4b78:	e011      	b.n	4b9e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4b7a:	7850      	ldrb	r0, [r2, #1]
    4b7c:	b178      	cbz	r0, 4b9e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4b7e:	f8d2 0003 	ldr.w	r0, [r2, #3]
    4b82:	6008      	str	r0, [r1, #0]
    4b84:	f8b2 0007 	ldrh.w	r0, [r2, #7]
    4b88:	e006      	b.n	4b98 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4b8a:	7810      	ldrb	r0, [r2, #0]
    4b8c:	b138      	cbz	r0, 4b9e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4b8e:	f8d2 0009 	ldr.w	r0, [r2, #9]
    4b92:	6008      	str	r0, [r1, #0]
    4b94:	f8b2 000d 	ldrh.w	r0, [r2, #13]
    4b98:	8088      	strh	r0, [r1, #4]
    4b9a:	2001      	movs	r0, #1
    4b9c:	4770      	bx	lr
    4b9e:	2000      	movs	r0, #0
    4ba0:	4770      	bx	lr
    4ba2:	0000      	.short	0x0000
    4ba4:	200003ae 	.word	0x200003ae

00004ba8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    4ba8:	4901      	ldr	r1, [pc, #4]	; (4bb0 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY+0x8>)
    4baa:	20ff      	movs	r0, #255	; 0xff
    4bac:	7088      	strb	r0, [r1, #2]
    4bae:	4770      	bx	lr
    4bb0:	200003ae 	.word	0x200003ae

00004bb4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4bb4:	4a0a      	ldr	r2, [pc, #40]	; (4be0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x2c>)
    4bb6:	2301      	movs	r3, #1
    4bb8:	b150      	cbz	r0, 4bd0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x1c>
    4bba:	2801      	cmp	r0, #1
    4bbc:	bf18      	it	ne
    4bbe:	4770      	bxne	lr
    4bc0:	7013      	strb	r3, [r2, #0]
    4bc2:	6808      	ldr	r0, [r1, #0]
    4bc4:	f8c2 0009 	str.w	r0, [r2, #9]
    4bc8:	8888      	ldrh	r0, [r1, #4]
    4bca:	f8a2 000d 	strh.w	r0, [r2, #13]
    4bce:	4770      	bx	lr
    4bd0:	7053      	strb	r3, [r2, #1]
    4bd2:	6808      	ldr	r0, [r1, #0]
    4bd4:	f8c2 0003 	str.w	r0, [r2, #3]
    4bd8:	8888      	ldrh	r0, [r1, #4]
    4bda:	f8a2 0007 	strh.w	r0, [r2, #7]
    4bde:	4770      	bx	lr
    4be0:	200003ae 	.word	0x200003ae

00004be4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4be4:	4906      	ldr	r1, [pc, #24]	; (4c00 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4be6:	b110      	cbz	r0, 4bee <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4be8:	2801      	cmp	r0, #1
    4bea:	d003      	beq.n	4bf4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4bec:	e006      	b.n	4bfc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4bee:	7848      	ldrb	r0, [r1, #1]
    4bf0:	b910      	cbnz	r0, 4bf8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    4bf2:	e003      	b.n	4bfc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4bf4:	7808      	ldrb	r0, [r1, #0]
    4bf6:	b108      	cbz	r0, 4bfc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4bf8:	2001      	movs	r0, #1
    4bfa:	4770      	bx	lr
    4bfc:	2000      	movs	r0, #0
    4bfe:	4770      	bx	lr
    4c00:	200003ae 	.word	0x200003ae

00004c04 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>:
    4c04:	4901      	ldr	r1, [pc, #4]	; (4c0c <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ+0x8>)
    4c06:	2001      	movs	r0, #1
    4c08:	7148      	strb	r0, [r1, #5]
    4c0a:	4770      	bx	lr
    4c0c:	200000cc 	.word	0x200000cc

00004c10 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4c10:	4901      	ldr	r1, [pc, #4]	; (4c18 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4c12:	7448      	strb	r0, [r1, #17]
    4c14:	4770      	bx	lr
    4c16:	0000      	.short	0x0000
    4c18:	20000a22 	.word	0x20000a22

00004c1c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4c1c:	4801      	ldr	r0, [pc, #4]	; (4c24 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4c1e:	78c0      	ldrb	r0, [r0, #3]
    4c20:	4770      	bx	lr
    4c22:	0000      	.short	0x0000
    4c24:	200000cc 	.word	0x200000cc

00004c28 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4c28:	4801      	ldr	r0, [pc, #4]	; (4c30 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4c2a:	7900      	ldrb	r0, [r0, #4]
    4c2c:	4770      	bx	lr
    4c2e:	0000      	.short	0x0000
    4c30:	200000cc 	.word	0x200000cc

00004c34 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4c34:	4910      	ldr	r1, [pc, #64]	; (4c78 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x44>)
    4c36:	b430      	push	{r4, r5}
    4c38:	7c4a      	ldrb	r2, [r1, #17]
    4c3a:	2a00      	cmp	r2, #0
    4c3c:	bf19      	ittee	ne
    4c3e:	7c0a      	ldrbne	r2, [r1, #16]
    4c40:	2a00      	cmpne	r2, #0
    4c42:	2000      	moveq	r0, #0
    4c44:	bc30      	popeq	{r4, r5}
    4c46:	bf08      	it	eq
    4c48:	4770      	bxeq	lr
    4c4a:	f04f 0200 	mov.w	r2, #0
    4c4e:	f04f 0c1f 	mov.w	ip, #31
    4c52:	4b0a      	ldr	r3, [pc, #40]	; (4c7c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>)
    4c54:	740a      	strb	r2, [r1, #16]
    4c56:	7042      	strb	r2, [r0, #1]
    4c58:	f880 c000 	strb.w	ip, [r0]
    4c5c:	f8d3 415a 	ldr.w	r4, [r3, #346]	; 0x15a
    4c60:	f8d3 515e 	ldr.w	r5, [r3, #350]	; 0x15e
    4c64:	6044      	str	r4, [r0, #4]
    4c66:	6085      	str	r5, [r0, #8]
    4c68:	7c0c      	ldrb	r4, [r1, #16]
    4c6a:	2c00      	cmp	r4, #0
    4c6c:	d1f2      	bne.n	4c54 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x20>
    4c6e:	bc30      	pop	{r4, r5}
    4c70:	f04f 0001 	mov.w	r0, #1
    4c74:	4770      	bx	lr
    4c76:	0000      	.short	0x0000
    4c78:	20000a22 	.word	0x20000a22
    4c7c:	200008d0 	.word	0x200008d0

00004c80 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4c80:	b570      	push	{r4, r5, r6, lr}
    4c82:	4c09      	ldr	r4, [pc, #36]	; (4ca8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    4c84:	4606      	mov	r6, r0
    4c86:	460d      	mov	r5, r1
    4c88:	7820      	ldrb	r0, [r4, #0]
    4c8a:	b118      	cbz	r0, 4c94 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    4c8c:	21ab      	movs	r1, #171	; 0xab
    4c8e:	2027      	movs	r0, #39	; 0x27
    4c90:	f7fe ffbe 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c94:	4905      	ldr	r1, [pc, #20]	; (4cac <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x2c>)
    4c96:	2000      	movs	r0, #0
    4c98:	7448      	strb	r0, [r1, #17]
    4c9a:	2101      	movs	r1, #1
    4c9c:	4804      	ldr	r0, [pc, #16]	; (4cb0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x30>)
    4c9e:	f00b ff0c 	bl	10aba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4ca2:	7226      	strb	r6, [r4, #8]
    4ca4:	6325      	str	r5, [r4, #48]	; 0x30
    4ca6:	bd70      	pop	{r4, r5, r6, pc}
    4ca8:	200000cc 	.word	0x200000cc
    4cac:	20000a22 	.word	0x20000a22
    4cb0:	20000a00 	.word	0x20000a00

00004cb4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4cb4:	4901      	ldr	r1, [pc, #4]	; (4cbc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4cb6:	2001      	movs	r0, #1
    4cb8:	71c8      	strb	r0, [r1, #7]
    4cba:	4770      	bx	lr
    4cbc:	200000cc 	.word	0x200000cc

00004cc0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4cc4:	4d82      	ldr	r5, [pc, #520]	; (4ed0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x210>)
    4cc6:	b085      	sub	sp, #20
    4cc8:	782c      	ldrb	r4, [r5, #0]
    4cca:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    4cce:	2c00      	cmp	r4, #0
    4cd0:	d175      	bne.n	4dbe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4cd2:	2a00      	cmp	r2, #0
    4cd4:	bf1c      	itt	ne
    4cd6:	2b00      	cmpne	r3, #0
    4cd8:	f1bc 0f00 	cmpne.w	ip, #0
    4cdc:	d06f      	beq.n	4dbe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4cde:	f8c5 c020 	str.w	ip, [r5, #32]
    4ce2:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    4ce6:	f04f 0000 	mov.w	r0, #0
    4cea:	e9c5 2306 	strd	r2, r3, [r5, #24]
    4cee:	71e8      	strb	r0, [r5, #7]
    4cf0:	71a8      	strb	r0, [r5, #6]
    4cf2:	70e8      	strb	r0, [r5, #3]
    4cf4:	70a8      	strb	r0, [r5, #2]
    4cf6:	7128      	strb	r0, [r5, #4]
    4cf8:	7168      	strb	r0, [r5, #5]
    4cfa:	4f76      	ldr	r7, [pc, #472]	; (4ed4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x214>)
    4cfc:	81e8      	strh	r0, [r5, #14]
    4cfe:	8228      	strh	r0, [r5, #16]
    4d00:	6878      	ldr	r0, [r7, #4]
    4d02:	f100 0678 	add.w	r6, r0, #120	; 0x78
    4d06:	4604      	mov	r4, r0
    4d08:	f008 ffa2 	bl	dc50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4d0c:	f008 fad8 	bl	d2c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4d10:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    4d14:	f009 f828 	bl	dd68 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4d18:	f104 0016 	add.w	r0, r4, #22
    4d1c:	f009 fb46 	bl	e3ac <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4d20:	f104 0012 	add.w	r0, r4, #18
    4d24:	f009 fb36 	bl	e394 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4d28:	7ef0      	ldrb	r0, [r6, #27]
    4d2a:	f009 fb9d 	bl	e468 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4d2e:	7838      	ldrb	r0, [r7, #0]
    4d30:	f641 584c 	movw	r8, #7500	; 0x1d4c
    4d34:	2800      	cmp	r0, #0
    4d36:	d046      	beq.n	4dc6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x106>
    4d38:	2004      	movs	r0, #4
    4d3a:	f7fe fe31 	bl	39a0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    4d3e:	6860      	ldr	r0, [r4, #4]
    4d40:	4540      	cmp	r0, r8
    4d42:	bf28      	it	cs
    4d44:	2096      	movcs	r0, #150	; 0x96
    4d46:	d203      	bcs.n	4d50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x90>
    4d48:	2001      	movs	r0, #1
    4d4a:	f009 fac7 	bl	e2dc <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    4d4e:	204d      	movs	r0, #77	; 0x4d
    4d50:	f008 fea8 	bl	daa4 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    4d54:	6878      	ldr	r0, [r7, #4]
    4d56:	f890 0180 	ldrb.w	r0, [r0, #384]	; 0x180
    4d5a:	2800      	cmp	r0, #0
    4d5c:	bf18      	it	ne
    4d5e:	f008 fe91 	blne	da84 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4d62:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4d66:	2001      	movs	r0, #1
    4d68:	f008 fc8e 	bl	d688 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4d6c:	2800      	cmp	r0, #0
    4d6e:	bf04      	itt	eq
    4d70:	b005      	addeq	sp, #20
    4d72:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4d76:	7838      	ldrb	r0, [r7, #0]
    4d78:	2800      	cmp	r0, #0
    4d7a:	bf0c      	ite	eq
    4d7c:	2003      	moveq	r0, #3
    4d7e:	2001      	movne	r0, #1
    4d80:	f008 fee8 	bl	db54 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4d84:	4854      	ldr	r0, [pc, #336]	; (4ed8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x218>)
    4d86:	e890 100e 	ldmia.w	r0, {r1, r2, r3, ip}
    4d8a:	e88d 100e 	stmia.w	sp, {r1, r2, r3, ip}
    4d8e:	6900      	ldr	r0, [r0, #16]
    4d90:	9004      	str	r0, [sp, #16]
    4d92:	7838      	ldrb	r0, [r7, #0]
    4d94:	2800      	cmp	r0, #0
    4d96:	bf0c      	ite	eq
    4d98:	4850      	ldreq	r0, [pc, #320]	; (4edc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x21c>)
    4d9a:	4851      	ldrne	r0, [pc, #324]	; (4ee0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x220>)
    4d9c:	9004      	str	r0, [sp, #16]
    4d9e:	4668      	mov	r0, sp
    4da0:	f008 fe06 	bl	d9b0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4da4:	8820      	ldrh	r0, [r4, #0]
    4da6:	f7ff fb5d 	bl	4464 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4daa:	6368      	str	r0, [r5, #52]	; 0x34
    4dac:	8820      	ldrh	r0, [r4, #0]
    4dae:	f7ff fb43 	bl	4438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4db2:	63a8      	str	r0, [r5, #56]	; 0x38
    4db4:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    4db8:	bb68      	cbnz	r0, 4e16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4dba:	e01c      	b.n	4df6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    4dbc:	e7ff      	b.n	4dbe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4dbe:	21d4      	movs	r1, #212	; 0xd4
    4dc0:	2027      	movs	r0, #39	; 0x27
    4dc2:	f7fe ff25 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dc6:	2003      	movs	r0, #3
    4dc8:	f7fe fdea 	bl	39a0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    4dcc:	6860      	ldr	r0, [r4, #4]
    4dce:	4540      	cmp	r0, r8
    4dd0:	bf28      	it	cs
    4dd2:	2096      	movcs	r0, #150	; 0x96
    4dd4:	d203      	bcs.n	4dde <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11e>
    4dd6:	2001      	movs	r0, #1
    4dd8:	f009 fa80 	bl	e2dc <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    4ddc:	204d      	movs	r0, #77	; 0x4d
    4dde:	f008 fe61 	bl	daa4 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    4de2:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    4de6:	2000      	movs	r0, #0
    4de8:	f008 fc4e 	bl	d688 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4dec:	2800      	cmp	r0, #0
    4dee:	d1c2      	bne.n	4d76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xb6>
    4df0:	b005      	add	sp, #20
    4df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4df6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4df8:	b168      	cbz	r0, 4e16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4dfa:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
    4dfc:	8831      	ldrh	r1, [r6, #0]
    4dfe:	4288      	cmp	r0, r1
    4e00:	d109      	bne.n	4e16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4e02:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    4e06:	2201      	movs	r2, #1
    4e08:	4408      	add	r0, r1
    4e0a:	8570      	strh	r0, [r6, #42]	; 0x2a
    4e0c:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    4e10:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    4e12:	f7fd fbf1 	bl	25f8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4e16:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4e1a:	4832      	ldr	r0, [pc, #200]	; (4ee4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x224>)
    4e1c:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4e20:	f500 7884 	add.w	r8, r0, #264	; 0x108
    4e24:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4e28:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4e2a:	f8c0 1121 	str.w	r1, [r0, #289]	; 0x121
    4e2e:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4e30:	f8c0 1125 	str.w	r1, [r0, #293]	; 0x125
    4e34:	20ff      	movs	r0, #255	; 0xff
    4e36:	72a8      	strb	r0, [r5, #10]
    4e38:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    4e3c:	f896 9012 	ldrb.w	r9, [r6, #18]
    4e40:	f8b4 8038 	ldrh.w	r8, [r4, #56]	; 0x38
    4e44:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    4e46:	2908      	cmp	r1, #8
    4e48:	d01c      	beq.n	4e84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c4>
    4e4a:	f00b fbbd 	bl	105c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4e4e:	bf00      	nop
    4e50:	f1b9 0f00 	cmp.w	r9, #0
    4e54:	bf04      	itt	eq
    4e56:	1d00      	addeq	r0, r0, #4
    4e58:	b280      	uxtheq	r0, r0
    4e5a:	4580      	cmp	r8, r0
    4e5c:	bf38      	it	cc
    4e5e:	4640      	movcc	r0, r8
    4e60:	b2c0      	uxtb	r0, r0
    4e62:	7cb1      	ldrb	r1, [r6, #18]
    4e64:	2900      	cmp	r1, #0
    4e66:	bf18      	it	ne
    4e68:	2104      	movne	r1, #4
    4e6a:	4408      	add	r0, r1
    4e6c:	b2c0      	uxtb	r0, r0
    4e6e:	7268      	strb	r0, [r5, #9]
    4e70:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    4e74:	1d09      	adds	r1, r1, #4
    4e76:	4281      	cmp	r1, r0
    4e78:	d208      	bcs.n	4e8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1cc>
    4e7a:	f240 116b 	movw	r1, #363	; 0x16b
    4e7e:	2027      	movs	r0, #39	; 0x27
    4e80:	f7fe fec6 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e84:	2104      	movs	r1, #4
    4e86:	f00b fb9f 	bl	105c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4e8a:	e7e1      	b.n	4e50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    4e8c:	7838      	ldrb	r0, [r7, #0]
    4e8e:	2800      	cmp	r0, #0
    4e90:	f04f 0001 	mov.w	r0, #1
    4e94:	d014      	beq.n	4ec0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x200>
    4e96:	f000 fb55 	bl	5544 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50c>
    4e9a:	4813      	ldr	r0, [pc, #76]	; (4ee8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x228>)
    4e9c:	6800      	ldr	r0, [r0, #0]
    4e9e:	2803      	cmp	r0, #3
    4ea0:	bf18      	it	ne
    4ea2:	280b      	cmpne	r0, #11
    4ea4:	d00f      	beq.n	4ec6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x206>
    4ea6:	4d11      	ldr	r5, [pc, #68]	; (4eec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>)
    4ea8:	4628      	mov	r0, r5
    4eaa:	f00d fd1e 	bl	128ea <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>
    4eae:	8830      	ldrh	r0, [r6, #0]
    4eb0:	8068      	strh	r0, [r5, #2]
    4eb2:	8820      	ldrh	r0, [r4, #0]
    4eb4:	8028      	strh	r0, [r5, #0]
    4eb6:	7ef0      	ldrb	r0, [r6, #27]
    4eb8:	7128      	strb	r0, [r5, #4]
    4eba:	b005      	add	sp, #20
    4ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4ec0:	f000 fbda 	bl	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    4ec4:	e7e9      	b.n	4e9a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1da>
    4ec6:	f240 117b 	movw	r1, #379	; 0x17b
    4eca:	2027      	movs	r0, #39	; 0x27
    4ecc:	f7fe fea0 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ed0:	200000cc 	.word	0x200000cc
    4ed4:	20000108 	.word	0x20000108
    4ed8:	000059cc 	.word	0x000059cc
    4edc:	0000bfd5 	.word	0x0000bfd5
    4ee0:	00008ce9 	.word	0x00008ce9
    4ee4:	200008d0 	.word	0x200008d0
    4ee8:	40001550 	.word	0x40001550
    4eec:	20000a22 	.word	0x20000a22

00004ef0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ef4:	0006      	movs	r6, r0
    4ef6:	4847      	ldr	r0, [pc, #284]	; (5014 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x124>)
    4ef8:	4d47      	ldr	r5, [pc, #284]	; (5018 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x128>)
    4efa:	6840      	ldr	r0, [r0, #4]
    4efc:	f100 0478 	add.w	r4, r0, #120	; 0x78
    4f00:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4f02:	f890 9001 	ldrb.w	r9, [r0, #1]
    4f06:	bf18      	it	ne
    4f08:	2e01      	cmpne	r6, #1
    4f0a:	d103      	bne.n	4f14 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x24>
    4f0c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    4f0e:	f00a f954 	bl	f1ba <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4f12:	7068      	strb	r0, [r5, #1]
    4f14:	7868      	ldrb	r0, [r5, #1]
    4f16:	2700      	movs	r7, #0
    4f18:	f04f 0801 	mov.w	r8, #1
    4f1c:	b150      	cbz	r0, 4f34 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x44>
    4f1e:	2801      	cmp	r0, #1
    4f20:	d030      	beq.n	4f84 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f22:	2802      	cmp	r0, #2
    4f24:	d056      	beq.n	4fd4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xe4>
    4f26:	2803      	cmp	r0, #3
    4f28:	d068      	beq.n	4ffc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x10c>
    4f2a:	f240 31c2 	movw	r1, #962	; 0x3c2
    4f2e:	2027      	movs	r0, #39	; 0x27
    4f30:	f7fe fe6e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f34:	2e01      	cmp	r6, #1
    4f36:	d012      	beq.n	4f5e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6e>
    4f38:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d045      	beq.n	4fca <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    4f3e:	89a9      	ldrh	r1, [r5, #12]
    4f40:	1cca      	adds	r2, r1, #3
    4f42:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    4f44:	f7fe fcd8 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f48:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4f4a:	62a8      	str	r0, [r5, #40]	; 0x28
    4f4c:	2201      	movs	r2, #1
    4f4e:	4649      	mov	r1, r9
    4f50:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4f52:	f00a fe15 	bl	fb80 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4f56:	2e02      	cmp	r6, #2
    4f58:	bf08      	it	eq
    4f5a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f5e:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    4f62:	1c49      	adds	r1, r1, #1
    4f64:	f140 0000 	adc.w	r0, r0, #0
    4f68:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    4f6c:	79e0      	ldrb	r0, [r4, #7]
    4f6e:	2801      	cmp	r0, #1
    4f70:	d101      	bne.n	4f76 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    4f72:	71e7      	strb	r7, [r4, #7]
    4f74:	e001      	b.n	4f7a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    4f76:	f884 8007 	strb.w	r8, [r4, #7]
    4f7a:	7a28      	ldrb	r0, [r5, #8]
    4f7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f80:	f7fe bc34 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4f84:	2e01      	cmp	r6, #1
    4f86:	d011      	beq.n	4fac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>
    4f88:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4f8a:	b1f0      	cbz	r0, 4fca <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    4f8c:	89a9      	ldrh	r1, [r5, #12]
    4f8e:	1cca      	adds	r2, r1, #3
    4f90:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    4f92:	f7fe fcb1 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f96:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4f98:	62a8      	str	r0, [r5, #40]	; 0x28
    4f9a:	2200      	movs	r2, #0
    4f9c:	4649      	mov	r1, r9
    4f9e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4fa0:	f00a fdee 	bl	fb80 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4fa4:	2e02      	cmp	r6, #2
    4fa6:	bf08      	it	eq
    4fa8:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4fac:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
    4fb0:	1c41      	adds	r1, r0, #1
    4fb2:	f142 0000 	adc.w	r0, r2, #0
    4fb6:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    4fba:	79e0      	ldrb	r0, [r4, #7]
    4fbc:	2801      	cmp	r0, #1
    4fbe:	bf0c      	ite	eq
    4fc0:	71e7      	strbeq	r7, [r4, #7]
    4fc2:	f884 8007 	strbne.w	r8, [r4, #7]
    4fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4fca:	f240 4109 	movw	r1, #1033	; 0x409
    4fce:	2027      	movs	r0, #39	; 0x27
    4fd0:	f7fe fe1e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fd4:	2e01      	cmp	r6, #1
    4fd6:	d006      	beq.n	4fe6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xf6>
    4fd8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4fda:	f00b f8a6 	bl	1012a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4fde:	2e02      	cmp	r6, #2
    4fe0:	bf08      	it	eq
    4fe2:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4fe6:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    4fea:	1c49      	adds	r1, r1, #1
    4fec:	f140 0000 	adc.w	r0, r0, #0
    4ff0:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    4ff4:	79e0      	ldrb	r0, [r4, #7]
    4ff6:	2801      	cmp	r0, #1
    4ff8:	d1bd      	bne.n	4f76 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    4ffa:	e7ba      	b.n	4f72 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x82>
    4ffc:	2e01      	cmp	r6, #1
    4ffe:	bf08      	it	eq
    5000:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5004:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5006:	f00b f890 	bl	1012a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    500a:	7a28      	ldrb	r0, [r5, #8]
    500c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5010:	f7fe bbec 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5014:	20000108 	.word	0x20000108
    5018:	200000cc 	.word	0x200000cc

0000501c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    501c:	4804      	ldr	r0, [pc, #16]	; (5030 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    501e:	7800      	ldrb	r0, [r0, #0]
    5020:	2800      	cmp	r0, #0
    5022:	bf1c      	itt	ne
    5024:	200c      	movne	r0, #12
    5026:	4770      	bxne	lr
    5028:	2000      	movs	r0, #0
    502a:	4902      	ldr	r1, [pc, #8]	; (5034 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    502c:	7448      	strb	r0, [r1, #17]
    502e:	4770      	bx	lr
    5030:	200000cc 	.word	0x200000cc
    5034:	20000a22 	.word	0x20000a22

00005038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5038:	4818      	ldr	r0, [pc, #96]	; (509c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64>)
    503a:	b510      	push	{r4, lr}
    503c:	7801      	ldrb	r1, [r0, #0]
    503e:	f100 043c 	add.w	r4, r0, #60	; 0x3c
    5042:	b149      	cbz	r1, 5058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
    5044:	7821      	ldrb	r1, [r4, #0]
    5046:	7800      	ldrb	r0, [r0, #0]
    5048:	b149      	cbz	r1, 505e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26>
    504a:	2802      	cmp	r0, #2
    504c:	d00e      	beq.n	506c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>
    504e:	f240 1197 	movw	r1, #407	; 0x197
    5052:	2027      	movs	r0, #39	; 0x27
    5054:	f7fe fddc 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5058:	f000 fa22 	bl	54a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    505c:	e00b      	b.n	5076 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    505e:	2801      	cmp	r0, #1
    5060:	d009      	beq.n	5076 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    5062:	f240 1193 	movw	r1, #403	; 0x193
    5066:	2027      	movs	r0, #39	; 0x27
    5068:	f7fe fdd2 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    506c:	6860      	ldr	r0, [r4, #4]
    506e:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    5072:	f008 fca9 	bl	d9c8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5076:	6860      	ldr	r0, [r4, #4]
    5078:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
    507c:	2900      	cmp	r1, #0
    507e:	bf18      	it	ne
    5080:	bd10      	popne	{r4, pc}
    5082:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
    5084:	2900      	cmp	r1, #0
    5086:	bf08      	it	eq
    5088:	bd10      	popeq	{r4, pc}
    508a:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
    508e:	2200      	movs	r2, #0
    5090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5094:	4611      	mov	r1, r2
    5096:	f7fd baaf 	b.w	25f8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    509a:	0000      	.short	0x0000
    509c:	200000cc 	.word	0x200000cc
    50a0:	b570      	push	{r4, r5, r6, lr}
    50a2:	4c26      	ldr	r4, [pc, #152]	; (513c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>)
    50a4:	4605      	mov	r5, r0
    50a6:	2900      	cmp	r1, #0
    50a8:	bf08      	it	eq
    50aa:	2d01      	cmpeq	r5, #1
    50ac:	d106      	bne.n	50bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    50ae:	78e0      	ldrb	r0, [r4, #3]
    50b0:	f100 0001 	add.w	r0, r0, #1
    50b4:	b2c0      	uxtb	r0, r0
    50b6:	70e0      	strb	r0, [r4, #3]
    50b8:	2801      	cmp	r0, #1
    50ba:	d83c      	bhi.n	5136 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    50bc:	69e1      	ldr	r1, [r4, #28]
    50be:	4628      	mov	r0, r5
    50c0:	4788      	blx	r1
    50c2:	2800      	cmp	r0, #0
    50c4:	d037      	beq.n	5136 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    50c6:	7960      	ldrb	r0, [r4, #5]
    50c8:	b148      	cbz	r0, 50de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa6>
    50ca:	2d01      	cmp	r5, #1
    50cc:	d107      	bne.n	50de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa6>
    50ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
    50d0:	7841      	ldrb	r1, [r0, #1]
    50d2:	2900      	cmp	r1, #0
    50d4:	bf04      	itt	eq
    50d6:	7800      	ldrbeq	r0, [r0, #0]
    50d8:	f010 0f10 	tsteq.w	r0, #16
    50dc:	d02b      	beq.n	5136 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    50de:	79a0      	ldrb	r0, [r4, #6]
    50e0:	bb48      	cbnz	r0, 5136 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    50e2:	4817      	ldr	r0, [pc, #92]	; (5140 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>)
    50e4:	7801      	ldrb	r1, [r0, #0]
    50e6:	2900      	cmp	r1, #0
    50e8:	bf08      	it	eq
    50ea:	2d01      	cmpeq	r5, #1
    50ec:	d004      	beq.n	50f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    50ee:	b101      	cbz	r1, 50f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xba>
    50f0:	b115      	cbz	r5, 50f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    50f2:	f04f 0000 	mov.w	r0, #0
    50f6:	bd70      	pop	{r4, r5, r6, pc}
    50f8:	4812      	ldr	r0, [pc, #72]	; (5144 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    50fa:	7801      	ldrb	r1, [r0, #0]
    50fc:	f011 0f10 	tst.w	r1, #16
    5100:	d106      	bne.n	5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>
    5102:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5104:	7800      	ldrb	r0, [r0, #0]
    5106:	f010 0f10 	tst.w	r0, #16
    510a:	bf08      	it	eq
    510c:	2001      	moveq	r0, #1
    510e:	d001      	beq.n	5114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    5110:	f04f 0000 	mov.w	r0, #0
    5114:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5116:	b932      	cbnz	r2, 5126 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5118:	89a2      	ldrh	r2, [r4, #12]
    511a:	b122      	cbz	r2, 5126 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    511c:	f011 0f10 	tst.w	r1, #16
    5120:	bf08      	it	eq
    5122:	2101      	moveq	r1, #1
    5124:	d001      	beq.n	512a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5126:	f04f 0100 	mov.w	r1, #0
    512a:	89e2      	ldrh	r2, [r4, #14]
    512c:	ea40 0002 	orr.w	r0, r0, r2
    5130:	4308      	orrs	r0, r1
    5132:	bf08      	it	eq
    5134:	bd70      	popeq	{r4, r5, r6, pc}
    5136:	2001      	movs	r0, #1
    5138:	bd70      	pop	{r4, r5, r6, pc}
    513a:	0000      	.short	0x0000
    513c:	200000cc 	.word	0x200000cc
    5140:	20000108 	.word	0x20000108
    5144:	200000de 	.word	0x200000de
    5148:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    514c:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 53f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3bc>
    5150:	2700      	movs	r7, #0
    5152:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    5156:	f8d8 0004 	ldr.w	r0, [r8, #4]
    515a:	463d      	mov	r5, r7
    515c:	f100 0a78 	add.w	sl, r0, #120	; 0x78
    5160:	7820      	ldrb	r0, [r4, #0]
    5162:	2802      	cmp	r0, #2
    5164:	d004      	beq.n	5170 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5166:	f240 415b 	movw	r1, #1115	; 0x45b
    516a:	2027      	movs	r0, #39	; 0x27
    516c:	f7fe fd50 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5170:	7c20      	ldrb	r0, [r4, #16]
    5172:	f010 0f40 	tst.w	r0, #64	; 0x40
    5176:	d107      	bne.n	5188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    5178:	2040      	movs	r0, #64	; 0x40
    517a:	69a2      	ldr	r2, [r4, #24]
    517c:	2100      	movs	r1, #0
    517e:	4790      	blx	r2
    5180:	8a20      	ldrh	r0, [r4, #16]
    5182:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5186:	8220      	strh	r0, [r4, #16]
    5188:	9900      	ldr	r1, [sp, #0]
    518a:	489b      	ldr	r0, [pc, #620]	; (53f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c0>)
    518c:	2900      	cmp	r1, #0
    518e:	f000 8100 	beq.w	5392 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5192:	7941      	ldrb	r1, [r0, #5]
    5194:	1c49      	adds	r1, r1, #1
    5196:	7141      	strb	r1, [r0, #5]
    5198:	f89a 0012 	ldrb.w	r0, [sl, #18]
    519c:	f008 f932 	bl	d404 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    51a0:	f008 f914 	bl	d3cc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    51a4:	f04f 0901 	mov.w	r9, #1
    51a8:	b998      	cbnz	r0, 51d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19a>
    51aa:	f89a 0012 	ldrb.w	r0, [sl, #18]
    51ae:	b180      	cbz	r0, 51d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19a>
    51b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    51b2:	7841      	ldrb	r1, [r0, #1]
    51b4:	b169      	cbz	r1, 51d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19a>
    51b6:	7800      	ldrb	r0, [r0, #0]
    51b8:	f89a 1007 	ldrb.w	r1, [sl, #7]
    51bc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    51c0:	4288      	cmp	r0, r1
    51c2:	d106      	bne.n	51d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19a>
    51c4:	f884 9002 	strb.w	r9, [r4, #2]
    51c8:	b002      	add	sp, #8
    51ca:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    51ce:	f000 b967 	b.w	54a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    51d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    51d4:	7841      	ldrb	r1, [r0, #1]
    51d6:	81a1      	strh	r1, [r4, #12]
    51d8:	2900      	cmp	r1, #0
    51da:	bf08      	it	eq
    51dc:	62e7      	streq	r7, [r4, #44]	; 0x2c
    51de:	d003      	beq.n	51e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b0>
    51e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    51e2:	f00a ff5b 	bl	1009c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    51e6:	62e0      	str	r0, [r4, #44]	; 0x2c
    51e8:	8a20      	ldrh	r0, [r4, #16]
    51ea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    51ee:	8220      	strh	r0, [r4, #16]
    51f0:	70e7      	strb	r7, [r4, #3]
    51f2:	f8d8 6004 	ldr.w	r6, [r8, #4]
    51f6:	f106 0b78 	add.w	fp, r6, #120	; 0x78
    51fa:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    51fe:	2801      	cmp	r0, #1
    5200:	d11d      	bne.n	523e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x206>
    5202:	f009 f871 	bl	e2e8 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    5206:	4659      	mov	r1, fp
    5208:	4630      	mov	r0, r6
    520a:	f00b faf6 	bl	107fa <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    520e:	b1b0      	cbz	r0, 523e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x206>
    5210:	f898 0000 	ldrb.w	r0, [r8]
    5214:	2800      	cmp	r0, #0
    5216:	f8d8 0004 	ldr.w	r0, [r8, #4]
    521a:	bf0c      	ite	eq
    521c:	f500 70c4 	addeq.w	r0, r0, #392	; 0x188
    5220:	f500 7001 	addne.w	r0, r0, #516	; 0x204
    5224:	8831      	ldrh	r1, [r6, #0]
    5226:	8041      	strh	r1, [r0, #2]
    5228:	f89b 1008 	ldrb.w	r1, [fp, #8]
    522c:	7101      	strb	r1, [r0, #4]
    522e:	f89b 1009 	ldrb.w	r1, [fp, #9]
    5232:	7141      	strb	r1, [r0, #5]
    5234:	f880 9000 	strb.w	r9, [r0]
    5238:	7a20      	ldrb	r0, [r4, #8]
    523a:	f7fe fad7 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    523e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5240:	f89a 1006 	ldrb.w	r1, [sl, #6]
    5244:	7800      	ldrb	r0, [r0, #0]
    5246:	f3c0 0080 	ubfx	r0, r0, #2, #1
    524a:	4288      	cmp	r0, r1
    524c:	d049      	beq.n	52e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    524e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5252:	f100 0678 	add.w	r6, r0, #120	; 0x78
    5256:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    525a:	2800      	cmp	r0, #0
    525c:	d03d      	beq.n	52da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    525e:	2802      	cmp	r0, #2
    5260:	d10e      	bne.n	5280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x248>
    5262:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5264:	f00a fc58 	bl	fb18 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5268:	2800      	cmp	r0, #0
    526a:	d055      	beq.n	5318 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    526c:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    5270:	1c49      	adds	r1, r1, #1
    5272:	f140 0000 	adc.w	r0, r0, #0
    5276:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    527a:	7a20      	ldrb	r0, [r4, #8]
    527c:	f7fe fab6 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5280:	7177      	strb	r7, [r6, #5]
    5282:	f898 0000 	ldrb.w	r0, [r8]
    5286:	2800      	cmp	r0, #0
    5288:	bf1c      	itt	ne
    528a:	7930      	ldrbne	r0, [r6, #4]
    528c:	2800      	cmpne	r0, #0
    528e:	d009      	beq.n	52a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    5290:	7137      	strb	r7, [r6, #4]
    5292:	89e2      	ldrh	r2, [r4, #14]
    5294:	4639      	mov	r1, r7
    5296:	f042 0210 	orr.w	r2, r2, #16
    529a:	81e2      	strh	r2, [r4, #14]
    529c:	69a2      	ldr	r2, [r4, #24]
    529e:	f04f 0010 	mov.w	r0, #16
    52a2:	4790      	blx	r2
    52a4:	78f0      	ldrb	r0, [r6, #3]
    52a6:	b190      	cbz	r0, 52ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    52a8:	70f7      	strb	r7, [r6, #3]
    52aa:	f7ff fbb7 	bl	4a1c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    52ae:	b390      	cbz	r0, 5316 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2de>
    52b0:	89e2      	ldrh	r2, [r4, #14]
    52b2:	2008      	movs	r0, #8
    52b4:	f042 0208 	orr.w	r2, r2, #8
    52b8:	81e2      	strh	r2, [r4, #14]
    52ba:	69a2      	ldr	r2, [r4, #24]
    52bc:	2100      	movs	r1, #0
    52be:	4790      	blx	r2
    52c0:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    52c4:	1c49      	adds	r1, r1, #1
    52c6:	f140 0000 	adc.w	r0, r0, #0
    52ca:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    52ce:	79b0      	ldrb	r0, [r6, #6]
    52d0:	2801      	cmp	r0, #1
    52d2:	bf0c      	ite	eq
    52d4:	71b7      	strbeq	r7, [r6, #6]
    52d6:	f886 9006 	strbne.w	r9, [r6, #6]
    52da:	8a20      	ldrh	r0, [r4, #16]
    52dc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    52e0:	8220      	strh	r0, [r4, #16]
    52e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    52e4:	f89a 3007 	ldrb.w	r3, [sl, #7]
    52e8:	7808      	ldrb	r0, [r1, #0]
    52ea:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    52ee:	429a      	cmp	r2, r3
    52f0:	d148      	bne.n	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    52f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    52f6:	f000 0003 	and.w	r0, r0, #3
    52fa:	f102 0678 	add.w	r6, r2, #120	; 0x78
    52fe:	2801      	cmp	r0, #1
    5300:	bf18      	it	ne
    5302:	2802      	cmpne	r0, #2
    5304:	d027      	beq.n	5356 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    5306:	2803      	cmp	r0, #3
    5308:	bf1c      	itt	ne
    530a:	79a0      	ldrbne	r0, [r4, #6]
    530c:	f040 0004 	orrne.w	r0, r0, #4
    5310:	d00c      	beq.n	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    5312:	71a0      	strb	r0, [r4, #6]
    5314:	e036      	b.n	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5316:	e004      	b.n	5322 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ea>
    5318:	f240 315d 	movw	r1, #861	; 0x35d
    531c:	2027      	movs	r0, #39	; 0x27
    531e:	f7fe fc77 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5322:	f240 3175 	movw	r1, #885	; 0x375
    5326:	2027      	movs	r0, #39	; 0x27
    5328:	f7fe fc72 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    532c:	f886 9002 	strb.w	r9, [r6, #2]
    5330:	8a22      	ldrh	r2, [r4, #16]
    5332:	4648      	mov	r0, r9
    5334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5338:	8222      	strh	r2, [r4, #16]
    533a:	89e2      	ldrh	r2, [r4, #14]
    533c:	f042 0201 	orr.w	r2, r2, #1
    5340:	81e2      	strh	r2, [r4, #14]
    5342:	69a2      	ldr	r2, [r4, #24]
    5344:	4790      	blx	r2
    5346:	79f0      	ldrb	r0, [r6, #7]
    5348:	2801      	cmp	r0, #1
    534a:	d101      	bne.n	5350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    534c:	71f7      	strb	r7, [r6, #7]
    534e:	e019      	b.n	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5350:	f886 9007 	strb.w	r9, [r6, #7]
    5354:	e016      	b.n	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5356:	7848      	ldrb	r0, [r1, #1]
    5358:	b1b8      	cbz	r0, 538a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    535a:	8a21      	ldrh	r1, [r4, #16]
    535c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5360:	8221      	strh	r1, [r4, #16]
    5362:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5364:	b171      	cbz	r1, 5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5366:	28fb      	cmp	r0, #251	; 0xfb
    5368:	bf84      	itt	hi
    536a:	79a0      	ldrbhi	r0, [r4, #6]
    536c:	f040 0010 	orrhi.w	r0, r0, #16
    5370:	d8cf      	bhi.n	5312 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2da>
    5372:	79e0      	ldrb	r0, [r4, #7]
    5374:	2800      	cmp	r0, #0
    5376:	bf08      	it	eq
    5378:	464d      	moveq	r5, r9
    537a:	d003      	beq.n	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    537c:	2020      	movs	r0, #32
    537e:	69a2      	ldr	r2, [r4, #24]
    5380:	2100      	movs	r1, #0
    5382:	4790      	blx	r2
    5384:	9801      	ldr	r0, [sp, #4]
    5386:	b9b8      	cbnz	r0, 53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    5388:	e011      	b.n	53ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    538a:	79f0      	ldrb	r0, [r6, #7]
    538c:	2801      	cmp	r0, #1
    538e:	d1df      	bne.n	5350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    5390:	e7dc      	b.n	534c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    5392:	7981      	ldrb	r1, [r0, #6]
    5394:	1c49      	adds	r1, r1, #1
    5396:	7181      	strb	r1, [r0, #6]
    5398:	f89a 0012 	ldrb.w	r0, [sl, #18]
    539c:	2800      	cmp	r0, #0
    539e:	bf18      	it	ne
    53a0:	f008 f82a 	blne	d3f8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    53a4:	8a20      	ldrh	r0, [r4, #16]
    53a6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    53aa:	8220      	strh	r0, [r4, #16]
    53ac:	e7ea      	b.n	5384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    53ae:	2001      	movs	r0, #1
    53b0:	9900      	ldr	r1, [sp, #0]
    53b2:	f7ff fe75 	bl	50a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>
    53b6:	b148      	cbz	r0, 53cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x394>
    53b8:	2d00      	cmp	r5, #0
    53ba:	bf1c      	itt	ne
    53bc:	2000      	movne	r0, #0
    53be:	f7ff fd97 	blne	4ef0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    53c2:	b002      	add	sp, #8
    53c4:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    53c8:	f000 b86a 	b.w	54a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    53cc:	2d00      	cmp	r5, #0
    53ce:	bf1c      	itt	ne
    53d0:	2001      	movne	r0, #1
    53d2:	f7ff fd8d 	blne	4ef0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    53d6:	2000      	movs	r0, #0
    53d8:	f000 f94e 	bl	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    53dc:	2d00      	cmp	r5, #0
    53de:	bf04      	itt	eq
    53e0:	b002      	addeq	sp, #8
    53e2:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    53e6:	2002      	movs	r0, #2
    53e8:	b002      	add	sp, #8
    53ea:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    53ee:	f7ff bd7f 	b.w	4ef0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    53f2:	0000      	.short	0x0000
    53f4:	20000108 	.word	0x20000108
    53f8:	20000a22 	.word	0x20000a22
    53fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5400:	4e26      	ldr	r6, [pc, #152]	; (549c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>)
    5402:	4681      	mov	r9, r0
    5404:	f1a6 053c 	sub.w	r5, r6, #60	; 0x3c
    5408:	6870      	ldr	r0, [r6, #4]
    540a:	4688      	mov	r8, r1
    540c:	f100 0478 	add.w	r4, r0, #120	; 0x78
    5410:	7828      	ldrb	r0, [r5, #0]
    5412:	2801      	cmp	r0, #1
    5414:	d004      	beq.n	5420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    5416:	f44f 6183 	mov.w	r1, #1048	; 0x418
    541a:	2027      	movs	r0, #39	; 0x27
    541c:	f7fe fbf8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5420:	78a0      	ldrb	r0, [r4, #2]
    5422:	2701      	movs	r7, #1
    5424:	b160      	cbz	r0, 5440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x408>
    5426:	2100      	movs	r1, #0
    5428:	70a1      	strb	r1, [r4, #2]
    542a:	89ea      	ldrh	r2, [r5, #14]
    542c:	2004      	movs	r0, #4
    542e:	f042 0204 	orr.w	r2, r2, #4
    5432:	81ea      	strh	r2, [r5, #14]
    5434:	69aa      	ldr	r2, [r5, #24]
    5436:	4790      	blx	r2
    5438:	7830      	ldrb	r0, [r6, #0]
    543a:	2800      	cmp	r0, #0
    543c:	bf18      	it	ne
    543e:	7127      	strbne	r7, [r4, #4]
    5440:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5442:	2603      	movs	r6, #3
    5444:	7808      	ldrb	r0, [r1, #0]
    5446:	ea36 0000 	bics.w	r0, r6, r0
    544a:	d10d      	bne.n	5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    544c:	7960      	ldrb	r0, [r4, #5]
    544e:	b998      	cbnz	r0, 5478 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>
    5450:	89ea      	ldrh	r2, [r5, #14]
    5452:	2002      	movs	r0, #2
    5454:	f042 0202 	orr.w	r2, r2, #2
    5458:	81ea      	strh	r2, [r5, #14]
    545a:	69aa      	ldr	r2, [r5, #24]
    545c:	4790      	blx	r2
    545e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5460:	7800      	ldrb	r0, [r0, #0]
    5462:	ea36 0000 	bics.w	r0, r6, r0
    5466:	d007      	beq.n	5478 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>
    5468:	6a68      	ldr	r0, [r5, #36]	; 0x24
    546a:	7840      	ldrb	r0, [r0, #1]
    546c:	2800      	cmp	r0, #0
    546e:	bf0e      	itee	eq
    5470:	7167      	strbeq	r7, [r4, #5]
    5472:	2002      	movne	r0, #2
    5474:	7160      	strbne	r0, [r4, #5]
    5476:	e000      	b.n	547a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x442>
    5478:	7166      	strb	r6, [r4, #5]
    547a:	ea38 0009 	bics.w	r0, r8, r9
    547e:	d004      	beq.n	548a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x452>
    5480:	2101      	movs	r1, #1
    5482:	2000      	movs	r0, #0
    5484:	f7ff fe0c 	bl	50a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>
    5488:	b118      	cbz	r0, 5492 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45a>
    548a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    548e:	f000 b807 	b.w	54a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    5492:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5496:	2000      	movs	r0, #0
    5498:	f000 b854 	b.w	5544 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50c>
    549c:	20000108 	.word	0x20000108
    54a0:	b510      	push	{r4, lr}
    54a2:	f008 f87d 	bl	d5a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    54a6:	f007 ff0b 	bl	d2c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    54aa:	4813      	ldr	r0, [pc, #76]	; (54f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    54ac:	6840      	ldr	r0, [r0, #4]
    54ae:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    54b2:	2801      	cmp	r0, #1
    54b4:	bf08      	it	eq
    54b6:	f008 ff17 	bleq	e2e8 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    54ba:	4c10      	ldr	r4, [pc, #64]	; (54fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c4>)
    54bc:	2100      	movs	r1, #0
    54be:	69a2      	ldr	r2, [r4, #24]
    54c0:	8a20      	ldrh	r0, [r4, #16]
    54c2:	4790      	blx	r2
    54c4:	6a22      	ldr	r2, [r4, #32]
    54c6:	79a1      	ldrb	r1, [r4, #6]
    54c8:	78a0      	ldrb	r0, [r4, #2]
    54ca:	4790      	blx	r2
    54cc:	490c      	ldr	r1, [pc, #48]	; (5500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c8>)
    54ce:	7c48      	ldrb	r0, [r1, #17]
    54d0:	b170      	cbz	r0, 54f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b8>
    54d2:	f5a1 70a9 	sub.w	r0, r1, #338	; 0x152
    54d6:	f8d0 2152 	ldr.w	r2, [r0, #338]	; 0x152
    54da:	f8d0 3156 	ldr.w	r3, [r0, #342]	; 0x156
    54de:	f8c0 215a 	str.w	r2, [r0, #346]	; 0x15a
    54e2:	f8c0 315e 	str.w	r3, [r0, #350]	; 0x15e
    54e6:	2001      	movs	r0, #1
    54e8:	7408      	strb	r0, [r1, #16]
    54ea:	7a20      	ldrb	r0, [r4, #8]
    54ec:	f7fe f97e 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    54f0:	2000      	movs	r0, #0
    54f2:	7020      	strb	r0, [r4, #0]
    54f4:	bd10      	pop	{r4, pc}
    54f6:	0000      	.short	0x0000
    54f8:	20000108 	.word	0x20000108
    54fc:	200000cc 	.word	0x200000cc
    5500:	20000a22 	.word	0x20000a22
    5504:	4808      	ldr	r0, [pc, #32]	; (5528 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>)
    5506:	b510      	push	{r4, lr}
    5508:	7800      	ldrb	r0, [r0, #0]
    550a:	2802      	cmp	r0, #2
    550c:	d004      	beq.n	5518 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    550e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    5512:	2027      	movs	r0, #39	; 0x27
    5514:	f7fe fb7c 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5518:	4904      	ldr	r1, [pc, #16]	; (552c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f4>)
    551a:	2001      	movs	r0, #1
    551c:	71c8      	strb	r0, [r1, #7]
    551e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5522:	f7ff bfbd 	b.w	54a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    5526:	0000      	.short	0x0000
    5528:	200000cc 	.word	0x200000cc
    552c:	20000a22 	.word	0x20000a22
    5530:	4803      	ldr	r0, [pc, #12]	; (5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x508>)
    5532:	7800      	ldrb	r0, [r0, #0]
    5534:	2800      	cmp	r0, #0
    5536:	bf08      	it	eq
    5538:	4770      	bxeq	lr
    553a:	f7ff bfb1 	b.w	54a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    553e:	0000      	.short	0x0000
    5540:	200000cc 	.word	0x200000cc
    5544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5548:	f8df 811c 	ldr.w	r8, [pc, #284]	; 5668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    554c:	4606      	mov	r6, r0
    554e:	f8d8 4004 	ldr.w	r4, [r8, #4]
    5552:	f104 0778 	add.w	r7, r4, #120	; 0x78
    5556:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    555a:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    555c:	f894 908a 	ldrb.w	r9, [r4, #138]	; 0x8a
    5560:	8f25      	ldrh	r5, [r4, #56]	; 0x38
    5562:	2908      	cmp	r1, #8
    5564:	d011      	beq.n	558a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x552>
    5566:	f00b f82f 	bl	105c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    556a:	bf00      	nop
    556c:	f1b9 0f00 	cmp.w	r9, #0
    5570:	bf04      	itt	eq
    5572:	1d00      	addeq	r0, r0, #4
    5574:	b280      	uxtheq	r0, r0
    5576:	4285      	cmp	r5, r0
    5578:	bf38      	it	cc
    557a:	4628      	movcc	r0, r5
    557c:	f000 09ff 	and.w	r9, r0, #255	; 0xff
    5580:	4d3a      	ldr	r5, [pc, #232]	; (566c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>)
    5582:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5584:	62a8      	str	r0, [r5, #40]	; 0x28
    5586:	b976      	cbnz	r6, 55a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56e>
    5588:	e003      	b.n	5592 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55a>
    558a:	2104      	movs	r1, #4
    558c:	f00b f81c 	bl	105c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5590:	e7ec      	b.n	556c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x534>
    5592:	7a68      	ldrb	r0, [r5, #9]
    5594:	7aa9      	ldrb	r1, [r5, #10]
    5596:	4288      	cmp	r0, r1
    5598:	d105      	bne.n	55a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56e>
    559a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    559e:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    55a2:	4288      	cmp	r0, r1
    55a4:	d004      	beq.n	55b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x578>
    55a6:	7a68      	ldrb	r0, [r5, #9]
    55a8:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    55ac:	f008 ff06 	bl	e3bc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    55b0:	7cb8      	ldrb	r0, [r7, #18]
    55b2:	2800      	cmp	r0, #0
    55b4:	d031      	beq.n	561a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    55b6:	482e      	ldr	r0, [pc, #184]	; (5670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x638>)
    55b8:	f008 fbdc 	bl	dd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    55bc:	f898 0000 	ldrb.w	r0, [r8]
    55c0:	2800      	cmp	r0, #0
    55c2:	bf0c      	ite	eq
    55c4:	2001      	moveq	r0, #1
    55c6:	2000      	movne	r0, #0
    55c8:	f080 0101 	eor.w	r1, r0, #1
    55cc:	4829      	ldr	r0, [pc, #164]	; (5674 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x63c>)
    55ce:	7601      	strb	r1, [r0, #24]
    55d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    55d4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    55d8:	f5a0 7284 	sub.w	r2, r0, #264	; 0x108
    55dc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    55de:	f007 fe5f 	bl	d2a0 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    55e2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    55e6:	2801      	cmp	r0, #1
    55e8:	bf08      	it	eq
    55ea:	2200      	moveq	r2, #0
    55ec:	d010      	beq.n	5610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>
    55ee:	2802      	cmp	r0, #2
    55f0:	bf08      	it	eq
    55f2:	2201      	moveq	r2, #1
    55f4:	d00c      	beq.n	5610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>
    55f6:	2804      	cmp	r0, #4
    55f8:	bf08      	it	eq
    55fa:	2203      	moveq	r2, #3
    55fc:	d008      	beq.n	5610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>
    55fe:	2808      	cmp	r0, #8
    5600:	bf08      	it	eq
    5602:	2202      	moveq	r2, #2
    5604:	d004      	beq.n	5610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>
    5606:	f240 31b3 	movw	r1, #947	; 0x3b3
    560a:	2006      	movs	r0, #6
    560c:	f7fe fb00 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5610:	4649      	mov	r1, r9
    5612:	2001      	movs	r0, #1
    5614:	f007 fe74 	bl	d300 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5618:	e004      	b.n	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    561a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    561c:	f008 fbaa 	bl	dd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5620:	f007 fe4e 	bl	d2c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5624:	b93e      	cbnz	r6, 5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5fe>
    5626:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    562a:	f010 000c 	ands.w	r0, r0, #12
    562e:	bf18      	it	ne
    5630:	2028      	movne	r0, #40	; 0x28
    5632:	f008 f9fd 	bl	da30 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5636:	6860      	ldr	r0, [r4, #4]
    5638:	f641 514c 	movw	r1, #7500	; 0x1d4c
    563c:	4288      	cmp	r0, r1
    563e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    5642:	f04f 0201 	mov.w	r2, #1
    5646:	f04f 0100 	mov.w	r1, #0
    564a:	bf34      	ite	cc
    564c:	2001      	movcc	r0, #1
    564e:	2000      	movcs	r0, #0
    5650:	f008 fda0 	bl	e194 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5654:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    5658:	2801      	cmp	r0, #1
    565a:	bf08      	it	eq
    565c:	f008 fe50 	bleq	e300 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    5660:	2002      	movs	r0, #2
    5662:	7028      	strb	r0, [r5, #0]
    5664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5668:	20000108 	.word	0x20000108
    566c:	200000cc 	.word	0x200000cc
    5670:	200008d0 	.word	0x200008d0
    5674:	200009d8 	.word	0x200009d8
    5678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    567c:	f8df 933c 	ldr.w	r9, [pc, #828]	; 59bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x984>
    5680:	0002      	movs	r2, r0
    5682:	b083      	sub	sp, #12
    5684:	f1a9 0018 	sub.w	r0, r9, #24
    5688:	f8d9 6004 	ldr.w	r6, [r9, #4]
    568c:	f1a0 0424 	sub.w	r4, r0, #36	; 0x24
    5690:	9002      	str	r0, [sp, #8]
    5692:	7aa0      	ldrb	r0, [r4, #10]
    5694:	f896 1066 	ldrb.w	r1, [r6, #102]	; 0x66
    5698:	f106 0778 	add.w	r7, r6, #120	; 0x78
    569c:	bf01      	itttt	eq
    569e:	7a62      	ldrbeq	r2, [r4, #9]
    56a0:	4282      	cmpeq	r2, r0
    56a2:	f896 2067 	ldrbeq.w	r2, [r6, #103]	; 0x67
    56a6:	428a      	cmpeq	r2, r1
    56a8:	d001      	beq.n	56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x676>
    56aa:	f008 fe87 	bl	e3bc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    56ae:	7978      	ldrb	r0, [r7, #5]
    56b0:	f8df b30c 	ldr.w	fp, [pc, #780]	; 59c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x988>
    56b4:	f04f 0808 	mov.w	r8, #8
    56b8:	f04f 0a00 	mov.w	sl, #0
    56bc:	2501      	movs	r5, #1
    56be:	b168      	cbz	r0, 56dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    56c0:	2801      	cmp	r0, #1
    56c2:	f000 80c9 	beq.w	5858 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x820>
    56c6:	2802      	cmp	r0, #2
    56c8:	f000 80da 	beq.w	5880 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x848>
    56cc:	2803      	cmp	r0, #3
    56ce:	f000 80e7 	beq.w	58a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x868>
    56d2:	f240 216e 	movw	r1, #622	; 0x26e
    56d6:	2027      	movs	r0, #39	; 0x27
    56d8:	f7fe fa9a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56dc:	f8d9 0004 	ldr.w	r0, [r9, #4]
    56e0:	f100 0178 	add.w	r1, r0, #120	; 0x78
    56e4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    56e8:	2b24      	cmp	r3, #36	; 0x24
    56ea:	bf1c      	itt	ne
    56ec:	7b49      	ldrbne	r1, [r1, #13]
    56ee:	2924      	cmpne	r1, #36	; 0x24
    56f0:	d008      	beq.n	5704 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6cc>
    56f2:	f04f 0202 	mov.w	r2, #2
    56f6:	2b1f      	cmp	r3, #31
    56f8:	bf18      	it	ne
    56fa:	2b20      	cmpne	r3, #32
    56fc:	d02c      	beq.n	5758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x720>
    56fe:	2922      	cmp	r1, #34	; 0x22
    5700:	d051      	beq.n	57a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76e>
    5702:	e07d      	b.n	5800 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c8>
    5704:	f899 1000 	ldrb.w	r1, [r9]
    5708:	2900      	cmp	r1, #0
    570a:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    570e:	d012      	beq.n	5736 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fe>
    5710:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    5714:	2800      	cmp	r0, #0
    5716:	d077      	beq.n	5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    5718:	2908      	cmp	r1, #8
    571a:	bf18      	it	ne
    571c:	2904      	cmpne	r1, #4
    571e:	d06c      	beq.n	57fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    5720:	2808      	cmp	r0, #8
    5722:	bf18      	it	ne
    5724:	2804      	cmpne	r0, #4
    5726:	d068      	beq.n	57fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    5728:	2901      	cmp	r1, #1
    572a:	bf18      	it	ne
    572c:	2801      	cmpne	r0, #1
    572e:	d056      	beq.n	57de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a6>
    5730:	f04f 0102 	mov.w	r1, #2
    5734:	e068      	b.n	5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    5736:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    573a:	2800      	cmp	r0, #0
    573c:	d064      	beq.n	5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    573e:	2908      	cmp	r1, #8
    5740:	bf18      	it	ne
    5742:	2904      	cmpne	r1, #4
    5744:	d059      	beq.n	57fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    5746:	2808      	cmp	r0, #8
    5748:	bf18      	it	ne
    574a:	2804      	cmpne	r0, #4
    574c:	d055      	beq.n	57fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    574e:	2901      	cmp	r1, #1
    5750:	bf18      	it	ne
    5752:	2801      	cmpne	r0, #1
    5754:	d043      	beq.n	57de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a6>
    5756:	e7eb      	b.n	5730 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    5758:	2922      	cmp	r1, #34	; 0x22
    575a:	d024      	beq.n	57a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76e>
    575c:	f899 1000 	ldrb.w	r1, [r9]
    5760:	2900      	cmp	r1, #0
    5762:	d04d      	beq.n	5800 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c8>
    5764:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5768:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    576c:	f010 0f04 	tst.w	r0, #4
    5770:	bf18      	it	ne
    5772:	4640      	movne	r0, r8
    5774:	d00c      	beq.n	5790 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    5776:	2908      	cmp	r1, #8
    5778:	bf18      	it	ne
    577a:	2904      	cmpne	r1, #4
    577c:	d03d      	beq.n	57fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    577e:	2808      	cmp	r0, #8
    5780:	bf18      	it	ne
    5782:	2804      	cmpne	r0, #4
    5784:	d039      	beq.n	57fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    5786:	2901      	cmp	r1, #1
    5788:	bf18      	it	ne
    578a:	2801      	cmpne	r0, #1
    578c:	d027      	beq.n	57de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a6>
    578e:	e7cf      	b.n	5730 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    5790:	f010 0f01 	tst.w	r0, #1
    5794:	bf18      	it	ne
    5796:	4628      	movne	r0, r5
    5798:	d1ed      	bne.n	5776 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    579a:	f010 0f02 	tst.w	r0, #2
    579e:	bf18      	it	ne
    57a0:	4610      	movne	r0, r2
    57a2:	d1e8      	bne.n	5776 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    57a4:	e030      	b.n	5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    57a6:	f899 1000 	ldrb.w	r1, [r9]
    57aa:	b349      	cbz	r1, 5800 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c8>
    57ac:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    57b0:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    57b4:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    57b8:	ea03 0000 	and.w	r0, r3, r0
    57bc:	f010 0f04 	tst.w	r0, #4
    57c0:	bf18      	it	ne
    57c2:	4640      	movne	r0, r8
    57c4:	d00e      	beq.n	57e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>
    57c6:	2908      	cmp	r1, #8
    57c8:	bf18      	it	ne
    57ca:	2904      	cmpne	r1, #4
    57cc:	d015      	beq.n	57fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    57ce:	2808      	cmp	r0, #8
    57d0:	bf18      	it	ne
    57d2:	2804      	cmpne	r0, #4
    57d4:	d011      	beq.n	57fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    57d6:	2901      	cmp	r1, #1
    57d8:	bf18      	it	ne
    57da:	2801      	cmpne	r0, #1
    57dc:	d1a8      	bne.n	5730 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    57de:	f04f 0101 	mov.w	r1, #1
    57e2:	e011      	b.n	5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    57e4:	f010 0f01 	tst.w	r0, #1
    57e8:	bf18      	it	ne
    57ea:	4628      	movne	r0, r5
    57ec:	d1eb      	bne.n	57c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78e>
    57ee:	f010 0f02 	tst.w	r0, #2
    57f2:	bf18      	it	ne
    57f4:	4610      	movne	r0, r2
    57f6:	d1e6      	bne.n	57c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78e>
    57f8:	e006      	b.n	5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    57fa:	f04f 0108 	mov.w	r1, #8
    57fe:	e003      	b.n	5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    5800:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5804:	2904      	cmp	r1, #4
    5806:	d0f8      	beq.n	57fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c2>
    5808:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
    580a:	f011 0f0c 	tst.w	r1, #12
    580e:	bf18      	it	ne
    5810:	f44f 6029 	movne.w	r0, #2704	; 0xa90
    5814:	f00a fed8 	bl	105c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5818:	8e31      	ldrh	r1, [r6, #48]	; 0x30
    581a:	4281      	cmp	r1, r0
    581c:	bf38      	it	cc
    581e:	4608      	movcc	r0, r1
    5820:	f8ad 0004 	strh.w	r0, [sp, #4]
    5824:	f8a6 004c 	strh.w	r0, [r6, #76]	; 0x4c
    5828:	9802      	ldr	r0, [sp, #8]
    582a:	f7ff f921 	bl	4a70 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    582e:	b148      	cbz	r0, 5844 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80c>
    5830:	89e2      	ldrh	r2, [r4, #14]
    5832:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5834:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5838:	81e2      	strh	r2, [r4, #14]
    583a:	69a2      	ldr	r2, [r4, #24]
    583c:	2080      	movs	r0, #128	; 0x80
    583e:	4790      	blx	r2
    5840:	70fd      	strb	r5, [r7, #3]
    5842:	e031      	b.n	58a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x870>
    5844:	466a      	mov	r2, sp
    5846:	a901      	add	r1, sp, #4
    5848:	6b60      	ldr	r0, [r4, #52]	; 0x34
    584a:	f00a fb50 	bl	feee <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    584e:	6260      	str	r0, [r4, #36]	; 0x24
    5850:	b110      	cbz	r0, 5858 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x820>
    5852:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
    5856:	b111      	cbz	r1, 585e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x826>
    5858:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
    585c:	e024      	b.n	58a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x870>
    585e:	f89d 1000 	ldrb.w	r1, [sp]
    5862:	b931      	cbnz	r1, 5872 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83a>
    5864:	f8a0 a000 	strh.w	sl, [r0]
    5868:	f880 a002 	strb.w	sl, [r0, #2]
    586c:	2101      	movs	r1, #1
    586e:	f00b f924 	bl	10aba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5872:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5876:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5878:	f00b f8d9 	bl	10a2e <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    587c:	e014      	b.n	58a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x870>
    587e:	bf00      	nop
    5880:	f8b6 004c 	ldrh.w	r0, [r6, #76]	; 0x4c
    5884:	f8ad 0004 	strh.w	r0, [sp, #4]
    5888:	466a      	mov	r2, sp
    588a:	a901      	add	r1, sp, #4
    588c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    588e:	f00a fb2e 	bl	feee <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    5892:	6260      	str	r0, [r4, #36]	; 0x24
    5894:	b940      	cbnz	r0, 58a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x870>
    5896:	f240 215f 	movw	r1, #607	; 0x25f
    589a:	2027      	movs	r0, #39	; 0x27
    589c:	f7fe f9b8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58a0:	9802      	ldr	r0, [sp, #8]
    58a2:	f7ff f8e5 	bl	4a70 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    58a6:	b318      	cbz	r0, 58f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8b8>
    58a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    58aa:	2304      	movs	r3, #4
    58ac:	7801      	ldrb	r1, [r0, #0]
    58ae:	f021 0108 	bic.w	r1, r1, #8
    58b2:	7001      	strb	r1, [r0, #0]
    58b4:	79ba      	ldrb	r2, [r7, #6]
    58b6:	ea08 02c2 	and.w	r2, r8, r2, lsl #3
    58ba:	4311      	orrs	r1, r2
    58bc:	f021 0104 	bic.w	r1, r1, #4
    58c0:	7001      	strb	r1, [r0, #0]
    58c2:	79fa      	ldrb	r2, [r7, #7]
    58c4:	f04f 0803 	mov.w	r8, #3
    58c8:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    58cc:	4311      	orrs	r1, r2
    58ce:	f021 0110 	bic.w	r1, r1, #16
    58d2:	7001      	strb	r1, [r0, #0]
    58d4:	ea38 0101 	bics.w	r1, r8, r1
    58d8:	bf04      	itt	eq
    58da:	78c0      	ldrbeq	r0, [r0, #3]
    58dc:	2802      	cmpeq	r0, #2
    58de:	d015      	beq.n	590c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8d4>
    58e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    58e2:	f00a fad5 	bl	fe90 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    58e6:	2800      	cmp	r0, #0
    58e8:	bf18      	it	ne
    58ea:	46aa      	movne	sl, r5
    58ec:	d005      	beq.n	58fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8c2>
    58ee:	e00d      	b.n	590c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8d4>
    58f0:	f44f 711a 	mov.w	r1, #616	; 0x268
    58f4:	2027      	movs	r0, #39	; 0x27
    58f6:	f7fe f98b 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    58fc:	7800      	ldrb	r0, [r0, #0]
    58fe:	ea38 0000 	bics.w	r0, r8, r0
    5902:	d003      	beq.n	590c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8d4>
    5904:	f7ff f872 	bl	49ec <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5908:	f080 0a01 	eor.w	sl, r0, #1
    590c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    590e:	7801      	ldrb	r1, [r0, #0]
    5910:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
    5914:	7001      	strb	r1, [r0, #0]
    5916:	7c79      	ldrb	r1, [r7, #17]
    5918:	2900      	cmp	r1, #0
    591a:	bf1c      	itt	ne
    591c:	7841      	ldrbne	r1, [r0, #1]
    591e:	2900      	cmpne	r1, #0
    5920:	d02f      	beq.n	5982 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94a>
    5922:	4828      	ldr	r0, [pc, #160]	; (59c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x98c>)
    5924:	f008 fa26 	bl	dd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5928:	f899 0000 	ldrb.w	r0, [r9]
    592c:	2800      	cmp	r0, #0
    592e:	bf0c      	ite	eq
    5930:	2101      	moveq	r1, #1
    5932:	2100      	movne	r1, #0
    5934:	4824      	ldr	r0, [pc, #144]	; (59c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x990>)
    5936:	7601      	strb	r1, [r0, #24]
    5938:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    593c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5940:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
    5944:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5946:	f007 fcab 	bl	d2a0 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    594a:	f896 0066 	ldrb.w	r0, [r6, #102]	; 0x66
    594e:	2801      	cmp	r0, #1
    5950:	bf08      	it	eq
    5952:	2200      	moveq	r2, #0
    5954:	d010      	beq.n	5978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x940>
    5956:	2802      	cmp	r0, #2
    5958:	bf08      	it	eq
    595a:	2201      	moveq	r2, #1
    595c:	d00c      	beq.n	5978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x940>
    595e:	2804      	cmp	r0, #4
    5960:	bf08      	it	eq
    5962:	2203      	moveq	r2, #3
    5964:	d008      	beq.n	5978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x940>
    5966:	2808      	cmp	r0, #8
    5968:	bf08      	it	eq
    596a:	2202      	moveq	r2, #2
    596c:	d004      	beq.n	5978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x940>
    596e:	f240 31b3 	movw	r1, #947	; 0x3b3
    5972:	2006      	movs	r0, #6
    5974:	f7fe f94c 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5978:	21fb      	movs	r1, #251	; 0xfb
    597a:	2000      	movs	r0, #0
    597c:	f007 fcc0 	bl	d300 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5980:	e003      	b.n	598a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x952>
    5982:	f008 f9f7 	bl	dd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5986:	f007 fc9b 	bl	d2c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    598a:	6870      	ldr	r0, [r6, #4]
    598c:	f641 514c 	movw	r1, #7500	; 0x1d4c
    5990:	4288      	cmp	r0, r1
    5992:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
    5996:	f04f 0201 	mov.w	r2, #1
    599a:	4611      	mov	r1, r2
    599c:	bf34      	ite	cc
    599e:	2001      	movcc	r0, #1
    59a0:	2000      	movcs	r0, #0
    59a2:	f008 fbf7 	bl	e194 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    59a6:	7125      	strb	r5, [r4, #4]
    59a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    59aa:	8801      	ldrh	r1, [r0, #0]
    59ac:	8261      	strh	r1, [r4, #18]
    59ae:	7880      	ldrb	r0, [r0, #2]
    59b0:	7520      	strb	r0, [r4, #20]
    59b2:	7025      	strb	r5, [r4, #0]
    59b4:	b003      	add	sp, #12
    59b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59ba:	0000      	.short	0x0000
    59bc:	20000108 	.word	0x20000108
    59c0:	20000a00 	.word	0x20000a00
    59c4:	200008d0 	.word	0x200008d0
    59c8:	200009d8 	.word	0x200009d8
    59cc:	00005505 	.word	0x00005505
    59d0:	00005149 	.word	0x00005149
    59d4:	000053fd 	.word	0x000053fd
    59d8:	00005531 	.word	0x00005531
    59dc:	00000000 	.word	0x00000000

000059e0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    59e0:	460a      	mov	r2, r1
    59e2:	4907      	ldr	r1, [pc, #28]	; (5a00 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    59e4:	b510      	push	{r4, lr}
    59e6:	7809      	ldrb	r1, [r1, #0]
    59e8:	b141      	cbz	r1, 59fc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    59ea:	4b06      	ldr	r3, [pc, #24]	; (5a04 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    59ec:	7899      	ldrb	r1, [r3, #2]
    59ee:	b129      	cbz	r1, 59fc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    59f0:	4402      	add	r2, r0
    59f2:	1cd8      	adds	r0, r3, #3
    59f4:	f007 fb7e 	bl	d0f4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    59f8:	2001      	movs	r0, #1
    59fa:	bd10      	pop	{r4, pc}
    59fc:	2000      	movs	r0, #0
    59fe:	bd10      	pop	{r4, pc}
    5a00:	2000039c 	.word	0x2000039c
    5a04:	20001851 	.word	0x20001851

00005a08 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5a08:	4800      	ldr	r0, [pc, #0]	; (5a0c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5a0a:	4770      	bx	lr
    5a0c:	20001a24 	.word	0x20001a24

00005a10 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5a10:	4904      	ldr	r1, [pc, #16]	; (5a24 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5a12:	788a      	ldrb	r2, [r1, #2]
    5a14:	4282      	cmp	r2, r0
    5a16:	bf86      	itte	hi
    5a18:	4408      	addhi	r0, r1
    5a1a:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    5a1e:	2000      	movls	r0, #0
    5a20:	4770      	bx	lr
    5a22:	0000      	.short	0x0000
    5a24:	20001851 	.word	0x20001851

00005a28 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5a28:	4904      	ldr	r1, [pc, #16]	; (5a3c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5a2a:	788a      	ldrb	r2, [r1, #2]
    5a2c:	4282      	cmp	r2, r0
    5a2e:	bf86      	itte	hi
    5a30:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5a34:	3083      	addhi	r0, #131	; 0x83
    5a36:	2000      	movls	r0, #0
    5a38:	4770      	bx	lr
    5a3a:	0000      	.short	0x0000
    5a3c:	20001851 	.word	0x20001851

00005a40 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5a40:	4a05      	ldr	r2, [pc, #20]	; (5a58 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5a42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5a46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5a4a:	6802      	ldr	r2, [r0, #0]
    5a4c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5a50:	8880      	ldrh	r0, [r0, #4]
    5a52:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5a56:	4770      	bx	lr
    5a58:	20001851 	.word	0x20001851

00005a5c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a60:	460e      	mov	r6, r1
    5a62:	4607      	mov	r7, r0
    5a64:	4615      	mov	r5, r2
    5a66:	2106      	movs	r1, #6
    5a68:	4630      	mov	r0, r6
    5a6a:	f000 fecf 	bl	680c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5a6e:	4c1c      	ldr	r4, [pc, #112]	; (5ae0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x84>)
    5a70:	b198      	cbz	r0, 5a9a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x3e>
    5a72:	78a1      	ldrb	r1, [r4, #2]
    5a74:	b171      	cbz	r1, 5a94 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    5a76:	f504 709d 	add.w	r0, r4, #314	; 0x13a
    5a7a:	f011 0f01 	tst.w	r1, #1
    5a7e:	bf18      	it	ne
    5a80:	f800 5f01 	strbne.w	r5, [r0, #1]!
    5a84:	78a1      	ldrb	r1, [r4, #2]
    5a86:	0849      	lsrs	r1, r1, #1
    5a88:	d004      	beq.n	5a94 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    5a8a:	7045      	strb	r5, [r0, #1]
    5a8c:	f800 5f02 	strb.w	r5, [r0, #2]!
    5a90:	1e49      	subs	r1, r1, #1
    5a92:	d1fa      	bne.n	5a8a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2e>
    5a94:	2001      	movs	r0, #1
    5a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a9a:	4638      	mov	r0, r7
    5a9c:	4631      	mov	r1, r6
    5a9e:	f000 fad5 	bl	604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5aa2:	2810      	cmp	r0, #16
    5aa4:	d019      	beq.n	5ada <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5aa6:	78a3      	ldrb	r3, [r4, #2]
    5aa8:	2100      	movs	r1, #0
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d915      	bls.n	5ada <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5aae:	1862      	adds	r2, r4, r1
    5ab0:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
    5ab4:	4282      	cmp	r2, r0
    5ab6:	d10b      	bne.n	5ad0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x74>
    5ab8:	2910      	cmp	r1, #16
    5aba:	bf18      	it	ne
    5abc:	2908      	cmpne	r1, #8
    5abe:	d00c      	beq.n	5ada <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5ac0:	eb04 0001 	add.w	r0, r4, r1
    5ac4:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5ac8:	f04f 0001 	mov.w	r0, #1
    5acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ad0:	f101 0101 	add.w	r1, r1, #1
    5ad4:	b2c9      	uxtb	r1, r1
    5ad6:	428b      	cmp	r3, r1
    5ad8:	d8e9      	bhi.n	5aae <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x52>
    5ada:	2000      	movs	r0, #0
    5adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ae0:	20001851 	.word	0x20001851

00005ae4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5ae4:	4904      	ldr	r1, [pc, #16]	; (5af8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5ae6:	788a      	ldrb	r2, [r1, #2]
    5ae8:	4282      	cmp	r2, r0
    5aea:	bf86      	itte	hi
    5aec:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5af0:	1cc0      	addhi	r0, r0, #3
    5af2:	2000      	movls	r0, #0
    5af4:	4770      	bx	lr
    5af6:	0000      	.short	0x0000
    5af8:	20001851 	.word	0x20001851

00005afc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5afc:	b510      	push	{r4, lr}
    5afe:	f240 12d3 	movw	r2, #467	; 0x1d3
    5b02:	2100      	movs	r1, #0
    5b04:	4807      	ldr	r0, [pc, #28]	; (5b24 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    5b06:	f009 fac1 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b0a:	2208      	movs	r2, #8
    5b0c:	21ff      	movs	r1, #255	; 0xff
    5b0e:	4806      	ldr	r0, [pc, #24]	; (5b28 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5b10:	f009 fabc 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b14:	4805      	ldr	r0, [pc, #20]	; (5b2c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5b16:	2100      	movs	r1, #0
    5b18:	7001      	strb	r1, [r0, #0]
    5b1a:	7041      	strb	r1, [r0, #1]
    5b1c:	f44f 7161 	mov.w	r1, #900	; 0x384
    5b20:	8041      	strh	r1, [r0, #2]
    5b22:	bd10      	pop	{r4, pc}
    5b24:	20001851 	.word	0x20001851
    5b28:	200003a0 	.word	0x200003a0
    5b2c:	2000039c 	.word	0x2000039c

00005b30 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5b30:	4901      	ldr	r1, [pc, #4]	; (5b38 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5b32:	7008      	strb	r0, [r1, #0]
    5b34:	4770      	bx	lr
    5b36:	0000      	.short	0x0000
    5b38:	2000039c 	.word	0x2000039c

00005b3c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5b3c:	4801      	ldr	r0, [pc, #4]	; (5b44 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5b3e:	7800      	ldrb	r0, [r0, #0]
    5b40:	4770      	bx	lr
    5b42:	0000      	.short	0x0000
    5b44:	2000039c 	.word	0x2000039c

00005b48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5b48:	4b0b      	ldr	r3, [pc, #44]	; (5b78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5b4a:	f893 c002 	ldrb.w	ip, [r3, #2]
    5b4e:	4584      	cmp	ip, r0
    5b50:	bf9c      	itt	ls
    5b52:	2000      	movls	r0, #0
    5b54:	4770      	bxls	lr
    5b56:	4418      	add	r0, r3
    5b58:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5b5c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5b60:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5b64:	700b      	strb	r3, [r1, #0]
    5b66:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5b6a:	6011      	str	r1, [r2, #0]
    5b6c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5b70:	8090      	strh	r0, [r2, #4]
    5b72:	2001      	movs	r0, #1
    5b74:	4770      	bx	lr
    5b76:	0000      	.short	0x0000
    5b78:	20001851 	.word	0x20001851

00005b7c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5b7c:	4907      	ldr	r1, [pc, #28]	; (5b9c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5b7e:	788a      	ldrb	r2, [r1, #2]
    5b80:	4282      	cmp	r2, r0
    5b82:	bf9c      	itt	ls
    5b84:	2000      	movls	r0, #0
    5b86:	4770      	bxls	lr
    5b88:	4408      	add	r0, r1
    5b8a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5b8e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5b92:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5b96:	f000 0001 	and.w	r0, r0, #1
    5b9a:	4770      	bx	lr
    5b9c:	20001851 	.word	0x20001851

00005ba0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    5ba0:	b510      	push	{r4, lr}
    5ba2:	f000 fa53 	bl	604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5ba6:	2810      	cmp	r0, #16
    5ba8:	d014      	beq.n	5bd4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5baa:	4a0b      	ldr	r2, [pc, #44]	; (5bd8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    5bac:	4601      	mov	r1, r0
    5bae:	2000      	movs	r0, #0
    5bb0:	f892 c002 	ldrb.w	ip, [r2, #2]
    5bb4:	f1bc 0f00 	cmp.w	ip, #0
    5bb8:	d90c      	bls.n	5bd4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5bba:	1813      	adds	r3, r2, r0
    5bbc:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    5bc0:	428b      	cmp	r3, r1
    5bc2:	d103      	bne.n	5bcc <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    5bc4:	2810      	cmp	r0, #16
    5bc6:	bf18      	it	ne
    5bc8:	bd10      	popne	{r4, pc}
    5bca:	e003      	b.n	5bd4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5bcc:	1c40      	adds	r0, r0, #1
    5bce:	b2c0      	uxtb	r0, r0
    5bd0:	4584      	cmp	ip, r0
    5bd2:	d8f2      	bhi.n	5bba <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    5bd4:	2008      	movs	r0, #8
    5bd6:	bd10      	pop	{r4, pc}
    5bd8:	20001851 	.word	0x20001851

00005bdc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5be0:	4698      	mov	r8, r3
    5be2:	4691      	mov	r9, r2
    5be4:	460f      	mov	r7, r1
    5be6:	4606      	mov	r6, r0
    5be8:	f000 fa30 	bl	604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bec:	4c2d      	ldr	r4, [pc, #180]	; (5ca4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc8>)
    5bee:	4605      	mov	r5, r0
    5bf0:	2810      	cmp	r0, #16
    5bf2:	d017      	beq.n	5c24 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x48>
    5bf4:	78a1      	ldrb	r1, [r4, #2]
    5bf6:	2000      	movs	r0, #0
    5bf8:	2900      	cmp	r1, #0
    5bfa:	d90e      	bls.n	5c1a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5bfc:	1822      	adds	r2, r4, r0
    5bfe:	f892 3103 	ldrb.w	r3, [r2, #259]	; 0x103
    5c02:	42ab      	cmp	r3, r5
    5c04:	d105      	bne.n	5c12 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x36>
    5c06:	2810      	cmp	r0, #16
    5c08:	bf1c      	itt	ne
    5c0a:	2012      	movne	r0, #18
    5c0c:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c10:	e003      	b.n	5c1a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5c12:	1c40      	adds	r0, r0, #1
    5c14:	b2c0      	uxtb	r0, r0
    5c16:	4281      	cmp	r1, r0
    5c18:	d8f0      	bhi.n	5bfc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5c1a:	2908      	cmp	r1, #8
    5c1c:	d23f      	bcs.n	5c9e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5c1e:	2d10      	cmp	r5, #16
    5c20:	d003      	beq.n	5c2a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x4e>
    5c22:	e018      	b.n	5c56 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x7a>
    5c24:	78a1      	ldrb	r1, [r4, #2]
    5c26:	2908      	cmp	r1, #8
    5c28:	d239      	bcs.n	5c9e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5c2a:	7825      	ldrb	r5, [r4, #0]
    5c2c:	2100      	movs	r1, #0
    5c2e:	1c68      	adds	r0, r5, #1
    5c30:	7020      	strb	r0, [r4, #0]
    5c32:	2d10      	cmp	r5, #16
    5c34:	d303      	bcc.n	5c3e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x62>
    5c36:	2146      	movs	r1, #70	; 0x46
    5c38:	2028      	movs	r0, #40	; 0x28
    5c3a:	f7fd ffe9 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c3e:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
    5c42:	683a      	ldr	r2, [r7, #0]
    5c44:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
    5c48:	88ba      	ldrh	r2, [r7, #4]
    5c4a:	f8a0 2158 	strh.w	r2, [r0, #344]	; 0x158
    5c4e:	f880 6153 	strb.w	r6, [r0, #339]	; 0x153
    5c52:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5c56:	78a6      	ldrb	r6, [r4, #2]
    5c58:	2210      	movs	r2, #16
    5c5a:	1c70      	adds	r0, r6, #1
    5c5c:	70a0      	strb	r0, [r4, #2]
    5c5e:	eb04 1706 	add.w	r7, r4, r6, lsl #4
    5c62:	1cf8      	adds	r0, r7, #3
    5c64:	4649      	mov	r1, r9
    5c66:	f000 fd07 	bl	6678 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5c6a:	f107 0083 	add.w	r0, r7, #131	; 0x83
    5c6e:	2210      	movs	r2, #16
    5c70:	4641      	mov	r1, r8
    5c72:	f000 fd01 	bl	6678 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5c76:	2110      	movs	r1, #16
    5c78:	4640      	mov	r0, r8
    5c7a:	f000 fdc7 	bl	680c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5c7e:	4434      	add	r4, r6
    5c80:	2110      	movs	r1, #16
    5c82:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5c86:	4648      	mov	r0, r9
    5c88:	f000 fdc0 	bl	680c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5c8c:	f884 014b 	strb.w	r0, [r4, #331]	; 0x14b
    5c90:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
    5c94:	2000      	movs	r0, #0
    5c96:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
    5c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c9e:	2007      	movs	r0, #7
    5ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ca4:	20001851 	.word	0x20001851

00005ca8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5ca8:	b470      	push	{r4, r5, r6}
    5caa:	484d      	ldr	r0, [pc, #308]	; (5de0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x138>)
    5cac:	7881      	ldrb	r1, [r0, #2]
    5cae:	1e49      	subs	r1, r1, #1
    5cb0:	b24b      	sxtb	r3, r1
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	bfbc      	itt	lt
    5cb6:	bc70      	poplt	{r4, r5, r6}
    5cb8:	4770      	bxlt	lr
    5cba:	bf00      	nop
    5cbc:	7881      	ldrb	r1, [r0, #2]
    5cbe:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    5cc2:	1e49      	subs	r1, r1, #1
    5cc4:	b2ca      	uxtb	r2, r1
    5cc6:	7082      	strb	r2, [r0, #2]
    5cc8:	fa50 f183 	uxtab	r1, r0, r3
    5ccc:	f891 1103 	ldrb.w	r1, [r1, #259]	; 0x103
    5cd0:	4594      	cmp	ip, r2
    5cd2:	d03e      	beq.n	5d52 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xaa>
    5cd4:	eb00 1502 	add.w	r5, r0, r2, lsl #4
    5cd8:	eb00 140c 	add.w	r4, r0, ip, lsl #4
    5cdc:	f8d5 6003 	ldr.w	r6, [r5, #3]
    5ce0:	f8c4 6003 	str.w	r6, [r4, #3]
    5ce4:	f8d5 6007 	ldr.w	r6, [r5, #7]
    5ce8:	f8c4 6007 	str.w	r6, [r4, #7]
    5cec:	f8d5 600b 	ldr.w	r6, [r5, #11]
    5cf0:	f8c4 600b 	str.w	r6, [r4, #11]
    5cf4:	f8d5 600f 	ldr.w	r6, [r5, #15]
    5cf8:	f8c4 600f 	str.w	r6, [r4, #15]
    5cfc:	f8d5 6083 	ldr.w	r6, [r5, #131]	; 0x83
    5d00:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    5d04:	f8d5 6087 	ldr.w	r6, [r5, #135]	; 0x87
    5d08:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    5d0c:	f8d5 608b 	ldr.w	r6, [r5, #139]	; 0x8b
    5d10:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    5d14:	f8d5 508f 	ldr.w	r5, [r5, #143]	; 0x8f
    5d18:	f8c4 508f 	str.w	r5, [r4, #143]	; 0x8f
    5d1c:	1885      	adds	r5, r0, r2
    5d1e:	eb00 040c 	add.w	r4, r0, ip
    5d22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5d26:	f895 6103 	ldrb.w	r6, [r5, #259]	; 0x103
    5d2a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    5d2e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    5d32:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
    5d36:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    5d3a:	f8d2 610b 	ldr.w	r6, [r2, #267]	; 0x10b
    5d3e:	f8cc 610b 	str.w	r6, [ip, #267]	; 0x10b
    5d42:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5d46:	f8ac 210f 	strh.w	r2, [ip, #271]	; 0x10f
    5d4a:	f895 213b 	ldrb.w	r2, [r5, #315]	; 0x13b
    5d4e:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
    5d52:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    5d56:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    5d5a:	f012 0f01 	tst.w	r2, #1
    5d5e:	d133      	bne.n	5dc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5d60:	f890 c002 	ldrb.w	ip, [r0, #2]
    5d64:	2200      	movs	r2, #0
    5d66:	f1bc 0f00 	cmp.w	ip, #0
    5d6a:	d90b      	bls.n	5d84 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    5d6c:	1884      	adds	r4, r0, r2
    5d6e:	f894 5103 	ldrb.w	r5, [r4, #259]	; 0x103
    5d72:	428d      	cmp	r5, r1
    5d74:	d102      	bne.n	5d7c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xd4>
    5d76:	2a10      	cmp	r2, #16
    5d78:	d126      	bne.n	5dc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5d7a:	e003      	b.n	5d84 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    5d7c:	1c52      	adds	r2, r2, #1
    5d7e:	b2d2      	uxtb	r2, r2
    5d80:	4594      	cmp	ip, r2
    5d82:	d8f3      	bhi.n	5d6c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc4>
    5d84:	7802      	ldrb	r2, [r0, #0]
    5d86:	1e52      	subs	r2, r2, #1
    5d88:	b2d2      	uxtb	r2, r2
    5d8a:	7002      	strb	r2, [r0, #0]
    5d8c:	428a      	cmp	r2, r1
    5d8e:	d01b      	beq.n	5dc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5d90:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    5d94:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    5d98:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    5d9c:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    5da0:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    5da4:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    5da8:	7884      	ldrb	r4, [r0, #2]
    5daa:	f890 c000 	ldrb.w	ip, [r0]
    5dae:	2200      	movs	r2, #0
    5db0:	2c00      	cmp	r4, #0
    5db2:	d909      	bls.n	5dc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5db4:	1885      	adds	r5, r0, r2
    5db6:	f895 5103 	ldrb.w	r5, [r5, #259]	; 0x103
    5dba:	4565      	cmp	r5, ip
    5dbc:	d10b      	bne.n	5dd6 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x12e>
    5dbe:	2a10      	cmp	r2, #16
    5dc0:	bf1c      	itt	ne
    5dc2:	4402      	addne	r2, r0
    5dc4:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    5dc8:	1e59      	subs	r1, r3, #1
    5dca:	b24b      	sxtb	r3, r1
    5dcc:	2b00      	cmp	r3, #0
    5dce:	f6bf af75 	bge.w	5cbc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x14>
    5dd2:	bc70      	pop	{r4, r5, r6}
    5dd4:	4770      	bx	lr
    5dd6:	1c52      	adds	r2, r2, #1
    5dd8:	b2d2      	uxtb	r2, r2
    5dda:	4294      	cmp	r4, r2
    5ddc:	d8ea      	bhi.n	5db4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x10c>
    5dde:	e7f3      	b.n	5dc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    5de0:	20001851 	.word	0x20001851

00005de4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    5de4:	b510      	push	{r4, lr}
    5de6:	f000 f931 	bl	604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5dea:	2810      	cmp	r0, #16
    5dec:	d016      	beq.n	5e1c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    5dee:	4a0c      	ldr	r2, [pc, #48]	; (5e20 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x3c>)
    5df0:	4601      	mov	r1, r0
    5df2:	2000      	movs	r0, #0
    5df4:	7893      	ldrb	r3, [r2, #2]
    5df6:	2b00      	cmp	r3, #0
    5df8:	d910      	bls.n	5e1c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    5dfa:	bf00      	nop
    5dfc:	eb02 0c00 	add.w	ip, r2, r0
    5e00:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5e04:	458c      	cmp	ip, r1
    5e06:	d105      	bne.n	5e14 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x30>
    5e08:	2810      	cmp	r0, #16
    5e0a:	d007      	beq.n	5e1c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    5e0c:	f000 f942 	bl	6094 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xec>
    5e10:	2001      	movs	r0, #1
    5e12:	bd10      	pop	{r4, pc}
    5e14:	1c40      	adds	r0, r0, #1
    5e16:	b2c0      	uxtb	r0, r0
    5e18:	4283      	cmp	r3, r0
    5e1a:	d8ef      	bhi.n	5dfc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x18>
    5e1c:	2000      	movs	r0, #0
    5e1e:	bd10      	pop	{r4, pc}
    5e20:	20001851 	.word	0x20001851

00005e24 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5e24:	4801      	ldr	r0, [pc, #4]	; (5e2c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5e26:	8840      	ldrh	r0, [r0, #2]
    5e28:	4770      	bx	lr
    5e2a:	0000      	.short	0x0000
    5e2c:	2000039c 	.word	0x2000039c

00005e30 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5e30:	b138      	cbz	r0, 5e42 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5e32:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5e36:	4288      	cmp	r0, r1
    5e38:	d803      	bhi.n	5e42 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5e3a:	4903      	ldr	r1, [pc, #12]	; (5e48 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5e3c:	8048      	strh	r0, [r1, #2]
    5e3e:	2001      	movs	r0, #1
    5e40:	4770      	bx	lr
    5e42:	2000      	movs	r0, #0
    5e44:	4770      	bx	lr
    5e46:	0000      	.short	0x0000
    5e48:	2000039c 	.word	0x2000039c

00005e4c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5e4c:	4906      	ldr	r1, [pc, #24]	; (5e68 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    5e4e:	788a      	ldrb	r2, [r1, #2]
    5e50:	4282      	cmp	r2, r0
    5e52:	d906      	bls.n	5e62 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    5e54:	4408      	add	r0, r1
    5e56:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5e5a:	2800      	cmp	r0, #0
    5e5c:	bf04      	itt	eq
    5e5e:	2001      	moveq	r0, #1
    5e60:	4770      	bxeq	lr
    5e62:	2000      	movs	r0, #0
    5e64:	4770      	bx	lr
    5e66:	0000      	.short	0x0000
    5e68:	20001851 	.word	0x20001851

00005e6c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5e6c:	b570      	push	{r4, r5, r6, lr}
    5e6e:	460d      	mov	r5, r1
    5e70:	4604      	mov	r4, r0
    5e72:	f000 f8eb 	bl	604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5e76:	4a1a      	ldr	r2, [pc, #104]	; (5ee0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    5e78:	2810      	cmp	r0, #16
    5e7a:	d014      	beq.n	5ea6 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    5e7c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    5e80:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    5e84:	f010 0f01 	tst.w	r0, #1
    5e88:	bf1c      	itt	ne
    5e8a:	2001      	movne	r0, #1
    5e8c:	bd70      	popne	{r4, r5, r6, pc}
    5e8e:	7850      	ldrb	r0, [r2, #1]
    5e90:	2808      	cmp	r0, #8
    5e92:	bf3c      	itt	cc
    5e94:	2001      	movcc	r0, #1
    5e96:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    5e9a:	d21e      	bcs.n	5eda <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    5e9c:	7850      	ldrb	r0, [r2, #1]
    5e9e:	1c40      	adds	r0, r0, #1
    5ea0:	7050      	strb	r0, [r2, #1]
    5ea2:	2001      	movs	r0, #1
    5ea4:	bd70      	pop	{r4, r5, r6, pc}
    5ea6:	7850      	ldrb	r0, [r2, #1]
    5ea8:	2808      	cmp	r0, #8
    5eaa:	d216      	bcs.n	5eda <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    5eac:	7813      	ldrb	r3, [r2, #0]
    5eae:	2001      	movs	r0, #1
    5eb0:	1c59      	adds	r1, r3, #1
    5eb2:	7011      	strb	r1, [r2, #0]
    5eb4:	2b10      	cmp	r3, #16
    5eb6:	d303      	bcc.n	5ec0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    5eb8:	2146      	movs	r1, #70	; 0x46
    5eba:	2028      	movs	r0, #40	; 0x28
    5ebc:	f7fd fea8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5ec4:	6829      	ldr	r1, [r5, #0]
    5ec6:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    5eca:	88a9      	ldrh	r1, [r5, #4]
    5ecc:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5ed0:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5ed4:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    5ed8:	e7e0      	b.n	5e9c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    5eda:	2000      	movs	r0, #0
    5edc:	bd70      	pop	{r4, r5, r6, pc}
    5ede:	0000      	.short	0x0000
    5ee0:	20001851 	.word	0x20001851

00005ee4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    5ee4:	4901      	ldr	r1, [pc, #4]	; (5eec <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    5ee6:	7048      	strb	r0, [r1, #1]
    5ee8:	4770      	bx	lr
    5eea:	0000      	.short	0x0000
    5eec:	2000039c 	.word	0x2000039c

00005ef0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5ef0:	b470      	push	{r4, r5, r6}
    5ef2:	482b      	ldr	r0, [pc, #172]	; (5fa0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    5ef4:	2500      	movs	r5, #0
    5ef6:	7801      	ldrb	r1, [r0, #0]
    5ef8:	1e49      	subs	r1, r1, #1
    5efa:	b24b      	sxtb	r3, r1
    5efc:	2b00      	cmp	r3, #0
    5efe:	db46      	blt.n	5f8e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    5f00:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    5f04:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5f08:	f011 0f01 	tst.w	r1, #1
    5f0c:	d03b      	beq.n	5f86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5f0e:	7842      	ldrb	r2, [r0, #1]
    5f10:	b2d9      	uxtb	r1, r3
    5f12:	1e52      	subs	r2, r2, #1
    5f14:	7042      	strb	r2, [r0, #1]
    5f16:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    5f1a:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    5f1e:	f890 c002 	ldrb.w	ip, [r0, #2]
    5f22:	2200      	movs	r2, #0
    5f24:	f1bc 0f00 	cmp.w	ip, #0
    5f28:	d90b      	bls.n	5f42 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    5f2a:	1884      	adds	r4, r0, r2
    5f2c:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    5f30:	428e      	cmp	r6, r1
    5f32:	d102      	bne.n	5f3a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    5f34:	2a10      	cmp	r2, #16
    5f36:	d126      	bne.n	5f86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5f38:	e003      	b.n	5f42 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    5f3a:	1c52      	adds	r2, r2, #1
    5f3c:	b2d2      	uxtb	r2, r2
    5f3e:	4594      	cmp	ip, r2
    5f40:	d8f3      	bhi.n	5f2a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    5f42:	7802      	ldrb	r2, [r0, #0]
    5f44:	1e52      	subs	r2, r2, #1
    5f46:	b2d2      	uxtb	r2, r2
    5f48:	7002      	strb	r2, [r0, #0]
    5f4a:	428a      	cmp	r2, r1
    5f4c:	d01b      	beq.n	5f86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5f4e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    5f52:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    5f56:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    5f5a:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    5f5e:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    5f62:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    5f66:	7884      	ldrb	r4, [r0, #2]
    5f68:	f890 c000 	ldrb.w	ip, [r0]
    5f6c:	2200      	movs	r2, #0
    5f6e:	2c00      	cmp	r4, #0
    5f70:	d909      	bls.n	5f86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5f72:	1886      	adds	r6, r0, r2
    5f74:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    5f78:	4566      	cmp	r6, ip
    5f7a:	d10c      	bne.n	5f96 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    5f7c:	2a10      	cmp	r2, #16
    5f7e:	bf1c      	itt	ne
    5f80:	4402      	addne	r2, r0
    5f82:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    5f86:	1e59      	subs	r1, r3, #1
    5f88:	b24b      	sxtb	r3, r1
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	dab8      	bge.n	5f00 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    5f8e:	4805      	ldr	r0, [pc, #20]	; (5fa4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    5f90:	7045      	strb	r5, [r0, #1]
    5f92:	bc70      	pop	{r4, r5, r6}
    5f94:	4770      	bx	lr
    5f96:	1c52      	adds	r2, r2, #1
    5f98:	b2d2      	uxtb	r2, r2
    5f9a:	4294      	cmp	r4, r2
    5f9c:	d8e9      	bhi.n	5f72 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    5f9e:	e7f2      	b.n	5f86 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    5fa0:	20001851 	.word	0x20001851
    5fa4:	2000039c 	.word	0x2000039c

00005fa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fac:	4d25      	ldr	r5, [pc, #148]	; (6044 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5fae:	2600      	movs	r6, #0
    5fb0:	4634      	mov	r4, r6
    5fb2:	7828      	ldrb	r0, [r5, #0]
    5fb4:	2800      	cmp	r0, #0
    5fb6:	bf8c      	ite	hi
    5fb8:	4f23      	ldrhi	r7, [pc, #140]	; (6048 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5fba:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fbe:	bf00      	nop
    5fc0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5fc4:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    5fc8:	f011 0f01 	tst.w	r1, #1
    5fcc:	d032      	beq.n	6034 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5fce:	78aa      	ldrb	r2, [r5, #2]
    5fd0:	2100      	movs	r1, #0
    5fd2:	4623      	mov	r3, r4
    5fd4:	2a00      	cmp	r2, #0
    5fd6:	d909      	bls.n	5fec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    5fd8:	eb05 0c01 	add.w	ip, r5, r1
    5fdc:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    5fe0:	459c      	cmp	ip, r3
    5fe2:	d004      	beq.n	5fee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    5fe4:	1c49      	adds	r1, r1, #1
    5fe6:	b2c9      	uxtb	r1, r1
    5fe8:	428a      	cmp	r2, r1
    5fea:	d8f5      	bhi.n	5fd8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    5fec:	2110      	movs	r1, #16
    5fee:	428a      	cmp	r2, r1
    5ff0:	bf86      	itte	hi
    5ff2:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    5ff6:	1cd3      	addhi	r3, r2, #3
    5ff8:	2300      	movls	r3, #0
    5ffa:	2200      	movs	r2, #0
    5ffc:	2910      	cmp	r1, #16
    5ffe:	d00c      	beq.n	601a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    6000:	eb05 0c01 	add.w	ip, r5, r1
    6004:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    6008:	f1b8 0f01 	cmp.w	r8, #1
    600c:	d004      	beq.n	6018 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    600e:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    6012:	f1bc 0f00 	cmp.w	ip, #0
    6016:	d000      	beq.n	601a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    6018:	2201      	movs	r2, #1
    601a:	1e52      	subs	r2, r2, #1
    601c:	4213      	tst	r3, r2
    601e:	d109      	bne.n	6034 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6020:	55b9      	strb	r1, [r7, r6]
    6022:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    6026:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    602a:	4630      	mov	r0, r6
    602c:	1c73      	adds	r3, r6, #1
    602e:	b2de      	uxtb	r6, r3
    6030:	f008 fd76 	bl	eb20 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6034:	1c60      	adds	r0, r4, #1
    6036:	b2c4      	uxtb	r4, r0
    6038:	7828      	ldrb	r0, [r5, #0]
    603a:	42a0      	cmp	r0, r4
    603c:	d8c0      	bhi.n	5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    603e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6042:	0000      	.short	0x0000
    6044:	20001851 	.word	0x20001851
    6048:	200003a0 	.word	0x200003a0
    604c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6050:	4d0f      	ldr	r5, [pc, #60]	; (6090 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>)
    6052:	4606      	mov	r6, r0
    6054:	2400      	movs	r4, #0
    6056:	7828      	ldrb	r0, [r5, #0]
    6058:	460f      	mov	r7, r1
    605a:	2800      	cmp	r0, #0
    605c:	d912      	bls.n	6084 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xdc>
    605e:	bf00      	nop
    6060:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6064:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    6068:	42b1      	cmp	r1, r6
    606a:	d106      	bne.n	607a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd2>
    606c:	2206      	movs	r2, #6
    606e:	4639      	mov	r1, r7
    6070:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6074:	f008 fffa 	bl	f06c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6078:	b138      	cbz	r0, 608a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe2>
    607a:	1c60      	adds	r0, r4, #1
    607c:	b2c4      	uxtb	r4, r0
    607e:	7828      	ldrb	r0, [r5, #0]
    6080:	42a0      	cmp	r0, r4
    6082:	d8ed      	bhi.n	6060 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb8>
    6084:	2010      	movs	r0, #16
    6086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    608a:	4620      	mov	r0, r4
    608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6090:	20001851 	.word	0x20001851
    6094:	b470      	push	{r4, r5, r6}
    6096:	4949      	ldr	r1, [pc, #292]	; (61bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x214>)
    6098:	180d      	adds	r5, r1, r0
    609a:	788a      	ldrb	r2, [r1, #2]
    609c:	1e52      	subs	r2, r2, #1
    609e:	b2d3      	uxtb	r3, r2
    60a0:	708b      	strb	r3, [r1, #2]
    60a2:	f895 2103 	ldrb.w	r2, [r5, #259]	; 0x103
    60a6:	4298      	cmp	r0, r3
    60a8:	d03d      	beq.n	6126 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x17e>
    60aa:	eb01 1400 	add.w	r4, r1, r0, lsl #4
    60ae:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
    60b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    60b6:	f8dc 6003 	ldr.w	r6, [ip, #3]
    60ba:	f8c4 6003 	str.w	r6, [r4, #3]
    60be:	f8dc 6007 	ldr.w	r6, [ip, #7]
    60c2:	f8c4 6007 	str.w	r6, [r4, #7]
    60c6:	f8dc 600b 	ldr.w	r6, [ip, #11]
    60ca:	f8c4 600b 	str.w	r6, [r4, #11]
    60ce:	f8dc 600f 	ldr.w	r6, [ip, #15]
    60d2:	f8c4 600f 	str.w	r6, [r4, #15]
    60d6:	f8dc 6083 	ldr.w	r6, [ip, #131]	; 0x83
    60da:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    60de:	f8dc 6087 	ldr.w	r6, [ip, #135]	; 0x87
    60e2:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    60e6:	f8dc 608b 	ldr.w	r6, [ip, #139]	; 0x8b
    60ea:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    60ee:	f8dc c08f 	ldr.w	ip, [ip, #143]	; 0x8f
    60f2:	f8c4 c08f 	str.w	ip, [r4, #143]	; 0x8f
    60f6:	eb01 0c03 	add.w	ip, r1, r3
    60fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    60fe:	f89c 4103 	ldrb.w	r4, [ip, #259]	; 0x103
    6102:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    6106:	f885 4103 	strb.w	r4, [r5, #259]	; 0x103
    610a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    610e:	f8d3 410b 	ldr.w	r4, [r3, #267]	; 0x10b
    6112:	f8c0 410b 	str.w	r4, [r0, #267]	; 0x10b
    6116:	f8b3 310f 	ldrh.w	r3, [r3, #271]	; 0x10f
    611a:	f8a0 310f 	strh.w	r3, [r0, #271]	; 0x10f
    611e:	f89c 013b 	ldrb.w	r0, [ip, #315]	; 0x13b
    6122:	f885 013b 	strb.w	r0, [r5, #315]	; 0x13b
    6126:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    612a:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    612e:	f010 0f01 	tst.w	r0, #1
    6132:	bf1c      	itt	ne
    6134:	bc70      	popne	{r4, r5, r6}
    6136:	4770      	bxne	lr
    6138:	2000      	movs	r0, #0
    613a:	788c      	ldrb	r4, [r1, #2]
    613c:	2c00      	cmp	r4, #0
    613e:	d90d      	bls.n	615c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    6140:	180b      	adds	r3, r1, r0
    6142:	f893 c103 	ldrb.w	ip, [r3, #259]	; 0x103
    6146:	4594      	cmp	ip, r2
    6148:	d104      	bne.n	6154 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ac>
    614a:	2810      	cmp	r0, #16
    614c:	bf1c      	itt	ne
    614e:	bc70      	popne	{r4, r5, r6}
    6150:	4770      	bxne	lr
    6152:	e003      	b.n	615c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    6154:	1c40      	adds	r0, r0, #1
    6156:	b2c0      	uxtb	r0, r0
    6158:	4284      	cmp	r4, r0
    615a:	d8f1      	bhi.n	6140 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    615c:	7808      	ldrb	r0, [r1, #0]
    615e:	1e40      	subs	r0, r0, #1
    6160:	b2c0      	uxtb	r0, r0
    6162:	7008      	strb	r0, [r1, #0]
    6164:	4290      	cmp	r0, r2
    6166:	bf04      	itt	eq
    6168:	bc70      	popeq	{r4, r5, r6}
    616a:	4770      	bxeq	lr
    616c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    6170:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6174:	f8d0 c153 	ldr.w	ip, [r0, #339]	; 0x153
    6178:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    617c:	f8d0 0157 	ldr.w	r0, [r0, #343]	; 0x157
    6180:	f8c3 0157 	str.w	r0, [r3, #343]	; 0x157
    6184:	788c      	ldrb	r4, [r1, #2]
    6186:	780b      	ldrb	r3, [r1, #0]
    6188:	2000      	movs	r0, #0
    618a:	2c00      	cmp	r4, #0
    618c:	bf9c      	itt	ls
    618e:	bc70      	popls	{r4, r5, r6}
    6190:	4770      	bxls	lr
    6192:	bf00      	nop
    6194:	eb01 0c00 	add.w	ip, r1, r0
    6198:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    619c:	459c      	cmp	ip, r3
    619e:	d106      	bne.n	61ae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x206>
    61a0:	2810      	cmp	r0, #16
    61a2:	bf1c      	itt	ne
    61a4:	4408      	addne	r0, r1
    61a6:	f880 2103 	strbne.w	r2, [r0, #259]	; 0x103
    61aa:	bc70      	pop	{r4, r5, r6}
    61ac:	4770      	bx	lr
    61ae:	1c40      	adds	r0, r0, #1
    61b0:	b2c0      	uxtb	r0, r0
    61b2:	4284      	cmp	r4, r0
    61b4:	d8ee      	bhi.n	6194 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ec>
    61b6:	bc70      	pop	{r4, r5, r6}
    61b8:	4770      	bx	lr
    61ba:	0000      	.short	0x0000
    61bc:	20001851 	.word	0x20001851
    61c0:	4925      	ldr	r1, [pc, #148]	; (6258 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2b0>)
    61c2:	b410      	push	{r4}
    61c4:	784a      	ldrb	r2, [r1, #1]
    61c6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    61ca:	1e52      	subs	r2, r2, #1
    61cc:	704a      	strb	r2, [r1, #1]
    61ce:	2200      	movs	r2, #0
    61d0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    61d4:	f891 c002 	ldrb.w	ip, [r1, #2]
    61d8:	f1bc 0f00 	cmp.w	ip, #0
    61dc:	d90d      	bls.n	61fa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    61de:	188b      	adds	r3, r1, r2
    61e0:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    61e4:	4284      	cmp	r4, r0
    61e6:	d104      	bne.n	61f2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24a>
    61e8:	2a10      	cmp	r2, #16
    61ea:	bf1c      	itt	ne
    61ec:	bc10      	popne	{r4}
    61ee:	4770      	bxne	lr
    61f0:	e003      	b.n	61fa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    61f2:	1c52      	adds	r2, r2, #1
    61f4:	b2d2      	uxtb	r2, r2
    61f6:	4594      	cmp	ip, r2
    61f8:	d8f1      	bhi.n	61de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x236>
    61fa:	780a      	ldrb	r2, [r1, #0]
    61fc:	1e52      	subs	r2, r2, #1
    61fe:	b2d2      	uxtb	r2, r2
    6200:	700a      	strb	r2, [r1, #0]
    6202:	4282      	cmp	r2, r0
    6204:	bf04      	itt	eq
    6206:	bc10      	popeq	{r4}
    6208:	4770      	bxeq	lr
    620a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    620e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    6212:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    6216:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    621a:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    621e:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    6222:	788c      	ldrb	r4, [r1, #2]
    6224:	f891 c000 	ldrb.w	ip, [r1]
    6228:	2200      	movs	r2, #0
    622a:	2c00      	cmp	r4, #0
    622c:	bf9c      	itt	ls
    622e:	bc10      	popls	{r4}
    6230:	4770      	bxls	lr
    6232:	188b      	adds	r3, r1, r2
    6234:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    6238:	4563      	cmp	r3, ip
    623a:	d106      	bne.n	624a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2a2>
    623c:	2a10      	cmp	r2, #16
    623e:	bf1c      	itt	ne
    6240:	4411      	addne	r1, r2
    6242:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    6246:	bc10      	pop	{r4}
    6248:	4770      	bx	lr
    624a:	1c52      	adds	r2, r2, #1
    624c:	b2d2      	uxtb	r2, r2
    624e:	4294      	cmp	r4, r2
    6250:	d8ef      	bhi.n	6232 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x28a>
    6252:	bc10      	pop	{r4}
    6254:	4770      	bx	lr
    6256:	0000      	.short	0x0000
    6258:	20001851 	.word	0x20001851

0000625c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    625c:	b570      	push	{r4, r5, r6, lr}
    625e:	b08c      	sub	sp, #48	; 0x30
    6260:	f100 0410 	add.w	r4, r0, #16
    6264:	461d      	mov	r5, r3
    6266:	4616      	mov	r6, r2
    6268:	f10d 3cff 	add.w	ip, sp, #4294967295
    626c:	f05f 0008 	movs.w	r0, #8
    6270:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    6274:	f88c 2001 	strb.w	r2, [ip, #1]
    6278:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    627c:	f80c 2f02 	strb.w	r2, [ip, #2]!
    6280:	1e40      	subs	r0, r0, #1
    6282:	d1f5      	bne.n	6270 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    6284:	f101 0c10 	add.w	ip, r1, #16
    6288:	466c      	mov	r4, sp
    628a:	f10d 010f 	add.w	r1, sp, #15
    628e:	2008      	movs	r0, #8
    6290:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    6294:	704a      	strb	r2, [r1, #1]
    6296:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    629a:	f801 2f02 	strb.w	r2, [r1, #2]!
    629e:	1e40      	subs	r0, r0, #1
    62a0:	d1f6      	bne.n	6290 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    62a2:	4620      	mov	r0, r4
    62a4:	f00a f807 	bl	102b6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    62a8:	b17e      	cbz	r6, 62ca <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    62aa:	1e6a      	subs	r2, r5, #1
    62ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
    62b0:	f05f 0108 	movs.w	r1, #8
    62b4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    62b8:	7053      	strb	r3, [r2, #1]
    62ba:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    62be:	f802 3f02 	strb.w	r3, [r2, #2]!
    62c2:	1e49      	subs	r1, r1, #1
    62c4:	d1f6      	bne.n	62b4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    62c6:	b00c      	add	sp, #48	; 0x30
    62c8:	bd70      	pop	{r4, r5, r6, pc}
    62ca:	9808      	ldr	r0, [sp, #32]
    62cc:	6028      	str	r0, [r5, #0]
    62ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    62d0:	6068      	str	r0, [r5, #4]
    62d2:	980a      	ldr	r0, [sp, #40]	; 0x28
    62d4:	60a8      	str	r0, [r5, #8]
    62d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    62d8:	60e8      	str	r0, [r5, #12]
    62da:	b00c      	add	sp, #48	; 0x30
    62dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000062e0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    62e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    62e4:	7e44      	ldrb	r4, [r0, #25]
    62e6:	b10c      	cbz	r4, 62ec <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    62e8:	2c25      	cmp	r4, #37	; 0x25
    62ea:	d903      	bls.n	62f4 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x14>
    62ec:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    62f0:	2012      	movs	r0, #18
    62f2:	4770      	bx	lr
    62f4:	2a00      	cmp	r2, #0
    62f6:	bf02      	ittt	eq
    62f8:	2000      	moveq	r0, #0
    62fa:	e8bd 03f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9}
    62fe:	4770      	bxeq	lr
    6300:	f891 c011 	ldrb.w	ip, [r1, #17]
    6304:	261f      	movs	r6, #31
    6306:	2301      	movs	r3, #1
    6308:	4d6c      	ldr	r5, [pc, #432]	; (64bc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    630a:	f04f 0800 	mov.w	r8, #0
    630e:	f1bc 0f00 	cmp.w	ip, #0
    6312:	d073      	beq.n	63fc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    6314:	f1bc 0f01 	cmp.w	ip, #1
    6318:	bf1e      	ittt	ne
    631a:	201f      	movne	r0, #31
    631c:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    6320:	4770      	bxne	lr
    6322:	f8b0 c000 	ldrh.w	ip, [r0]
    6326:	7d0a      	ldrb	r2, [r1, #20]
    6328:	7c8f      	ldrb	r7, [r1, #18]
    632a:	f891 9013 	ldrb.w	r9, [r1, #19]
    632e:	407a      	eors	r2, r7
    6330:	7d4f      	ldrb	r7, [r1, #21]
    6332:	ea87 0709 	eor.w	r7, r7, r9
    6336:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    633a:	ea82 0c0c 	eor.w	ip, r2, ip
    633e:	2700      	movs	r7, #0
    6340:	f00c 09ff 	and.w	r9, ip, #255	; 0xff
    6344:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    6348:	fa99 f9a9 	rbit	r9, r9
    634c:	fa9c fcac 	rbit	ip, ip
    6350:	ea4f 6919 	mov.w	r9, r9, lsr #24
    6354:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    6358:	ea49 2c0c 	orr.w	ip, r9, ip, lsl #8
    635c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
    6360:	1c7f      	adds	r7, r7, #1
    6362:	4494      	add	ip, r2
    6364:	b2ff      	uxtb	r7, r7
    6366:	fa1f fc8c 	uxth.w	ip, ip
    636a:	2f03      	cmp	r7, #3
    636c:	d3e8      	bcc.n	6340 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x60>
    636e:	ea8c 0c02 	eor.w	ip, ip, r2
    6372:	4f52      	ldr	r7, [pc, #328]	; (64bc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    6374:	2200      	movs	r2, #0
    6376:	fbec 7205 	umlal	r7, r2, ip, r5
    637a:	0912      	lsrs	r2, r2, #4
    637c:	f06f 0524 	mvn.w	r5, #36	; 0x24
    6380:	fb02 c205 	mla	r2, r2, r5, ip
    6384:	b2d2      	uxtb	r2, r2
    6386:	eb01 07d2 	add.w	r7, r1, r2, lsr #3
    638a:	7682      	strb	r2, [r0, #26]
    638c:	f002 0507 	and.w	r5, r2, #7
    6390:	7b3f      	ldrb	r7, [r7, #12]
    6392:	fa03 f505 	lsl.w	r5, r3, r5
    6396:	422f      	tst	r7, r5
    6398:	bf18      	it	ne
    639a:	76c2      	strbne	r2, [r0, #27]
    639c:	d17e      	bne.n	649c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1bc>
    639e:	fb04 f20c 	mul.w	r2, r4, ip
    63a2:	0c12      	lsrs	r2, r2, #16
    63a4:	1c52      	adds	r2, r2, #1
    63a6:	b2d2      	uxtb	r2, r2
    63a8:	f05f 0400 	movs.w	r4, #0
    63ac:	eb00 0c04 	add.w	ip, r0, r4
    63b0:	f89c c014 	ldrb.w	ip, [ip, #20]
    63b4:	4594      	cmp	ip, r2
    63b6:	bf3c      	itt	cc
    63b8:	eba2 020c 	subcc.w	r2, r2, ip
    63bc:	b2d2      	uxtbcc	r2, r2
    63be:	d312      	bcc.n	63e6 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x106>
    63c0:	190d      	adds	r5, r1, r4
    63c2:	f04f 0c00 	mov.w	ip, #0
    63c6:	7b2d      	ldrb	r5, [r5, #12]
    63c8:	fa03 f70c 	lsl.w	r7, r3, ip
    63cc:	423d      	tst	r5, r7
    63ce:	bf1c      	itt	ne
    63d0:	1e52      	subne	r2, r2, #1
    63d2:	b2d2      	uxtbne	r2, r2
    63d4:	2a00      	cmp	r2, #0
    63d6:	d069      	beq.n	64ac <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1cc>
    63d8:	f10c 0c01 	add.w	ip, ip, #1
    63dc:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    63e0:	f1bc 0f08 	cmp.w	ip, #8
    63e4:	d3f0      	bcc.n	63c8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xe8>
    63e6:	f104 0c01 	add.w	ip, r4, #1
    63ea:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    63ee:	2c05      	cmp	r4, #5
    63f0:	d3dc      	bcc.n	63ac <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xcc>
    63f2:	4630      	mov	r0, r6
    63f4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    63f8:	4770      	bx	lr
    63fa:	e7ff      	b.n	63fc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    63fc:	f890 c01a 	ldrb.w	ip, [r0, #26]
    6400:	f891 4020 	ldrb.w	r4, [r1, #32]
    6404:	4647      	mov	r7, r8
    6406:	fb04 c202 	mla	r2, r4, r2, ip
    640a:	4c2c      	ldr	r4, [pc, #176]	; (64bc <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    640c:	f04f 0c00 	mov.w	ip, #0
    6410:	fbe2 4c05 	umlal	r4, ip, r2, r5
    6414:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    6418:	f06f 0424 	mvn.w	r4, #36	; 0x24
    641c:	fb0c 2204 	mla	r2, ip, r4, r2
    6420:	b2d2      	uxtb	r2, r2
    6422:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    6426:	7682      	strb	r2, [r0, #26]
    6428:	f002 0c07 	and.w	ip, r2, #7
    642c:	7b24      	ldrb	r4, [r4, #12]
    642e:	fa03 fc0c 	lsl.w	ip, r3, ip
    6432:	ea14 0f0c 	tst.w	r4, ip
    6436:	bf1f      	itttt	ne
    6438:	76c2      	strbne	r2, [r0, #27]
    643a:	4640      	movne	r0, r8
    643c:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    6440:	4770      	bxne	lr
    6442:	f890 c019 	ldrb.w	ip, [r0, #25]
    6446:	fbb2 f4fc 	udiv	r4, r2, ip
    644a:	fb0c 2214 	mls	r2, ip, r4, r2
    644e:	1c52      	adds	r2, r2, #1
    6450:	b2d2      	uxtb	r2, r2
    6452:	2400      	movs	r4, #0
    6454:	eb00 0c04 	add.w	ip, r0, r4
    6458:	f89c c014 	ldrb.w	ip, [ip, #20]
    645c:	4594      	cmp	ip, r2
    645e:	bf3c      	itt	cc
    6460:	eba2 020c 	subcc.w	r2, r2, ip
    6464:	b2d2      	uxtbcc	r2, r2
    6466:	d312      	bcc.n	648e <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1ae>
    6468:	190d      	adds	r5, r1, r4
    646a:	f04f 0c00 	mov.w	ip, #0
    646e:	7b2d      	ldrb	r5, [r5, #12]
    6470:	fa03 f80c 	lsl.w	r8, r3, ip
    6474:	ea15 0f08 	tst.w	r5, r8
    6478:	bf1c      	itt	ne
    647a:	1e52      	subne	r2, r2, #1
    647c:	b2d2      	uxtbne	r2, r2
    647e:	b172      	cbz	r2, 649e <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1be>
    6480:	f10c 0c01 	add.w	ip, ip, #1
    6484:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6488:	f1bc 0f08 	cmp.w	ip, #8
    648c:	d3f0      	bcc.n	6470 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x190>
    648e:	f104 0c01 	add.w	ip, r4, #1
    6492:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    6496:	2c05      	cmp	r4, #5
    6498:	d3dc      	bcc.n	6454 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x174>
    649a:	e7aa      	b.n	63f2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x112>
    649c:	e009      	b.n	64b2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1d2>
    649e:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    64a2:	76c1      	strb	r1, [r0, #27]
    64a4:	4638      	mov	r0, r7
    64a6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    64aa:	4770      	bx	lr
    64ac:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    64b0:	76c1      	strb	r1, [r0, #27]
    64b2:	4640      	mov	r0, r8
    64b4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    64b8:	4770      	bx	lr
    64ba:	0000      	.short	0x0000
    64bc:	6eb3e453 	.word	0x6eb3e453

000064c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    64c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64c4:	2701      	movs	r7, #1
    64c6:	4604      	mov	r4, r0
    64c8:	2500      	movs	r5, #0
    64ca:	b169      	cbz	r1, 64e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
    64cc:	2901      	cmp	r1, #1
    64ce:	d05d      	beq.n	658c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>
    64d0:	2902      	cmp	r1, #2
    64d2:	d07c      	beq.n	65ce <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10e>
    64d4:	2903      	cmp	r1, #3
    64d6:	bf18      	it	ne
    64d8:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    64dc:	4601      	mov	r1, r0
    64de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64e2:	3078      	adds	r0, #120	; 0x78
    64e4:	f00a b9e7 	b.w	108b6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    64e8:	f104 0678 	add.w	r6, r4, #120	; 0x78
    64ec:	2288      	movs	r2, #136	; 0x88
    64ee:	2100      	movs	r1, #0
    64f0:	4630      	mov	r0, r6
    64f2:	f008 fdcb 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    64f6:	71b5      	strb	r5, [r6, #6]
    64f8:	71f5      	strb	r5, [r6, #7]
    64fa:	7335      	strb	r5, [r6, #12]
    64fc:	7375      	strb	r5, [r6, #13]
    64fe:	73f5      	strb	r5, [r6, #15]
    6500:	7435      	strb	r5, [r6, #16]
    6502:	7175      	strb	r5, [r6, #5]
    6504:	76b5      	strb	r5, [r6, #26]
    6506:	76f5      	strb	r5, [r6, #27]
    6508:	f006 fde0 	bl	d0cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    650c:	f644 112b 	movw	r1, #18731	; 0x492b
    6510:	4008      	ands	r0, r1
    6512:	f886 0046 	strb.w	r0, [r6, #70]	; 0x46
    6516:	0a00      	lsrs	r0, r0, #8
    6518:	f886 0047 	strb.w	r0, [r6, #71]	; 0x47
    651c:	20fe      	movs	r0, #254	; 0xfe
    651e:	f886 007c 	strb.w	r0, [r6, #124]	; 0x7c
    6522:	8826      	ldrh	r6, [r4, #0]
    6524:	2274      	movs	r2, #116	; 0x74
    6526:	2100      	movs	r1, #0
    6528:	4620      	mov	r0, r4
    652a:	f008 fdaf 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    652e:	8026      	strh	r6, [r4, #0]
    6530:	2101      	movs	r1, #1
    6532:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    6536:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    653a:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    653e:	2100      	movs	r1, #0
    6540:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6544:	f00a fcb5 	bl	10eb2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6548:	221b      	movs	r2, #27
    654a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    654e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    6552:	66e5      	str	r5, [r4, #108]	; 0x6c
    6554:	6725      	str	r5, [r4, #112]	; 0x70
    6556:	7467      	strb	r7, [r4, #17]
    6558:	2280      	movs	r2, #128	; 0x80
    655a:	2100      	movs	r1, #0
    655c:	f504 7080 	add.w	r0, r4, #256	; 0x100
    6560:	f008 fd94 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6564:	4842      	ldr	r0, [pc, #264]	; (6670 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b0>)
    6566:	6060      	str	r0, [r4, #4]
    6568:	2212      	movs	r2, #18
    656a:	2100      	movs	r1, #0
    656c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    6570:	f008 fd8c 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6574:	f884 5181 	strb.w	r5, [r4, #385]	; 0x181
    6578:	f884 5188 	strb.w	r5, [r4, #392]	; 0x188
    657c:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
    6580:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    6584:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
    6588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    658c:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
    6590:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
    6594:	6861      	ldr	r1, [r4, #4]
    6596:	4837      	ldr	r0, [pc, #220]	; (6674 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b4>)
    6598:	460a      	mov	r2, r1
    659a:	4408      	add	r0, r1
    659c:	fbb0 f0f1 	udiv	r0, r0, r1
    65a0:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    65a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    65a8:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    65ac:	8963      	ldrh	r3, [r4, #10]
    65ae:	f104 0078 	add.w	r0, r4, #120	; 0x78
    65b2:	f000 f94f 	bl	6854 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    65b6:	4621      	mov	r1, r4
    65b8:	f104 0078 	add.w	r0, r4, #120	; 0x78
    65bc:	f00a f97b 	bl	108b6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    65c0:	f008 fd30 	bl	f024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    65c4:	b3f0      	cbz	r0, 6644 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x184>
    65c6:	f8d4 1012 	ldr.w	r1, [r4, #18]
    65ca:	0c08      	lsrs	r0, r1, #16
    65cc:	e000      	b.n	65d0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x110>
    65ce:	e045      	b.n	665c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19c>
    65d0:	f06f 021f 	mvn.w	r2, #31
    65d4:	ea02 2291 	and.w	r2, r2, r1, lsr #10
    65d8:	261f      	movs	r6, #31
    65da:	f5a0 41aa 	sub.w	r1, r0, #21760	; 0x5500
    65de:	3954      	subs	r1, #84	; 0x54
    65e0:	bf1c      	itt	ne
    65e2:	f5a0 41aa 	subne.w	r1, r0, #21760	; 0x5500
    65e6:	f1b1 0155 	subsne.w	r1, r1, #85	; 0x55
    65ea:	d00a      	beq.n	6602 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x142>
    65ec:	f5a0 5128 	sub.w	r1, r0, #10752	; 0x2a00
    65f0:	39aa      	subs	r1, #170	; 0xaa
    65f2:	bf1e      	ittt	ne
    65f4:	f5a0 412a 	subne.w	r1, r0, #43520	; 0xaa00
    65f8:	f1b1 01aa 	subsne.w	r1, r1, #170	; 0xaa
    65fc:	f04f 0901 	movne.w	r9, #1
    6600:	d101      	bne.n	6606 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x146>
    6602:	f04f 0900 	mov.w	r9, #0
    6606:	f04f 0c00 	mov.w	ip, #0
    660a:	4663      	mov	r3, ip
    660c:	ea4f 010c 	mov.w	r1, ip
    6610:	ea8c 0800 	eor.w	r8, ip, r0
    6614:	ea6f 0808 	mvn.w	r8, r8
    6618:	ea48 0803 	orr.w	r8, r8, r3
    661c:	f1b8 3fff 	cmp.w	r8, #4294967295
    6620:	d018      	beq.n	6654 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    6622:	f002 0801 	and.w	r8, r2, #1
    6626:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    662a:	ea4c 3cc8 	orr.w	ip, ip, r8, lsl #15
    662e:	f006 0801 	and.w	r8, r6, #1
    6632:	085b      	lsrs	r3, r3, #1
    6634:	0852      	lsrs	r2, r2, #1
    6636:	0876      	lsrs	r6, r6, #1
    6638:	1c49      	adds	r1, r1, #1
    663a:	ea43 33c8 	orr.w	r3, r3, r8, lsl #15
    663e:	2916      	cmp	r1, #22
    6640:	d3e6      	bcc.n	6610 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x150>
    6642:	e000      	b.n	6646 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x186>
    6644:	e002      	b.n	664c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x18c>
    6646:	f1b9 0f00 	cmp.w	r9, #0
    664a:	d003      	beq.n	6654 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    664c:	f884 5180 	strb.w	r5, [r4, #384]	; 0x180
    6650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6654:	f884 7180 	strb.w	r7, [r4, #384]	; 0x180
    6658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    665c:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    6660:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6664:	6861      	ldr	r1, [r4, #4]
    6666:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    666a:	3078      	adds	r0, #120	; 0x78
    666c:	f000 b8f2 	b.w	6854 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    6670:	003d0900 	.word	0x003d0900
    6674:	01c9c37f 	.word	0x01c9c37f

00006678 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    6678:	2a00      	cmp	r2, #0
    667a:	bf08      	it	eq
    667c:	4770      	bxeq	lr
    667e:	4411      	add	r1, r2
    6680:	1e40      	subs	r0, r0, #1
    6682:	f012 0f01 	tst.w	r2, #1
    6686:	d003      	beq.n	6690 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x18>
    6688:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    668c:	f800 3f01 	strb.w	r3, [r0, #1]!
    6690:	0852      	lsrs	r2, r2, #1
    6692:	bf08      	it	eq
    6694:	4770      	bxeq	lr
    6696:	bf00      	nop
    6698:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    669c:	7043      	strb	r3, [r0, #1]
    669e:	f811 3d02 	ldrb.w	r3, [r1, #-2]!
    66a2:	f800 3f02 	strb.w	r3, [r0, #2]!
    66a6:	1e52      	subs	r2, r2, #1
    66a8:	d1f6      	bne.n	6698 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x20>
    66aa:	4770      	bx	lr

000066ac <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    66ac:	b510      	push	{r4, lr}
    66ae:	2820      	cmp	r0, #32
    66b0:	bf3e      	ittt	cc
    66b2:	4904      	ldrcc	r1, [pc, #16]	; (66c4 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    66b4:	f831 0010 	ldrhcc.w	r0, [r1, r0, lsl #1]
    66b8:	bd10      	popcc	{r4, pc}
    66ba:	f240 1187 	movw	r1, #391	; 0x187
    66be:	2029      	movs	r0, #41	; 0x29
    66c0:	f7fd faa6 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66c4:	2000173e 	.word	0x2000173e

000066c8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    66c8:	b510      	push	{r4, lr}
    66ca:	2820      	cmp	r0, #32
    66cc:	bf3e      	ittt	cc
    66ce:	4a04      	ldrcc	r2, [pc, #16]	; (66e0 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    66d0:	f822 1010 	strhcc.w	r1, [r2, r0, lsl #1]
    66d4:	bd10      	popcc	{r4, pc}
    66d6:	f240 118d 	movw	r1, #397	; 0x18d
    66da:	2029      	movs	r0, #41	; 0x29
    66dc:	f7fd fa98 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66e0:	2000173e 	.word	0x2000173e

000066e4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    66e4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    66e8:	4604      	mov	r4, r0
    66ea:	4690      	mov	r8, r2
    66ec:	468a      	mov	sl, r1
    66ee:	f04f 0901 	mov.w	r9, #1
    66f2:	4608      	mov	r0, r1
    66f4:	f00a f978 	bl	109e8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    66f8:	4605      	mov	r5, r0
    66fa:	4650      	mov	r0, sl
    66fc:	f00a f980 	bl	10a00 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    6700:	4607      	mov	r7, r0
    6702:	f010 0f01 	tst.w	r0, #1
    6706:	bf18      	it	ne
    6708:	2601      	movne	r6, #1
    670a:	d02b      	beq.n	6764 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x80>
    670c:	f015 0f01 	tst.w	r5, #1
    6710:	bf18      	it	ne
    6712:	f04f 0b01 	movne.w	fp, #1
    6716:	d030      	beq.n	677a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x96>
    6718:	ea56 000b 	orrs.w	r0, r6, fp
    671c:	bf08      	it	eq
    671e:	f04f 0900 	moveq.w	r9, #0
    6722:	f006 fcd9 	bl	d0d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    6726:	4238      	tst	r0, r7
    6728:	bf08      	it	eq
    672a:	2600      	moveq	r6, #0
    672c:	f006 fcd4 	bl	d0d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    6730:	4228      	tst	r0, r5
    6732:	bf08      	it	eq
    6734:	f04f 0b00 	moveq.w	fp, #0
    6738:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    673c:	42b0      	cmp	r0, r6
    673e:	bf0c      	ite	eq
    6740:	2000      	moveq	r0, #0
    6742:	4630      	movne	r0, r6
    6744:	f888 0000 	strb.w	r0, [r8]
    6748:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    674c:	4559      	cmp	r1, fp
    674e:	bf08      	it	eq
    6750:	f04f 0b00 	moveq.w	fp, #0
    6754:	f888 b001 	strb.w	fp, [r8, #1]
    6758:	2800      	cmp	r0, #0
    675a:	bf08      	it	eq
    675c:	f1bb 0f00 	cmpeq.w	fp, #0
    6760:	d128      	bne.n	67b4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    6762:	e018      	b.n	6796 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb2>
    6764:	f010 0f02 	tst.w	r0, #2
    6768:	bf18      	it	ne
    676a:	2602      	movne	r6, #2
    676c:	d1ce      	bne.n	670c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    676e:	f017 0f04 	tst.w	r7, #4
    6772:	bf14      	ite	ne
    6774:	2608      	movne	r6, #8
    6776:	2600      	moveq	r6, #0
    6778:	e7c8      	b.n	670c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    677a:	f015 0f02 	tst.w	r5, #2
    677e:	bf18      	it	ne
    6780:	f04f 0b02 	movne.w	fp, #2
    6784:	d1c8      	bne.n	6718 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    6786:	f015 0f04 	tst.w	r5, #4
    678a:	bf14      	ite	ne
    678c:	f04f 0b08 	movne.w	fp, #8
    6790:	f04f 0b00 	moveq.w	fp, #0
    6794:	e7c0      	b.n	6718 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    6796:	4650      	mov	r0, sl
    6798:	f00a f930 	bl	109fc <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    679c:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    67a0:	1a40      	subs	r0, r0, r1
    67a2:	b200      	sxth	r0, r0
    67a4:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    67a8:	4288      	cmp	r0, r1
    67aa:	dc01      	bgt.n	67b0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xcc>
    67ac:	2800      	cmp	r0, #0
    67ae:	dc01      	bgt.n	67b4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    67b0:	f04f 0900 	mov.w	r9, #0
    67b4:	b116      	cbz	r6, 67bc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd8>
    67b6:	2e08      	cmp	r6, #8
    67b8:	d010      	beq.n	67dc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    67ba:	e01f      	b.n	67fc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    67bc:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    67c0:	2801      	cmp	r0, #1
    67c2:	bf18      	it	ne
    67c4:	2802      	cmpne	r0, #2
    67c6:	d019      	beq.n	67fc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    67c8:	2804      	cmp	r0, #4
    67ca:	bf18      	it	ne
    67cc:	2808      	cmpne	r0, #8
    67ce:	d005      	beq.n	67dc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    67d0:	f240 218f 	movw	r1, #655	; 0x28f
    67d4:	f04f 0006 	mov.w	r0, #6
    67d8:	f7fd fa1a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67dc:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    67e0:	2801      	cmp	r0, #1
    67e2:	d10b      	bne.n	67fc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    67e4:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    67e8:	2801      	cmp	r0, #1
    67ea:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
    67ee:	d008      	beq.n	6802 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x11e>
    67f0:	2808      	cmp	r0, #8
    67f2:	d003      	beq.n	67fc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    67f4:	f05f 0008 	movs.w	r0, #8
    67f8:	f888 0000 	strb.w	r0, [r8]
    67fc:	4648      	mov	r0, r9
    67fe:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6802:	2804      	cmp	r0, #4
    6804:	bf18      	it	ne
    6806:	2004      	movne	r0, #4
    6808:	d1f6      	bne.n	67f8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x114>
    680a:	e7f3      	b.n	67f4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x110>

0000680c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    680c:	b430      	push	{r4, r5}
    680e:	2200      	movs	r2, #0
    6810:	f1a1 0c01 	sub.w	ip, r1, #1
    6814:	f1bc 0f00 	cmp.w	ip, #0
    6818:	dd12      	ble.n	6840 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    681a:	1e43      	subs	r3, r0, #1
    681c:	f011 0f01 	tst.w	r1, #1
    6820:	bf08      	it	eq
    6822:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    6826:	785c      	ldrb	r4, [r3, #1]
    6828:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    682c:	d008      	beq.n	6840 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    682e:	bf00      	nop
    6830:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    6834:	4322      	orrs	r2, r4
    6836:	785c      	ldrb	r4, [r3, #1]
    6838:	432a      	orrs	r2, r5
    683a:	f1bc 0c01 	subs.w	ip, ip, #1
    683e:	d1f7      	bne.n	6830 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    6840:	1e49      	subs	r1, r1, #1
    6842:	bf5c      	itt	pl
    6844:	5c40      	ldrbpl	r0, [r0, r1]
    6846:	4302      	orrpl	r2, r0
    6848:	2a00      	cmp	r2, #0
    684a:	bf0c      	ite	eq
    684c:	2001      	moveq	r0, #1
    684e:	2000      	movne	r0, #0
    6850:	bc30      	pop	{r4, r5}
    6852:	4770      	bx	lr
    6854:	b410      	push	{r4}
    6856:	f04f 0c00 	mov.w	ip, #0
    685a:	f8a0 c02e 	strh.w	ip, [r0, #46]	; 0x2e
    685e:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
    6862:	4c16      	ldr	r4, [pc, #88]	; (68bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb0>)
    6864:	fb0c fc01 	mul.w	ip, ip, r1
    6868:	fbbc fcf2 	udiv	ip, ip, r2
    686c:	f8a0 c032 	strh.w	ip, [r0, #50]	; 0x32
    6870:	f242 7c10 	movw	ip, #10000	; 0x2710
    6874:	fb03 f30c 	mul.w	r3, r3, ip
    6878:	fbb3 f3f2 	udiv	r3, r3, r2
    687c:	1c5b      	adds	r3, r3, #1
    687e:	b29b      	uxth	r3, r3
    6880:	fb03 fc02 	mul.w	ip, r3, r2
    6884:	8603      	strh	r3, [r0, #48]	; 0x30
    6886:	45a4      	cmp	ip, r4
    6888:	bf84      	itt	hi
    688a:	1e5b      	subhi	r3, r3, #1
    688c:	8603      	strhhi	r3, [r0, #48]	; 0x30
    688e:	4b0c      	ldr	r3, [pc, #48]	; (68c0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb4>)
    6890:	f240 2c71 	movw	ip, #625	; 0x271
    6894:	fbb3 f3f2 	udiv	r3, r3, r2
    6898:	1c5b      	adds	r3, r3, #1
    689a:	86c3      	strh	r3, [r0, #54]	; 0x36
    689c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    689e:	fb03 f30c 	mul.w	r3, r3, ip
    68a2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    68a6:	1e5b      	subs	r3, r3, #1
    68a8:	fbb3 f3f2 	udiv	r3, r3, r2
    68ac:	6243      	str	r3, [r0, #36]	; 0x24
    68ae:	6a03      	ldr	r3, [r0, #32]
    68b0:	4359      	muls	r1, r3
    68b2:	fbb1 f1f2 	udiv	r1, r1, r2
    68b6:	6201      	str	r1, [r0, #32]
    68b8:	bc10      	pop	{r4}
    68ba:	4770      	bx	lr
    68bc:	01e84800 	.word	0x01e84800
    68c0:	02625a00 	.word	0x02625a00
    68c4:	78c3      	ldrb	r3, [r0, #3]
    68c6:	4602      	mov	r2, r0
    68c8:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    68cc:	bf08      	it	eq
    68ce:	4770      	bxeq	lr
    68d0:	2005      	movs	r0, #5
    68d2:	7912      	ldrb	r2, [r2, #4]
    68d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    68d8:	f012 0f01 	tst.w	r2, #1
    68dc:	d037      	beq.n	694e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x142>
    68de:	2900      	cmp	r1, #0
    68e0:	bf14      	ite	ne
    68e2:	200b      	movne	r0, #11
    68e4:	4770      	bxeq	lr
    68e6:	bf00      	nop
    68e8:	f012 0f02 	tst.w	r2, #2
    68ec:	d032      	beq.n	6954 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x148>
    68ee:	2901      	cmp	r1, #1
    68f0:	bf14      	ite	ne
    68f2:	1d80      	addne	r0, r0, #6
    68f4:	4770      	bxeq	lr
    68f6:	bf00      	nop
    68f8:	f012 0f04 	tst.w	r2, #4
    68fc:	d02d      	beq.n	695a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x14e>
    68fe:	2902      	cmp	r1, #2
    6900:	bf14      	ite	ne
    6902:	1c40      	addne	r0, r0, #1
    6904:	4770      	bxeq	lr
    6906:	bf00      	nop
    6908:	f012 0f08 	tst.w	r2, #8
    690c:	d028      	beq.n	6960 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x154>
    690e:	2903      	cmp	r1, #3
    6910:	bf14      	ite	ne
    6912:	1c80      	addne	r0, r0, #2
    6914:	4770      	bxeq	lr
    6916:	bf00      	nop
    6918:	f012 0f10 	tst.w	r2, #16
    691c:	d023      	beq.n	6966 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x15a>
    691e:	2904      	cmp	r1, #4
    6920:	bf14      	ite	ne
    6922:	1cc0      	addne	r0, r0, #3
    6924:	4770      	bxeq	lr
    6926:	bf00      	nop
    6928:	f012 0f20 	tst.w	r2, #32
    692c:	d01e      	beq.n	696c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x160>
    692e:	2905      	cmp	r1, #5
    6930:	bf1a      	itte	ne
    6932:	3012      	addne	r0, #18
    6934:	b2c0      	uxtbne	r0, r0
    6936:	4770      	bxeq	lr
    6938:	f012 0f40 	tst.w	r2, #64	; 0x40
    693c:	d019      	beq.n	6972 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x166>
    693e:	2906      	cmp	r1, #6
    6940:	bf1a      	itte	ne
    6942:	1c40      	addne	r0, r0, #1
    6944:	b2c0      	uxtbne	r0, r0
    6946:	4770      	bxeq	lr
    6948:	2907      	cmp	r1, #7
    694a:	d118      	bne.n	697e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    694c:	e014      	b.n	6978 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x16c>
    694e:	2900      	cmp	r1, #0
    6950:	d1ca      	bne.n	68e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xdc>
    6952:	e014      	b.n	697e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6954:	2901      	cmp	r1, #1
    6956:	d1cf      	bne.n	68f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xec>
    6958:	e011      	b.n	697e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    695a:	2902      	cmp	r1, #2
    695c:	d1d4      	bne.n	6908 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xfc>
    695e:	e00e      	b.n	697e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6960:	2903      	cmp	r1, #3
    6962:	d1d9      	bne.n	6918 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10c>
    6964:	e00b      	b.n	697e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6966:	2904      	cmp	r1, #4
    6968:	d1de      	bne.n	6928 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x11c>
    696a:	e008      	b.n	697e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    696c:	2905      	cmp	r1, #5
    696e:	d1e3      	bne.n	6938 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x12c>
    6970:	e005      	b.n	697e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6972:	2906      	cmp	r1, #6
    6974:	d1e8      	bne.n	6948 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x13c>
    6976:	e002      	b.n	697e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6978:	4283      	cmp	r3, r0
    697a:	bf88      	it	hi
    697c:	4770      	bxhi	lr
    697e:	2000      	movs	r0, #0
    6980:	4770      	bx	lr
	...

00006984 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6984:	7841      	ldrb	r1, [r0, #1]
    6986:	b141      	cbz	r1, 699a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6988:	78c0      	ldrb	r0, [r0, #3]
    698a:	2819      	cmp	r0, #25
    698c:	d203      	bcs.n	6996 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    698e:	4a04      	ldr	r2, [pc, #16]	; (69a0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6990:	5c10      	ldrb	r0, [r2, r0]
    6992:	4288      	cmp	r0, r1
    6994:	d101      	bne.n	699a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6996:	2001      	movs	r0, #1
    6998:	4770      	bx	lr
    699a:	2000      	movs	r0, #0
    699c:	4770      	bx	lr
    699e:	0000      	.short	0x0000
    69a0:	00012904 	.word	0x00012904

000069a4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    69a4:	a20c      	add	r2, pc, #48	; (adr r2, 69d8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x34>)
    69a6:	b082      	sub	sp, #8
    69a8:	e9d2 1200 	ldrd	r1, r2, [r2]
    69ac:	e9cd 1200 	strd	r1, r2, [sp]
    69b0:	7901      	ldrb	r1, [r0, #4]
    69b2:	7940      	ldrb	r0, [r0, #5]
    69b4:	f001 0207 	and.w	r2, r1, #7
    69b8:	4669      	mov	r1, sp
    69ba:	f81d 2002 	ldrb.w	r2, [sp, r2]
    69be:	2a01      	cmp	r2, #1
    69c0:	d807      	bhi.n	69d2 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2e>
    69c2:	f000 0007 	and.w	r0, r0, #7
    69c6:	5c08      	ldrb	r0, [r1, r0]
    69c8:	2801      	cmp	r0, #1
    69ca:	bf9e      	ittt	ls
    69cc:	2001      	movls	r0, #1
    69ce:	b002      	addls	sp, #8
    69d0:	4770      	bxls	lr
    69d2:	2000      	movs	r0, #0
    69d4:	b002      	add	sp, #8
    69d6:	4770      	bx	lr
    69d8:	02010100 	.word	0x02010100
    69dc:	03020201 	.word	0x03020201

000069e0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    69e0:	b510      	push	{r4, lr}
    69e2:	2201      	movs	r2, #1
    69e4:	70c1      	strb	r1, [r0, #3]
    69e6:	2919      	cmp	r1, #25
    69e8:	bf3c      	itt	cc
    69ea:	4a06      	ldrcc	r2, [pc, #24]	; (6a04 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    69ec:	5c52      	ldrbcc	r2, [r2, r1]
    69ee:	d306      	bcc.n	69fe <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    69f0:	29ff      	cmp	r1, #255	; 0xff
    69f2:	d004      	beq.n	69fe <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    69f4:	f240 31b3 	movw	r1, #947	; 0x3b3
    69f8:	202a      	movs	r0, #42	; 0x2a
    69fa:	f7fd f909 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69fe:	7042      	strb	r2, [r0, #1]
    6a00:	bd10      	pop	{r4, pc}
    6a02:	0000      	.short	0x0000
    6a04:	00012904 	.word	0x00012904

00006a08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    6a08:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a0c:	b084      	sub	sp, #16
    6a0e:	9804      	ldr	r0, [sp, #16]
    6a10:	b160      	cbz	r0, 6a2c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x24>
    6a12:	f8df 8124 	ldr.w	r8, [pc, #292]	; 6b38 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x130>
    6a16:	2102      	movs	r1, #2
    6a18:	f508 7014 	add.w	r0, r8, #592	; 0x250
    6a1c:	f00a f959 	bl	10cd2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6a20:	b148      	cbz	r0, 6a36 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2e>
    6a22:	f44f 7164 	mov.w	r1, #912	; 0x390
    6a26:	202b      	movs	r0, #43	; 0x2b
    6a28:	f7fd f8f2 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a2c:	f240 318f 	movw	r1, #911	; 0x38f
    6a30:	202b      	movs	r0, #43	; 0x2b
    6a32:	f7fd f8ed 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a36:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6a3a:	9000      	str	r0, [sp, #0]
    6a3c:	2000      	movs	r0, #0
    6a3e:	f7fd faf7 	bl	4030 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6a42:	4604      	mov	r4, r0
    6a44:	2001      	movs	r0, #1
    6a46:	f7fd faf3 	bl	4030 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6a4a:	4420      	add	r0, r4
    6a4c:	f000 0bff 	and.w	fp, r0, #255	; 0xff
    6a50:	f10b 0001 	add.w	r0, fp, #1
    6a54:	f000 0aff 	and.w	sl, r0, #255	; 0xff
    6a58:	f04f 0900 	mov.w	r9, #0
    6a5c:	4837      	ldr	r0, [pc, #220]	; (6b3c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x134>)
    6a5e:	6801      	ldr	r1, [r0, #0]
    6a60:	b119      	cbz	r1, 6a6a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x62>
    6a62:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6a66:	4550      	cmp	r0, sl
    6a68:	d006      	beq.n	6a78 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x70>
    6a6a:	4835      	ldr	r0, [pc, #212]	; (6b40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x138>)
    6a6c:	6801      	ldr	r1, [r0, #0]
    6a6e:	b131      	cbz	r1, 6a7e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6a70:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6a74:	4558      	cmp	r0, fp
    6a76:	d102      	bne.n	6a7e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6a78:	9804      	ldr	r0, [sp, #16]
    6a7a:	4788      	blx	r1
    6a7c:	e006      	b.n	6a8c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x84>
    6a7e:	4831      	ldr	r0, [pc, #196]	; (6b44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x13c>)
    6a80:	6802      	ldr	r2, [r0, #0]
    6a82:	b12a      	cbz	r2, 6a90 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    6a84:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6a88:	9904      	ldr	r1, [sp, #16]
    6a8a:	4790      	blx	r2
    6a8c:	2800      	cmp	r0, #0
    6a8e:	d13b      	bne.n	6b08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    6a90:	f508 7414 	add.w	r4, r8, #592	; 0x250
    6a94:	2502      	movs	r5, #2
    6a96:	2000      	movs	r0, #0
    6a98:	f7fd faca 	bl	4030 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6a9c:	4606      	mov	r6, r0
    6a9e:	2001      	movs	r0, #1
    6aa0:	f7fd fac6 	bl	4030 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6aa4:	4430      	add	r0, r6
    6aa6:	b2c7      	uxtb	r7, r0
    6aa8:	2600      	movs	r6, #0
    6aaa:	f117 0f02 	cmn.w	r7, #2
    6aae:	bf18      	it	ne
    6ab0:	443d      	addne	r5, r7
    6ab2:	d014      	beq.n	6ade <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xd6>
    6ab4:	8820      	ldrh	r0, [r4, #0]
    6ab6:	1c40      	adds	r0, r0, #1
    6ab8:	b280      	uxth	r0, r0
    6aba:	8020      	strh	r0, [r4, #0]
    6abc:	42a8      	cmp	r0, r5
    6abe:	bf28      	it	cs
    6ac0:	f8a4 9000 	strhcs.w	r9, [r4]
    6ac4:	8820      	ldrh	r0, [r4, #0]
    6ac6:	42b8      	cmp	r0, r7
    6ac8:	d301      	bcc.n	6ace <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xc6>
    6aca:	42a8      	cmp	r0, r5
    6acc:	d30b      	bcc.n	6ae6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    6ace:	a902      	add	r1, sp, #8
    6ad0:	f009 fcab 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6ad4:	b138      	cbz	r0, 6ae6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    6ad6:	1c70      	adds	r0, r6, #1
    6ad8:	b2c6      	uxtb	r6, r0
    6ada:	42b5      	cmp	r5, r6
    6adc:	d8ea      	bhi.n	6ab4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xac>
    6ade:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6ae2:	8020      	strh	r0, [r4, #0]
    6ae4:	e004      	b.n	6af0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xe8>
    6ae6:	f8b8 1250 	ldrh.w	r1, [r8, #592]	; 0x250
    6aea:	9800      	ldr	r0, [sp, #0]
    6aec:	4281      	cmp	r1, r0
    6aee:	d1b5      	bne.n	6a5c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x54>
    6af0:	4815      	ldr	r0, [pc, #84]	; (6b48 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x140>)
    6af2:	6801      	ldr	r1, [r0, #0]
    6af4:	b111      	cbz	r1, 6afc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xf4>
    6af6:	9804      	ldr	r0, [sp, #16]
    6af8:	4788      	blx	r1
    6afa:	b928      	cbnz	r0, 6b08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    6afc:	4813      	ldr	r0, [pc, #76]	; (6b4c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x144>)
    6afe:	6801      	ldr	r1, [r0, #0]
    6b00:	b131      	cbz	r1, 6b10 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    6b02:	9804      	ldr	r0, [sp, #16]
    6b04:	4788      	blx	r1
    6b06:	b118      	cbz	r0, 6b10 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    6b08:	b005      	add	sp, #20
    6b0a:	2001      	movs	r0, #1
    6b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b10:	f898 023f 	ldrb.w	r0, [r8, #575]	; 0x23f
    6b14:	2800      	cmp	r0, #0
    6b16:	bf04      	itt	eq
    6b18:	b005      	addeq	sp, #20
    6b1a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b1e:	9804      	ldr	r0, [sp, #16]
    6b20:	2121      	movs	r1, #33	; 0x21
    6b22:	f880 9001 	strb.w	r9, [r0, #1]
    6b26:	9804      	ldr	r0, [sp, #16]
    6b28:	7001      	strb	r1, [r0, #0]
    6b2a:	f888 923f 	strb.w	r9, [r8, #575]	; 0x23f
    6b2e:	b005      	add	sp, #20
    6b30:	2001      	movs	r0, #1
    6b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b36:	0000      	.short	0x0000
    6b38:	20001004 	.word	0x20001004
    6b3c:	20000358 	.word	0x20000358
    6b40:	20000368 	.word	0x20000368
    6b44:	20000360 	.word	0x20000360
    6b48:	20000370 	.word	0x20000370
    6b4c:	2000035c 	.word	0x2000035c

00006b50 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    6b50:	b510      	push	{r4, lr}
    6b52:	4604      	mov	r4, r0
    6b54:	4815      	ldr	r0, [pc, #84]	; (6bac <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x5c>)
    6b56:	6801      	ldr	r1, [r0, #0]
    6b58:	b329      	cbz	r1, 6ba6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6b5a:	4620      	mov	r0, r4
    6b5c:	4788      	blx	r1
    6b5e:	b310      	cbz	r0, 6ba6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6b60:	7820      	ldrb	r0, [r4, #0]
    6b62:	2814      	cmp	r0, #20
    6b64:	d002      	beq.n	6b6c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x1c>
    6b66:	2817      	cmp	r0, #23
    6b68:	d003      	beq.n	6b72 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x22>
    6b6a:	e01a      	b.n	6ba2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6b6c:	7920      	ldrb	r0, [r4, #4]
    6b6e:	b928      	cbnz	r0, 6b7c <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x2c>
    6b70:	e017      	b.n	6ba2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6b72:	7920      	ldrb	r0, [r4, #4]
    6b74:	b1a8      	cbz	r0, 6ba2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6b76:	f000 fec9 	bl	790c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6b7a:	b990      	cbnz	r0, 6ba2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6b7c:	88e4      	ldrh	r4, [r4, #6]
    6b7e:	2101      	movs	r1, #1
    6b80:	4620      	mov	r0, r4
    6b82:	f009 fb46 	bl	10212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6b86:	b160      	cbz	r0, 6ba2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6b88:	8800      	ldrh	r0, [r0, #0]
    6b8a:	f7fd ff21 	bl	49d0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6b8e:	2101      	movs	r1, #1
    6b90:	4620      	mov	r0, r4
    6b92:	f7fd fac5 	bl	4120 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6b96:	b120      	cbz	r0, 6ba2 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6b98:	f240 1115 	movw	r1, #277	; 0x115
    6b9c:	202b      	movs	r0, #43	; 0x2b
    6b9e:	f7fd f837 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ba2:	2001      	movs	r0, #1
    6ba4:	bd10      	pop	{r4, pc}
    6ba6:	2000      	movs	r0, #0
    6ba8:	bd10      	pop	{r4, pc}
    6baa:	0000      	.short	0x0000
    6bac:	20000354 	.word	0x20000354

00006bb0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bb4:	b083      	sub	sp, #12
    6bb6:	460d      	mov	r5, r1
    6bb8:	4606      	mov	r6, r0
    6bba:	4669      	mov	r1, sp
    6bbc:	f009 fc35 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6bc0:	2800      	cmp	r0, #0
    6bc2:	d17d      	bne.n	6cc0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6bc4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 6d38 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x188>
    6bc8:	f8df a170 	ldr.w	sl, [pc, #368]	; 6d3c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18c>
    6bcc:	f05f 0700 	movs.w	r7, #0
    6bd0:	f89d 0000 	ldrb.w	r0, [sp]
    6bd4:	b180      	cbz	r0, 6bf8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6bd6:	f000 fbc9 	bl	736c <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    6bda:	42b0      	cmp	r0, r6
    6bdc:	d070      	beq.n	6cc0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6bde:	f8da 2000 	ldr.w	r2, [sl]
    6be2:	b31a      	cbz	r2, 6c2c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    6be4:	4629      	mov	r1, r5
    6be6:	4630      	mov	r0, r6
    6be8:	4790      	blx	r2
    6bea:	b1f8      	cbz	r0, 6c2c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    6bec:	4628      	mov	r0, r5
    6bee:	f000 f9dd 	bl	6fac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6bf2:	2800      	cmp	r0, #0
    6bf4:	d1ec      	bne.n	6bd0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6bf6:	e092      	b.n	6d1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x16e>
    6bf8:	f005 f994 	bl	bf24 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    6bfc:	42b0      	cmp	r0, r6
    6bfe:	d05f      	beq.n	6cc0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6c00:	f8d9 2000 	ldr.w	r2, [r9]
    6c04:	b14a      	cbz	r2, 6c1a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6c06:	4629      	mov	r1, r5
    6c08:	4630      	mov	r0, r6
    6c0a:	4790      	blx	r2
    6c0c:	b128      	cbz	r0, 6c1a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6c0e:	4628      	mov	r0, r5
    6c10:	f000 f9cc 	bl	6fac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6c14:	2800      	cmp	r0, #0
    6c16:	d1db      	bne.n	6bd0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6c18:	e081      	b.n	6d1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x16e>
    6c1a:	9801      	ldr	r0, [sp, #4]
    6c1c:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6c20:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    6c24:	b968      	cbnz	r0, 6c42 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6c26:	7f20      	ldrb	r0, [r4, #28]
    6c28:	b940      	cbnz	r0, 6c3c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x8c>
    6c2a:	e00a      	b.n	6c42 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6c2c:	9801      	ldr	r0, [sp, #4]
    6c2e:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6c32:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
    6c36:	b920      	cbnz	r0, 6c42 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6c38:	7f20      	ldrb	r0, [r4, #28]
    6c3a:	b110      	cbz	r0, 6c42 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6c3c:	f04f 0b01 	mov.w	fp, #1
    6c40:	e001      	b.n	6c46 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x96>
    6c42:	f04f 0b00 	mov.w	fp, #0
    6c46:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
    6c4a:	2800      	cmp	r0, #0
    6c4c:	bf1c      	itt	ne
    6c4e:	f894 0040 	ldrbne.w	r0, [r4, #64]	; 0x40
    6c52:	f010 0f02 	tstne.w	r0, #2
    6c56:	d017      	beq.n	6c88 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    6c58:	706f      	strb	r7, [r5, #1]
    6c5a:	f04f 0001 	mov.w	r0, #1
    6c5e:	7028      	strb	r0, [r5, #0]
    6c60:	712f      	strb	r7, [r5, #4]
    6c62:	f8a5 6005 	strh.w	r6, [r5, #5]
    6c66:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    6c6a:	71e8      	strb	r0, [r5, #7]
    6c6c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    6c70:	8128      	strh	r0, [r5, #8]
    6c72:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    6c76:	8168      	strh	r0, [r5, #10]
    6c78:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
    6c7c:	4628      	mov	r0, r5
    6c7e:	f000 f995 	bl	6fac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6c82:	2800      	cmp	r0, #0
    6c84:	d1a4      	bne.n	6bd0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6c86:	e04a      	b.n	6d1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x16e>
    6c88:	4630      	mov	r0, r6
    6c8a:	f7fd fbeb 	bl	4464 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6c8e:	ea5f 0800 	movs.w	r8, r0
    6c92:	d01b      	beq.n	6ccc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x11c>
    6c94:	f009 f856 	bl	fd44 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6c98:	b1e8      	cbz	r0, 6cd6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    6c9a:	706f      	strb	r7, [r5, #1]
    6c9c:	210f      	movs	r1, #15
    6c9e:	7029      	strb	r1, [r5, #0]
    6ca0:	80ee      	strh	r6, [r5, #6]
    6ca2:	8128      	strh	r0, [r5, #8]
    6ca4:	2101      	movs	r1, #1
    6ca6:	1e40      	subs	r0, r0, #1
    6ca8:	7129      	strb	r1, [r5, #4]
    6caa:	b284      	uxth	r4, r0
    6cac:	2200      	movs	r2, #0
    6cae:	4611      	mov	r1, r2
    6cb0:	4640      	mov	r0, r8
    6cb2:	f009 f9b5 	bl	10020 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6cb6:	1e61      	subs	r1, r4, #1
    6cb8:	b28c      	uxth	r4, r1
    6cba:	d2f7      	bcs.n	6cac <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xfc>
    6cbc:	4628      	mov	r0, r5
    6cbe:	e000      	b.n	6cc2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6cc0:	e036      	b.n	6d30 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x180>
    6cc2:	f000 f973 	bl	6fac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d182      	bne.n	6bd0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6cca:	e028      	b.n	6d1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x16e>
    6ccc:	f240 2117 	movw	r1, #535	; 0x217
    6cd0:	202b      	movs	r0, #43	; 0x2b
    6cd2:	f7fc ff9d 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd6:	4630      	mov	r0, r6
    6cd8:	f7fd fbae 	bl	4438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6cdc:	b318      	cbz	r0, 6d26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x176>
    6cde:	f1bb 0f00 	cmp.w	fp, #0
    6ce2:	d025      	beq.n	6d30 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x180>
    6ce4:	f008 ff10 	bl	fb08 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6ce8:	b310      	cbz	r0, 6d30 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x180>
    6cea:	4630      	mov	r0, r6
    6cec:	f7fd fe70 	bl	49d0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6cf0:	2100      	movs	r1, #0
    6cf2:	4630      	mov	r0, r6
    6cf4:	f7fd fa14 	bl	4120 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6cf8:	2101      	movs	r1, #1
    6cfa:	4630      	mov	r0, r6
    6cfc:	f7fd fa10 	bl	4120 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6d00:	706f      	strb	r7, [r5, #1]
    6d02:	200c      	movs	r0, #12
    6d04:	7028      	strb	r0, [r5, #0]
    6d06:	712f      	strb	r7, [r5, #4]
    6d08:	f8a5 6005 	strh.w	r6, [r5, #5]
    6d0c:	7f60      	ldrb	r0, [r4, #29]
    6d0e:	71e8      	strb	r0, [r5, #7]
    6d10:	7727      	strb	r7, [r4, #28]
    6d12:	4628      	mov	r0, r5
    6d14:	f000 f94a 	bl	6fac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6d18:	2800      	cmp	r0, #0
    6d1a:	f47f af59 	bne.w	6bd0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6d1e:	b003      	add	sp, #12
    6d20:	2001      	movs	r0, #1
    6d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d26:	f240 2135 	movw	r1, #565	; 0x235
    6d2a:	202b      	movs	r0, #43	; 0x2b
    6d2c:	f7fc ff70 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d30:	b003      	add	sp, #12
    6d32:	2000      	movs	r0, #0
    6d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d38:	20000364 	.word	0x20000364
    6d3c:	2000036c 	.word	0x2000036c

00006d40 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d44:	f8df 815c 	ldr.w	r8, [pc, #348]	; 6ea4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x164>
    6d48:	4681      	mov	r9, r0
    6d4a:	b085      	sub	sp, #20
    6d4c:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    6d50:	468a      	mov	sl, r1
    6d52:	b130      	cbz	r0, 6d62 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6d54:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    6d58:	2800      	cmp	r0, #0
    6d5a:	bf04      	itt	eq
    6d5c:	b005      	addeq	sp, #20
    6d5e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d62:	2100      	movs	r1, #0
    6d64:	f208 204e 	addw	r0, r8, #590	; 0x24e
    6d68:	f009 ffb3 	bl	10cd2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6d6c:	2800      	cmp	r0, #0
    6d6e:	d17a      	bne.n	6e66 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x126>
    6d70:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6d74:	f04f 0b00 	mov.w	fp, #0
    6d78:	f8cd 0000 	str.w	r0, [sp]
    6d7c:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6d80:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    6d84:	39ff      	subs	r1, #255	; 0xff
    6d86:	d057      	beq.n	6e38 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6d88:	f8a9 0000 	strh.w	r0, [r9]
    6d8c:	f889 b005 	strb.w	fp, [r9, #5]
    6d90:	f7fd fb52 	bl	4438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6d94:	4605      	mov	r5, r0
    6d96:	f009 f803 	bl	fda0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    6d9a:	0004      	movs	r4, r0
    6d9c:	d04c      	beq.n	6e38 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6d9e:	4601      	mov	r1, r0
    6da0:	aa01      	add	r2, sp, #4
    6da2:	4628      	mov	r0, r5
    6da4:	f009 f821 	bl	fdea <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6da8:	f8a9 0002 	strh.w	r0, [r9, #2]
    6dac:	b128      	cbz	r0, 6dba <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x7a>
    6dae:	28fb      	cmp	r0, #251	; 0xfb
    6db0:	d907      	bls.n	6dc2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x82>
    6db2:	21c1      	movs	r1, #193	; 0xc1
    6db4:	202b      	movs	r0, #43	; 0x2b
    6db6:	f7fc ff2b 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dba:	21c0      	movs	r1, #192	; 0xc0
    6dbc:	202b      	movs	r0, #43	; 0x2b
    6dbe:	f7fc ff27 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dc2:	9801      	ldr	r0, [sp, #4]
    6dc4:	f009 fe0c 	bl	109e0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    6dc8:	2101      	movs	r1, #1
    6dca:	2801      	cmp	r0, #1
    6dcc:	bf08      	it	eq
    6dce:	f889 1004 	strbeq.w	r1, [r9, #4]
    6dd2:	d008      	beq.n	6de6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6dd4:	2802      	cmp	r0, #2
    6dd6:	bf08      	it	eq
    6dd8:	f889 0004 	strbeq.w	r0, [r9, #4]
    6ddc:	d003      	beq.n	6de6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6dde:	21d0      	movs	r1, #208	; 0xd0
    6de0:	202b      	movs	r0, #43	; 0x2b
    6de2:	f7fc ff15 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6de6:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    6dea:	2003      	movs	r0, #3
    6dec:	9000      	str	r0, [sp, #0]
    6dee:	4652      	mov	r2, sl
    6df0:	4621      	mov	r1, r4
    6df2:	4628      	mov	r0, r5
    6df4:	f008 fe1e 	bl	fa34 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    6df8:	4628      	mov	r0, r5
    6dfa:	f8c9 a008 	str.w	sl, [r9, #8]
    6dfe:	f008 ff4b 	bl	fc98 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    6e02:	b188      	cbz	r0, 6e28 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe8>
    6e04:	2200      	movs	r2, #0
    6e06:	4611      	mov	r1, r2
    6e08:	4628      	mov	r0, r5
    6e0a:	f009 f909 	bl	10020 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6e0e:	b178      	cbz	r0, 6e30 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6e10:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    6e14:	b120      	cbz	r0, 6e20 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    6e16:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    6e1a:	1e40      	subs	r0, r0, #1
    6e1c:	f8a8 025a 	strh.w	r0, [r8, #602]	; 0x25a
    6e20:	b005      	add	sp, #20
    6e22:	2001      	movs	r0, #1
    6e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e28:	21e0      	movs	r1, #224	; 0xe0
    6e2a:	202b      	movs	r0, #43	; 0x2b
    6e2c:	f7fc fef0 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e30:	21e5      	movs	r1, #229	; 0xe5
    6e32:	202b      	movs	r0, #43	; 0x2b
    6e34:	f7fc feec 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e38:	2600      	movs	r6, #0
    6e3a:	f208 244e 	addw	r4, r8, #590	; 0x24e
    6e3e:	4630      	mov	r0, r6
    6e40:	f7fd f8f6 	bl	4030 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6e44:	4605      	mov	r5, r0
    6e46:	2001      	movs	r0, #1
    6e48:	f7fd f8f2 	bl	4030 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6e4c:	4428      	add	r0, r5
    6e4e:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    6e52:	4637      	mov	r7, r6
    6e54:	bf18      	it	ne
    6e56:	442e      	addne	r6, r5
    6e58:	d016      	beq.n	6e88 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x148>
    6e5a:	8820      	ldrh	r0, [r4, #0]
    6e5c:	1c40      	adds	r0, r0, #1
    6e5e:	b280      	uxth	r0, r0
    6e60:	8020      	strh	r0, [r4, #0]
    6e62:	42b0      	cmp	r0, r6
    6e64:	e000      	b.n	6e68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x128>
    6e66:	e019      	b.n	6e9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    6e68:	bf28      	it	cs
    6e6a:	f8a4 b000 	strhcs.w	fp, [r4]
    6e6e:	8820      	ldrh	r0, [r4, #0]
    6e70:	42a8      	cmp	r0, r5
    6e72:	d301      	bcc.n	6e78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x138>
    6e74:	42b0      	cmp	r0, r6
    6e76:	d30b      	bcc.n	6e90 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    6e78:	a902      	add	r1, sp, #8
    6e7a:	f009 fad6 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6e7e:	b138      	cbz	r0, 6e90 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    6e80:	1c78      	adds	r0, r7, #1
    6e82:	b2c7      	uxtb	r7, r0
    6e84:	42be      	cmp	r6, r7
    6e86:	d8e8      	bhi.n	6e5a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x11a>
    6e88:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6e8c:	8020      	strh	r0, [r4, #0]
    6e8e:	e005      	b.n	6e9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    6e90:	f8b8 124e 	ldrh.w	r1, [r8, #590]	; 0x24e
    6e94:	9800      	ldr	r0, [sp, #0]
    6e96:	4281      	cmp	r1, r0
    6e98:	f47f af70 	bne.w	6d7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3c>
    6e9c:	b005      	add	sp, #20
    6e9e:	2000      	movs	r0, #0
    6ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ea4:	20001004 	.word	0x20001004

00006ea8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    6ea8:	b510      	push	{r4, lr}
    6eaa:	7901      	ldrb	r1, [r0, #4]
    6eac:	b161      	cbz	r1, 6ec8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6eae:	2901      	cmp	r1, #1
    6eb0:	bf1c      	itt	ne
    6eb2:	2000      	movne	r0, #0
    6eb4:	bd10      	popne	{r4, pc}
    6eb6:	8842      	ldrh	r2, [r0, #2]
    6eb8:	6883      	ldr	r3, [r0, #8]
    6eba:	8800      	ldrh	r0, [r0, #0]
    6ebc:	f05f 0101 	movs.w	r1, #1
    6ec0:	f000 f80e 	bl	6ee0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x38>
    6ec4:	b940      	cbnz	r0, 6ed8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>
    6ec6:	e004      	b.n	6ed2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    6ec8:	8842      	ldrh	r2, [r0, #2]
    6eca:	6883      	ldr	r3, [r0, #8]
    6ecc:	8800      	ldrh	r0, [r0, #0]
    6ece:	2102      	movs	r1, #2
    6ed0:	e7f6      	b.n	6ec0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6ed2:	4902      	ldr	r1, [pc, #8]	; (6edc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>)
    6ed4:	2001      	movs	r0, #1
    6ed6:	7008      	strb	r0, [r1, #0]
    6ed8:	2001      	movs	r0, #1
    6eda:	bd10      	pop	{r4, pc}
    6edc:	20001004 	.word	0x20001004
    6ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ee4:	b084      	sub	sp, #16
    6ee6:	4689      	mov	r9, r1
    6ee8:	469a      	mov	sl, r3
    6eea:	4615      	mov	r5, r2
    6eec:	4606      	mov	r6, r0
    6eee:	a902      	add	r1, sp, #8
    6ef0:	f009 fa9b 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6ef4:	2800      	cmp	r0, #0
    6ef6:	d14e      	bne.n	6f96 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    6ef8:	9803      	ldr	r0, [sp, #12]
    6efa:	2d00      	cmp	r5, #0
    6efc:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6f00:	bf04      	itt	eq
    6f02:	2001      	moveq	r0, #1
    6f04:	74e0      	strbeq	r0, [r4, #19]
    6f06:	d046      	beq.n	6f96 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    6f08:	4630      	mov	r0, r6
    6f0a:	f7fd faab 	bl	4464 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6f0e:	ea5f 0800 	movs.w	r8, r0
    6f12:	d00d      	beq.n	6f30 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x88>
    6f14:	4629      	mov	r1, r5
    6f16:	f008 ff78 	bl	fe0a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6f1a:	0007      	movs	r7, r0
    6f1c:	d004      	beq.n	6f28 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6f1e:	4822      	ldr	r0, [pc, #136]	; (6fa8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x100>)
    6f20:	f8b0 0242 	ldrh.w	r0, [r0, #578]	; 0x242
    6f24:	4285      	cmp	r5, r0
    6f26:	d907      	bls.n	6f38 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x90>
    6f28:	b004      	add	sp, #16
    6f2a:	2000      	movs	r0, #0
    6f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f30:	2181      	movs	r1, #129	; 0x81
    6f32:	202b      	movs	r0, #43	; 0x2b
    6f34:	f7fc fe6c 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f38:	aa01      	add	r2, sp, #4
    6f3a:	4639      	mov	r1, r7
    6f3c:	4640      	mov	r0, r8
    6f3e:	f008 ff54 	bl	fdea <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6f42:	9801      	ldr	r0, [sp, #4]
    6f44:	2600      	movs	r6, #0
    6f46:	8006      	strh	r6, [r0, #0]
    6f48:	7086      	strb	r6, [r0, #2]
    6f4a:	7ce1      	ldrb	r1, [r4, #19]
    6f4c:	2900      	cmp	r1, #0
    6f4e:	bf18      	it	ne
    6f50:	f04f 0902 	movne.w	r9, #2
    6f54:	4649      	mov	r1, r9
    6f56:	f009 fdb0 	bl	10aba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6f5a:	2003      	movs	r0, #3
    6f5c:	9000      	str	r0, [sp, #0]
    6f5e:	462b      	mov	r3, r5
    6f60:	4652      	mov	r2, sl
    6f62:	4639      	mov	r1, r7
    6f64:	4640      	mov	r0, r8
    6f66:	f008 fd9a 	bl	fa9e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6f6a:	4629      	mov	r1, r5
    6f6c:	4640      	mov	r0, r8
    6f6e:	f008 febc 	bl	fcea <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6f72:	b1a0      	cbz	r0, 6f9e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf6>
    6f74:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6f78:	b160      	cbz	r0, 6f94 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    6f7a:	9803      	ldr	r0, [sp, #12]
    6f7c:	f890 010d 	ldrb.w	r0, [r0, #269]	; 0x10d
    6f80:	b128      	cbz	r0, 6f8e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe6>
    6f82:	9803      	ldr	r0, [sp, #12]
    6f84:	f880 610d 	strb.w	r6, [r0, #269]	; 0x10d
    6f88:	9803      	ldr	r0, [sp, #12]
    6f8a:	f00a fa6a 	bl	11462 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    6f8e:	9803      	ldr	r0, [sp, #12]
    6f90:	f8a0 6102 	strh.w	r6, [r0, #258]	; 0x102
    6f94:	74e6      	strb	r6, [r4, #19]
    6f96:	b004      	add	sp, #16
    6f98:	2001      	movs	r0, #1
    6f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f9e:	2197      	movs	r1, #151	; 0x97
    6fa0:	202b      	movs	r0, #43	; 0x2b
    6fa2:	f7fc fe35 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fa6:	0000      	.short	0x0000
    6fa8:	20001004 	.word	0x20001004
    6fac:	b510      	push	{r4, lr}
    6fae:	4933      	ldr	r1, [pc, #204]	; (707c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1d4>)
    6fb0:	b086      	sub	sp, #24
    6fb2:	f891 2256 	ldrb.w	r2, [r1, #598]	; 0x256
    6fb6:	7801      	ldrb	r1, [r0, #0]
    6fb8:	f012 0f01 	tst.w	r2, #1
    6fbc:	bf08      	it	eq
    6fbe:	291d      	cmpeq	r1, #29
    6fc0:	d00a      	beq.n	6fd8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x130>
    6fc2:	291c      	cmp	r1, #28
    6fc4:	d029      	beq.n	701a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x172>
    6fc6:	2915      	cmp	r1, #21
    6fc8:	bf02      	ittt	eq
    6fca:	f012 0f04 	tsteq.w	r2, #4
    6fce:	7b80      	ldrbeq	r0, [r0, #14]
    6fd0:	f010 0f01 	tsteq.w	r0, #1
    6fd4:	d04e      	beq.n	7074 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1cc>
    6fd6:	e023      	b.n	7020 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x178>
    6fd8:	8880      	ldrh	r0, [r0, #4]
    6fda:	f8ad 0000 	strh.w	r0, [sp]
    6fde:	a902      	add	r1, sp, #8
    6fe0:	f009 fa23 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6fe4:	b118      	cbz	r0, 6fee <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x146>
    6fe6:	2151      	movs	r1, #81	; 0x51
    6fe8:	202b      	movs	r0, #43	; 0x2b
    6fea:	f7fc fe11 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fee:	9803      	ldr	r0, [sp, #12]
    6ff0:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    6ff4:	f88d 1002 	strb.w	r1, [sp, #2]
    6ff8:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    6ffc:	f88d 0003 	strb.w	r0, [sp, #3]
    7000:	2000      	movs	r0, #0
    7002:	f8ad 0004 	strh.w	r0, [sp, #4]
    7006:	2102      	movs	r1, #2
    7008:	4668      	mov	r0, sp
    700a:	f00a ffc8 	bl	11f9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    700e:	b388      	cbz	r0, 7074 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1cc>
    7010:	f240 112b 	movw	r1, #299	; 0x12b
    7014:	202b      	movs	r0, #43	; 0x2b
    7016:	f7fc fdfb 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    701a:	f012 0f02 	tst.w	r2, #2
    701e:	d003      	beq.n	7028 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    7020:	b006      	add	sp, #24
    7022:	f04f 0000 	mov.w	r0, #0
    7026:	bd10      	pop	{r4, pc}
    7028:	8884      	ldrh	r4, [r0, #4]
    702a:	a903      	add	r1, sp, #12
    702c:	4620      	mov	r0, r4
    702e:	f00a fe3d 	bl	11cac <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    7032:	b120      	cbz	r0, 703e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x196>
    7034:	f44f 7199 	mov.w	r1, #306	; 0x132
    7038:	202b      	movs	r0, #43	; 0x2b
    703a:	f7fc fde9 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    703e:	f8ad 4000 	strh.w	r4, [sp]
    7042:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7046:	f8ad 0002 	strh.w	r0, [sp, #2]
    704a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    704e:	f8ad 0004 	strh.w	r0, [sp, #4]
    7052:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    7056:	f8ad 0006 	strh.w	r0, [sp, #6]
    705a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    705e:	f8ad 0008 	strh.w	r0, [sp, #8]
    7062:	4668      	mov	r0, sp
    7064:	f00a feab 	bl	11dbe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7068:	b120      	cbz	r0, 7074 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1cc>
    706a:	f240 113b 	movw	r1, #315	; 0x13b
    706e:	202b      	movs	r0, #43	; 0x2b
    7070:	f7fc fdce 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7074:	b006      	add	sp, #24
    7076:	2001      	movs	r0, #1
    7078:	bd10      	pop	{r4, pc}
    707a:	0000      	.short	0x0000
    707c:	20001004 	.word	0x20001004

00007080 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    7080:	b430      	push	{r4, r5}
    7082:	f890 5066 	ldrb.w	r5, [r0, #102]	; 0x66
    7086:	888c      	ldrh	r4, [r1, #4]
    7088:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    708c:	f015 0f0c 	tst.w	r5, #12
    7090:	d01b      	beq.n	70ca <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x4a>
    7092:	bf00      	nop
    7094:	f5b4 6f29 	cmp.w	r4, #2704	; 0xa90
    7098:	bf98      	it	ls
    709a:	f44f 6429 	movls.w	r4, #2704	; 0xa90
    709e:	f890 5067 	ldrb.w	r5, [r0, #103]	; 0x67
    70a2:	f015 0f0c 	tst.w	r5, #12
    70a6:	d017      	beq.n	70d8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x58>
    70a8:	f5bc 6f29 	cmp.w	ip, #2704	; 0xa90
    70ac:	bf98      	it	ls
    70ae:	f44f 6c29 	movls.w	ip, #2704	; 0xa90
    70b2:	884a      	ldrh	r2, [r1, #2]
    70b4:	88c9      	ldrh	r1, [r1, #6]
    70b6:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
    70ba:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    70be:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
    70c2:	f8a0 c04a 	strh.w	ip, [r0, #74]	; 0x4a
    70c6:	bc30      	pop	{r4, r5}
    70c8:	4770      	bx	lr
    70ca:	2b00      	cmp	r3, #0
    70cc:	bf1c      	itt	ne
    70ce:	7815      	ldrbne	r5, [r2, #0]
    70d0:	f015 0f0c 	tstne.w	r5, #12
    70d4:	d1de      	bne.n	7094 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x14>
    70d6:	e7e2      	b.n	709e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x1e>
    70d8:	2b00      	cmp	r3, #0
    70da:	bf1c      	itt	ne
    70dc:	7852      	ldrbne	r2, [r2, #1]
    70de:	f012 0f0c 	tstne.w	r2, #12
    70e2:	d1e1      	bne.n	70a8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x28>
    70e4:	e7e5      	b.n	70b2 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x32>
    70e6:	0000      	movs	r0, r0
    70e8:	b430      	push	{r4, r5}
    70ea:	6841      	ldr	r1, [r0, #4]
    70ec:	f641 524c 	movw	r2, #7500	; 0x1d4c
    70f0:	4291      	cmp	r1, r2
    70f2:	bf34      	ite	cc
    70f4:	f04f 0c4d 	movcc.w	ip, #77	; 0x4d
    70f8:	f04f 0c96 	movcs.w	ip, #150	; 0x96
    70fc:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    7100:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
    7104:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    7106:	f012 0f0c 	tst.w	r2, #12
    710a:	f44f 7474 	mov.w	r4, #976	; 0x3d0
    710e:	bf1c      	itt	ne
    7110:	eb04 1383 	addne.w	r3, r4, r3, lsl #6
    7114:	b29b      	uxthne	r3, r3
    7116:	d006      	beq.n	7126 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xa6>
    7118:	f012 0f0c 	tst.w	r2, #12
    711c:	bf18      	it	ne
    711e:	f44f 6229 	movne.w	r2, #2704	; 0xa90
    7122:	d10f      	bne.n	7144 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xc4>
    7124:	e007      	b.n	7136 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xb6>
    7126:	2a02      	cmp	r2, #2
    7128:	bf07      	ittee	eq
    712a:	009b      	lsleq	r3, r3, #2
    712c:	333c      	addeq	r3, #60	; 0x3c
    712e:	00db      	lslne	r3, r3, #3
    7130:	3370      	addne	r3, #112	; 0x70
    7132:	b29b      	uxth	r3, r3
    7134:	e7f0      	b.n	7118 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x98>
    7136:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
    713a:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
    713e:	4295      	cmp	r5, r2
    7140:	bf38      	it	cc
    7142:	462a      	movcc	r2, r5
    7144:	429a      	cmp	r2, r3
    7146:	bf28      	it	cs
    7148:	461a      	movcs	r2, r3
    714a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    714c:	f011 0f0c 	tst.w	r1, #12
    7150:	bf1c      	itt	ne
    7152:	eb04 1383 	addne.w	r3, r4, r3, lsl #6
    7156:	b29b      	uxthne	r3, r3
    7158:	d007      	beq.n	716a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xea>
    715a:	bf00      	nop
    715c:	f011 0f0c 	tst.w	r1, #12
    7160:	bf18      	it	ne
    7162:	f44f 6129 	movne.w	r1, #2704	; 0xa90
    7166:	d10f      	bne.n	7188 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x108>
    7168:	e007      	b.n	717a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xfa>
    716a:	2902      	cmp	r1, #2
    716c:	bf07      	ittee	eq
    716e:	009b      	lsleq	r3, r3, #2
    7170:	333c      	addeq	r3, #60	; 0x3c
    7172:	00db      	lslne	r3, r3, #3
    7174:	3370      	addne	r3, #112	; 0x70
    7176:	b29b      	uxth	r3, r3
    7178:	e7f0      	b.n	715c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0xdc>
    717a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    717e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    7182:	4281      	cmp	r1, r0
    7184:	bf28      	it	cs
    7186:	4601      	movcs	r1, r0
    7188:	4299      	cmp	r1, r3
    718a:	bf28      	it	cs
    718c:	4619      	movcs	r1, r3
    718e:	1850      	adds	r0, r2, r1
    7190:	4460      	add	r0, ip
    7192:	bc30      	pop	{r4, r5}
    7194:	1d80      	adds	r0, r0, #6
    7196:	4770      	bx	lr

00007198 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    7198:	b570      	push	{r4, r5, r6, lr}
    719a:	4c13      	ldr	r4, [pc, #76]	; (71e8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x50>)
    719c:	4605      	mov	r5, r0
    719e:	7ca1      	ldrb	r1, [r4, #18]
    71a0:	2902      	cmp	r1, #2
    71a2:	bf18      	it	ne
    71a4:	2903      	cmpne	r1, #3
    71a6:	d109      	bne.n	71bc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x24>
    71a8:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    71ac:	f104 0144 	add.w	r1, r4, #68	; 0x44
    71b0:	f7fe fcf6 	bl	5ba0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    71b4:	2808      	cmp	r0, #8
    71b6:	bf1c      	itt	ne
    71b8:	2001      	movne	r0, #1
    71ba:	bd70      	popne	{r4, r5, r6, pc}
    71bc:	7ca0      	ldrb	r0, [r4, #18]
    71be:	b145      	cbz	r5, 71d2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x3a>
    71c0:	2800      	cmp	r0, #0
    71c2:	bf16      	itet	ne
    71c4:	2802      	cmpne	r0, #2
    71c6:	2000      	moveq	r0, #0
    71c8:	2001      	movne	r0, #1
    71ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71ce:	f7fd bd09 	b.w	4be4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    71d2:	2800      	cmp	r0, #0
    71d4:	bf1a      	itte	ne
    71d6:	2802      	cmpne	r0, #2
    71d8:	2101      	movne	r1, #1
    71da:	2100      	moveq	r1, #0
    71dc:	7820      	ldrb	r0, [r4, #0]
    71de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71e2:	f7fd bcb3 	b.w	4b4c <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>
    71e6:	0000      	.short	0x0000
    71e8:	20001264 	.word	0x20001264

000071ec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    71ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71f0:	4c5c      	ldr	r4, [pc, #368]	; (7364 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>)
    71f2:	4601      	mov	r1, r0
    71f4:	7ca0      	ldrb	r0, [r4, #18]
    71f6:	2800      	cmp	r0, #0
    71f8:	bf16      	itet	ne
    71fa:	2802      	cmpne	r0, #2
    71fc:	2000      	moveq	r0, #0
    71fe:	2001      	movne	r0, #1
    7200:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    7204:	b301      	cbz	r1, 7248 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5c>
    7206:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    720a:	f7fd fcb1 	bl	4b70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    720e:	7ca0      	ldrb	r0, [r4, #18]
    7210:	2802      	cmp	r0, #2
    7212:	bf16      	itet	ne
    7214:	2803      	cmpne	r0, #3
    7216:	2101      	moveq	r1, #1
    7218:	2100      	movne	r1, #0
    721a:	74e1      	strb	r1, [r4, #19]
    721c:	f04f 0008 	mov.w	r0, #8
    7220:	7520      	strb	r0, [r4, #20]
    7222:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7226:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    722a:	f04f 0501 	mov.w	r5, #1
    722e:	f04f 0600 	mov.w	r6, #0
    7232:	2801      	cmp	r0, #1
    7234:	bf04      	itt	eq
    7236:	7952      	ldrbeq	r2, [r2, #5]
    7238:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    723c:	d013      	beq.n	7266 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    723e:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    7242:	2801      	cmp	r0, #1
    7244:	d008      	beq.n	7258 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x6c>
    7246:	e00c      	b.n	7262 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7248:	7823      	ldrb	r3, [r4, #0]
    724a:	4601      	mov	r1, r0
    724c:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    7250:	4618      	mov	r0, r3
    7252:	f7fd fc5d 	bl	4b10 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>
    7256:	e7da      	b.n	720e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x22>
    7258:	7950      	ldrb	r0, [r2, #5]
    725a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    725e:	2840      	cmp	r0, #64	; 0x40
    7260:	d001      	beq.n	7266 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    7262:	2000      	movs	r0, #0
    7264:	e000      	b.n	7268 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7c>
    7266:	2001      	movs	r0, #1
    7268:	7560      	strb	r0, [r4, #21]
    726a:	2900      	cmp	r1, #0
    726c:	bf04      	itt	eq
    726e:	78a0      	ldrbeq	r0, [r4, #2]
    7270:	f010 0f04 	tsteq.w	r0, #4
    7274:	d006      	beq.n	7284 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x98>
    7276:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    727a:	f104 0144 	add.w	r1, r4, #68	; 0x44
    727e:	f7fe fc8f 	bl	5ba0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7282:	7520      	strb	r0, [r4, #20]
    7284:	6366      	str	r6, [r4, #52]	; 0x34
    7286:	f007 fd8e 	bl	eda6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    728a:	63a0      	str	r0, [r4, #56]	; 0x38
    728c:	2700      	movs	r7, #0
    728e:	7d20      	ldrb	r0, [r4, #20]
    7290:	f7fe fbca 	bl	5a28 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7294:	4680      	mov	r8, r0
    7296:	7ce0      	ldrb	r0, [r4, #19]
    7298:	2800      	cmp	r0, #0
    729a:	bf18      	it	ne
    729c:	f1b8 0f00 	cmpne.w	r8, #0
    72a0:	d003      	beq.n	72aa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    72a2:	7d20      	ldrb	r0, [r4, #20]
    72a4:	f7fe fbb4 	bl	5a10 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    72a8:	b168      	cbz	r0, 72c6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xda>
    72aa:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    72ae:	2800      	cmp	r0, #0
    72b0:	bf1c      	itt	ne
    72b2:	7d60      	ldrbne	r0, [r4, #21]
    72b4:	2800      	cmpne	r0, #0
    72b6:	d01e      	beq.n	72f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    72b8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    72bc:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    72c0:	2901      	cmp	r1, #1
    72c2:	d00e      	beq.n	72e2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf6>
    72c4:	e012      	b.n	72ec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x100>
    72c6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    72ca:	463a      	mov	r2, r7
    72cc:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    72d0:	4640      	mov	r0, r8
    72d2:	f009 f85c 	bl	1038e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    72d6:	7d21      	ldrb	r1, [r4, #20]
    72d8:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    72dc:	f7fe fbb0 	bl	5a40 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    72e0:	e009      	b.n	72f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    72e2:	7940      	ldrb	r0, [r0, #5]
    72e4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    72e8:	2840      	cmp	r0, #64	; 0x40
    72ea:	d032      	beq.n	7352 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x166>
    72ec:	4631      	mov	r1, r6
    72ee:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    72f2:	f009 f83c 	bl	1036e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    72f6:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    72fa:	78a0      	ldrb	r0, [r4, #2]
    72fc:	f010 0f04 	tst.w	r0, #4
    7300:	bf1a      	itte	ne
    7302:	7ce0      	ldrbne	r0, [r4, #19]
    7304:	2800      	cmpne	r0, #0
    7306:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    730a:	f04f 0700 	mov.w	r7, #0
    730e:	7d20      	ldrb	r0, [r4, #20]
    7310:	f7fe fbe8 	bl	5ae4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7314:	0006      	movs	r6, r0
    7316:	bf08      	it	eq
    7318:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    731c:	2110      	movs	r1, #16
    731e:	f7ff fa75 	bl	680c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7322:	2800      	cmp	r0, #0
    7324:	bf18      	it	ne
    7326:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    732a:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    732e:	463a      	mov	r2, r7
    7330:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    7334:	4630      	mov	r0, r6
    7336:	f009 f82a 	bl	1038e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    733a:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    733e:	4c0a      	ldr	r4, [pc, #40]	; (7368 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x17c>)
    7340:	6820      	ldr	r0, [r4, #0]
    7342:	f009 fc96 	bl	10c72 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7346:	6820      	ldr	r0, [r4, #0]
    7348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    734c:	2101      	movs	r1, #1
    734e:	f009 bc97 	b.w	10c80 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7352:	f7fe fb59 	bl	5a08 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7356:	463a      	mov	r2, r7
    7358:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    735c:	f009 f817 	bl	1038e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7360:	e7c9      	b.n	72f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    7362:	0000      	.short	0x0000
    7364:	20001264 	.word	0x20001264
    7368:	20000110 	.word	0x20000110

0000736c <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>:
    736c:	4804      	ldr	r0, [pc, #16]	; (7380 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA+0x14>)
    736e:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    7372:	2900      	cmp	r1, #0
    7374:	bf14      	ite	ne
    7376:	f8b0 006c 	ldrhne.w	r0, [r0, #108]	; 0x6c
    737a:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    737e:	4770      	bx	lr
    7380:	20001264 	.word	0x20001264

00007384 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    7384:	480b      	ldr	r0, [pc, #44]	; (73b4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x30>)
    7386:	8840      	ldrh	r0, [r0, #2]
    7388:	f3c0 1100 	ubfx	r1, r0, #4, #1
    738c:	b131      	cbz	r1, 739c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x18>
    738e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7392:	2800      	cmp	r0, #0
    7394:	bf04      	itt	eq
    7396:	201f      	moveq	r0, #31
    7398:	4770      	bxeq	lr
    739a:	e002      	b.n	73a2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1e>
    739c:	f3c0 0140 	ubfx	r1, r0, #1, #1
    73a0:	b109      	cbz	r1, 73a6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x22>
    73a2:	2000      	movs	r0, #0
    73a4:	4770      	bx	lr
    73a6:	f010 0f01 	tst.w	r0, #1
    73aa:	bf14      	ite	ne
    73ac:	20ee      	movne	r0, #238	; 0xee
    73ae:	20ff      	moveq	r0, #255	; 0xff
    73b0:	4770      	bx	lr
    73b2:	0000      	.short	0x0000
    73b4:	20001264 	.word	0x20001264

000073b8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    73b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73bc:	4c41      	ldr	r4, [pc, #260]	; (74c4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x10c>)
    73be:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    73c2:	2500      	movs	r5, #0
    73c4:	b181      	cbz	r1, 73e8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    73c6:	7045      	strb	r5, [r0, #1]
    73c8:	211b      	movs	r1, #27
    73ca:	7001      	strb	r1, [r0, #0]
    73cc:	f8d4 1099 	ldr.w	r1, [r4, #153]	; 0x99
    73d0:	6041      	str	r1, [r0, #4]
    73d2:	f8d4 109d 	ldr.w	r1, [r4, #157]	; 0x9d
    73d6:	6081      	str	r1, [r0, #8]
    73d8:	f894 10a1 	ldrb.w	r1, [r4, #161]	; 0xa1
    73dc:	7301      	strb	r1, [r0, #12]
    73de:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
    73e2:	2001      	movs	r0, #1
    73e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73e8:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
    73ec:	b141      	cbz	r1, 7400 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x48>
    73ee:	7045      	strb	r5, [r0, #1]
    73f0:	2107      	movs	r1, #7
    73f2:	7001      	strb	r1, [r0, #0]
    73f4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    73f8:	6041      	str	r1, [r0, #4]
    73fa:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    73fe:	e05d      	b.n	74bc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7400:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    7404:	2114      	movs	r1, #20
    7406:	4f30      	ldr	r7, [pc, #192]	; (74c8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x110>)
    7408:	2601      	movs	r6, #1
    740a:	b30a      	cbz	r2, 7450 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x98>
    740c:	4680      	mov	r8, r0
    740e:	7045      	strb	r5, [r0, #1]
    7410:	f800 1b04 	strb.w	r1, [r0], #4
    7414:	2220      	movs	r2, #32
    7416:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    741a:	f7fc fa6d 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    741e:	f888 6008 	strb.w	r6, [r8, #8]
    7422:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    7426:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    742a:	2800      	cmp	r0, #0
    742c:	d146      	bne.n	74bc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    742e:	bf00      	nop
    7430:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    7434:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    7438:	6878      	ldr	r0, [r7, #4]
    743a:	7c41      	ldrb	r1, [r0, #17]
    743c:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    7440:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
    7444:	8800      	ldrh	r0, [r0, #0]
    7446:	f7fc fff7 	bl	4438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    744a:	f008 fd98 	bl	ff7e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    744e:	e035      	b.n	74bc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7450:	f894 208a 	ldrb.w	r2, [r4, #138]	; 0x8a
    7454:	b302      	cbz	r2, 7498 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xe0>
    7456:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    745a:	b18a      	cbz	r2, 7480 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xc8>
    745c:	4680      	mov	r8, r0
    745e:	7045      	strb	r5, [r0, #1]
    7460:	f800 1b04 	strb.w	r1, [r0], #4
    7464:	2220      	movs	r2, #32
    7466:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    746a:	f7fc fa45 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    746e:	f888 6008 	strb.w	r6, [r8, #8]
    7472:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    7476:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    747a:	2800      	cmp	r0, #0
    747c:	d0d8      	beq.n	7430 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x78>
    747e:	e01d      	b.n	74bc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7480:	7045      	strb	r5, [r0, #1]
    7482:	2117      	movs	r1, #23
    7484:	7001      	strb	r1, [r0, #0]
    7486:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    748a:	6041      	str	r1, [r0, #4]
    748c:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    7490:	8101      	strh	r1, [r0, #8]
    7492:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
    7496:	e011      	b.n	74bc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7498:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
    749c:	2900      	cmp	r1, #0
    749e:	bf04      	itt	eq
    74a0:	2000      	moveq	r0, #0
    74a2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    74a6:	7045      	strb	r5, [r0, #1]
    74a8:	2120      	movs	r1, #32
    74aa:	f800 1b04 	strb.w	r1, [r0], #4
    74ae:	2222      	movs	r2, #34	; 0x22
    74b0:	f104 01a3 	add.w	r1, r4, #163	; 0xa3
    74b4:	f7fc fa20 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    74b8:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    74bc:	2001      	movs	r0, #1
    74be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74c2:	0000      	.short	0x0000
    74c4:	20001264 	.word	0x20001264
    74c8:	20000110 	.word	0x20000110

000074cc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    74cc:	4801      	ldr	r0, [pc, #4]	; (74d4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q+0x8>)
    74ce:	6880      	ldr	r0, [r0, #8]
    74d0:	4770      	bx	lr
    74d2:	0000      	.short	0x0000
    74d4:	20001264 	.word	0x20001264

000074d8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    74d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74da:	4606      	mov	r6, r0
    74dc:	481d      	ldr	r0, [pc, #116]	; (7554 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x7c>)
    74de:	8842      	ldrh	r2, [r0, #2]
    74e0:	f3c2 1100 	ubfx	r1, r2, #4, #1
    74e4:	2900      	cmp	r1, #0
    74e6:	bf04      	itt	eq
    74e8:	f3c2 01c0 	ubfxeq	r1, r2, #3, #1
    74ec:	2900      	cmpeq	r1, #0
    74ee:	d12a      	bne.n	7546 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x6e>
    74f0:	4b19      	ldr	r3, [pc, #100]	; (7558 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x80>)
    74f2:	6887      	ldr	r7, [r0, #8]
    74f4:	f012 0f18 	tst.w	r2, #24
    74f8:	e9d3 1503 	ldrd	r1, r5, [r3, #12]
    74fc:	699c      	ldr	r4, [r3, #24]
    74fe:	7903      	ldrb	r3, [r0, #4]
    7500:	7940      	ldrb	r0, [r0, #5]
    7502:	f363 0407 	bfi	r4, r3, #0, #8
    7506:	f362 050f 	bfi	r5, r2, #0, #16
    750a:	f360 240f 	bfi	r4, r0, #8, #8
    750e:	d11a      	bne.n	7546 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x6e>
    7510:	b1d9      	cbz	r1, 754a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x72>
    7512:	4608      	mov	r0, r1
    7514:	f009 feee 	bl	112f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7518:	b2e1      	uxtb	r1, r4
    751a:	f3c4 2407 	ubfx	r4, r4, #8, #8
    751e:	2904      	cmp	r1, #4
    7520:	bf08      	it	eq
    7522:	2108      	moveq	r1, #8
    7524:	2c04      	cmp	r4, #4
    7526:	bf08      	it	eq
    7528:	2408      	moveq	r4, #8
    752a:	f009 fe8b 	bl	11244 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x324>
    752e:	b2aa      	uxth	r2, r5
    7530:	9200      	str	r2, [sp, #0]
    7532:	4601      	mov	r1, r0
    7534:	2300      	movs	r3, #0
    7536:	4622      	mov	r2, r4
    7538:	4630      	mov	r0, r6
    753a:	f009 fd0e 	bl	10f5a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    753e:	4287      	cmp	r7, r0
    7540:	bf3c      	itt	cc
    7542:	2000      	movcc	r0, #0
    7544:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
    7546:	2001      	movs	r0, #1
    7548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    754a:	f240 3183 	movw	r1, #899	; 0x383
    754e:	202d      	movs	r0, #45	; 0x2d
    7550:	f7fc fb5e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7554:	20001264 	.word	0x20001264
    7558:	000087f0 	.word	0x000087f0

0000755c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    755c:	b538      	push	{r3, r4, r5, lr}
    755e:	4c10      	ldr	r4, [pc, #64]	; (75a0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x44>)
    7560:	f104 0018 	add.w	r0, r4, #24
    7564:	f009 fec6 	bl	112f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7568:	8861      	ldrh	r1, [r4, #2]
    756a:	f3c1 1200 	ubfx	r2, r1, #4, #1
    756e:	b122      	cbz	r2, 757a <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x1e>
    7570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7574:	2228      	movs	r2, #40	; 0x28
    7576:	f001 b967 	b.w	8848 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    757a:	f3c1 0140 	ubfx	r1, r1, #1, #1
    757e:	2900      	cmp	r1, #0
    7580:	bf14      	ite	ne
    7582:	8e65      	ldrhne	r5, [r4, #50]	; 0x32
    7584:	8e25      	ldrheq	r5, [r4, #48]	; 0x30
    7586:	7921      	ldrb	r1, [r4, #4]
    7588:	f009 fe5c 	bl	11244 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x324>
    758c:	8862      	ldrh	r2, [r4, #2]
    758e:	9200      	str	r2, [sp, #0]
    7590:	4601      	mov	r1, r0
    7592:	7962      	ldrb	r2, [r4, #5]
    7594:	2301      	movs	r3, #1
    7596:	4628      	mov	r0, r5
    7598:	f009 fcdf 	bl	10f5a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    759c:	bd38      	pop	{r3, r4, r5, pc}
    759e:	0000      	.short	0x0000
    75a0:	20001264 	.word	0x20001264

000075a4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    75a4:	4904      	ldr	r1, [pc, #16]	; (75b8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0x14>)
    75a6:	2200      	movs	r2, #0
    75a8:	624a      	str	r2, [r1, #36]	; 0x24
    75aa:	884b      	ldrh	r3, [r1, #2]
    75ac:	2b1d      	cmp	r3, #29
    75ae:	bf0c      	ite	eq
    75b0:	734a      	strbeq	r2, [r1, #13]
    75b2:	7348      	strbne	r0, [r1, #13]
    75b4:	4770      	bx	lr
    75b6:	0000      	.short	0x0000
    75b8:	20001264 	.word	0x20001264

000075bc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    75bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75c0:	f8df 824c 	ldr.w	r8, [pc, #588]	; 7810 <__kernel_ram_size+0xe0>
    75c4:	b085      	sub	sp, #20
    75c6:	4604      	mov	r4, r0
    75c8:	f8d8 7000 	ldr.w	r7, [r8]
    75cc:	f8d8 6004 	ldr.w	r6, [r8, #4]
    75d0:	f8d8 0008 	ldr.w	r0, [r8, #8]
    75d4:	f8d8 a00c 	ldr.w	sl, [r8, #12]
    75d8:	f8d8 9010 	ldr.w	r9, [r8, #16]
    75dc:	f8d8 0014 	ldr.w	r0, [r8, #20]
    75e0:	9003      	str	r0, [sp, #12]
    75e2:	a801      	add	r0, sp, #4
    75e4:	f009 fefe 	bl	113e4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    75e8:	7aa0      	ldrb	r0, [r4, #10]
    75ea:	f360 4917 	bfi	r9, r0, #16, #8
    75ee:	7820      	ldrb	r0, [r4, #0]
    75f0:	f360 0707 	bfi	r7, r0, #0, #8
    75f4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    75f8:	f8ad 0000 	strh.w	r0, [sp]
    75fc:	f89d 0000 	ldrb.w	r0, [sp]
    7600:	f000 0101 	and.w	r1, r0, #1
    7604:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7608:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    760c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7610:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7614:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7618:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    761c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7620:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7624:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7628:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    762c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7630:	ea41 1b80 	orr.w	fp, r1, r0, lsl #6
    7634:	7d20      	ldrb	r0, [r4, #20]
    7636:	f36b 471f 	bfi	r7, fp, #16, #16
    763a:	2801      	cmp	r0, #1
    763c:	bf18      	it	ne
    763e:	2802      	cmpne	r0, #2
    7640:	d003      	beq.n	764a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x8e>
    7642:	2803      	cmp	r0, #3
    7644:	bf08      	it	eq
    7646:	2008      	moveq	r0, #8
    7648:	d10e      	bne.n	7668 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xac>
    764a:	7861      	ldrb	r1, [r4, #1]
    764c:	f360 0607 	bfi	r6, r0, #0, #8
    7650:	f011 0f10 	tst.w	r1, #16
    7654:	d10f      	bne.n	7676 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xba>
    7656:	7da1      	ldrb	r1, [r4, #22]
    7658:	2901      	cmp	r1, #1
    765a:	bf18      	it	ne
    765c:	2902      	cmpne	r1, #2
    765e:	d008      	beq.n	7672 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb6>
    7660:	2903      	cmp	r1, #3
    7662:	bf08      	it	eq
    7664:	2108      	moveq	r1, #8
    7666:	d004      	beq.n	7672 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb6>
    7668:	f240 21a1 	movw	r1, #673	; 0x2a1
    766c:	2006      	movs	r0, #6
    766e:	f7fc facf 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7672:	f361 260f 	bfi	r6, r1, #8, #8
    7676:	f3ca 4107 	ubfx	r1, sl, #16, #8
    767a:	2901      	cmp	r1, #1
    767c:	d008      	beq.n	7690 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xd4>
    767e:	7a61      	ldrb	r1, [r4, #9]
    7680:	a801      	add	r0, sp, #4
    7682:	f009 fe8a 	bl	1139a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7686:	7d20      	ldrb	r0, [r4, #20]
    7688:	2101      	movs	r1, #1
    768a:	2802      	cmp	r0, #2
    768c:	d10f      	bne.n	76ae <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf2>
    768e:	e00b      	b.n	76a8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7690:	2104      	movs	r1, #4
    7692:	2808      	cmp	r0, #8
    7694:	bf08      	it	eq
    7696:	f361 0607 	bfieq	r6, r1, #0, #8
    769a:	f3c6 2007 	ubfx	r0, r6, #8, #8
    769e:	2808      	cmp	r0, #8
    76a0:	bf08      	it	eq
    76a2:	f361 260f 	bfieq	r6, r1, #8, #8
    76a6:	e7ea      	b.n	767e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc2>
    76a8:	7d60      	ldrb	r0, [r4, #21]
    76aa:	1c40      	adds	r0, r0, #1
    76ac:	b2c1      	uxtb	r1, r0
    76ae:	7ea0      	ldrb	r0, [r4, #26]
    76b0:	1c40      	adds	r0, r0, #1
    76b2:	b2c2      	uxtb	r2, r0
    76b4:	a801      	add	r0, sp, #4
    76b6:	f009 fe06 	bl	112c6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    76ba:	0c38      	lsrs	r0, r7, #16
    76bc:	f010 0f08 	tst.w	r0, #8
    76c0:	f04f 0500 	mov.w	r5, #0
    76c4:	d125      	bne.n	7712 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x156>
    76c6:	a801      	add	r0, sp, #4
    76c8:	f009 fe14 	bl	112f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    76cc:	7861      	ldrb	r1, [r4, #1]
    76ce:	f011 0f10 	tst.w	r1, #16
    76d2:	d046      	beq.n	7762 <__kernel_ram_size+0x32>
    76d4:	2228      	movs	r2, #40	; 0x28
    76d6:	4659      	mov	r1, fp
    76d8:	f001 f8b6 	bl	8848 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    76dc:	f240 2171 	movw	r1, #625	; 0x271
    76e0:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    76e4:	fbb0 f0f1 	udiv	r0, r0, r1
    76e8:	4341      	muls	r1, r0
    76ea:	f8d4 0002 	ldr.w	r0, [r4, #2]
    76ee:	f240 2271 	movw	r2, #625	; 0x271
    76f2:	0a00      	lsrs	r0, r0, #8
    76f4:	4350      	muls	r0, r2
    76f6:	f8d4 2005 	ldr.w	r2, [r4, #5]
    76fa:	f240 2371 	movw	r3, #625	; 0x271
    76fe:	0a12      	lsrs	r2, r2, #8
    7700:	fb02 f503 	mul.w	r5, r2, r3
    7704:	4281      	cmp	r1, r0
    7706:	bf98      	it	ls
    7708:	4605      	movls	r5, r0
    770a:	d902      	bls.n	7712 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x156>
    770c:	42a9      	cmp	r1, r5
    770e:	bf98      	it	ls
    7710:	460d      	movls	r5, r1
    7712:	7ca0      	ldrb	r0, [r4, #18]
    7714:	f360 290f 	bfi	r9, r0, #8, #8
    7718:	7e20      	ldrb	r0, [r4, #24]
    771a:	2801      	cmp	r0, #1
    771c:	bf18      	it	ne
    771e:	2000      	movne	r0, #0
    7720:	f360 0a07 	bfi	sl, r0, #0, #8
    7724:	f898 0060 	ldrb.w	r0, [r8, #96]	; 0x60
    7728:	2800      	cmp	r0, #0
    772a:	bf18      	it	ne
    772c:	f8b8 0062 	ldrhne.w	r0, [r8, #98]	; 0x62
    7730:	4937      	ldr	r1, [pc, #220]	; (7810 <__kernel_ram_size+0xe0>)
    7732:	f891 1061 	ldrb.w	r1, [r1, #97]	; 0x61
    7736:	2900      	cmp	r1, #0
    7738:	bf1c      	itt	ne
    773a:	4935      	ldrne	r1, [pc, #212]	; (7810 <__kernel_ram_size+0xe0>)
    773c:	f8b1 1064 	ldrhne.w	r1, [r1, #100]	; 0x64
    7740:	4288      	cmp	r0, r1
    7742:	bf38      	it	cc
    7744:	4608      	movcc	r0, r1
    7746:	b3d0      	cbz	r0, 77be <__kernel_ram_size+0x8e>
    7748:	a901      	add	r1, sp, #4
    774a:	0c3a      	lsrs	r2, r7, #16
    774c:	0a33      	lsrs	r3, r6, #8
    774e:	f366 0807 	bfi	r8, r6, #0, #8
    7752:	f362 0b0f 	bfi	fp, r2, #0, #16
    7756:	f363 280f 	bfi	r8, r3, #8, #8
    775a:	f012 0f18 	tst.w	r2, #24
    775e:	d00d      	beq.n	777c <__kernel_ram_size+0x4c>
    7760:	e02d      	b.n	77be <__kernel_ram_size+0x8e>
    7762:	b2f1      	uxtb	r1, r6
    7764:	f009 fd6e 	bl	11244 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x324>
    7768:	0c3a      	lsrs	r2, r7, #16
    776a:	9200      	str	r2, [sp, #0]
    776c:	4601      	mov	r1, r0
    776e:	f3c6 2207 	ubfx	r2, r6, #8, #8
    7772:	2301      	movs	r3, #1
    7774:	20fb      	movs	r0, #251	; 0xfb
    7776:	f009 fbf0 	bl	10f5a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    777a:	e7af      	b.n	76dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x120>
    777c:	9004      	str	r0, [sp, #16]
    777e:	4608      	mov	r0, r1
    7780:	f009 fdb8 	bl	112f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7784:	f008 01ff 	and.w	r1, r8, #255	; 0xff
    7788:	f3c8 2807 	ubfx	r8, r8, #8, #8
    778c:	2904      	cmp	r1, #4
    778e:	bf08      	it	eq
    7790:	2108      	moveq	r1, #8
    7792:	f1b8 0f04 	cmp.w	r8, #4
    7796:	bf08      	it	eq
    7798:	f04f 0808 	moveq.w	r8, #8
    779c:	f009 fd52 	bl	11244 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x324>
    77a0:	4601      	mov	r1, r0
    77a2:	fa1f f08b 	uxth.w	r0, fp
    77a6:	9000      	str	r0, [sp, #0]
    77a8:	2300      	movs	r3, #0
    77aa:	4642      	mov	r2, r8
    77ac:	9804      	ldr	r0, [sp, #16]
    77ae:	f009 fbd4 	bl	10f5a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    77b2:	4285      	cmp	r5, r0
    77b4:	bf3e      	ittt	cc
    77b6:	2045      	movcc	r0, #69	; 0x45
    77b8:	b005      	addcc	sp, #20
    77ba:	e8bd 8ff0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    77be:	4814      	ldr	r0, [pc, #80]	; (7810 <__kernel_ram_size+0xe0>)
    77c0:	6007      	str	r7, [r0, #0]
    77c2:	6046      	str	r6, [r0, #4]
    77c4:	6085      	str	r5, [r0, #8]
    77c6:	f8c0 a00c 	str.w	sl, [r0, #12]
    77ca:	9903      	ldr	r1, [sp, #12]
    77cc:	f8c0 9010 	str.w	r9, [r0, #16]
    77d0:	6141      	str	r1, [r0, #20]
    77d2:	9901      	ldr	r1, [sp, #4]
    77d4:	6181      	str	r1, [r0, #24]
    77d6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    77da:	8381      	strh	r1, [r0, #28]
    77dc:	7ae1      	ldrb	r1, [r4, #11]
    77de:	2900      	cmp	r1, #0
    77e0:	bf16      	itet	ne
    77e2:	2902      	cmpne	r1, #2
    77e4:	2100      	moveq	r1, #0
    77e6:	2101      	movne	r1, #1
    77e8:	f880 1043 	strb.w	r1, [r0, #67]	; 0x43
    77ec:	68e1      	ldr	r1, [r4, #12]
    77ee:	6441      	str	r1, [r0, #68]	; 0x44
    77f0:	8a21      	ldrh	r1, [r4, #16]
    77f2:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    77f6:	7de1      	ldrb	r1, [r4, #23]
    77f8:	f890 2020 	ldrb.w	r2, [r0, #32]
    77fc:	f361 1207 	bfi	r2, r1, #4, #4
    7800:	f880 2020 	strb.w	r2, [r0, #32]
    7804:	b005      	add	sp, #20
    7806:	f04f 0000 	mov.w	r0, #0
    780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    780e:	0000      	.short	0x0000
    7810:	20001264 	.word	0x20001264

00007814 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7814:	b570      	push	{r4, r5, r6, lr}
    7816:	491b      	ldr	r1, [pc, #108]	; (7884 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x70>)
    7818:	2400      	movs	r4, #0
    781a:	700c      	strb	r4, [r1, #0]
    781c:	4d1a      	ldr	r5, [pc, #104]	; (7888 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x74>)
    781e:	6028      	str	r0, [r5, #0]
    7820:	7808      	ldrb	r0, [r1, #0]
    7822:	b120      	cbz	r0, 782e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    7824:	f240 21dd 	movw	r1, #733	; 0x2dd
    7828:	202d      	movs	r0, #45	; 0x2d
    782a:	f7fc f9f1 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    782e:	22c8      	movs	r2, #200	; 0xc8
    7830:	2100      	movs	r1, #0
    7832:	4816      	ldr	r0, [pc, #88]	; (788c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    7834:	f007 fc2a 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7838:	4814      	ldr	r0, [pc, #80]	; (788c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    783a:	f8c0 40c8 	str.w	r4, [r0, #200]	; 0xc8
    783e:	f8c0 40cc 	str.w	r4, [r0, #204]	; 0xcc
    7842:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
    7846:	f8c0 40d4 	str.w	r4, [r0, #212]	; 0xd4
    784a:	21ff      	movs	r1, #255	; 0xff
    784c:	f800 1b21 	strb.w	r1, [r0], #33
    7850:	217f      	movs	r1, #127	; 0x7f
    7852:	f800 191f 	strb.w	r1, [r0], #-31
    7856:	2113      	movs	r1, #19
    7858:	f820 1b5e 	strh.w	r1, [r0], #94
    785c:	2101      	movs	r1, #1
    785e:	f800 1950 	strb.w	r1, [r0], #-80
    7862:	f800 4b08 	strb.w	r4, [r0], #8
    7866:	f009 fdbd 	bl	113e4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    786a:	f005 fe55 	bl	d518 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    786e:	f005 fc59 	bl	d124 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7872:	68a8      	ldr	r0, [r5, #8]
    7874:	2800      	cmp	r0, #0
    7876:	bf18      	it	ne
    7878:	bd70      	popne	{r4, r5, r6, pc}
    787a:	f44f 7138 	mov.w	r1, #736	; 0x2e0
    787e:	202d      	movs	r0, #45	; 0x2d
    7880:	f7fc f9c6 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7884:	2000132c 	.word	0x2000132c
    7888:	20000110 	.word	0x20000110
    788c:	20001264 	.word	0x20001264

00007890 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    7890:	4907      	ldr	r1, [pc, #28]	; (78b0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x20>)
    7892:	8848      	ldrh	r0, [r1, #2]
    7894:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7898:	b93a      	cbnz	r2, 78aa <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    789a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    789e:	b120      	cbz	r0, 78aa <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    78a0:	f8b1 0064 	ldrh.w	r0, [r1, #100]	; 0x64
    78a4:	2800      	cmp	r0, #0
    78a6:	bf08      	it	eq
    78a8:	4770      	bxeq	lr
    78aa:	2001      	movs	r0, #1
    78ac:	4770      	bx	lr
    78ae:	0000      	.short	0x0000
    78b0:	20001264 	.word	0x20001264

000078b4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
    78b4:	4807      	ldr	r0, [pc, #28]	; (78d4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x20>)
    78b6:	8840      	ldrh	r0, [r0, #2]
    78b8:	f3c0 1100 	ubfx	r1, r0, #4, #1
    78bc:	b119      	cbz	r1, 78c6 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
    78be:	f3c0 0080 	ubfx	r0, r0, #2, #1
    78c2:	b128      	cbz	r0, 78d0 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    78c4:	e002      	b.n	78cc <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x18>
    78c6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    78ca:	b108      	cbz	r0, 78d0 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    78cc:	2000      	movs	r0, #0
    78ce:	4770      	bx	lr
    78d0:	2001      	movs	r0, #1
    78d2:	4770      	bx	lr
    78d4:	20001264 	.word	0x20001264

000078d8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    78d8:	4802      	ldr	r0, [pc, #8]	; (78e4 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ+0xc>)
    78da:	7880      	ldrb	r0, [r0, #2]
    78dc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    78e0:	4770      	bx	lr
    78e2:	0000      	.short	0x0000
    78e4:	20001264 	.word	0x20001264

000078e8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    78e8:	4802      	ldr	r0, [pc, #8]	; (78f4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ+0xc>)
    78ea:	7880      	ldrb	r0, [r0, #2]
    78ec:	f000 0001 	and.w	r0, r0, #1
    78f0:	4770      	bx	lr
    78f2:	0000      	.short	0x0000
    78f4:	20001264 	.word	0x20001264

000078f8 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
    78f8:	4803      	ldr	r0, [pc, #12]	; (7908 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ+0x10>)
    78fa:	8840      	ldrh	r0, [r0, #2]
    78fc:	2809      	cmp	r0, #9
    78fe:	bf0c      	ite	eq
    7900:	2001      	moveq	r0, #1
    7902:	2000      	movne	r0, #0
    7904:	4770      	bx	lr
    7906:	0000      	.short	0x0000
    7908:	20001264 	.word	0x20001264

0000790c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    790c:	4802      	ldr	r0, [pc, #8]	; (7918 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI+0xc>)
    790e:	7880      	ldrb	r0, [r0, #2]
    7910:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7914:	4770      	bx	lr
    7916:	0000      	.short	0x0000
    7918:	20001264 	.word	0x20001264

0000791c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    791c:	4802      	ldr	r0, [pc, #8]	; (7928 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY+0xc>)
    791e:	7880      	ldrb	r0, [r0, #2]
    7920:	f3c0 1000 	ubfx	r0, r0, #4, #1
    7924:	4770      	bx	lr
    7926:	0000      	.short	0x0000
    7928:	20001264 	.word	0x20001264

0000792c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    792c:	4802      	ldr	r0, [pc, #8]	; (7938 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ+0xc>)
    792e:	7880      	ldrb	r0, [r0, #2]
    7930:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7934:	4770      	bx	lr
    7936:	0000      	.short	0x0000
    7938:	20001264 	.word	0x20001264

0000793c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    793c:	4902      	ldr	r1, [pc, #8]	; (7948 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    793e:	4801      	ldr	r0, [pc, #4]	; (7944 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7940:	6088      	str	r0, [r1, #8]
    7942:	4770      	bx	lr
    7944:	00008830 	.word	0x00008830
    7948:	20000110 	.word	0x20000110

0000794c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    794c:	4801      	ldr	r0, [pc, #4]	; (7954 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY+0x8>)
    794e:	f990 0010 	ldrsb.w	r0, [r0, #16]
    7952:	4770      	bx	lr
    7954:	20001264 	.word	0x20001264

00007958 <sym_YU3HMHUZPM7PR5DUQBMKDUTAWNSSB25QLMUQA6Y>:
    7958:	4901      	ldr	r1, [pc, #4]	; (7960 <sym_YU3HMHUZPM7PR5DUQBMKDUTAWNSSB25QLMUQA6Y+0x8>)
    795a:	7408      	strb	r0, [r1, #16]
    795c:	4770      	bx	lr
    795e:	0000      	.short	0x0000
    7960:	20001264 	.word	0x20001264

00007964 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    7964:	4903      	ldr	r1, [pc, #12]	; (7974 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0x10>)
    7966:	7809      	ldrb	r1, [r1, #0]
    7968:	4281      	cmp	r1, r0
    796a:	bf0c      	ite	eq
    796c:	2001      	moveq	r0, #1
    796e:	2000      	movne	r0, #0
    7970:	4770      	bx	lr
    7972:	0000      	.short	0x0000
    7974:	20001264 	.word	0x20001264

00007978 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7978:	4801      	ldr	r0, [pc, #4]	; (7980 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0x8>)
    797a:	6880      	ldr	r0, [r0, #8]
    797c:	6800      	ldr	r0, [r0, #0]
    797e:	4700      	bx	r0
    7980:	20000110 	.word	0x20000110

00007984 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7984:	4816      	ldr	r0, [pc, #88]	; (79e0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x5c>)
    7986:	b510      	push	{r4, lr}
    7988:	7800      	ldrb	r0, [r0, #0]
    798a:	2800      	cmp	r0, #0
    798c:	bf18      	it	ne
    798e:	240c      	movne	r4, #12
    7990:	d001      	beq.n	7996 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    7992:	4620      	mov	r0, r4
    7994:	bd10      	pop	{r4, pc}
    7996:	2400      	movs	r4, #0
    7998:	22c8      	movs	r2, #200	; 0xc8
    799a:	4621      	mov	r1, r4
    799c:	4811      	ldr	r0, [pc, #68]	; (79e4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    799e:	f007 fb75 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    79a2:	4910      	ldr	r1, [pc, #64]	; (79e4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    79a4:	2000      	movs	r0, #0
    79a6:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    79aa:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    79ae:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    79b2:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
    79b6:	22ff      	movs	r2, #255	; 0xff
    79b8:	700a      	strb	r2, [r1, #0]
    79ba:	227f      	movs	r2, #127	; 0x7f
    79bc:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    79c0:	2213      	movs	r2, #19
    79c2:	804a      	strh	r2, [r1, #2]
    79c4:	2201      	movs	r2, #1
    79c6:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
    79ca:	7408      	strb	r0, [r1, #16]
    79cc:	f101 0018 	add.w	r0, r1, #24
    79d0:	f009 fd08 	bl	113e4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    79d4:	f005 fda0 	bl	d518 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    79d8:	f005 fba4 	bl	d124 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    79dc:	e7d9      	b.n	7992 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    79de:	0000      	.short	0x0000
    79e0:	2000132c 	.word	0x2000132c
    79e4:	20001264 	.word	0x20001264

000079e8 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    79e8:	4801      	ldr	r0, [pc, #4]	; (79f0 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI+0x8>)
    79ea:	7b00      	ldrb	r0, [r0, #12]
    79ec:	4770      	bx	lr
    79ee:	0000      	.short	0x0000
    79f0:	20001264 	.word	0x20001264

000079f4 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    79f4:	4801      	ldr	r0, [pc, #4]	; (79fc <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x8>)
    79f6:	7940      	ldrb	r0, [r0, #5]
    79f8:	4770      	bx	lr
    79fa:	0000      	.short	0x0000
    79fc:	20001264 	.word	0x20001264

00007a00 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    7a00:	4901      	ldr	r1, [pc, #4]	; (7a08 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY+0x8>)
    7a02:	6048      	str	r0, [r1, #4]
    7a04:	4770      	bx	lr
    7a06:	0000      	.short	0x0000
    7a08:	20000110 	.word	0x20000110

00007a0c <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    7a0c:	4a05      	ldr	r2, [pc, #20]	; (7a24 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y+0x18>)
    7a0e:	2300      	movs	r3, #0
    7a10:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
    7a14:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62
    7a18:	2001      	movs	r0, #1
    7a1a:	6591      	str	r1, [r2, #88]	; 0x58
    7a1c:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
    7a20:	4770      	bx	lr
    7a22:	0000      	.short	0x0000
    7a24:	20001264 	.word	0x20001264

00007a28 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    7a28:	4a05      	ldr	r2, [pc, #20]	; (7a40 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA+0x18>)
    7a2a:	2300      	movs	r3, #0
    7a2c:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    7a30:	65d1      	str	r1, [r2, #92]	; 0x5c
    7a32:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    7a36:	2001      	movs	r0, #1
    7a38:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    7a3c:	4770      	bx	lr
    7a3e:	0000      	.short	0x0000
    7a40:	20001264 	.word	0x20001264

00007a44 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7a44:	4805      	ldr	r0, [pc, #20]	; (7a5c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    7a46:	b510      	push	{r4, lr}
    7a48:	7800      	ldrb	r0, [r0, #0]
    7a4a:	2801      	cmp	r0, #1
    7a4c:	bf1c      	itt	ne
    7a4e:	2000      	movne	r0, #0
    7a50:	bd10      	popne	{r4, pc}
    7a52:	f000 fd19 	bl	8488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    7a56:	2000      	movs	r0, #0
    7a58:	bd10      	pop	{r4, pc}
    7a5a:	0000      	.short	0x0000
    7a5c:	2000132c 	.word	0x2000132c

00007a60 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    7a60:	4901      	ldr	r1, [pc, #4]	; (7a68 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY+0x8>)
    7a62:	f881 0054 	strb.w	r0, [r1, #84]	; 0x54
    7a66:	4770      	bx	lr
    7a68:	20001264 	.word	0x20001264

00007a6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7a6c:	4904      	ldr	r1, [pc, #16]	; (7a80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
    7a6e:	4803      	ldr	r0, [pc, #12]	; (7a7c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
    7a70:	6008      	str	r0, [r1, #0]
    7a72:	4905      	ldr	r1, [pc, #20]	; (7a88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
    7a74:	4803      	ldr	r0, [pc, #12]	; (7a84 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
    7a76:	6008      	str	r0, [r1, #0]
    7a78:	4770      	bx	lr
    7a7a:	0000      	.short	0x0000
    7a7c:	000086d1 	.word	0x000086d1
    7a80:	20000120 	.word	0x20000120
    7a84:	000085fd 	.word	0x000085fd
    7a88:	2000011c 	.word	0x2000011c

00007a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    7a8c:	b570      	push	{r4, r5, r6, lr}
    7a8e:	4c10      	ldr	r4, [pc, #64]	; (7ad0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x44>)
    7a90:	4e10      	ldr	r6, [pc, #64]	; (7ad4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x48>)
    7a92:	2501      	movs	r5, #1
    7a94:	78a0      	ldrb	r0, [r4, #2]
    7a96:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7a9a:	b130      	cbz	r0, 7aaa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    7a9c:	223c      	movs	r2, #60	; 0x3c
    7a9e:	21ff      	movs	r1, #255	; 0xff
    7aa0:	6870      	ldr	r0, [r6, #4]
    7aa2:	f000 fd2f 	bl	8504 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x504>
    7aa6:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    7aaa:	78a0      	ldrb	r0, [r4, #2]
    7aac:	f010 0f01 	tst.w	r0, #1
    7ab0:	bf1c      	itt	ne
    7ab2:	6870      	ldrne	r0, [r6, #4]
    7ab4:	8801      	ldrhne	r1, [r0, #0]
    7ab6:	f04f 023c 	mov.w	r2, #60	; 0x3c
    7aba:	bf12      	itee	ne
    7abc:	2001      	movne	r0, #1
    7abe:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    7ac2:	2000      	moveq	r0, #0
    7ac4:	f000 fc16 	bl	82f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    7ac8:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    7acc:	bd70      	pop	{r4, r5, r6, pc}
    7ace:	0000      	.short	0x0000
    7ad0:	20001264 	.word	0x20001264
    7ad4:	20000110 	.word	0x20000110

00007ad8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    7ad8:	4802      	ldr	r0, [pc, #8]	; (7ae4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc>)
    7ada:	7c40      	ldrb	r0, [r0, #17]
    7adc:	2800      	cmp	r0, #0
    7ade:	bf18      	it	ne
    7ae0:	2001      	movne	r0, #1
    7ae2:	4770      	bx	lr
    7ae4:	20001264 	.word	0x20001264
    7ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7aec:	4e68      	ldr	r6, [pc, #416]	; (7c90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1b8>)
    7aee:	0007      	movs	r7, r0
    7af0:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    7af4:	d027      	beq.n	7b46 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x6e>
    7af6:	f104 0018 	add.w	r0, r4, #24
    7afa:	f009 fc50 	bl	1139e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7afe:	b9c0      	cbnz	r0, 7b32 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5a>
    7b00:	78a0      	ldrb	r0, [r4, #2]
    7b02:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7b06:	2800      	cmp	r0, #0
    7b08:	d039      	beq.n	7b7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa6>
    7b0a:	f104 0018 	add.w	r0, r4, #24
    7b0e:	f009 fbf1 	bl	112f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7b12:	4605      	mov	r5, r0
    7b14:	f104 0018 	add.w	r0, r4, #24
    7b18:	f009 fc41 	bl	1139e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7b1c:	1a28      	subs	r0, r5, r0
    7b1e:	b2c0      	uxtb	r0, r0
    7b20:	f009 fc6d 	bl	113fe <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7b24:	6871      	ldr	r1, [r6, #4]
    7b26:	4408      	add	r0, r1
    7b28:	6070      	str	r0, [r6, #4]
    7b2a:	f104 0018 	add.w	r0, r4, #24
    7b2e:	f009 fc61 	bl	113f4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7b32:	f104 0018 	add.w	r0, r4, #24
    7b36:	f009 fbed 	bl	11314 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7b3a:	f006 fc95 	bl	e468 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7b3e:	7921      	ldrb	r1, [r4, #4]
    7b40:	2025      	movs	r0, #37	; 0x25
    7b42:	f006 fc6d 	bl	e420 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7b46:	4d53      	ldr	r5, [pc, #332]	; (7c94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1bc>)
    7b48:	f894 804a 	ldrb.w	r8, [r4, #74]	; 0x4a
    7b4c:	2100      	movs	r1, #0
    7b4e:	6828      	ldr	r0, [r5, #0]
    7b50:	8001      	strh	r1, [r0, #0]
    7b52:	7801      	ldrb	r1, [r0, #0]
    7b54:	f021 0120 	bic.w	r1, r1, #32
    7b58:	7001      	strb	r1, [r0, #0]
    7b5a:	8861      	ldrh	r1, [r4, #2]
    7b5c:	2913      	cmp	r1, #19
    7b5e:	d02b      	beq.n	7bb8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    7b60:	dc11      	bgt.n	7b86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    7b62:	2910      	cmp	r1, #16
    7b64:	bf08      	it	eq
    7b66:	2102      	moveq	r1, #2
    7b68:	d039      	beq.n	7bde <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7b6a:	2912      	cmp	r1, #18
    7b6c:	bf08      	it	eq
    7b6e:	2106      	moveq	r1, #6
    7b70:	d035      	beq.n	7bde <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7b72:	bf00      	nop
    7b74:	f240 610e 	movw	r1, #1550	; 0x60e
    7b78:	202d      	movs	r0, #45	; 0x2d
    7b7a:	f7fc f849 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b82:	f000 bc81 	b.w	8488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    7b86:	2915      	cmp	r1, #21
    7b88:	bf18      	it	ne
    7b8a:	291d      	cmpne	r1, #29
    7b8c:	d1f2      	bne.n	7b74 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9c>
    7b8e:	f04f 0101 	mov.w	r1, #1
    7b92:	f009 f84c 	bl	10c2e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7b96:	6828      	ldr	r0, [r5, #0]
    7b98:	f1b8 0f00 	cmp.w	r8, #0
    7b9c:	7801      	ldrb	r1, [r0, #0]
    7b9e:	f041 0120 	orr.w	r1, r1, #32
    7ba2:	7001      	strb	r1, [r0, #0]
    7ba4:	d011      	beq.n	7bca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    7ba6:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    7baa:	f009 f862 	bl	10c72 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7bae:	2101      	movs	r1, #1
    7bb0:	6828      	ldr	r0, [r5, #0]
    7bb2:	f009 f865 	bl	10c80 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7bb6:	e014      	b.n	7be2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7bb8:	2100      	movs	r1, #0
    7bba:	f009 f838 	bl	10c2e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bbe:	6828      	ldr	r0, [r5, #0]
    7bc0:	7801      	ldrb	r1, [r0, #0]
    7bc2:	f041 0120 	orr.w	r1, r1, #32
    7bc6:	7001      	strb	r1, [r0, #0]
    7bc8:	e00b      	b.n	7be2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7bca:	f104 0144 	add.w	r1, r4, #68	; 0x44
    7bce:	f009 f850 	bl	10c72 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7bd2:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
    7bd6:	6828      	ldr	r0, [r5, #0]
    7bd8:	f009 f852 	bl	10c80 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7bdc:	e001      	b.n	7be2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7bde:	f009 f826 	bl	10c2e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7be2:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7be6:	6828      	ldr	r0, [r5, #0]
    7be8:	f009 f853 	bl	10c92 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7bec:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7bf0:	6828      	ldr	r0, [r5, #0]
    7bf2:	f009 f855 	bl	10ca0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7bf6:	8860      	ldrh	r0, [r4, #2]
    7bf8:	281d      	cmp	r0, #29
    7bfa:	bf18      	it	ne
    7bfc:	2815      	cmpne	r0, #21
    7bfe:	d004      	beq.n	7c0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7c00:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    7c02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7c04:	6828      	ldr	r0, [r5, #0]
    7c06:	f008 ffba 	bl	10b7e <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7c0a:	b1ef      	cbz	r7, 7c48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x170>
    7c0c:	f104 0018 	add.w	r0, r4, #24
    7c10:	68b7      	ldr	r7, [r6, #8]
    7c12:	f009 fb6f 	bl	112f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7c16:	4680      	mov	r8, r0
    7c18:	f104 0018 	add.w	r0, r4, #24
    7c1c:	f009 fbbf 	bl	1139e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7c20:	eba8 0000 	sub.w	r0, r8, r0
    7c24:	1e40      	subs	r0, r0, #1
    7c26:	b2c0      	uxtb	r0, r0
    7c28:	8861      	ldrh	r1, [r4, #2]
    7c2a:	2228      	movs	r2, #40	; 0x28
    7c2c:	f000 fe32 	bl	8894 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7c30:	19c1      	adds	r1, r0, r7
    7c32:	78a0      	ldrb	r0, [r4, #2]
    7c34:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7c38:	2800      	cmp	r0, #0
    7c3a:	bf1c      	itt	ne
    7c3c:	6870      	ldrne	r0, [r6, #4]
    7c3e:	4401      	addne	r1, r0
    7c40:	7922      	ldrb	r2, [r4, #4]
    7c42:	2000      	movs	r0, #0
    7c44:	f006 f8e2 	bl	de0c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7c48:	6828      	ldr	r0, [r5, #0]
    7c4a:	f006 f893 	bl	dd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7c4e:	2004      	movs	r0, #4
    7c50:	7030      	strb	r0, [r6, #0]
    7c52:	8860      	ldrh	r0, [r4, #2]
    7c54:	2813      	cmp	r0, #19
    7c56:	d010      	beq.n	7c7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    7c58:	dc0b      	bgt.n	7c72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x19a>
    7c5a:	2810      	cmp	r0, #16
    7c5c:	bf08      	it	eq
    7c5e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c62:	2812      	cmp	r0, #18
    7c64:	d009      	beq.n	7c7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    7c66:	bf00      	nop
    7c68:	f640 417e 	movw	r1, #3198	; 0xc7e
    7c6c:	202d      	movs	r0, #45	; 0x2d
    7c6e:	f7fb ffcf 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c72:	2815      	cmp	r0, #21
    7c74:	bf18      	it	ne
    7c76:	281d      	cmpne	r0, #29
    7c78:	d1f6      	bne.n	7c68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x190>
    7c7a:	7923      	ldrb	r3, [r4, #4]
    7c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7c80:	f04f 0201 	mov.w	r2, #1
    7c84:	4611      	mov	r1, r2
    7c86:	f04f 0000 	mov.w	r0, #0
    7c8a:	f006 ba83 	b.w	e194 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7c8e:	0000      	.short	0x0000
    7c90:	2000132c 	.word	0x2000132c
    7c94:	20000110 	.word	0x20000110
    7c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c9c:	4e3d      	ldr	r6, [pc, #244]	; (7d94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2bc>)
    7c9e:	4681      	mov	r9, r0
    7ca0:	7830      	ldrb	r0, [r6, #0]
    7ca2:	2802      	cmp	r0, #2
    7ca4:	bf1c      	itt	ne
    7ca6:	7830      	ldrbne	r0, [r6, #0]
    7ca8:	2803      	cmpne	r0, #3
    7caa:	d005      	beq.n	7cb8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1e0>
    7cac:	f640 4105 	movw	r1, #3077	; 0xc05
    7cb0:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7cb4:	f7fb ffac 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cb8:	4d37      	ldr	r5, [pc, #220]	; (7d98 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c0>)
    7cba:	7b28      	ldrb	r0, [r5, #12]
    7cbc:	b150      	cbz	r0, 7cd4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1fc>
    7cbe:	f105 0021 	add.w	r0, r5, #33	; 0x21
    7cc2:	f006 fb31 	bl	e328 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7cc6:	2800      	cmp	r0, #0
    7cc8:	bf04      	itt	eq
    7cca:	207f      	moveq	r0, #127	; 0x7f
    7ccc:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    7cd0:	f006 fb0a 	bl	e2e8 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7cd4:	4c31      	ldr	r4, [pc, #196]	; (7d9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c4>)
    7cd6:	6820      	ldr	r0, [r4, #0]
    7cd8:	f008 ff07 	bl	10aea <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>
    7cdc:	4607      	mov	r7, r0
    7cde:	6860      	ldr	r0, [r4, #4]
    7ce0:	f04f 0800 	mov.w	r8, #0
    7ce4:	2800      	cmp	r0, #0
    7ce6:	bf18      	it	ne
    7ce8:	f890 806b 	ldrbne.w	r8, [r0, #107]	; 0x6b
    7cec:	f1b9 0f00 	cmp.w	r9, #0
    7cf0:	d03e      	beq.n	7d70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7cf2:	f005 ff71 	bl	dbd8 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    7cf6:	2800      	cmp	r0, #0
    7cf8:	d03a      	beq.n	7d70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7cfa:	2f05      	cmp	r7, #5
    7cfc:	d11b      	bne.n	7d36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7cfe:	6820      	ldr	r0, [r4, #0]
    7d00:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    7d04:	f000 001f 	and.w	r0, r0, #31
    7d08:	2810      	cmp	r0, #16
    7d0a:	d914      	bls.n	7d36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7d0c:	7be8      	ldrb	r0, [r5, #15]
    7d0e:	b190      	cbz	r0, 7d36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7d10:	20ff      	movs	r0, #255	; 0xff
    7d12:	f88d 0000 	strb.w	r0, [sp]
    7d16:	2701      	movs	r7, #1
    7d18:	4669      	mov	r1, sp
    7d1a:	2005      	movs	r0, #5
    7d1c:	f000 fb24 	bl	8368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    7d20:	b330      	cbz	r0, 7d70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d22:	f885 70a2 	strb.w	r7, [r5, #162]	; 0xa2
    7d26:	6820      	ldr	r0, [r4, #0]
    7d28:	2222      	movs	r2, #34	; 0x22
    7d2a:	1cc1      	adds	r1, r0, #3
    7d2c:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
    7d30:	f7fb fde2 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7d34:	e01c      	b.n	7d70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d36:	4641      	mov	r1, r8
    7d38:	6820      	ldr	r0, [r4, #0]
    7d3a:	f008 feda 	bl	10af2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7d3e:	b1b8      	cbz	r0, 7d70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d40:	7831      	ldrb	r1, [r6, #0]
    7d42:	4638      	mov	r0, r7
    7d44:	2902      	cmp	r1, #2
    7d46:	bf1c      	itt	ne
    7d48:	7831      	ldrbne	r1, [r6, #0]
    7d4a:	2903      	cmpne	r1, #3
    7d4c:	d005      	beq.n	7d5a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x282>
    7d4e:	f640 31de 	movw	r1, #3038	; 0xbde
    7d52:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7d56:	f7fb ff5b 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d5a:	68a1      	ldr	r1, [r4, #8]
    7d5c:	7832      	ldrb	r2, [r6, #0]
    7d5e:	6949      	ldr	r1, [r1, #20]
    7d60:	f06f 0307 	mvn.w	r3, #7
    7d64:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7d68:	5889      	ldr	r1, [r1, r2]
    7d6a:	4788      	blx	r1
    7d6c:	4605      	mov	r5, r0
    7d6e:	e000      	b.n	7d72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x29a>
    7d70:	2501      	movs	r5, #1
    7d72:	7bb0      	ldrb	r0, [r6, #14]
    7d74:	b118      	cbz	r0, 7d7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2a6>
    7d76:	f005 fbcf 	bl	d518 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7d7a:	f005 f9d3 	bl	d124 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7d7e:	2d00      	cmp	r5, #0
    7d80:	bf08      	it	eq
    7d82:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7d86:	68a0      	ldr	r0, [r4, #8]
    7d88:	6880      	ldr	r0, [r0, #8]
    7d8a:	b001      	add	sp, #4
    7d8c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7d90:	4700      	bx	r0
    7d92:	0000      	.short	0x0000
    7d94:	2000132c 	.word	0x2000132c
    7d98:	20001264 	.word	0x20001264
    7d9c:	20000110 	.word	0x20000110
    7da0:	b538      	push	{r3, r4, r5, lr}
    7da2:	2803      	cmp	r0, #3
    7da4:	d002      	beq.n	7dac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2d4>
    7da6:	2805      	cmp	r0, #5
    7da8:	d067      	beq.n	7e7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a2>
    7daa:	e064      	b.n	7e76 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7dac:	20ff      	movs	r0, #255	; 0xff
    7dae:	f88d 0000 	strb.w	r0, [sp]
    7db2:	4669      	mov	r1, sp
    7db4:	2003      	movs	r0, #3
    7db6:	f000 fad7 	bl	8368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    7dba:	2800      	cmp	r0, #0
    7dbc:	d05b      	beq.n	7e76 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7dbe:	4c33      	ldr	r4, [pc, #204]	; (7e8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b4>)
    7dc0:	4d33      	ldr	r5, [pc, #204]	; (7e90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b8>)
    7dc2:	7b20      	ldrb	r0, [r4, #12]
    7dc4:	b3b0      	cbz	r0, 7e34 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    7dc6:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
    7dca:	bb98      	cbnz	r0, 7e34 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    7dcc:	f89d 0000 	ldrb.w	r0, [sp]
    7dd0:	2101      	movs	r1, #1
    7dd2:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    7dd6:	7821      	ldrb	r1, [r4, #0]
    7dd8:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    7ddc:	28ff      	cmp	r0, #255	; 0xff
    7dde:	d011      	beq.n	7e04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x32c>
    7de0:	f104 029b 	add.w	r2, r4, #155	; 0x9b
    7de4:	1e51      	subs	r1, r2, #1
    7de6:	f7fd feaf 	bl	5b48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7dea:	b130      	cbz	r0, 7dfa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x322>
    7dec:	f894 009a 	ldrb.w	r0, [r4, #154]	; 0x9a
    7df0:	f040 0002 	orr.w	r0, r0, #2
    7df4:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    7df8:	e012      	b.n	7e20 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x348>
    7dfa:	f640 618e 	movw	r1, #3726	; 0xe8e
    7dfe:	202d      	movs	r0, #45	; 0x2d
    7e00:	f7fb ff06 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e04:	6828      	ldr	r0, [r5, #0]
    7e06:	7801      	ldrb	r1, [r0, #0]
    7e08:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7e0c:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    7e10:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7e14:	f8c4 109b 	str.w	r1, [r4, #155]	; 0x9b
    7e18:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7e1c:	f8a4 009f 	strh.w	r0, [r4, #159]	; 0x9f
    7e20:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
    7e24:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
    7e28:	297f      	cmp	r1, #127	; 0x7f
    7e2a:	d01f      	beq.n	7e6c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x394>
    7e2c:	7001      	strb	r1, [r0, #0]
    7e2e:	207f      	movs	r0, #127	; 0x7f
    7e30:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    7e34:	6828      	ldr	r0, [r5, #0]
    7e36:	2100      	movs	r1, #0
    7e38:	8001      	strh	r1, [r0, #0]
    7e3a:	2104      	movs	r1, #4
    7e3c:	f008 fef7 	bl	10c2e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7e40:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7e44:	6828      	ldr	r0, [r5, #0]
    7e46:	f008 ff24 	bl	10c92 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7e4a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7e4e:	6828      	ldr	r0, [r5, #0]
    7e50:	f008 ff26 	bl	10ca0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7e54:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    7e56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7e58:	6828      	ldr	r0, [r5, #0]
    7e5a:	f008 ff2a 	bl	10cb2 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7e5e:	490d      	ldr	r1, [pc, #52]	; (7e94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3bc>)
    7e60:	2005      	movs	r0, #5
    7e62:	7008      	strb	r0, [r1, #0]
    7e64:	6828      	ldr	r0, [r5, #0]
    7e66:	f005 ff85 	bl	dd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7e6a:	e00c      	b.n	7e86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    7e6c:	f44f 6153 	mov.w	r1, #3376	; 0xd30
    7e70:	202d      	movs	r0, #45	; 0x2d
    7e72:	f7fb fecd 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e76:	2001      	movs	r0, #1
    7e78:	bd38      	pop	{r3, r4, r5, pc}
    7e7a:	4807      	ldr	r0, [pc, #28]	; (7e98 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c0>)
    7e7c:	6800      	ldr	r0, [r0, #0]
    7e7e:	b110      	cbz	r0, 7e86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    7e80:	4780      	blx	r0
    7e82:	2800      	cmp	r0, #0
    7e84:	d0f7      	beq.n	7e76 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7e86:	2000      	movs	r0, #0
    7e88:	bd38      	pop	{r3, r4, r5, pc}
    7e8a:	0000      	.short	0x0000
    7e8c:	20001264 	.word	0x20001264
    7e90:	20000110 	.word	0x20000110
    7e94:	2000132c 	.word	0x2000132c
    7e98:	20000120 	.word	0x20000120
    7e9c:	b510      	push	{r4, lr}
    7e9e:	b990      	cbnz	r0, 7ec6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    7ea0:	2900      	cmp	r1, #0
    7ea2:	bf08      	it	eq
    7ea4:	bd10      	popeq	{r4, pc}
    7ea6:	f000 fd27 	bl	88f8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7eaa:	b160      	cbz	r0, 7ec6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    7eac:	4808      	ldr	r0, [pc, #32]	; (7ed0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3f8>)
    7eae:	4909      	ldr	r1, [pc, #36]	; (7ed4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3fc>)
    7eb0:	6880      	ldr	r0, [r0, #8]
    7eb2:	7809      	ldrb	r1, [r1, #0]
    7eb4:	6900      	ldr	r0, [r0, #16]
    7eb6:	f06f 020f 	mvn.w	r2, #15
    7eba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7ebe:	5840      	ldr	r0, [r0, r1]
    7ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ec4:	4700      	bx	r0
    7ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7eca:	f000 badd 	b.w	8488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    7ece:	0000      	.short	0x0000
    7ed0:	20000110 	.word	0x20000110
    7ed4:	2000132c 	.word	0x2000132c
    7ed8:	b570      	push	{r4, r5, r6, lr}
    7eda:	4c1a      	ldr	r4, [pc, #104]	; (7f44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x46c>)
    7edc:	2500      	movs	r5, #0
    7ede:	8860      	ldrh	r0, [r4, #2]
    7ee0:	2810      	cmp	r0, #16
    7ee2:	d011      	beq.n	7f08 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x430>
    7ee4:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
    7ee8:	7bb0      	ldrb	r0, [r6, #14]
    7eea:	b120      	cbz	r0, 7ef6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x41e>
    7eec:	f005 f946 	bl	d17c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7ef0:	2040      	movs	r0, #64	; 0x40
    7ef2:	f005 fb21 	bl	d538 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7ef6:	4814      	ldr	r0, [pc, #80]	; (7f48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x470>)
    7ef8:	6800      	ldr	r0, [r0, #0]
    7efa:	f005 ff3b 	bl	dd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7efe:	78a0      	ldrb	r0, [r4, #2]
    7f00:	f010 0f04 	tst.w	r0, #4
    7f04:	d005      	beq.n	7f12 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x43a>
    7f06:	e011      	b.n	7f2c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x454>
    7f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f0c:	2001      	movs	r0, #1
    7f0e:	f7ff bdeb 	b.w	7ae8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    7f12:	7c60      	ldrb	r0, [r4, #17]
    7f14:	2801      	cmp	r0, #1
    7f16:	bf14      	ite	ne
    7f18:	2803      	cmpne	r0, #3
    7f1a:	2510      	moveq	r5, #16
    7f1c:	f045 020e 	orr.w	r2, r5, #14
    7f20:	f04f 0100 	mov.w	r1, #0
    7f24:	7923      	ldrb	r3, [r4, #4]
    7f26:	4608      	mov	r0, r1
    7f28:	f006 f934 	bl	e194 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7f2c:	7b20      	ldrb	r0, [r4, #12]
    7f2e:	2800      	cmp	r0, #0
    7f30:	bf18      	it	ne
    7f32:	f006 f9e5 	blne	e300 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    7f36:	2000      	movs	r0, #0
    7f38:	f005 fd7a 	bl	da30 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7f3c:	2002      	movs	r0, #2
    7f3e:	7030      	strb	r0, [r6, #0]
    7f40:	bd70      	pop	{r4, r5, r6, pc}
    7f42:	0000      	.short	0x0000
    7f44:	20001264 	.word	0x20001264
    7f48:	20000110 	.word	0x20000110
    7f4c:	b570      	push	{r4, r5, r6, lr}
    7f4e:	4d1e      	ldr	r5, [pc, #120]	; (7fc8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f0>)
    7f50:	7b28      	ldrb	r0, [r5, #12]
    7f52:	b150      	cbz	r0, 7f6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x492>
    7f54:	f105 0021 	add.w	r0, r5, #33	; 0x21
    7f58:	f006 f9e6 	bl	e328 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7f5c:	2800      	cmp	r0, #0
    7f5e:	bf04      	itt	eq
    7f60:	207f      	moveq	r0, #127	; 0x7f
    7f62:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    7f66:	f006 f9bf 	bl	e2e8 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7f6a:	4c18      	ldr	r4, [pc, #96]	; (7fcc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f4>)
    7f6c:	7ba0      	ldrb	r0, [r4, #14]
    7f6e:	b118      	cbz	r0, 7f78 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4a0>
    7f70:	f005 fad2 	bl	d518 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7f74:	f005 f8d6 	bl	d124 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7f78:	f000 fcbe 	bl	88f8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7f7c:	b1a0      	cbz	r0, 7fa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7f7e:	8868      	ldrh	r0, [r5, #2]
    7f80:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7f84:	2900      	cmp	r1, #0
    7f86:	bf04      	itt	eq
    7f88:	f3c0 00c0 	ubfxeq	r0, r0, #3, #1
    7f8c:	2800      	cmpeq	r0, #0
    7f8e:	d00b      	beq.n	7fa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7f90:	7820      	ldrb	r0, [r4, #0]
    7f92:	2802      	cmp	r0, #2
    7f94:	bf1c      	itt	ne
    7f96:	7820      	ldrbne	r0, [r4, #0]
    7f98:	2803      	cmpne	r0, #3
    7f9a:	d009      	beq.n	7fb0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d8>
    7f9c:	f640 311a 	movw	r1, #2842	; 0xb1a
    7fa0:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7fa4:	f7fb fe34 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fac:	f000 ba6c 	b.w	8488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    7fb0:	4807      	ldr	r0, [pc, #28]	; (7fd0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f8>)
    7fb2:	7821      	ldrb	r1, [r4, #0]
    7fb4:	6880      	ldr	r0, [r0, #8]
    7fb6:	68c0      	ldr	r0, [r0, #12]
    7fb8:	f06f 0207 	mvn.w	r2, #7
    7fbc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7fc0:	5840      	ldr	r0, [r0, r1]
    7fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fc6:	4700      	bx	r0
    7fc8:	20001264 	.word	0x20001264
    7fcc:	2000132c 	.word	0x2000132c
    7fd0:	20000110 	.word	0x20000110

00007fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fd8:	4ea1      	ldr	r6, [pc, #644]	; (8260 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x260>)
    7fda:	b087      	sub	sp, #28
    7fdc:	7830      	ldrb	r0, [r6, #0]
    7fde:	2800      	cmp	r0, #0
    7fe0:	d17d      	bne.n	80de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde>
    7fe2:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    7fe6:	7820      	ldrb	r0, [r4, #0]
    7fe8:	28ff      	cmp	r0, #255	; 0xff
    7fea:	d078      	beq.n	80de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde>
    7fec:	2500      	movs	r5, #0
    7fee:	81b5      	strh	r5, [r6, #12]
    7ff0:	6075      	str	r5, [r6, #4]
    7ff2:	7075      	strb	r5, [r6, #1]
    7ff4:	70b5      	strb	r5, [r6, #2]
    7ff6:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    7ffa:	4628      	mov	r0, r5
    7ffc:	f005 fdaa 	bl	db54 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    8000:	4898      	ldr	r0, [pc, #608]	; (8264 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x264>)
    8002:	af01      	add	r7, sp, #4
    8004:	f100 011c 	add.w	r1, r0, #28
    8008:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8268 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x268>
    800c:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    8010:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    8014:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8016:	9005      	str	r0, [sp, #20]
    8018:	f8d8 0008 	ldr.w	r0, [r8, #8]
    801c:	6840      	ldr	r0, [r0, #4]
    801e:	9004      	str	r0, [sp, #16]
    8020:	a801      	add	r0, sp, #4
    8022:	f005 fcc5 	bl	d9b0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    8026:	f005 fe13 	bl	dc50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    802a:	f005 fa75 	bl	d518 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    802e:	f005 f879 	bl	d124 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8032:	488e      	ldr	r0, [pc, #568]	; (826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>)
    8034:	f006 f9ae 	bl	e394 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    8038:	488d      	ldr	r0, [pc, #564]	; (8270 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x270>)
    803a:	f006 f9b7 	bl	e3ac <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    803e:	2000      	movs	r0, #0
    8040:	f7fb fcae 	bl	39a0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    8044:	f104 0018 	add.w	r0, r4, #24
    8048:	f009 f9d4 	bl	113f4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    804c:	f104 0018 	add.w	r0, r4, #24
    8050:	f009 f960 	bl	11314 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    8054:	f006 fa08 	bl	e468 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    8058:	7921      	ldrb	r1, [r4, #4]
    805a:	2025      	movs	r0, #37	; 0x25
    805c:	f006 f9e0 	bl	e420 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    8060:	f994 0010 	ldrsb.w	r0, [r4, #16]
    8064:	f005 fe80 	bl	dd68 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    8068:	7921      	ldrb	r1, [r4, #4]
    806a:	2000      	movs	r0, #0
    806c:	f005 fb0c 	bl	d688 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    8070:	2701      	movs	r7, #1
    8072:	60b0      	str	r0, [r6, #8]
    8074:	2800      	cmp	r0, #0
    8076:	bf08      	it	eq
    8078:	7037      	strbeq	r7, [r6, #0]
    807a:	f000 80ed 	beq.w	8258 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x258>
    807e:	210f      	movs	r1, #15
    8080:	2005      	movs	r0, #5
    8082:	f005 fa87 	bl	d594 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    8086:	7d60      	ldrb	r0, [r4, #21]
    8088:	2800      	cmp	r0, #0
    808a:	bf01      	itttt	eq
    808c:	7ce0      	ldrbeq	r0, [r4, #19]
    808e:	2800      	cmpeq	r0, #0
    8090:	78a0      	ldrbeq	r0, [r4, #2]
    8092:	f010 0f04 	tsteq.w	r0, #4
    8096:	d06b      	beq.n	8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>
    8098:	f006 fe85 	bl	eda6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    809c:	4681      	mov	r9, r0
    809e:	4649      	mov	r1, r9
    80a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    80a2:	f7f9 f9cf 	bl	1444 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    80a6:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 8274 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x274>
    80aa:	4682      	mov	sl, r0
    80ac:	fb90 f0fb 	sdiv	r0, r0, fp
    80b0:	fb0b a010 	mls	r0, fp, r0, sl
    80b4:	4241      	negs	r1, r0
    80b6:	4648      	mov	r0, r9
    80b8:	f7f9 f98e 	bl	13d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    80bc:	63a0      	str	r0, [r4, #56]	; 0x38
    80be:	fb9a f0fb 	sdiv	r0, sl, fp
    80c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    80c4:	4408      	add	r0, r1
    80c6:	6360      	str	r0, [r4, #52]	; 0x34
    80c8:	f7fd feac 	bl	5e24 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    80cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    80ce:	4288      	cmp	r0, r1
    80d0:	d86a      	bhi.n	81a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    80d2:	e9c4 590d 	strd	r5, r9, [r4, #52]	; 0x34
    80d6:	f04f 0901 	mov.w	r9, #1
    80da:	7d20      	ldrb	r0, [r4, #20]
    80dc:	e000      	b.n	80e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    80de:	e01a      	b.n	8116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    80e0:	f7fd fca2 	bl	5a28 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    80e4:	4682      	mov	sl, r0
    80e6:	7ce0      	ldrb	r0, [r4, #19]
    80e8:	2800      	cmp	r0, #0
    80ea:	bf18      	it	ne
    80ec:	f1ba 0f00 	cmpne.w	sl, #0
    80f0:	d003      	beq.n	80fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa>
    80f2:	7d20      	ldrb	r0, [r4, #20]
    80f4:	f7fd fc8c 	bl	5a10 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    80f8:	b188      	cbz	r0, 811e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11e>
    80fa:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    80fe:	2800      	cmp	r0, #0
    8100:	bf1c      	itt	ne
    8102:	7d60      	ldrbne	r0, [r4, #21]
    8104:	2800      	cmpne	r0, #0
    8106:	d022      	beq.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    8108:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    810c:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    8110:	2801      	cmp	r0, #1
    8112:	d012      	beq.n	813a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13a>
    8114:	e016      	b.n	8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    8116:	b007      	add	sp, #28
    8118:	200c      	movs	r0, #12
    811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    811e:	463a      	mov	r2, r7
    8120:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    8124:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    8128:	4650      	mov	r0, sl
    812a:	f008 f930 	bl	1038e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    812e:	7d21      	ldrb	r1, [r4, #20]
    8130:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    8134:	f7fd fc84 	bl	5a40 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    8138:	e009      	b.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    813a:	7948      	ldrb	r0, [r1, #5]
    813c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8140:	2840      	cmp	r0, #64	; 0x40
    8142:	d016      	beq.n	8172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
    8144:	4649      	mov	r1, r9
    8146:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    814a:	f008 f910 	bl	1036e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    814e:	78a0      	ldrb	r0, [r4, #2]
    8150:	f010 0f04 	tst.w	r0, #4
    8154:	bf1c      	itt	ne
    8156:	7ce0      	ldrbne	r0, [r4, #19]
    8158:	2800      	cmpne	r0, #0
    815a:	d025      	beq.n	81a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    815c:	7d20      	ldrb	r0, [r4, #20]
    815e:	f7fd fcc1 	bl	5ae4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8162:	ea5f 0900 	movs.w	r9, r0
    8166:	d01f      	beq.n	81a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    8168:	2110      	movs	r1, #16
    816a:	f7fe fb4f 	bl	680c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    816e:	b140      	cbz	r0, 8182 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x182>
    8170:	e01a      	b.n	81a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    8172:	f7fd fc49 	bl	5a08 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    8176:	463a      	mov	r2, r7
    8178:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    817c:	f008 f907 	bl	1038e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8180:	e7e5      	b.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    8182:	463a      	mov	r2, r7
    8184:	f884 704a 	strb.w	r7, [r4, #74]	; 0x4a
    8188:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    818c:	4648      	mov	r0, r9
    818e:	f008 f8fe 	bl	1038e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8192:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    8196:	f8d8 0000 	ldr.w	r0, [r8]
    819a:	f008 fd6a 	bl	10c72 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    819e:	2101      	movs	r1, #1
    81a0:	f8d8 0000 	ldr.w	r0, [r8]
    81a4:	f008 fd6c 	bl	10c80 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    81a8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    81ac:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    81b0:	f006 f8e4 	bl	e37c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    81b4:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    81b8:	b340      	cbz	r0, 820c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20c>
    81ba:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
    81be:	8620      	strh	r0, [r4, #48]	; 0x30
    81c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    81c2:	62a0      	str	r0, [r4, #40]	; 0x28
    81c4:	78a0      	ldrb	r0, [r4, #2]
    81c6:	f3c0 1000 	ubfx	r0, r0, #4, #1
    81ca:	b9e8      	cbnz	r0, 8208 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x208>
    81cc:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    81d0:	2102      	movs	r1, #2
    81d2:	f3c0 070b 	ubfx	r7, r0, #0, #12
    81d6:	f8ad 7000 	strh.w	r7, [sp]
    81da:	4668      	mov	r0, sp
    81dc:	f7fc fb6e 	bl	48bc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    81e0:	b128      	cbz	r0, 81ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ee>
    81e2:	f8bd 0000 	ldrh.w	r0, [sp]
    81e6:	f3c0 000b 	ubfx	r0, r0, #0, #12
    81ea:	42b8      	cmp	r0, r7
    81ec:	d104      	bne.n	81f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f8>
    81ee:	f8bd 0000 	ldrh.w	r0, [sp]
    81f2:	1c40      	adds	r0, r0, #1
    81f4:	f8ad 0000 	strh.w	r0, [sp]
    81f8:	f8bd 0000 	ldrh.w	r0, [sp]
    81fc:	f8b4 101f 	ldrh.w	r1, [r4, #31]
    8200:	f360 010b 	bfi	r1, r0, #0, #12
    8204:	f8a4 101f 	strh.w	r1, [r4, #31]
    8208:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    820c:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    8210:	b130      	cbz	r0, 8220 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x220>
    8212:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    8216:	8660      	strh	r0, [r4, #50]	; 0x32
    8218:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    821a:	62e0      	str	r0, [r4, #44]	; 0x2c
    821c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    8220:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    8224:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8226:	f3c0 000b 	ubfx	r0, r0, #0, #12
    822a:	fa50 f081 	uxtab	r0, r0, r1
    822e:	7fa1      	ldrb	r1, [r4, #30]
    8230:	4b11      	ldr	r3, [pc, #68]	; (8278 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x278>)
    8232:	4408      	add	r0, r1
    8234:	461a      	mov	r2, r3
    8236:	2100      	movs	r1, #0
    8238:	fbe0 2103 	umlal	r2, r1, r0, r3
    823c:	0909      	lsrs	r1, r1, #4
    823e:	f06f 0224 	mvn.w	r2, #36	; 0x24
    8242:	fb01 0002 	mla	r0, r1, r2, r0
    8246:	77a0      	strb	r0, [r4, #30]
    8248:	f7fd feae 	bl	5fa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    824c:	2103      	movs	r1, #3
    824e:	f8d8 0000 	ldr.w	r0, [r8]
    8252:	f7fd fbc5 	bl	59e0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    8256:	73b0      	strb	r0, [r6, #14]
    8258:	b007      	add	sp, #28
    825a:	2000      	movs	r0, #0
    825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8260:	2000132c 	.word	0x2000132c
    8264:	000087f0 	.word	0x000087f0
    8268:	20000110 	.word	0x20000110
    826c:	000087f8 	.word	0x000087f8
    8270:	000087f5 	.word	0x000087f5
    8274:	000f4240 	.word	0x000f4240
    8278:	6eb3e453 	.word	0x6eb3e453
    827c:	b570      	push	{r4, r5, r6, lr}
    827e:	4d1b      	ldr	r5, [pc, #108]	; (82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>)
    8280:	7828      	ldrb	r0, [r5, #0]
    8282:	2800      	cmp	r0, #0
    8284:	bf08      	it	eq
    8286:	bd70      	popeq	{r4, r5, r6, pc}
    8288:	7828      	ldrb	r0, [r5, #0]
    828a:	4c19      	ldr	r4, [pc, #100]	; (82f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>)
    828c:	2802      	cmp	r0, #2
    828e:	bf1c      	itt	ne
    8290:	7828      	ldrbne	r0, [r5, #0]
    8292:	2803      	cmpne	r0, #3
    8294:	d112      	bne.n	82bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2bc>
    8296:	7b20      	ldrb	r0, [r4, #12]
    8298:	b150      	cbz	r0, 82b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>
    829a:	f104 0021 	add.w	r0, r4, #33	; 0x21
    829e:	f006 f843 	bl	e328 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    82a2:	2800      	cmp	r0, #0
    82a4:	bf04      	itt	eq
    82a6:	207f      	moveq	r0, #127	; 0x7f
    82a8:	f884 0021 	strbeq.w	r0, [r4, #33]	; 0x21
    82ac:	f006 f81c 	bl	e2e8 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    82b0:	7ba8      	ldrb	r0, [r5, #14]
    82b2:	b118      	cbz	r0, 82bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2bc>
    82b4:	f005 f930 	bl	d518 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    82b8:	f004 ff34 	bl	d124 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    82bc:	f7fb fb5c 	bl	3978 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    82c0:	f000 fb1a 	bl	88f8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    82c4:	b168      	cbz	r0, 82e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    82c6:	78a0      	ldrb	r0, [r4, #2]
    82c8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    82cc:	b920      	cbnz	r0, 82d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d8>
    82ce:	f104 0018 	add.w	r0, r4, #24
    82d2:	f009 f864 	bl	1139e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    82d6:	b120      	cbz	r0, 82e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    82d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82dc:	2001      	movs	r0, #1
    82de:	f7ff bc03 	b.w	7ae8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    82e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82e6:	f000 b8cf 	b.w	8488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    82ea:	0000      	.short	0x0000
    82ec:	2000132c 	.word	0x2000132c
    82f0:	20001264 	.word	0x20001264
    82f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82f8:	4b19      	ldr	r3, [pc, #100]	; (8360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>)
    82fa:	2600      	movs	r6, #0
    82fc:	2701      	movs	r7, #1
    82fe:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
    8302:	781c      	ldrb	r4, [r3, #0]
    8304:	f893 c00d 	ldrb.w	ip, [r3, #13]
    8308:	b1b8      	cbz	r0, 833a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33a>
    830a:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    830e:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
    8312:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    8316:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    831a:	f1bc 0f00 	cmp.w	ip, #0
    831e:	bf0c      	ite	eq
    8320:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    8324:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    8328:	480e      	ldr	r0, [pc, #56]	; (8364 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x364>)
    832a:	6840      	ldr	r0, [r0, #4]
    832c:	8800      	ldrh	r0, [r0, #0]
    832e:	f7fc f883 	bl	4438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8336:	f007 be28 	b.w	ff8a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    833a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    833e:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    8342:	f8a3 008e 	strh.w	r0, [r3, #142]	; 0x8e
    8346:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    834a:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    834e:	f1bc 0f00 	cmp.w	ip, #0
    8352:	bf14      	ite	ne
    8354:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    8358:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8360:	20001264 	.word	0x20001264
    8364:	20000110 	.word	0x20000110
    8368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    836c:	4c43      	ldr	r4, [pc, #268]	; (847c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x47c>)
    836e:	4680      	mov	r8, r0
    8370:	460f      	mov	r7, r1
    8372:	8860      	ldrh	r0, [r4, #2]
    8374:	f1b8 0f03 	cmp.w	r8, #3
    8378:	bf08      	it	eq
    837a:	f3c0 0540 	ubfxeq	r5, r0, #1, #1
    837e:	d008      	beq.n	8392 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x392>
    8380:	f000 0501 	and.w	r5, r0, #1
    8384:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
    8388:	2800      	cmp	r0, #0
    838a:	bf18      	it	ne
    838c:	f04f 0901 	movne.w	r9, #1
    8390:	d101      	bne.n	8396 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x396>
    8392:	f04f 0900 	mov.w	r9, #0
    8396:	f005 f8f7 	bl	d588 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    839a:	4606      	mov	r6, r0
    839c:	f1b8 0f03 	cmp.w	r8, #3
    83a0:	bf0c      	ite	eq
    83a2:	f04f 0802 	moveq.w	r8, #2
    83a6:	f04f 0801 	movne.w	r8, #1
    83aa:	ea35 0009 	bics.w	r0, r5, r9
    83ae:	bf08      	it	eq
    83b0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83b4:	4832      	ldr	r0, [pc, #200]	; (8480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x480>)
    83b6:	7b80      	ldrb	r0, [r0, #14]
    83b8:	b138      	cbz	r0, 83ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ca>
    83ba:	f008 f820 	bl	103fe <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    83be:	7038      	strb	r0, [r7, #0]
    83c0:	28ff      	cmp	r0, #255	; 0xff
    83c2:	d002      	beq.n	83ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ca>
    83c4:	f7fd fbda 	bl	5b7c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    83c8:	4306      	orrs	r6, r0
    83ca:	4d2e      	ldr	r5, [pc, #184]	; (8484 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x484>)
    83cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    83d0:	6828      	ldr	r0, [r5, #0]
    83d2:	7801      	ldrb	r1, [r0, #0]
    83d4:	f3c1 1180 	ubfx	r1, r1, #6, #1
    83d8:	4291      	cmp	r1, r2
    83da:	d109      	bne.n	83f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f0>
    83dc:	2206      	movs	r2, #6
    83de:	f104 0144 	add.w	r1, r4, #68	; 0x44
    83e2:	1cc0      	adds	r0, r0, #3
    83e4:	f006 fe42 	bl	f06c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    83e8:	2800      	cmp	r0, #0
    83ea:	bf08      	it	eq
    83ec:	2001      	moveq	r0, #1
    83ee:	d000      	beq.n	83f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f2>
    83f0:	2000      	movs	r0, #0
    83f2:	7839      	ldrb	r1, [r7, #0]
    83f4:	29ff      	cmp	r1, #255	; 0xff
    83f6:	d004      	beq.n	8402 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x402>
    83f8:	b9b8      	cbnz	r0, 842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    83fa:	7d20      	ldrb	r0, [r4, #20]
    83fc:	4288      	cmp	r0, r1
    83fe:	d116      	bne.n	842e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42e>
    8400:	e013      	b.n	842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    8402:	b1a0      	cbz	r0, 842e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42e>
    8404:	6829      	ldr	r1, [r5, #0]
    8406:	f811 0b03 	ldrb.w	r0, [r1], #3
    840a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    840e:	f7fd fbc7 	bl	5ba0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    8412:	4607      	mov	r7, r0
    8414:	f7fd fd1a 	bl	5e4c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    8418:	b138      	cbz	r0, 842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    841a:	4638      	mov	r0, r7
    841c:	f7fd fb62 	bl	5ae4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8420:	b118      	cbz	r0, 842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    8422:	2110      	movs	r1, #16
    8424:	f7fe f9f2 	bl	680c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8428:	b108      	cbz	r0, 842e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42e>
    842a:	2001      	movs	r0, #1
    842c:	e000      	b.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    842e:	2000      	movs	r0, #0
    8430:	78a1      	ldrb	r1, [r4, #2]
    8432:	f011 0f04 	tst.w	r1, #4
    8436:	d001      	beq.n	843c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43c>
    8438:	b1e0      	cbz	r0, 8474 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x474>
    843a:	e018      	b.n	846e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46e>
    843c:	b9be      	cbnz	r6, 846e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46e>
    843e:	7c60      	ldrb	r0, [r4, #17]
    8440:	2800      	cmp	r0, #0
    8442:	bf18      	it	ne
    8444:	4540      	cmpne	r0, r8
    8446:	d115      	bne.n	8474 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x474>
    8448:	6829      	ldr	r1, [r5, #0]
    844a:	f811 0b03 	ldrb.w	r0, [r1], #3
    844e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8452:	f7fd fba5 	bl	5ba0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    8456:	4604      	mov	r4, r0
    8458:	f7fd fcf8 	bl	5e4c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    845c:	b138      	cbz	r0, 846e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46e>
    845e:	4620      	mov	r0, r4
    8460:	f7fd fb40 	bl	5ae4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8464:	b118      	cbz	r0, 846e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46e>
    8466:	2110      	movs	r1, #16
    8468:	f7fe f9d0 	bl	680c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    846c:	b110      	cbz	r0, 8474 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x474>
    846e:	2001      	movs	r0, #1
    8470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8474:	2000      	movs	r0, #0
    8476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    847a:	0000      	.short	0x0000
    847c:	20001264 	.word	0x20001264
    8480:	2000132c 	.word	0x2000132c
    8484:	20000110 	.word	0x20000110
    8488:	b570      	push	{r4, r5, r6, lr}
    848a:	4c1c      	ldr	r4, [pc, #112]	; (84fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4fc>)
    848c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    8490:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8492:	1c40      	adds	r0, r0, #1
    8494:	6260      	str	r0, [r4, #36]	; 0x24
    8496:	7ba8      	ldrb	r0, [r5, #14]
    8498:	2600      	movs	r6, #0
    849a:	b120      	cbz	r0, 84a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a6>
    849c:	f005 f83c 	bl	d518 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    84a0:	f004 fe40 	bl	d124 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    84a4:	73ae      	strb	r6, [r5, #14]
    84a6:	702e      	strb	r6, [r5, #0]
    84a8:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
    84ac:	b120      	cbz	r0, 84b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b8>
    84ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84b2:	2001      	movs	r0, #1
    84b4:	f000 ba58 	b.w	8968 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    84b8:	7b60      	ldrb	r0, [r4, #13]
    84ba:	b1d0      	cbz	r0, 84f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f2>
    84bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    84be:	4288      	cmp	r0, r1
    84c0:	d817      	bhi.n	84f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f2>
    84c2:	2001      	movs	r0, #1
    84c4:	f000 fa50 	bl	8968 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    84c8:	78a0      	ldrb	r0, [r4, #2]
    84ca:	f010 0f01 	tst.w	r0, #1
    84ce:	d008      	beq.n	84e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e2>
    84d0:	480b      	ldr	r0, [pc, #44]	; (8500 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x500>)
    84d2:	2243      	movs	r2, #67	; 0x43
    84d4:	6840      	ldr	r0, [r0, #4]
    84d6:	8801      	ldrh	r1, [r0, #0]
    84d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84dc:	2001      	movs	r0, #1
    84de:	f7ff bf09 	b.w	82f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    84e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84e6:	2243      	movs	r2, #67	; 0x43
    84e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    84ec:	2000      	movs	r0, #0
    84ee:	f7ff bf01 	b.w	82f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    84f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84f6:	2000      	movs	r0, #0
    84f8:	f000 ba36 	b.w	8968 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    84fc:	20001264 	.word	0x20001264
    8500:	20000110 	.word	0x20000110
    8504:	b570      	push	{r4, r5, r6, lr}
    8506:	4c3a      	ldr	r4, [pc, #232]	; (85f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f0>)
    8508:	4605      	mov	r5, r0
    850a:	460e      	mov	r6, r1
    850c:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    8510:	b120      	cbz	r0, 851c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x51c>
    8512:	f640 314e 	movw	r1, #2894	; 0xb4e
    8516:	202d      	movs	r0, #45	; 0x2d
    8518:	f7fb fb7a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    851c:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    8520:	8828      	ldrh	r0, [r5, #0]
    8522:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    8526:	2a00      	cmp	r2, #0
    8528:	bf18      	it	ne
    852a:	bd70      	popne	{r4, r5, r6, pc}
    852c:	6868      	ldr	r0, [r5, #4]
    852e:	f007 ffa0 	bl	10472 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    8532:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    8536:	8928      	ldrh	r0, [r5, #8]
    8538:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    853c:	8968      	ldrh	r0, [r5, #10]
    853e:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    8542:	f895 0184 	ldrb.w	r0, [r5, #388]	; 0x184
    8546:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    854a:	7ce0      	ldrb	r0, [r4, #19]
    854c:	2500      	movs	r5, #0
    854e:	b150      	cbz	r0, 8566 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x566>
    8550:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8554:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    8558:	2901      	cmp	r1, #1
    855a:	d104      	bne.n	8566 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x566>
    855c:	7940      	ldrb	r0, [r0, #5]
    855e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8562:	2840      	cmp	r0, #64	; 0x40
    8564:	d02d      	beq.n	85c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c2>
    8566:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    856a:	b148      	cbz	r0, 8580 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x580>
    856c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8570:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    8574:	2901      	cmp	r1, #1
    8576:	bf04      	itt	eq
    8578:	7940      	ldrbeq	r0, [r0, #5]
    857a:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    857e:	d020      	beq.n	85c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c2>
    8580:	481c      	ldr	r0, [pc, #112]	; (85f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f4>)
    8582:	f00a f9bb 	bl	128fc <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    8586:	481c      	ldr	r0, [pc, #112]	; (85f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f8>)
    8588:	2eff      	cmp	r6, #255	; 0xff
    858a:	6800      	ldr	r0, [r0, #0]
    858c:	7801      	ldrb	r1, [r0, #0]
    858e:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8592:	f884 106f 	strb.w	r1, [r4, #111]	; 0x6f
    8596:	f8d0 1003 	ldr.w	r1, [r0, #3]
    859a:	d020      	beq.n	85de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5de>
    859c:	67e1      	str	r1, [r4, #124]	; 0x7c
    859e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    85a2:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    85a6:	f104 0270 	add.w	r2, r4, #112	; 0x70
    85aa:	1e51      	subs	r1, r2, #1
    85ac:	4630      	mov	r0, r6
    85ae:	f7fd facb 	bl	5b48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    85b2:	b178      	cbz	r0, 85d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d4>
    85b4:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    85b8:	f040 0002 	orr.w	r0, r0, #2
    85bc:	f884 006f 	strb.w	r0, [r4, #111]	; 0x6f
    85c0:	bd70      	pop	{r4, r5, r6, pc}
    85c2:	f8d4 003d 	ldr.w	r0, [r4, #61]	; 0x3d
    85c6:	f8c4 0076 	str.w	r0, [r4, #118]	; 0x76
    85ca:	f8b4 0041 	ldrh.w	r0, [r4, #65]	; 0x41
    85ce:	f8a4 007a 	strh.w	r0, [r4, #122]	; 0x7a
    85d2:	e7d8      	b.n	8586 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x586>
    85d4:	f640 316f 	movw	r1, #2927	; 0xb6f
    85d8:	202d      	movs	r0, #45	; 0x2d
    85da:	f7fb fb19 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85de:	6721      	str	r1, [r4, #112]	; 0x70
    85e0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    85e4:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    85e8:	67e5      	str	r5, [r4, #124]	; 0x7c
    85ea:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
    85ee:	bd70      	pop	{r4, r5, r6, pc}
    85f0:	20001264 	.word	0x20001264
    85f4:	200012da 	.word	0x200012da
    85f8:	20000110 	.word	0x20000110
    85fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8600:	b083      	sub	sp, #12
    8602:	4c30      	ldr	r4, [pc, #192]	; (86c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c4>)
    8604:	20ff      	movs	r0, #255	; 0xff
    8606:	f88d 0000 	strb.w	r0, [sp]
    860a:	6820      	ldr	r0, [r4, #0]
    860c:	2701      	movs	r7, #1
    860e:	7801      	ldrb	r1, [r0, #0]
    8610:	f3c1 1680 	ubfx	r6, r1, #6, #1
    8614:	f8d0 1003 	ldr.w	r1, [r0, #3]
    8618:	9101      	str	r1, [sp, #4]
    861a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    861e:	f8ad 0008 	strh.w	r0, [sp, #8]
    8622:	4669      	mov	r1, sp
    8624:	2005      	movs	r0, #5
    8626:	f7ff fe9f 	bl	8368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    862a:	2800      	cmp	r0, #0
    862c:	d043      	beq.n	86b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b6>
    862e:	4d26      	ldr	r5, [pc, #152]	; (86c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c8>)
    8630:	6860      	ldr	r0, [r4, #4]
    8632:	7969      	ldrb	r1, [r5, #5]
    8634:	f000 f886 	bl	8744 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x744>
    8638:	2200      	movs	r2, #0
    863a:	f89d 1000 	ldrb.w	r1, [sp]
    863e:	6860      	ldr	r0, [r4, #4]
    8640:	f7ff ff60 	bl	8504 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x504>
    8644:	2106      	movs	r1, #6
    8646:	6860      	ldr	r0, [r4, #4]
    8648:	f000 fba2 	bl	8d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    864c:	481f      	ldr	r0, [pc, #124]	; (86cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6cc>)
    864e:	2100      	movs	r1, #0
    8650:	f10d 0804 	add.w	r8, sp, #4
    8654:	f8d0 9000 	ldr.w	r9, [r0]
    8658:	6820      	ldr	r0, [r4, #0]
    865a:	8001      	strh	r1, [r0, #0]
    865c:	2108      	movs	r1, #8
    865e:	f008 fae6 	bl	10c2e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8662:	2100      	movs	r1, #0
    8664:	6820      	ldr	r0, [r4, #0]
    8666:	f008 fa81 	bl	10b6c <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    866a:	4649      	mov	r1, r9
    866c:	6820      	ldr	r0, [r4, #0]
    866e:	f008 fab0 	bl	10bd2 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    8672:	2306      	movs	r3, #6
    8674:	2200      	movs	r2, #0
    8676:	f105 013d 	add.w	r1, r5, #61	; 0x3d
    867a:	6820      	ldr	r0, [r4, #0]
    867c:	f008 fa8f 	bl	10b9e <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8680:	f895 103c 	ldrb.w	r1, [r5, #60]	; 0x3c
    8684:	6820      	ldr	r0, [r4, #0]
    8686:	f008 fb0b 	bl	10ca0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    868a:	4631      	mov	r1, r6
    868c:	6820      	ldr	r0, [r4, #0]
    868e:	f008 faf7 	bl	10c80 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8692:	2306      	movs	r3, #6
    8694:	2201      	movs	r2, #1
    8696:	4641      	mov	r1, r8
    8698:	6820      	ldr	r0, [r4, #0]
    869a:	f008 fa80 	bl	10b9e <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    869e:	7969      	ldrb	r1, [r5, #5]
    86a0:	20ff      	movs	r0, #255	; 0xff
    86a2:	f005 febd 	bl	e420 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    86a6:	6820      	ldr	r0, [r4, #0]
    86a8:	f005 fb64 	bl	dd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    86ac:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
    86b0:	2009      	movs	r0, #9
    86b2:	7008      	strb	r0, [r1, #0]
    86b4:	e001      	b.n	86ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ba>
    86b6:	f7ff fee7 	bl	8488 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x488>
    86ba:	b003      	add	sp, #12
    86bc:	4638      	mov	r0, r7
    86be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    86c2:	0000      	.short	0x0000
    86c4:	20000110 	.word	0x20000110
    86c8:	20001264 	.word	0x20001264
    86cc:	000087f0 	.word	0x000087f0
    86d0:	b538      	push	{r3, r4, r5, lr}
    86d2:	20ff      	movs	r0, #255	; 0xff
    86d4:	f88d 0000 	strb.w	r0, [sp]
    86d8:	2501      	movs	r5, #1
    86da:	4669      	mov	r1, sp
    86dc:	2005      	movs	r0, #5
    86de:	f7ff fe43 	bl	8368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    86e2:	2800      	cmp	r0, #0
    86e4:	bf08      	it	eq
    86e6:	2500      	moveq	r5, #0
    86e8:	d023      	beq.n	8732 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x732>
    86ea:	4c13      	ldr	r4, [pc, #76]	; (8738 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x738>)
    86ec:	6822      	ldr	r2, [r4, #0]
    86ee:	6860      	ldr	r0, [r4, #4]
    86f0:	7812      	ldrb	r2, [r2, #0]
    86f2:	7c41      	ldrb	r1, [r0, #17]
    86f4:	f3c2 1240 	ubfx	r2, r2, #5, #1
    86f8:	4011      	ands	r1, r2
    86fa:	7441      	strb	r1, [r0, #17]
    86fc:	2101      	movs	r1, #1
    86fe:	f000 f821 	bl	8744 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x744>
    8702:	2200      	movs	r2, #0
    8704:	f89d 1000 	ldrb.w	r1, [sp]
    8708:	6860      	ldr	r0, [r4, #4]
    870a:	f7ff fefb 	bl	8504 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x504>
    870e:	480b      	ldr	r0, [pc, #44]	; (873c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x73c>)
    8710:	2101      	movs	r1, #1
    8712:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    8716:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    871a:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    871e:	2001      	movs	r0, #1
    8720:	f7ff fde8 	bl	82f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    8724:	4906      	ldr	r1, [pc, #24]	; (8740 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x740>)
    8726:	2000      	movs	r0, #0
    8728:	7008      	strb	r0, [r1, #0]
    872a:	2105      	movs	r1, #5
    872c:	6860      	ldr	r0, [r4, #4]
    872e:	f000 fb2f 	bl	8d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8732:	4628      	mov	r0, r5
    8734:	bd38      	pop	{r3, r4, r5, pc}
    8736:	0000      	.short	0x0000
    8738:	20000110 	.word	0x20000110
    873c:	20001264 	.word	0x20001264
    8740:	2000132c 	.word	0x2000132c
    8744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8748:	4e27      	ldr	r6, [pc, #156]	; (87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>)
    874a:	4604      	mov	r4, r0
    874c:	460d      	mov	r5, r1
    874e:	6830      	ldr	r0, [r6, #0]
    8750:	f8d0 100f 	ldr.w	r1, [r0, #15]
    8754:	f8c4 1012 	str.w	r1, [r4, #18]
    8758:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    875c:	82e1      	strh	r1, [r4, #22]
    875e:	7d41      	ldrb	r1, [r0, #21]
    8760:	7621      	strb	r1, [r4, #24]
    8762:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    8766:	f007 fe78 	bl	1045a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    876a:	4607      	mov	r7, r0
    876c:	6060      	str	r0, [r4, #4]
    876e:	6830      	ldr	r0, [r6, #0]
    8770:	4639      	mov	r1, r7
    8772:	7d80      	ldrb	r0, [r0, #22]
    8774:	f008 f895 	bl	108a2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8778:	8360      	strh	r0, [r4, #26]
    877a:	6830      	ldr	r0, [r6, #0]
    877c:	4639      	mov	r1, r7
    877e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    8782:	f008 f885 	bl	10890 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8786:	61e0      	str	r0, [r4, #28]
    8788:	6830      	ldr	r0, [r6, #0]
    878a:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    878e:	8121      	strh	r1, [r4, #8]
    8790:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    8794:	8161      	strh	r1, [r4, #10]
    8796:	f100 011f 	add.w	r1, r0, #31
    879a:	f104 000c 	add.w	r0, r4, #12
    879e:	f00a f8a8 	bl	128f2 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    87a2:	6830      	ldr	r0, [r6, #0]
    87a4:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    87a8:	f001 011f 	and.w	r1, r1, #31
    87ac:	f884 1020 	strb.w	r1, [r4, #32]
    87b0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    87b4:	0940      	lsrs	r0, r0, #5
    87b6:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    87ba:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    87be:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    87c2:	2101      	movs	r1, #1
    87c4:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
    87c8:	f015 0f0c 	tst.w	r5, #12
    87cc:	bf14      	ite	ne
    87ce:	2101      	movne	r1, #1
    87d0:	2100      	moveq	r1, #0
    87d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    87d6:	f008 fb6c 	bl	10eb2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    87da:	4804      	ldr	r0, [pc, #16]	; (87ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ec>)
    87dc:	7c00      	ldrb	r0, [r0, #16]
    87de:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    87e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87e6:	0000      	.short	0x0000
    87e8:	20000110 	.word	0x20000110
    87ec:	20001264 	.word	0x20001264
    87f0:	00000003 	.word	0x00000003
    87f4:	55555501 	.word	0x55555501
    87f8:	8e89bed6 	.word	0x8e89bed6
    87fc:	2000127c 	.word	0x2000127c
	...
    880c:	00007f4d 	.word	0x00007f4d
    8810:	00007c99 	.word	0x00007c99
    8814:	00007e9d 	.word	0x00007e9d
    8818:	00000000 	.word	0x00000000
    881c:	00008ce9 	.word	0x00008ce9
    8820:	00007da1 	.word	0x00007da1
    8824:	00007ed9 	.word	0x00007ed9
    8828:	00010f39 	.word	0x00010f39
    882c:	00010f3f 	.word	0x00010f3f
    8830:	00010f45 	.word	0x00010f45
    8834:	0000827d 	.word	0x0000827d
    8838:	000112c1 	.word	0x000112c1
    883c:	0000882c 	.word	0x0000882c
    8840:	00008824 	.word	0x00008824
    8844:	00008820 	.word	0x00008820

00008848 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8848:	b510      	push	{r4, lr}
    884a:	1e42      	subs	r2, r0, #1
    884c:	2a02      	cmp	r2, #2
    884e:	d903      	bls.n	8858 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    8850:	21ca      	movs	r1, #202	; 0xca
    8852:	202f      	movs	r0, #47	; 0x2f
    8854:	f7fb f9dc 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8858:	1e40      	subs	r0, r0, #1
    885a:	2910      	cmp	r1, #16
    885c:	bf02      	ittt	eq
    885e:	490a      	ldreq	r1, [pc, #40]	; (8888 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    8860:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    8864:	bd10      	popeq	{r4, pc}
    8866:	2912      	cmp	r1, #18
    8868:	bf14      	ite	ne
    886a:	2913      	cmpne	r1, #19
    886c:	4907      	ldreq	r1, [pc, #28]	; (888c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    886e:	d007      	beq.n	8880 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8870:	2915      	cmp	r1, #21
    8872:	bf08      	it	eq
    8874:	4906      	ldreq	r1, [pc, #24]	; (8890 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    8876:	d003      	beq.n	8880 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8878:	21d8      	movs	r1, #216	; 0xd8
    887a:	202f      	movs	r0, #47	; 0x2f
    887c:	f7fb f9c8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8880:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8884:	bd10      	pop	{r4, pc}
    8886:	0000      	.short	0x0000
    8888:	0001141e 	.word	0x0001141e
    888c:	00011418 	.word	0x00011418
    8890:	00011424 	.word	0x00011424

00008894 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8894:	1e42      	subs	r2, r0, #1
    8896:	b510      	push	{r4, lr}
    8898:	b2d2      	uxtb	r2, r2
    889a:	2a01      	cmp	r2, #1
    889c:	d905      	bls.n	88aa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    889e:	291d      	cmp	r1, #29
    88a0:	d01e      	beq.n	88e0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    88a2:	21ee      	movs	r1, #238	; 0xee
    88a4:	202f      	movs	r0, #47	; 0x2f
    88a6:	f7fb f9b3 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88aa:	2913      	cmp	r1, #19
    88ac:	d014      	beq.n	88d8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    88ae:	dc08      	bgt.n	88c2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    88b0:	2910      	cmp	r1, #16
    88b2:	bf02      	ittt	eq
    88b4:	480d      	ldreq	r0, [pc, #52]	; (88ec <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    88b6:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    88ba:	bd10      	popeq	{r4, pc}
    88bc:	2912      	cmp	r1, #18
    88be:	d00b      	beq.n	88d8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    88c0:	e005      	b.n	88ce <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    88c2:	2915      	cmp	r1, #21
    88c4:	bf08      	it	eq
    88c6:	480a      	ldreq	r0, [pc, #40]	; (88f0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    88c8:	d007      	beq.n	88da <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    88ca:	291d      	cmp	r1, #29
    88cc:	d008      	beq.n	88e0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    88ce:	f44f 7181 	mov.w	r1, #258	; 0x102
    88d2:	202f      	movs	r0, #47	; 0x2f
    88d4:	f7fb f99c 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88d8:	4806      	ldr	r0, [pc, #24]	; (88f4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    88da:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    88de:	bd10      	pop	{r4, pc}
    88e0:	f240 315a 	movw	r1, #858	; 0x35a
    88e4:	fb10 f001 	smulbb	r0, r0, r1
    88e8:	bd10      	pop	{r4, pc}
    88ea:	0000      	.short	0x0000
    88ec:	0001140c 	.word	0x0001140c
    88f0:	00011414 	.word	0x00011414
    88f4:	00011410 	.word	0x00011410

000088f8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    88f8:	b570      	push	{r4, r5, r6, lr}
    88fa:	4c1a      	ldr	r4, [pc, #104]	; (8964 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x6c>)
    88fc:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    8900:	2800      	cmp	r0, #0
    8902:	bf1c      	itt	ne
    8904:	2000      	movne	r0, #0
    8906:	bd70      	popne	{r4, r5, r6, pc}
    8908:	7a20      	ldrb	r0, [r4, #8]
    890a:	b138      	cbz	r0, 891c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    890c:	68e1      	ldr	r1, [r4, #12]
    890e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8910:	4288      	cmp	r0, r1
    8912:	d903      	bls.n	891c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    8914:	f7ff f8ba 	bl	7a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8918:	2000      	movs	r0, #0
    891a:	bd70      	pop	{r4, r5, r6, pc}
    891c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    891e:	b1f8      	cbz	r0, 8960 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    8920:	f7fe fdd4 	bl	74cc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8924:	4605      	mov	r5, r0
    8926:	f7fe fe19 	bl	755c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    892a:	f200 100d 	addw	r0, r0, #269	; 0x10d
    892e:	4428      	add	r0, r5
    8930:	f242 7110 	movw	r1, #10000	; 0x2710
    8934:	1846      	adds	r6, r0, r1
    8936:	f006 fa36 	bl	eda6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    893a:	4605      	mov	r5, r0
    893c:	4629      	mov	r1, r5
    893e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    8940:	f7f8 fd80 	bl	1444 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8944:	6325      	str	r5, [r4, #48]	; 0x30
    8946:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8948:	1982      	adds	r2, r0, r6
    894a:	4291      	cmp	r1, r2
    894c:	bf24      	itt	cs
    894e:	1a08      	subcs	r0, r1, r0
    8950:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    8952:	d205      	bcs.n	8960 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    8954:	2001      	movs	r0, #1
    8956:	62e0      	str	r0, [r4, #44]	; 0x2c
    8958:	f7ff f898 	bl	7a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    895c:	2000      	movs	r0, #0
    895e:	bd70      	pop	{r4, r5, r6, pc}
    8960:	2001      	movs	r0, #1
    8962:	bd70      	pop	{r4, r5, r6, pc}
    8964:	2000133c 	.word	0x2000133c

00008968 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    8968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    896a:	4f25      	ldr	r7, [pc, #148]	; (8a00 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x98>)
    896c:	4c25      	ldr	r4, [pc, #148]	; (8a04 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x9c>)
    896e:	2500      	movs	r5, #0
    8970:	b130      	cbz	r0, 8980 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x18>
    8972:	2801      	cmp	r0, #1
    8974:	d039      	beq.n	89ea <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x82>
    8976:	f240 7157 	movw	r1, #1879	; 0x757
    897a:	2030      	movs	r0, #48	; 0x30
    897c:	f7fb f948 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8980:	7860      	ldrb	r0, [r4, #1]
    8982:	2600      	movs	r6, #0
    8984:	b160      	cbz	r0, 89a0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x38>
    8986:	2101      	movs	r1, #1
    8988:	4668      	mov	r0, sp
    898a:	f7fb ff97 	bl	48bc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    898e:	f89d 0000 	ldrb.w	r0, [sp]
    8992:	f242 7110 	movw	r1, #10000	; 0x2710
    8996:	0200      	lsls	r0, r0, #8
    8998:	fbb0 f2f1 	udiv	r2, r0, r1
    899c:	fb01 0612 	mls	r6, r1, r2, r0
    89a0:	f7fe fd94 	bl	74cc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    89a4:	1981      	adds	r1, r0, r6
    89a6:	6a20      	ldr	r0, [r4, #32]
    89a8:	f7f8 fd16 	bl	13d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    89ac:	6220      	str	r0, [r4, #32]
    89ae:	7525      	strb	r5, [r4, #20]
    89b0:	77e5      	strb	r5, [r4, #31]
    89b2:	2003      	movs	r0, #3
    89b4:	77a0      	strb	r0, [r4, #30]
    89b6:	2064      	movs	r0, #100	; 0x64
    89b8:	83a0      	strh	r0, [r4, #28]
    89ba:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    89be:	b928      	cbnz	r0, 89cc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x64>
    89c0:	7820      	ldrb	r0, [r4, #0]
    89c2:	f104 0114 	add.w	r1, r4, #20
    89c6:	f7f8 fe53 	bl	1670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    89ca:	b148      	cbz	r0, 89e0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x78>
    89cc:	84a5      	strh	r5, [r4, #36]	; 0x24
    89ce:	f005 f909 	bl	dbe4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    89d2:	f7f9 fcbb 	bl	234c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    89d6:	7978      	ldrb	r0, [r7, #5]
    89d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    89dc:	f7fa bf06 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    89e0:	f240 61c6 	movw	r1, #1734	; 0x6c6
    89e4:	2030      	movs	r0, #48	; 0x30
    89e6:	f7fb f913 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89ea:	7225      	strb	r5, [r4, #8]
    89ec:	f005 f8fa 	bl	dbe4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    89f0:	f7f9 fcac 	bl	234c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    89f4:	7978      	ldrb	r0, [r7, #5]
    89f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    89fa:	f7fa bef7 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    89fe:	0000      	.short	0x0000
    8a00:	20000124 	.word	0x20000124
    8a04:	2000133c 	.word	0x2000133c

00008a08 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    8a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8a0c:	4d48      	ldr	r5, [pc, #288]	; (8b30 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    8a0e:	4606      	mov	r6, r0
    8a10:	460f      	mov	r7, r1
    8a12:	7c28      	ldrb	r0, [r5, #16]
    8a14:	2800      	cmp	r0, #0
    8a16:	d150      	bne.n	8aba <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    8a18:	4846      	ldr	r0, [pc, #280]	; (8b34 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    8a1a:	f7f9 fc73 	bl	2304 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8a1e:	2820      	cmp	r0, #32
    8a20:	d04b      	beq.n	8aba <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    8a22:	2400      	movs	r4, #0
    8a24:	602c      	str	r4, [r5, #0]
    8a26:	606c      	str	r4, [r5, #4]
    8a28:	60ac      	str	r4, [r5, #8]
    8a2a:	60ec      	str	r4, [r5, #12]
    8a2c:	612c      	str	r4, [r5, #16]
    8a2e:	616c      	str	r4, [r5, #20]
    8a30:	61ac      	str	r4, [r5, #24]
    8a32:	61ec      	str	r4, [r5, #28]
    8a34:	622c      	str	r4, [r5, #32]
    8a36:	626c      	str	r4, [r5, #36]	; 0x24
    8a38:	62ac      	str	r4, [r5, #40]	; 0x28
    8a3a:	62ec      	str	r4, [r5, #44]	; 0x2c
    8a3c:	632c      	str	r4, [r5, #48]	; 0x30
    8a3e:	636c      	str	r4, [r5, #52]	; 0x34
    8a40:	63ac      	str	r4, [r5, #56]	; 0x38
    8a42:	7028      	strb	r0, [r5, #0]
    8a44:	f04f 0803 	mov.w	r8, #3
    8a48:	606e      	str	r6, [r5, #4]
    8a4a:	f885 8010 	strb.w	r8, [r5, #16]
    8a4e:	b15e      	cbz	r6, 8a68 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x60>
    8a50:	2101      	movs	r1, #1
    8a52:	f506 7098 	add.w	r0, r6, #304	; 0x130
    8a56:	f7fb ff4b 	bl	48f0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    8a5a:	f896 0130 	ldrb.w	r0, [r6, #304]	; 0x130
    8a5e:	f000 0007 	and.w	r0, r0, #7
    8a62:	1c40      	adds	r0, r0, #1
    8a64:	f886 0130 	strb.w	r0, [r6, #304]	; 0x130
    8a68:	2064      	movs	r0, #100	; 0x64
    8a6a:	83a8      	strh	r0, [r5, #28]
    8a6c:	f885 801e 	strb.w	r8, [r5, #30]
    8a70:	77ec      	strb	r4, [r5, #31]
    8a72:	752c      	strb	r4, [r5, #20]
    8a74:	f7f8 fdf2 	bl	165c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8a78:	8ba9      	ldrh	r1, [r5, #28]
    8a7a:	4288      	cmp	r0, r1
    8a7c:	bf98      	it	ls
    8a7e:	4608      	movls	r0, r1
    8a80:	f200 60c3 	addw	r0, r0, #1731	; 0x6c3
    8a84:	b286      	uxth	r6, r0
    8a86:	f7fe ff41 	bl	790c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8a8a:	f04f 0801 	mov.w	r8, #1
    8a8e:	b1f8      	cbz	r0, 8ad0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc8>
    8a90:	61af      	str	r7, [r5, #24]
    8a92:	f006 f988 	bl	eda6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8a96:	4631      	mov	r1, r6
    8a98:	f7f8 fc9e 	bl	13d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8a9c:	6228      	str	r0, [r5, #32]
    8a9e:	706c      	strb	r4, [r5, #1]
    8aa0:	f885 8008 	strb.w	r8, [r5, #8]
    8aa4:	f7fe ff28 	bl	78f8 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    8aa8:	b150      	cbz	r0, 8ac0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb8>
    8aaa:	f7fe fd57 	bl	755c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8aae:	f200 100d 	addw	r0, r0, #269	; 0x10d
    8ab2:	1a38      	subs	r0, r7, r0
    8ab4:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    8ab8:	e007      	b.n	8aca <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc2>
    8aba:	200c      	movs	r0, #12
    8abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8ac0:	f008 fca1 	bl	11406 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    8ac4:	1a38      	subs	r0, r7, r0
    8ac6:	f2a0 100d 	subw	r0, r0, #269	; 0x10d
    8aca:	62ec      	str	r4, [r5, #44]	; 0x2c
    8acc:	60e8      	str	r0, [r5, #12]
    8ace:	e01d      	b.n	8b0c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x104>
    8ad0:	f7fe fd44 	bl	755c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8ad4:	f200 100d 	addw	r0, r0, #269	; 0x10d
    8ad8:	61a8      	str	r0, [r5, #24]
    8ada:	f885 8001 	strb.w	r8, [r5, #1]
    8ade:	f006 f962 	bl	eda6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8ae2:	4680      	mov	r8, r0
    8ae4:	2101      	movs	r1, #1
    8ae6:	4668      	mov	r0, sp
    8ae8:	f7fb fef6 	bl	48d8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    8aec:	f89d 0000 	ldrb.w	r0, [sp]
    8af0:	f242 7110 	movw	r1, #10000	; 0x2710
    8af4:	0200      	lsls	r0, r0, #8
    8af6:	fbb0 f2f1 	udiv	r2, r0, r1
    8afa:	fb01 0012 	mls	r0, r1, r2, r0
    8afe:	1981      	adds	r1, r0, r6
    8b00:	4640      	mov	r0, r8
    8b02:	f7f8 fc69 	bl	13d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8b06:	6228      	str	r0, [r5, #32]
    8b08:	e9c5 780b 	strd	r7, r8, [r5, #44]	; 0x2c
    8b0c:	7828      	ldrb	r0, [r5, #0]
    8b0e:	f105 0114 	add.w	r1, r5, #20
    8b12:	f7f8 fdad 	bl	1670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8b16:	b130      	cbz	r0, 8b26 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11e>
    8b18:	84ac      	strh	r4, [r5, #36]	; 0x24
    8b1a:	2000      	movs	r0, #0
    8b1c:	f7fe ffa0 	bl	7a60 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8b20:	2000      	movs	r0, #0
    8b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b26:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    8b2a:	2030      	movs	r0, #48	; 0x30
    8b2c:	f7fb f870 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b30:	2000133c 	.word	0x2000133c
    8b34:	000096cd 	.word	0x000096cd

00008b38 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    8b38:	b510      	push	{r4, lr}
    8b3a:	4c11      	ldr	r4, [pc, #68]	; (8b80 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x48>)
    8b3c:	7c20      	ldrb	r0, [r4, #16]
    8b3e:	b158      	cbz	r0, 8b58 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x20>
    8b40:	2001      	movs	r0, #1
    8b42:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    8b46:	f7fe ff8b 	bl	7a60 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8b4a:	7c20      	ldrb	r0, [r4, #16]
    8b4c:	2803      	cmp	r0, #3
    8b4e:	d005      	beq.n	8b5c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x24>
    8b50:	7c60      	ldrb	r0, [r4, #17]
    8b52:	2800      	cmp	r0, #0
    8b54:	bf08      	it	eq
    8b56:	bd10      	popeq	{r4, pc}
    8b58:	200c      	movs	r0, #12
    8b5a:	bd10      	pop	{r4, pc}
    8b5c:	7820      	ldrb	r0, [r4, #0]
    8b5e:	f7f9 f99b 	bl	1e98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8b62:	7820      	ldrb	r0, [r4, #0]
    8b64:	f7f9 fac6 	bl	20f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8b68:	7820      	ldrb	r0, [r4, #0]
    8b6a:	f7f9 faa1 	bl	20b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8b6e:	b110      	cbz	r0, 8b76 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    8b70:	2000      	movs	r0, #0
    8b72:	7420      	strb	r0, [r4, #16]
    8b74:	bd10      	pop	{r4, pc}
    8b76:	f240 11f5 	movw	r1, #501	; 0x1f5
    8b7a:	2030      	movs	r0, #48	; 0x30
    8b7c:	f7fb f848 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b80:	2000133c 	.word	0x2000133c

00008b84 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    8b84:	4801      	ldr	r0, [pc, #4]	; (8b8c <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A+0x8>)
    8b86:	6840      	ldr	r0, [r0, #4]
    8b88:	4770      	bx	lr
    8b8a:	0000      	.short	0x0000
    8b8c:	2000133c 	.word	0x2000133c

00008b90 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    8b90:	4802      	ldr	r0, [pc, #8]	; (8b9c <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xc>)
    8b92:	7c00      	ldrb	r0, [r0, #16]
    8b94:	2800      	cmp	r0, #0
    8b96:	bf18      	it	ne
    8b98:	2001      	movne	r0, #1
    8b9a:	4770      	bx	lr
    8b9c:	2000133c 	.word	0x2000133c

00008ba0 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    8ba0:	4906      	ldr	r1, [pc, #24]	; (8bbc <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x1c>)
    8ba2:	7148      	strb	r0, [r1, #5]
    8ba4:	2000      	movs	r0, #0
    8ba6:	7088      	strb	r0, [r1, #2]
    8ba8:	2201      	movs	r2, #1
    8baa:	700a      	strb	r2, [r1, #0]
    8bac:	7048      	strb	r0, [r1, #1]
    8bae:	710a      	strb	r2, [r1, #4]
    8bb0:	70c8      	strb	r0, [r1, #3]
    8bb2:	4903      	ldr	r1, [pc, #12]	; (8bc0 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x20>)
    8bb4:	7408      	strb	r0, [r1, #16]
    8bb6:	f000 b805 	b.w	8bc4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    8bba:	0000      	.short	0x0000
    8bbc:	20000124 	.word	0x20000124
    8bc0:	2000133c 	.word	0x2000133c

00008bc4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    8bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bc8:	4c3d      	ldr	r4, [pc, #244]	; (8cc0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xfc>)
    8bca:	b084      	sub	sp, #16
    8bcc:	7c20      	ldrb	r0, [r4, #16]
    8bce:	2601      	movs	r6, #1
    8bd0:	2500      	movs	r5, #0
    8bd2:	b148      	cbz	r0, 8be8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8bd4:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    8bd8:	2001      	movs	r0, #1
    8bda:	f7fe ff41 	bl	7a60 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8bde:	7c20      	ldrb	r0, [r4, #16]
    8be0:	2803      	cmp	r0, #3
    8be2:	bf18      	it	ne
    8be4:	7c60      	ldrbne	r0, [r4, #17]
    8be6:	d00b      	beq.n	8c00 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x3c>
    8be8:	4f36      	ldr	r7, [pc, #216]	; (8cc4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x100>)
    8bea:	70fe      	strb	r6, [r7, #3]
    8bec:	4669      	mov	r1, sp
    8bee:	2001      	movs	r0, #1
    8bf0:	f007 fb19 	bl	10226 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8bf4:	2800      	cmp	r0, #0
    8bf6:	bf08      	it	eq
    8bf8:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    8bfc:	d040      	beq.n	8c80 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    8bfe:	e03a      	b.n	8c76 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xb2>
    8c00:	7820      	ldrb	r0, [r4, #0]
    8c02:	f7f9 f949 	bl	1e98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8c06:	7820      	ldrb	r0, [r4, #0]
    8c08:	f7f9 fa74 	bl	20f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8c0c:	7820      	ldrb	r0, [r4, #0]
    8c0e:	f7f9 fa4f 	bl	20b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8c12:	2800      	cmp	r0, #0
    8c14:	bf18      	it	ne
    8c16:	7425      	strbne	r5, [r4, #16]
    8c18:	d1e6      	bne.n	8be8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8c1a:	f240 11f5 	movw	r1, #501	; 0x1f5
    8c1e:	2030      	movs	r0, #48	; 0x30
    8c20:	f7fa fff6 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c24:	9802      	ldr	r0, [sp, #8]
    8c26:	2800      	cmp	r0, #0
    8c28:	bf1c      	itt	ne
    8c2a:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    8c2e:	2900      	cmpne	r1, #0
    8c30:	d026      	beq.n	8c80 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    8c32:	8800      	ldrh	r0, [r0, #0]
    8c34:	42b0      	cmp	r0, r6
    8c36:	bf18      	it	ne
    8c38:	f04f 0820 	movne.w	r8, #32
    8c3c:	d03b      	beq.n	8cb6 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8c3e:	2101      	movs	r1, #1
    8c40:	f007 fae7 	bl	10212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8c44:	0004      	movs	r4, r0
    8c46:	d021      	beq.n	8c8c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xc8>
    8c48:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8c4c:	f7f9 fa52 	bl	20f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8c50:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    8c54:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8c5c:	f7fd fd34 	bl	66c8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    8c60:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8c64:	f7f9 fa24 	bl	20b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8c68:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    8c6c:	4669      	mov	r1, sp
    8c6e:	2001      	movs	r0, #1
    8c70:	f007 fad9 	bl	10226 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8c74:	b1d0      	cbz	r0, 8cac <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    8c76:	f240 1123 	movw	r1, #291	; 0x123
    8c7a:	2030      	movs	r0, #48	; 0x30
    8c7c:	f7fa ffc8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c80:	4668      	mov	r0, sp
    8c82:	f7fb fa27 	bl	40d4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8c86:	2800      	cmp	r0, #0
    8c88:	d0cc      	beq.n	8c24 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x60>
    8c8a:	e014      	b.n	8cb6 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8c8c:	f240 1143 	movw	r1, #323	; 0x143
    8c90:	2030      	movs	r0, #48	; 0x30
    8c92:	f7fa ffbd 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c96:	9802      	ldr	r0, [sp, #8]
    8c98:	2800      	cmp	r0, #0
    8c9a:	bf1c      	itt	ne
    8c9c:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    8ca0:	2900      	cmpne	r1, #0
    8ca2:	d003      	beq.n	8cac <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    8ca4:	8800      	ldrh	r0, [r0, #0]
    8ca6:	42b0      	cmp	r0, r6
    8ca8:	d1c9      	bne.n	8c3e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x7a>
    8caa:	e004      	b.n	8cb6 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8cac:	4668      	mov	r0, sp
    8cae:	f7fb fa11 	bl	40d4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8cb2:	2800      	cmp	r0, #0
    8cb4:	d0ef      	beq.n	8c96 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xd2>
    8cb6:	70fd      	strb	r5, [r7, #3]
    8cb8:	b004      	add	sp, #16
    8cba:	2000      	movs	r0, #0
    8cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cc0:	2000133c 	.word	0x2000133c
    8cc4:	20000124 	.word	0x20000124

00008cc8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    8cc8:	4806      	ldr	r0, [pc, #24]	; (8ce4 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x1c>)
    8cca:	7c00      	ldrb	r0, [r0, #16]
    8ccc:	2800      	cmp	r0, #0
    8cce:	bf1c      	itt	ne
    8cd0:	2000      	movne	r0, #0
    8cd2:	4770      	bxne	lr
    8cd4:	b510      	push	{r4, lr}
    8cd6:	2001      	movs	r0, #1
    8cd8:	f007 fa89 	bl	101ee <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    8cdc:	f080 0001 	eor.w	r0, r0, #1
    8ce0:	bd10      	pop	{r4, pc}
    8ce2:	0000      	.short	0x0000
    8ce4:	2000133c 	.word	0x2000133c

00008ce8 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    8ce8:	4904      	ldr	r1, [pc, #16]	; (8cfc <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x14>)
    8cea:	788a      	ldrb	r2, [r1, #2]
    8cec:	2a02      	cmp	r2, #2
    8cee:	bf07      	ittee	eq
    8cf0:	6949      	ldreq	r1, [r1, #20]
    8cf2:	f8c1 0178 	streq.w	r0, [r1, #376]	; 0x178
    8cf6:	4902      	ldrne	r1, [pc, #8]	; (8d00 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    8cf8:	6288      	strne	r0, [r1, #40]	; 0x28
    8cfa:	4770      	bx	lr
    8cfc:	20000124 	.word	0x20000124
    8d00:	2000133c 	.word	0x2000133c

00008d04 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    8d04:	4901      	ldr	r1, [pc, #4]	; (8d0c <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    8d06:	7008      	strb	r0, [r1, #0]
    8d08:	4770      	bx	lr
    8d0a:	0000      	.short	0x0000
    8d0c:	20000124 	.word	0x20000124

00008d10 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    8d10:	4901      	ldr	r1, [pc, #4]	; (8d18 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    8d12:	7048      	strb	r0, [r1, #1]
    8d14:	4770      	bx	lr
    8d16:	0000      	.short	0x0000
    8d18:	20000124 	.word	0x20000124

00008d1c <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    8d1c:	4905      	ldr	r1, [pc, #20]	; (8d34 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    8d1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8d22:	fbb1 f1f2 	udiv	r1, r1, r2
    8d26:	b510      	push	{r4, lr}
    8d28:	f201 210d 	addw	r1, r1, #525	; 0x20d
    8d2c:	f008 f8e5 	bl	10efa <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8d30:	b280      	uxth	r0, r0
    8d32:	bd10      	pop	{r4, pc}
    8d34:	0001527d 	.word	0x0001527d

00008d38 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d3c:	4c13      	ldr	r4, [pc, #76]	; (8d8c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x54>)
    8d3e:	4606      	mov	r6, r0
    8d40:	f8d0 7178 	ldr.w	r7, [r0, #376]	; 0x178
    8d44:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    8d48:	7860      	ldrb	r0, [r4, #1]
    8d4a:	b120      	cbz	r0, 8d56 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1e>
    8d4c:	463a      	mov	r2, r7
    8d4e:	4628      	mov	r0, r5
    8d50:	f007 fba0 	bl	10494 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8d54:	4605      	mov	r5, r0
    8d56:	68a0      	ldr	r0, [r4, #8]
    8d58:	4285      	cmp	r5, r0
    8d5a:	d005      	beq.n	8d68 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x30>
    8d5c:	6921      	ldr	r1, [r4, #16]
    8d5e:	1a28      	subs	r0, r5, r0
    8d60:	4408      	add	r0, r1
    8d62:	6120      	str	r0, [r4, #16]
    8d64:	f7f9 fb94 	bl	2490 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8d68:	60a5      	str	r5, [r4, #8]
    8d6a:	42af      	cmp	r7, r5
    8d6c:	d80a      	bhi.n	8d84 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x4c>
    8d6e:	6870      	ldr	r0, [r6, #4]
    8d70:	f641 514c 	movw	r1, #7500	; 0x1d4c
    8d74:	4281      	cmp	r1, r0
    8d76:	bf9c      	itt	ls
    8d78:	78e0      	ldrbls	r0, [r4, #3]
    8d7a:	2800      	cmpls	r0, #0
    8d7c:	bf04      	itt	eq
    8d7e:	2001      	moveq	r0, #1
    8d80:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d84:	f04f 0000 	mov.w	r0, #0
    8d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d8c:	20000124 	.word	0x20000124

00008d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d94:	4a6d      	ldr	r2, [pc, #436]	; (8f4c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1bc>)
    8d96:	2304      	movs	r3, #4
    8d98:	4d6d      	ldr	r5, [pc, #436]	; (8f50 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>)
    8d9a:	2600      	movs	r6, #0
    8d9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    8d9e:	2908      	cmp	r1, #8
    8da0:	f080 80ce 	bcs.w	8f40 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    8da4:	e8df f001 	tbb	[pc, r1]
    8da8:	1b042c08 	.word	0x1b042c08
    8dac:	c5c1bb31 	.word	0xc5c1bb31
    8db0:	4604      	mov	r4, r0
    8db2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    8db6:	e006      	b.n	8dc6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x36>
    8db8:	4604      	mov	r4, r0
    8dba:	78e8      	ldrb	r0, [r5, #3]
    8dbc:	2800      	cmp	r0, #0
    8dbe:	bf18      	it	ne
    8dc0:	f884 3140 	strbne.w	r3, [r4, #320]	; 0x140
    8dc4:	d00d      	beq.n	8de2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    8dc6:	f004 ff0d 	bl	dbe4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8dca:	f7f9 fabf 	bl	234c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8dce:	f8a4 6172 	strh.w	r6, [r4, #370]	; 0x172
    8dd2:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    8dd6:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    8dda:	f884 6155 	strb.w	r6, [r4, #341]	; 0x155
    8dde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8de2:	9600      	str	r6, [sp, #0]
    8de4:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    8de8:	2301      	movs	r3, #1
    8dea:	2200      	movs	r2, #0
    8dec:	4620      	mov	r0, r4
    8dee:	f000 f903 	bl	8ff8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x268>
    8df2:	2800      	cmp	r0, #0
    8df4:	d0e7      	beq.n	8dc6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x36>
    8df6:	f240 61a4 	movw	r1, #1700	; 0x6a4
    8dfa:	2030      	movs	r0, #48	; 0x30
    8dfc:	f7fa ff08 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e00:	2103      	movs	r1, #3
    8e02:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
    8e06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e0a:	f004 fedf 	bl	dbcc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8e0e:	696c      	ldr	r4, [r5, #20]
    8e10:	f8c4 017c 	str.w	r0, [r4, #380]	; 0x17c
    8e14:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    8e18:	f009 fc9e 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8e1c:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    8e20:	1a08      	subs	r0, r1, r0
    8e22:	68a9      	ldr	r1, [r5, #8]
    8e24:	4401      	add	r1, r0
    8e26:	60a9      	str	r1, [r5, #8]
    8e28:	68e9      	ldr	r1, [r5, #12]
    8e2a:	4408      	add	r0, r1
    8e2c:	60e8      	str	r0, [r5, #12]
    8e2e:	696c      	ldr	r4, [r5, #20]
    8e30:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    8e34:	2800      	cmp	r0, #0
    8e36:	bf08      	it	eq
    8e38:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e3c:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    8e40:	2803      	cmp	r0, #3
    8e42:	bf18      	it	ne
    8e44:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e48:	f894 7067 	ldrb.w	r7, [r4, #103]	; 0x67
    8e4c:	7829      	ldrb	r1, [r5, #0]
    8e4e:	290c      	cmp	r1, #12
    8e50:	d206      	bcs.n	8e60 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd0>
    8e52:	4840      	ldr	r0, [pc, #256]	; (8f54 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c4>)
    8e54:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
    8e58:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    8e5c:	290c      	cmp	r1, #12
    8e5e:	d304      	bcc.n	8e6a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xda>
    8e60:	f44f 7147 	mov.w	r1, #796	; 0x31c
    8e64:	2006      	movs	r0, #6
    8e66:	f7fa fed3 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e6a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    8e6e:	1811      	adds	r1, r2, r0
    8e70:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8e74:	fa1f f980 	uxth.w	r9, r0
    8e78:	b28d      	uxth	r5, r1
    8e7a:	4638      	mov	r0, r7
    8e7c:	f009 fc6c 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8e80:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    8e84:	f017 0f0c 	tst.w	r7, #12
    8e88:	eba1 0800 	sub.w	r8, r1, r0
    8e8c:	bf0a      	itet	eq
    8e8e:	4638      	moveq	r0, r7
    8e90:	f64e 2060 	movwne	r0, #60000	; 0xea60
    8e94:	f009 fc74 	bleq	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8e98:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    8e9c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    8ea0:	fbb0 f0fa 	udiv	r0, r0, sl
    8ea4:	eba8 0800 	sub.w	r8, r8, r0
    8ea8:	4638      	mov	r0, r7
    8eaa:	f009 fc55 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8eae:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    8eb2:	f017 0f0c 	tst.w	r7, #12
    8eb6:	eba1 0b00 	sub.w	fp, r1, r0
    8eba:	bf0a      	itet	eq
    8ebc:	4638      	moveq	r0, r7
    8ebe:	f64e 2060 	movwne	r0, #60000	; 0xea60
    8ec2:	f009 fc5d 	bleq	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8ec6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8eca:	4408      	add	r0, r1
    8ecc:	fbb0 f0fa 	udiv	r0, r0, sl
    8ed0:	ebab 0000 	sub.w	r0, fp, r0
    8ed4:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    8ed8:	4369      	muls	r1, r5
    8eda:	fbb1 f1f9 	udiv	r1, r1, r9
    8ede:	2229      	movs	r2, #41	; 0x29
    8ee0:	eb02 0050 	add.w	r0, r2, r0, lsr #1
    8ee4:	3160      	adds	r1, #96	; 0x60
    8ee6:	eba0 0251 	sub.w	r2, r0, r1, lsr #1
    8eea:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    8eee:	4542      	cmp	r2, r8
    8ef0:	d801      	bhi.n	8ef6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x166>
    8ef2:	4540      	cmp	r0, r8
    8ef4:	d201      	bcs.n	8efa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x16a>
    8ef6:	f7fa fad3 	bl	34a0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    8efa:	4629      	mov	r1, r5
    8efc:	6860      	ldr	r0, [r4, #4]
    8efe:	f005 ff86 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8f02:	6861      	ldr	r1, [r4, #4]
    8f04:	f641 524c 	movw	r2, #7500	; 0x1d4c
    8f08:	4291      	cmp	r1, r2
    8f0a:	bf34      	ite	cc
    8f0c:	2102      	movcc	r1, #2
    8f0e:	2100      	movcs	r1, #0
    8f10:	4408      	add	r0, r1
    8f12:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    8f16:	f884 6156 	strb.w	r6, [r4, #342]	; 0x156
    8f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f1e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f22:	2100      	movs	r1, #0
    8f24:	4610      	mov	r0, r2
    8f26:	f000 b817 	b.w	8f58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c8>
    8f2a:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
    8f2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f32:	f8d0 0178 	ldr.w	r0, [r0, #376]	; 0x178
    8f36:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f3a:	2101      	movs	r1, #1
    8f3c:	f000 b80c 	b.w	8f58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c8>
    8f40:	f240 7145 	movw	r1, #1861	; 0x745
    8f44:	2030      	movs	r0, #48	; 0x30
    8f46:	f7fa fe63 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f4a:	0000      	.short	0x0000
    8f4c:	2000133c 	.word	0x2000133c
    8f50:	20000124 	.word	0x20000124
    8f54:	00011530 	.word	0x00011530
    8f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f5c:	4c24      	ldr	r4, [pc, #144]	; (8ff0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x260>)
    8f5e:	2500      	movs	r5, #0
    8f60:	4680      	mov	r8, r0
    8f62:	7225      	strb	r5, [r4, #8]
    8f64:	6a26      	ldr	r6, [r4, #32]
    8f66:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    8f6a:	7425      	strb	r5, [r4, #16]
    8f6c:	2701      	movs	r7, #1
    8f6e:	7467      	strb	r7, [r4, #17]
    8f70:	4639      	mov	r1, r7
    8f72:	6860      	ldr	r0, [r4, #4]
    8f74:	f7fd faa4 	bl	64c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8f78:	6861      	ldr	r1, [r4, #4]
    8f7a:	f8c1 6168 	str.w	r6, [r1, #360]	; 0x168
    8f7e:	7820      	ldrb	r0, [r4, #0]
    8f80:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    8f84:	f8c1 8178 	str.w	r8, [r1, #376]	; 0x178
    8f88:	f8c1 616c 	str.w	r6, [r1, #364]	; 0x16c
    8f8c:	8809      	ldrh	r1, [r1, #0]
    8f8e:	f7fd fb9b 	bl	66c8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    8f92:	6864      	ldr	r4, [r4, #4]
    8f94:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    8f98:	2300      	movs	r3, #0
    8f9a:	f8a4 5170 	strh.w	r5, [r4, #368]	; 0x170
    8f9e:	461a      	mov	r2, r3
    8fa0:	4619      	mov	r1, r3
    8fa2:	4620      	mov	r0, r4
    8fa4:	9500      	str	r5, [sp, #0]
    8fa6:	f000 f827 	bl	8ff8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x268>
    8faa:	b120      	cbz	r0, 8fb6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x226>
    8fac:	f44f 7105 	mov.w	r1, #532	; 0x214
    8fb0:	2030      	movs	r0, #48	; 0x30
    8fb2:	f7fa fe2d 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fb6:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    8fba:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    8fbe:	f884 7140 	strb.w	r7, [r4, #320]	; 0x140
    8fc2:	f8a4 5152 	strh.w	r5, [r4, #338]	; 0x152
    8fc6:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
    8fca:	f884 5155 	strb.w	r5, [r4, #341]	; 0x155
    8fce:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    8fd2:	1e40      	subs	r0, r0, #1
    8fd4:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    8fd8:	f8a4 5172 	strh.w	r5, [r4, #370]	; 0x172
    8fdc:	f004 fe02 	bl	dbe4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8fe0:	f7f9 f9b4 	bl	234c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8fe4:	4803      	ldr	r0, [pc, #12]	; (8ff4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x264>)
    8fe6:	7940      	ldrb	r0, [r0, #5]
    8fe8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8fec:	f7fa bbfe 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8ff0:	2000133c 	.word	0x2000133c
    8ff4:	20000124 	.word	0x20000124
    8ff8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ffc:	b08f      	sub	sp, #60	; 0x3c
    8ffe:	4604      	mov	r4, r0
    9000:	2000      	movs	r0, #0
    9002:	9000      	str	r0, [sp, #0]
    9004:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9008:	469b      	mov	fp, r3
    900a:	4689      	mov	r9, r1
    900c:	930b      	str	r3, [sp, #44]	; 0x2c
    900e:	9007      	str	r0, [sp, #28]
    9010:	48fe      	ldr	r0, [pc, #1016]	; (940c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x67c>)
    9012:	7800      	ldrb	r0, [r0, #0]
    9014:	280c      	cmp	r0, #12
    9016:	d279      	bcs.n	910c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x37c>
    9018:	49fd      	ldr	r1, [pc, #1012]	; (9410 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x680>)
    901a:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    901e:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
    9022:	280c      	cmp	r0, #12
    9024:	d272      	bcs.n	910c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x37c>
    9026:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    902a:	4410      	add	r0, r2
    902c:	b285      	uxth	r5, r0
    902e:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    9032:	280d      	cmp	r0, #13
    9034:	bf0c      	ite	eq
    9036:	2001      	moveq	r0, #1
    9038:	2000      	movne	r0, #0
    903a:	900a      	str	r0, [sp, #40]	; 0x28
    903c:	9811      	ldr	r0, [sp, #68]	; 0x44
    903e:	2800      	cmp	r0, #0
    9040:	bf04      	itt	eq
    9042:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
    9046:	2803      	cmpeq	r0, #3
    9048:	d128      	bne.n	909c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x30c>
    904a:	980a      	ldr	r0, [sp, #40]	; 0x28
    904c:	b330      	cbz	r0, 909c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x30c>
    904e:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    9052:	4548      	cmp	r0, r9
    9054:	d122      	bne.n	909c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x30c>
    9056:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    905a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    905e:	6860      	ldr	r0, [r4, #4]
    9060:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    9064:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    9068:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    906c:	4408      	add	r0, r1
    906e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    9072:	4620      	mov	r0, r4
    9074:	f000 fd68 	bl	9b48 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    9078:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    907c:	61e0      	str	r0, [r4, #28]
    907e:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    9082:	8360      	strh	r0, [r4, #26]
    9084:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    9088:	6060      	str	r0, [r4, #4]
    908a:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    908e:	8120      	strh	r0, [r4, #8]
    9090:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    9094:	8160      	strh	r0, [r4, #10]
    9096:	2002      	movs	r0, #2
    9098:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    909c:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    90a0:	f504 76ac 	add.w	r6, r4, #344	; 0x158
    90a4:	eba9 0000 	sub.w	r0, r9, r0
    90a8:	fa0f f880 	sxth.w	r8, r0
    90ac:	f8b4 0170 	ldrh.w	r0, [r4, #368]	; 0x170
    90b0:	eba9 0000 	sub.w	r0, r9, r0
    90b4:	b207      	sxth	r7, r0
    90b6:	2f00      	cmp	r7, #0
    90b8:	da09      	bge.n	90ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x33e>
    90ba:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    90be:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    90c2:	2001      	movs	r0, #1
    90c4:	900b      	str	r0, [sp, #44]	; 0x2c
    90c6:	2000      	movs	r0, #0
    90c8:	4647      	mov	r7, r8
    90ca:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    90ce:	48cf      	ldr	r0, [pc, #828]	; (940c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x67c>)
    90d0:	f04f 0a00 	mov.w	sl, #0
    90d4:	7900      	ldrb	r0, [r0, #4]
    90d6:	2800      	cmp	r0, #0
    90d8:	d07e      	beq.n	91d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x448>
    90da:	f7fa f9ff 	bl	34dc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    90de:	2800      	cmp	r0, #0
    90e0:	d07a      	beq.n	91d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x448>
    90e2:	f8b4 012c 	ldrh.w	r0, [r4, #300]	; 0x12c
    90e6:	2802      	cmp	r0, #2
    90e8:	d37f      	bcc.n	91ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    90ea:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    90ee:	2802      	cmp	r0, #2
    90f0:	d07b      	beq.n	91ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    90f2:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    90f6:	2800      	cmp	r0, #0
    90f8:	d177      	bne.n	91ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    90fa:	6860      	ldr	r0, [r4, #4]
    90fc:	f641 514c 	movw	r1, #7500	; 0x1d4c
    9100:	4288      	cmp	r0, r1
    9102:	d372      	bcc.n	91ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    9104:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    9108:	290c      	cmp	r1, #12
    910a:	d304      	bcc.n	9116 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x386>
    910c:	f44f 7147 	mov.w	r1, #796	; 0x31c
    9110:	2006      	movs	r0, #6
    9112:	f7fa fd7d 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9116:	4abe      	ldr	r2, [pc, #760]	; (9410 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x680>)
    9118:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    911c:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    9120:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
    9124:	b289      	uxth	r1, r1
    9126:	460d      	mov	r5, r1
    9128:	2a01      	cmp	r2, #1
    912a:	d017      	beq.n	915c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3cc>
    912c:	f005 fe6f 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9130:	4601      	mov	r1, r0
    9132:	6862      	ldr	r2, [r4, #4]
    9134:	f641 504c 	movw	r0, #7500	; 0x1d4c
    9138:	4282      	cmp	r2, r0
    913a:	bf2c      	ite	cs
    913c:	2000      	movcs	r0, #0
    913e:	2002      	movcc	r0, #2
    9140:	4408      	add	r0, r1
    9142:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    9146:	b280      	uxth	r0, r0
    9148:	4442      	add	r2, r8
    914a:	1bd1      	subs	r1, r2, r7
    914c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    9150:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9154:	1a82      	subs	r2, r0, r2
    9156:	fb01 aa02 	mla	sl, r1, r2, sl
    915a:	e043      	b.n	91e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x454>
    915c:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    9160:	2803      	cmp	r0, #3
    9162:	d056      	beq.n	9212 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x482>
    9164:	48ab      	ldr	r0, [pc, #684]	; (9414 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x684>)
    9166:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    916a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    916e:	f007 fa6a 	bl	10646 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    9172:	69e1      	ldr	r1, [r4, #28]
    9174:	4408      	add	r0, r1
    9176:	9004      	str	r0, [sp, #16]
    9178:	4629      	mov	r1, r5
    917a:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    917e:	f005 fe46 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9182:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    9186:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    918a:	1a82      	subs	r2, r0, r2
    918c:	fb01 aa02 	mla	sl, r1, r2, sl
    9190:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    9194:	4629      	mov	r1, r5
    9196:	9804      	ldr	r0, [sp, #16]
    9198:	f005 fe39 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    919c:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    91a0:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    91a4:	1a41      	subs	r1, r0, r1
    91a6:	448a      	add	sl, r1
    91a8:	4629      	mov	r1, r5
    91aa:	6860      	ldr	r0, [r4, #4]
    91ac:	f005 fe2f 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    91b0:	4601      	mov	r1, r0
    91b2:	6862      	ldr	r2, [r4, #4]
    91b4:	f641 504c 	movw	r0, #7500	; 0x1d4c
    91b8:	4282      	cmp	r2, r0
    91ba:	bf34      	ite	cc
    91bc:	2002      	movcc	r0, #2
    91be:	2000      	movcs	r0, #0
    91c0:	4408      	add	r0, r1
    91c2:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    91c6:	4442      	add	r2, r8
    91c8:	1bd1      	subs	r1, r2, r7
    91ca:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    91ce:	1a89      	subs	r1, r1, r2
    91d0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    91d4:	1a82      	subs	r2, r0, r2
    91d6:	e000      	b.n	91da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x44a>
    91d8:	e007      	b.n	91ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45a>
    91da:	1e49      	subs	r1, r1, #1
    91dc:	fb01 aa02 	mla	sl, r1, r2, sl
    91e0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    91e4:	2001      	movs	r0, #1
    91e6:	f884 0156 	strb.w	r0, [r4, #342]	; 0x156
    91ea:	f8cd a010 	str.w	sl, [sp, #16]
    91ee:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    91f2:	f24a 3aa1 	movw	sl, #41889	; 0xa3a1
    91f6:	b190      	cbz	r0, 921e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x48e>
    91f8:	2801      	cmp	r0, #1
    91fa:	f000 811c 	beq.w	9436 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6a6>
    91fe:	2802      	cmp	r0, #2
    9200:	d07e      	beq.n	9300 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x570>
    9202:	2803      	cmp	r0, #3
    9204:	f000 8148 	beq.w	9498 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    9208:	f240 512a 	movw	r1, #1322	; 0x52a
    920c:	2030      	movs	r0, #48	; 0x30
    920e:	f7fa fcff 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9212:	69e1      	ldr	r1, [r4, #28]
    9214:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    9218:	4408      	add	r0, r1
    921a:	9004      	str	r0, [sp, #16]
    921c:	e7ac      	b.n	9178 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e8>
    921e:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    9222:	2800      	cmp	r0, #0
    9224:	d07f      	beq.n	9326 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x596>
    9226:	487b      	ldr	r0, [pc, #492]	; (9414 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x684>)
    9228:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    922c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    9230:	f007 fa09 	bl	10646 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    9234:	4607      	mov	r7, r0
    9236:	69e0      	ldr	r0, [r4, #28]
    9238:	4629      	mov	r1, r5
    923a:	4438      	add	r0, r7
    923c:	f005 fde7 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9240:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    9244:	4629      	mov	r1, r5
    9246:	6860      	ldr	r0, [r4, #4]
    9248:	f005 fde1 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    924c:	6862      	ldr	r2, [r4, #4]
    924e:	f641 514c 	movw	r1, #7500	; 0x1d4c
    9252:	428a      	cmp	r2, r1
    9254:	bf2c      	ite	cs
    9256:	2100      	movcs	r1, #0
    9258:	2102      	movcc	r1, #2
    925a:	4408      	add	r0, r1
    925c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9260:	a905      	add	r1, sp, #20
    9262:	a802      	add	r0, sp, #8
    9264:	f004 fb9c 	bl	d9a0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    9268:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    926c:	9a05      	ldr	r2, [sp, #20]
    926e:	9902      	ldr	r1, [sp, #8]
    9270:	f7f9 f9e0 	bl	2634 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    9274:	9001      	str	r0, [sp, #4]
    9276:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    927a:	4628      	mov	r0, r5
    927c:	f009 fa80 	bl	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9280:	f64d 7141 	movw	r1, #57153	; 0xdf41
    9284:	4408      	add	r0, r1
    9286:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    928a:	fbb0 f0f8 	udiv	r0, r0, r8
    928e:	f015 010c 	ands.w	r1, r5, #12
    9292:	bf18      	it	ne
    9294:	2128      	movne	r1, #40	; 0x28
    9296:	4408      	add	r0, r1
    9298:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    929c:	f44f 71a8 	mov.w	r1, #336	; 0x150
    92a0:	4620      	mov	r0, r4
    92a2:	f007 fdf4 	bl	10e8e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    92a6:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    92aa:	9000      	str	r0, [sp, #0]
    92ac:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    92b0:	f009 fa66 	bl	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    92b4:	4450      	add	r0, sl
    92b6:	fbb0 f0f8 	udiv	r0, r0, r8
    92ba:	69e1      	ldr	r1, [r4, #28]
    92bc:	9a00      	ldr	r2, [sp, #0]
    92be:	4439      	add	r1, r7
    92c0:	1a08      	subs	r0, r1, r0
    92c2:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    92c6:	1a40      	subs	r0, r0, r1
    92c8:	4410      	add	r0, r2
    92ca:	9a01      	ldr	r2, [sp, #4]
    92cc:	3820      	subs	r0, #32
    92ce:	1a80      	subs	r0, r0, r2
    92d0:	9000      	str	r0, [sp, #0]
    92d2:	0048      	lsls	r0, r1, #1
    92d4:	8b61      	ldrh	r1, [r4, #26]
    92d6:	3060      	adds	r0, #96	; 0x60
    92d8:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    92dc:	1847      	adds	r7, r0, r1
    92de:	f015 0f0c 	tst.w	r5, #12
    92e2:	bf0a      	itet	eq
    92e4:	4628      	moveq	r0, r5
    92e6:	f64e 2060 	movwne	r0, #60000	; 0xea60
    92ea:	f009 fa49 	bleq	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    92ee:	4450      	add	r0, sl
    92f0:	fbb0 f8f8 	udiv	r8, r0, r8
    92f4:	4628      	mov	r0, r5
    92f6:	f009 fa2f 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    92fa:	4440      	add	r0, r8
    92fc:	4438      	add	r0, r7
    92fe:	e001      	b.n	9304 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x574>
    9300:	e016      	b.n	9330 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5a0>
    9302:	e010      	b.n	9326 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x596>
    9304:	f100 0124 	add.w	r1, r0, #36	; 0x24
    9308:	4840      	ldr	r0, [pc, #256]	; (940c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x67c>)
    930a:	6181      	str	r1, [r0, #24]
    930c:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    9310:	9900      	ldr	r1, [sp, #0]
    9312:	1a08      	subs	r0, r1, r0
    9314:	f5b0 7ff6 	cmp.w	r0, #492	; 0x1ec
    9318:	f080 813d 	bcs.w	9596 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    931c:	f240 41c3 	movw	r1, #1219	; 0x4c3
    9320:	2030      	movs	r0, #48	; 0x30
    9322:	f7fa fc75 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9326:	f240 41a1 	movw	r1, #1185	; 0x4a1
    932a:	2030      	movs	r0, #48	; 0x30
    932c:	f7fa fc70 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9330:	69e1      	ldr	r1, [r4, #28]
    9332:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    9336:	4408      	add	r0, r1
    9338:	4629      	mov	r1, r5
    933a:	f005 fd68 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    933e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    9342:	4629      	mov	r1, r5
    9344:	6860      	ldr	r0, [r4, #4]
    9346:	f005 fd62 	bl	ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    934a:	6862      	ldr	r2, [r4, #4]
    934c:	f641 514c 	movw	r1, #7500	; 0x1d4c
    9350:	428a      	cmp	r2, r1
    9352:	bf34      	ite	cc
    9354:	2102      	movcc	r1, #2
    9356:	2100      	movcs	r1, #0
    9358:	4408      	add	r0, r1
    935a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    935e:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    9362:	4628      	mov	r0, r5
    9364:	f009 fa0c 	bl	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9368:	f64d 7141 	movw	r1, #57153	; 0xdf41
    936c:	4401      	add	r1, r0
    936e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    9372:	fbb1 f0f8 	udiv	r0, r1, r8
    9376:	f015 010c 	ands.w	r1, r5, #12
    937a:	bf18      	it	ne
    937c:	2128      	movne	r1, #40	; 0x28
    937e:	4408      	add	r0, r1
    9380:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    9384:	f44f 71a8 	mov.w	r1, #336	; 0x150
    9388:	4620      	mov	r0, r4
    938a:	f007 fd80 	bl	10e8e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    938e:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    9392:	b9e0      	cbnz	r0, 93ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x63e>
    9394:	f1bb 0f00 	cmp.w	fp, #0
    9398:	d019      	beq.n	93ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x63e>
    939a:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    939e:	4628      	mov	r0, r5
    93a0:	f009 f9ee 	bl	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    93a4:	eb00 010a 	add.w	r1, r0, sl
    93a8:	fbb1 f0f8 	udiv	r0, r1, r8
    93ac:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    93b0:	69e2      	ldr	r2, [r4, #28]
    93b2:	4408      	add	r0, r1
    93b4:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    93b8:	4411      	add	r1, r2
    93ba:	1a0f      	subs	r7, r1, r0
    93bc:	4628      	mov	r0, r5
    93be:	f009 f9cb 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    93c2:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    93c6:	1a08      	subs	r0, r1, r0
    93c8:	4438      	add	r0, r7
    93ca:	3820      	subs	r0, #32
    93cc:	e006      	b.n	93dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64c>
    93ce:	69e1      	ldr	r1, [r4, #28]
    93d0:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    93d4:	4408      	add	r0, r1
    93d6:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    93da:	1a40      	subs	r0, r0, r1
    93dc:	9000      	str	r0, [sp, #0]
    93de:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    93e2:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    93e6:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    93ea:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    93ee:	fb01 0002 	mla	r0, r1, r2, r0
    93f2:	0040      	lsls	r0, r0, #1
    93f4:	8b61      	ldrh	r1, [r4, #26]
    93f6:	3060      	adds	r0, #96	; 0x60
    93f8:	1847      	adds	r7, r0, r1
    93fa:	f015 0f0c 	tst.w	r5, #12
    93fe:	bf0a      	itet	eq
    9400:	4628      	moveq	r0, r5
    9402:	f64e 2060 	movwne	r0, #60000	; 0xea60
    9406:	f009 f9bb 	bleq	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    940a:	e005      	b.n	9418 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x688>
    940c:	20000124 	.word	0x20000124
    9410:	00011530 	.word	0x00011530
    9414:	2000133c 	.word	0x2000133c
    9418:	eb00 010a 	add.w	r1, r0, sl
    941c:	fbb1 f8f8 	udiv	r8, r1, r8
    9420:	4628      	mov	r0, r5
    9422:	f009 f999 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9426:	49a7      	ldr	r1, [pc, #668]	; (96c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x934>)
    9428:	4440      	add	r0, r8
    942a:	4438      	add	r0, r7
    942c:	6188      	str	r0, [r1, #24]
    942e:	2001      	movs	r0, #1
    9430:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    9434:	e0af      	b.n	9596 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    9436:	6861      	ldr	r1, [r4, #4]
    9438:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    943c:	1a09      	subs	r1, r1, r0
    943e:	4379      	muls	r1, r7
    9440:	9100      	str	r1, [sp, #0]
    9442:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    9446:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    944a:	4441      	add	r1, r8
    944c:	1a89      	subs	r1, r1, r2
    944e:	f8d4 c134 	ldr.w	ip, [r4, #308]	; 0x134
    9452:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    9456:	1e49      	subs	r1, r1, #1
    9458:	fb0c 3202 	mla	r2, ip, r2, r3
    945c:	fb01 2000 	mla	r0, r1, r0, r2
    9460:	0040      	lsls	r0, r0, #1
    9462:	8b61      	ldrh	r1, [r4, #26]
    9464:	3060      	adds	r0, #96	; 0x60
    9466:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    946a:	1847      	adds	r7, r0, r1
    946c:	f015 0f0c 	tst.w	r5, #12
    9470:	bf0a      	itet	eq
    9472:	4628      	moveq	r0, r5
    9474:	f64e 2060 	movwne	r0, #60000	; 0xea60
    9478:	f009 f982 	bleq	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    947c:	eb00 010a 	add.w	r1, r0, sl
    9480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9484:	fbb1 f8f0 	udiv	r8, r1, r0
    9488:	4628      	mov	r0, r5
    948a:	f009 f965 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    948e:	498d      	ldr	r1, [pc, #564]	; (96c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x934>)
    9490:	4440      	add	r0, r8
    9492:	4438      	add	r0, r7
    9494:	6188      	str	r0, [r1, #24]
    9496:	e07e      	b.n	9596 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    9498:	6860      	ldr	r0, [r4, #4]
    949a:	4378      	muls	r0, r7
    949c:	9000      	str	r0, [sp, #0]
    949e:	f1bb 0f00 	cmp.w	fp, #0
    94a2:	d007      	beq.n	94b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x724>
    94a4:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    94a8:	2900      	cmp	r1, #0
    94aa:	bf04      	itt	eq
    94ac:	2100      	moveq	r1, #0
    94ae:	f884 1157 	strbeq.w	r1, [r4, #343]	; 0x157
    94b2:	d003      	beq.n	94bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x72c>
    94b4:	f894 1157 	ldrb.w	r1, [r4, #343]	; 0x157
    94b8:	2900      	cmp	r1, #0
    94ba:	d16c      	bne.n	9596 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    94bc:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    94c0:	fb07 0011 	mls	r0, r7, r1, r0
    94c4:	9000      	str	r0, [sp, #0]
    94c6:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
    94ca:	2824      	cmp	r0, #36	; 0x24
    94cc:	bf1c      	itt	ne
    94ce:	f894 0085 	ldrbne.w	r0, [r4, #133]	; 0x85
    94d2:	2824      	cmpne	r0, #36	; 0x24
    94d4:	d10b      	bne.n	94ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x75e>
    94d6:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    94da:	eba9 0000 	sub.w	r0, r9, r0
    94de:	b200      	sxth	r0, r0
    94e0:	2800      	cmp	r0, #0
    94e2:	db04      	blt.n	94ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x75e>
    94e4:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    94e8:	2800      	cmp	r0, #0
    94ea:	bf18      	it	ne
    94ec:	9007      	strne	r0, [sp, #28]
    94ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    94f0:	b328      	cbz	r0, 953e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ae>
    94f2:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    94f6:	bb10      	cbnz	r0, 953e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ae>
    94f8:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    94fc:	2800      	cmp	r0, #0
    94fe:	bf1c      	itt	ne
    9500:	f8d4 0178 	ldrne.w	r0, [r4, #376]	; 0x178
    9504:	2800      	cmpne	r0, #0
    9506:	d07b      	beq.n	9600 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    9508:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    950c:	f010 0f0c 	tst.w	r0, #12
    9510:	bf14      	ite	ne
    9512:	f64e 2060 	movwne	r0, #60000	; 0xea60
    9516:	f009 f933 	bleq	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    951a:	eb00 010a 	add.w	r1, r0, sl
    951e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9522:	fbb1 f0f0 	udiv	r0, r1, r0
    9526:	9900      	ldr	r1, [sp, #0]
    9528:	1a0d      	subs	r5, r1, r0
    952a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    952e:	f009 f913 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9532:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    9536:	1a08      	subs	r0, r1, r0
    9538:	4428      	add	r0, r5
    953a:	3820      	subs	r0, #32
    953c:	9000      	str	r0, [sp, #0]
    953e:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    9542:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    9546:	4440      	add	r0, r8
    9548:	4348      	muls	r0, r1
    954a:	0040      	lsls	r0, r0, #1
    954c:	9d07      	ldr	r5, [sp, #28]
    954e:	f100 0760 	add.w	r7, r0, #96	; 0x60
    9552:	f015 0f0c 	tst.w	r5, #12
    9556:	bf0a      	itet	eq
    9558:	4628      	moveq	r0, r5
    955a:	f64e 2060 	movwne	r0, #60000	; 0xea60
    955e:	f009 f90f 	bleq	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9562:	eb00 010a 	add.w	r1, r0, sl
    9566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    956a:	fbb1 f8f0 	udiv	r8, r1, r0
    956e:	4628      	mov	r0, r5
    9570:	f009 f8f2 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9574:	eb08 0100 	add.w	r1, r8, r0
    9578:	19c8      	adds	r0, r1, r7
    957a:	4952      	ldr	r1, [pc, #328]	; (96c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x934>)
    957c:	6188      	str	r0, [r1, #24]
    957e:	6860      	ldr	r0, [r4, #4]
    9580:	f641 514c 	movw	r1, #7500	; 0x1d4c
    9584:	4288      	cmp	r0, r1
    9586:	d206      	bcs.n	9596 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    9588:	466b      	mov	r3, sp
    958a:	4a4f      	ldr	r2, [pc, #316]	; (96c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x938>)
    958c:	4639      	mov	r1, r7
    958e:	f007 f96e 	bl	1086e <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>
    9592:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    9596:	9900      	ldr	r1, [sp, #0]
    9598:	9804      	ldr	r0, [sp, #16]
    959a:	4a4a      	ldr	r2, [pc, #296]	; (96c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x934>)
    959c:	1a08      	subs	r0, r1, r0
    959e:	9000      	str	r0, [sp, #0]
    95a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    95a4:	6860      	ldr	r0, [r4, #4]
    95a6:	6991      	ldr	r1, [r2, #24]
    95a8:	1ac0      	subs	r0, r0, r3
    95aa:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
    95ae:	61d0      	str	r0, [r2, #28]
    95b0:	4281      	cmp	r1, r0
    95b2:	bf98      	it	ls
    95b4:	4608      	movls	r0, r1
    95b6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    95ba:	2000      	movs	r0, #0
    95bc:	7030      	strb	r0, [r6, #0]
    95be:	2064      	movs	r0, #100	; 0x64
    95c0:	8130      	strh	r0, [r6, #8]
    95c2:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    95c6:	9900      	ldr	r1, [sp, #0]
    95c8:	f7f7 ff06 	bl	13d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    95cc:	60f0      	str	r0, [r6, #12]
    95ce:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    95d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    95d4:	4408      	add	r0, r1
    95d6:	6070      	str	r0, [r6, #4]
    95d8:	68f0      	ldr	r0, [r6, #12]
    95da:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    95de:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
    95e2:	f000 fae5 	bl	9bb0 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>
    95e6:	b110      	cbz	r0, 95ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x85e>
    95e8:	6870      	ldr	r0, [r6, #4]
    95ea:	301e      	adds	r0, #30
    95ec:	6070      	str	r0, [r6, #4]
    95ee:	2001      	movs	r0, #1
    95f0:	72b0      	strb	r0, [r6, #10]
    95f2:	f8b4 1100 	ldrh.w	r1, [r4, #256]	; 0x100
    95f6:	eba1 0109 	sub.w	r1, r1, r9
    95fa:	b209      	sxth	r1, r1
    95fc:	2900      	cmp	r1, #0
    95fe:	e000      	b.n	9602 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x872>
    9600:	e03d      	b.n	967e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ee>
    9602:	bfc4      	itt	gt
    9604:	2103      	movgt	r1, #3
    9606:	72b1      	strbgt	r1, [r6, #10]
    9608:	990a      	ldr	r1, [sp, #40]	; 0x28
    960a:	b3b9      	cbz	r1, 967c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ec>
    960c:	f1bb 0f00 	cmp.w	fp, #0
    9610:	d025      	beq.n	965e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    9612:	bf00      	nop
    9614:	f8b4 212c 	ldrh.w	r2, [r4, #300]	; 0x12c
    9618:	2a00      	cmp	r2, #0
    961a:	bf0c      	ite	eq
    961c:	2100      	moveq	r1, #0
    961e:	f8b4 112e 	ldrhne.w	r1, [r4, #302]	; 0x12e
    9622:	f8a4 112e 	strh.w	r1, [r4, #302]	; 0x12e
    9626:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    962a:	1c49      	adds	r1, r1, #1
    962c:	4359      	muls	r1, r3
    962e:	4291      	cmp	r1, r2
    9630:	d215      	bcs.n	965e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    9632:	7ab1      	ldrb	r1, [r6, #10]
    9634:	1e49      	subs	r1, r1, #1
    9636:	2900      	cmp	r1, #0
    9638:	dd11      	ble.n	965e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    963a:	72b0      	strb	r0, [r6, #10]
    963c:	f8b4 012e 	ldrh.w	r0, [r4, #302]	; 0x12e
    9640:	2101      	movs	r1, #1
    9642:	1c40      	adds	r0, r0, #1
    9644:	f8a4 012e 	strh.w	r0, [r4, #302]	; 0x12e
    9648:	f504 7098 	add.w	r0, r4, #304	; 0x130
    964c:	f7fb f936 	bl	48bc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    9650:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
    9654:	f000 0007 	and.w	r0, r0, #7
    9658:	1c40      	adds	r0, r0, #1
    965a:	f884 0130 	strb.w	r0, [r4, #304]	; 0x130
    965e:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9662:	4631      	mov	r1, r6
    9664:	f7f8 f804 	bl	1670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9668:	b338      	cbz	r0, 96ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92a>
    966a:	9811      	ldr	r0, [sp, #68]	; 0x44
    966c:	f080 0001 	eor.w	r0, r0, #1
    9670:	f884 0154 	strb.w	r0, [r4, #340]	; 0x154
    9674:	b013      	add	sp, #76	; 0x4c
    9676:	2000      	movs	r0, #0
    9678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    967c:	e004      	b.n	9688 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8f8>
    967e:	f240 5115 	movw	r1, #1301	; 0x515
    9682:	2030      	movs	r0, #48	; 0x30
    9684:	f7fa fac4 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9688:	f1bb 0f00 	cmp.w	fp, #0
    968c:	d1c2      	bne.n	9614 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x884>
    968e:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    9692:	2800      	cmp	r0, #0
    9694:	d0e3      	beq.n	965e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    9696:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    969a:	6860      	ldr	r0, [r4, #4]
    969c:	1a41      	subs	r1, r0, r1
    969e:	4630      	mov	r0, r6
    96a0:	f007 f887 	bl	107b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    96a4:	0400      	lsls	r0, r0, #16
    96a6:	0c00      	lsrs	r0, r0, #16
    96a8:	d0d9      	beq.n	965e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ce>
    96aa:	991c      	ldr	r1, [sp, #112]	; 0x70
    96ac:	2900      	cmp	r1, #0
    96ae:	bf18      	it	ne
    96b0:	8008      	strhne	r0, [r1, #0]
    96b2:	2001      	movs	r0, #1
    96b4:	b013      	add	sp, #76	; 0x4c
    96b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96ba:	f240 5175 	movw	r1, #1397	; 0x575
    96be:	2030      	movs	r0, #48	; 0x30
    96c0:	f7fa faa6 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96c4:	20000124 	.word	0x20000124
    96c8:	2000013c 	.word	0x2000013c
    96cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96d0:	4cfa      	ldr	r4, [pc, #1000]	; (9abc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd2c>)
    96d2:	460f      	mov	r7, r1
    96d4:	b083      	sub	sp, #12
    96d6:	7c21      	ldrb	r1, [r4, #16]
    96d8:	4df9      	ldr	r5, [pc, #996]	; (9ac0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd30>)
    96da:	2600      	movs	r6, #0
    96dc:	f04f 0a02 	mov.w	sl, #2
    96e0:	f04f 2be0 	mov.w	fp, #3758153728	; 0xe000e000
    96e4:	f04f 0801 	mov.w	r8, #1
    96e8:	2903      	cmp	r1, #3
    96ea:	bf04      	itt	eq
    96ec:	7821      	ldrbeq	r1, [r4, #0]
    96ee:	4281      	cmpeq	r1, r0
    96f0:	f040 80e6 	bne.w	98c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb30>
    96f4:	6860      	ldr	r0, [r4, #4]
    96f6:	6168      	str	r0, [r5, #20]
    96f8:	7c20      	ldrb	r0, [r4, #16]
    96fa:	2803      	cmp	r0, #3
    96fc:	d003      	beq.n	9706 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x976>
    96fe:	21d5      	movs	r1, #213	; 0xd5
    9700:	2030      	movs	r0, #48	; 0x30
    9702:	f7fa fa85 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9706:	f04f 0903 	mov.w	r9, #3
    970a:	2f09      	cmp	r7, #9
    970c:	f080 80d4 	bcs.w	98b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb28>
    9710:	e8df f007 	tbb	[pc, r7]
    9714:	3a3a1705 	.word	0x3a3a1705
    9718:	c7bed2f3 	.word	0xc7bed2f3
    971c:	00ce      	.short	0x00ce
    971e:	62a6      	str	r6, [r4, #40]	; 0x28
    9720:	f7fe f92a 	bl	7978 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    9724:	b120      	cbz	r0, 9730 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9a0>
    9726:	f240 216d 	movw	r1, #621	; 0x26d
    972a:	2030      	movs	r0, #48	; 0x30
    972c:	f7fa fa70 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9730:	69a0      	ldr	r0, [r4, #24]
    9732:	38fa      	subs	r0, #250	; 0xfa
    9734:	f7f8 feac 	bl	2490 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9738:	f885 9002 	strb.w	r9, [r5, #2]
    973c:	b003      	add	sp, #12
    973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9742:	f7fe f8e3 	bl	790c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9746:	b998      	cbnz	r0, 9770 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9e0>
    9748:	f7fd ff08 	bl	755c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    974c:	f200 150d 	addw	r5, r0, #269	; 0x10d
    9750:	69a0      	ldr	r0, [r4, #24]
    9752:	42a8      	cmp	r0, r5
    9754:	d20b      	bcs.n	976e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9de>
    9756:	1a28      	subs	r0, r5, r0
    9758:	2104      	movs	r1, #4
    975a:	f7f7 fd4b 	bl	11f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    975e:	b130      	cbz	r0, 976e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9de>
    9760:	61a5      	str	r5, [r4, #24]
    9762:	b003      	add	sp, #12
    9764:	2000      	movs	r0, #0
    9766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    976a:	f7ff b8fd 	b.w	8968 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    976e:	61a5      	str	r5, [r4, #24]
    9770:	f7fe f968 	bl	7a44 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    9774:	2800      	cmp	r0, #0
    9776:	bf04      	itt	eq
    9778:	b003      	addeq	sp, #12
    977a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    977e:	f240 21a1 	movw	r1, #673	; 0x2a1
    9782:	2030      	movs	r0, #48	; 0x30
    9784:	f7fa fa44 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9788:	2701      	movs	r7, #1
    978a:	2064      	movs	r0, #100	; 0x64
    978c:	83a0      	strh	r0, [r4, #28]
    978e:	7526      	strb	r6, [r4, #20]
    9790:	77e6      	strb	r6, [r4, #31]
    9792:	7a20      	ldrb	r0, [r4, #8]
    9794:	f242 7b10 	movw	fp, #10000	; 0x2710
    9798:	b158      	cbz	r0, 97b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa22>
    979a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    979e:	6a20      	ldr	r0, [r4, #32]
    97a0:	f7f7 fe1a 	bl	13d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    97a4:	6220      	str	r0, [r4, #32]
    97a6:	2100      	movs	r1, #0
    97a8:	f104 0014 	add.w	r0, r4, #20
    97ac:	f007 f801 	bl	107b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    97b0:	e018      	b.n	97e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa54>
    97b2:	2101      	movs	r1, #1
    97b4:	4668      	mov	r0, sp
    97b6:	f7fb f88f 	bl	48d8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    97ba:	f89d 0000 	ldrb.w	r0, [sp]
    97be:	0200      	lsls	r0, r0, #8
    97c0:	fbb0 f1fb 	udiv	r1, r0, fp
    97c4:	fb0b 0711 	mls	r7, fp, r1, r0
    97c8:	f7fd fe80 	bl	74cc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    97cc:	4407      	add	r7, r0
    97ce:	4639      	mov	r1, r7
    97d0:	6a20      	ldr	r0, [r4, #32]
    97d2:	f7f7 fe01 	bl	13d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    97d6:	6220      	str	r0, [r4, #32]
    97d8:	4639      	mov	r1, r7
    97da:	f104 0014 	add.w	r0, r4, #20
    97de:	f006 ffe8 	bl	107b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    97e2:	1c47      	adds	r7, r0, #1
    97e4:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    97e6:	1c41      	adds	r1, r0, #1
    97e8:	290a      	cmp	r1, #10
    97ea:	bf3c      	itt	cc
    97ec:	4438      	addcc	r0, r7
    97ee:	84a0      	strhcc	r0, [r4, #36]	; 0x24
    97f0:	6860      	ldr	r0, [r4, #4]
    97f2:	b130      	cbz	r0, 9802 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa72>
    97f4:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    97f6:	1c40      	adds	r0, r0, #1
    97f8:	280a      	cmp	r0, #10
    97fa:	bf28      	it	cs
    97fc:	f884 a01e 	strbcs.w	sl, [r4, #30]
    9800:	d201      	bcs.n	9806 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa76>
    9802:	f884 901e 	strb.w	r9, [r4, #30]
    9806:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    980a:	bb40      	cbnz	r0, 985e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xace>
    980c:	7a20      	ldrb	r0, [r4, #8]
    980e:	b130      	cbz	r0, 981e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa8e>
    9810:	68e1      	ldr	r1, [r4, #12]
    9812:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9814:	4288      	cmp	r0, r1
    9816:	d902      	bls.n	981e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa8e>
    9818:	f7fe f938 	bl	7a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    981c:	e01f      	b.n	985e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xace>
    981e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9820:	b338      	cbz	r0, 9872 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae2>
    9822:	f7fd fe53 	bl	74cc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9826:	4607      	mov	r7, r0
    9828:	f7fd fe98 	bl	755c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    982c:	f200 100d 	addw	r0, r0, #269	; 0x10d
    9830:	4438      	add	r0, r7
    9832:	eb00 090b 	add.w	r9, r0, fp
    9836:	f005 fab6 	bl	eda6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    983a:	4607      	mov	r7, r0
    983c:	4639      	mov	r1, r7
    983e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9840:	f7f7 fe00 	bl	1444 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9844:	6327      	str	r7, [r4, #48]	; 0x30
    9846:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9848:	eb00 0209 	add.w	r2, r0, r9
    984c:	4291      	cmp	r1, r2
    984e:	bf24      	itt	cs
    9850:	1a08      	subcs	r0, r1, r0
    9852:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    9854:	d20d      	bcs.n	9872 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xae2>
    9856:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    985a:	f7fe f917 	bl	7a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    985e:	7820      	ldrb	r0, [r4, #0]
    9860:	f7f8 fc26 	bl	20b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9864:	7426      	strb	r6, [r4, #16]
    9866:	7968      	ldrb	r0, [r5, #5]
    9868:	b003      	add	sp, #12
    986a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    986e:	f7f9 bfbd 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9872:	f814 0b14 	ldrb.w	r0, [r4], #20
    9876:	4621      	mov	r1, r4
    9878:	f7f7 fefa 	bl	1670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    987c:	2800      	cmp	r0, #0
    987e:	bf1c      	itt	ne
    9880:	b003      	addne	sp, #12
    9882:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9886:	f240 617a 	movw	r1, #1658	; 0x67a
    988a:	2030      	movs	r0, #48	; 0x30
    988c:	f7fa f9c0 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9890:	f004 fc5c 	bl	e14c <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>
    9894:	f004 fdee 	bl	e474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9898:	f8cb a280 	str.w	sl, [fp, #640]	; 0x280
    989c:	b003      	add	sp, #12
    989e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98a2:	4608      	mov	r0, r1
    98a4:	f7f8 fc04 	bl	20b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    98a8:	7426      	strb	r6, [r4, #16]
    98aa:	b003      	add	sp, #12
    98ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98b0:	21f7      	movs	r1, #247	; 0xf7
    98b2:	2030      	movs	r0, #48	; 0x30
    98b4:	f7fa f9ac 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98b8:	21fb      	movs	r1, #251	; 0xfb
    98ba:	2030      	movs	r0, #48	; 0x30
    98bc:	f7fa f9a8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98c0:	4681      	mov	r9, r0
    98c2:	f7fc fef3 	bl	66ac <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    98c6:	2101      	movs	r1, #1
    98c8:	f006 fca3 	bl	10212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    98cc:	0004      	movs	r4, r0
    98ce:	d009      	beq.n	98e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb54>
    98d0:	4648      	mov	r0, r9
    98d2:	f7fc feeb 	bl	66ac <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    98d6:	8821      	ldrh	r1, [r4, #0]
    98d8:	4288      	cmp	r0, r1
    98da:	d007      	beq.n	98ec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb5c>
    98dc:	2199      	movs	r1, #153	; 0x99
    98de:	2030      	movs	r0, #48	; 0x30
    98e0:	f7fa f996 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98e4:	2198      	movs	r1, #152	; 0x98
    98e6:	2030      	movs	r0, #48	; 0x30
    98e8:	f7fa f992 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ec:	f04f 0920 	mov.w	r9, #32
    98f0:	616c      	str	r4, [r5, #20]
    98f2:	2f09      	cmp	r7, #9
    98f4:	f080 8124 	bcs.w	9b40 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xdb0>
    98f8:	e000      	b.n	98fc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb6c>
    98fa:	e066      	b.n	99ca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc3a>
    98fc:	e8df f007 	tbb	[pc, r7]
    9900:	6a6a6006 	.word	0x6a6a6006
    9904:	fb05fc65 	.word	0xfb05fc65
    9908:	00dd      	.short	0x00dd
    990a:	e7c1      	b.n	9890 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb00>
    990c:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
    9910:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
    9914:	f894 1154 	ldrb.w	r1, [r4, #340]	; 0x154
    9918:	4620      	mov	r0, r4
    991a:	b191      	cbz	r1, 9942 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbb2>
    991c:	f8b0 2152 	ldrh.w	r2, [r0, #338]	; 0x152
    9920:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    9924:	428a      	cmp	r2, r1
    9926:	d107      	bne.n	9938 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xba8>
    9928:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
    992c:	1a51      	subs	r1, r2, r1
    992e:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9932:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
    9936:	e00f      	b.n	9958 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbc8>
    9938:	1a51      	subs	r1, r2, r1
    993a:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    993e:	b291      	uxth	r1, r2
    9940:	e008      	b.n	9954 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbc4>
    9942:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    9946:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
    994a:	1a89      	subs	r1, r1, r2
    994c:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9950:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    9954:	f8a0 1078 	strh.w	r1, [r0, #120]	; 0x78
    9958:	f8d0 1164 	ldr.w	r1, [r0, #356]	; 0x164
    995c:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    9960:	f000 f9d2 	bl	9d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    9964:	f7f7 fe7a 	bl	165c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    9968:	2864      	cmp	r0, #100	; 0x64
    996a:	bf98      	it	ls
    996c:	2064      	movls	r0, #100	; 0x64
    996e:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    9972:	f001 010c 	and.w	r1, r1, #12
    9976:	2900      	cmp	r1, #0
    9978:	bf18      	it	ne
    997a:	2128      	movne	r1, #40	; 0x28
    997c:	4408      	add	r0, r1
    997e:	f200 17b9 	addw	r7, r0, #441	; 0x1b9
    9982:	4620      	mov	r0, r4
    9984:	bf14      	ite	ne
    9986:	2128      	movne	r1, #40	; 0x28
    9988:	2100      	moveq	r1, #0
    998a:	f201 221d 	addw	r2, r1, #541	; 0x21d
    998e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    9990:	f007 fa10 	bl	10db4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    9994:	4606      	mov	r6, r0
    9996:	463a      	mov	r2, r7
    9998:	4620      	mov	r0, r4
    999a:	6861      	ldr	r1, [r4, #4]
    999c:	f007 fa0a 	bl	10db4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    99a0:	60e8      	str	r0, [r5, #12]
    99a2:	4286      	cmp	r6, r0
    99a4:	bf38      	it	cc
    99a6:	4630      	movcc	r0, r6
    99a8:	60a8      	str	r0, [r5, #8]
    99aa:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    99ae:	38bd      	subs	r0, #189	; 0xbd
    99b0:	6128      	str	r0, [r5, #16]
    99b2:	f7f8 fd6d 	bl	2490 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    99b6:	f885 a002 	strb.w	sl, [r5, #2]
    99ba:	b003      	add	sp, #12
    99bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99c0:	b003      	add	sp, #12
    99c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99c6:	f000 bb55 	b.w	a074 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    99ca:	b003      	add	sp, #12
    99cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99d0:	f004 bd50 	b.w	e474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    99d4:	f005 f9e7 	bl	eda6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    99d8:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
    99dc:	4601      	mov	r1, r0
    99de:	4610      	mov	r0, r2
    99e0:	f7f7 fd30 	bl	1444 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    99e4:	6861      	ldr	r1, [r4, #4]
    99e6:	2900      	cmp	r1, #0
    99e8:	bf14      	ite	ne
    99ea:	fbb0 f0f1 	udivne	r0, r0, r1
    99ee:	4630      	moveq	r0, r6
    99f0:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    99f4:	290d      	cmp	r1, #13
    99f6:	d011      	beq.n	9a1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc8c>
    99f8:	f8b4 2078 	ldrh.w	r2, [r4, #120]	; 0x78
    99fc:	f8b4 1152 	ldrh.w	r1, [r4, #338]	; 0x152
    9a00:	1813      	adds	r3, r2, r0
    9a02:	1acb      	subs	r3, r1, r3
    9a04:	b21b      	sxth	r3, r3
    9a06:	2b00      	cmp	r3, #0
    9a08:	bfae      	itee	ge
    9a0a:	1c48      	addge	r0, r1, #1
    9a0c:	1c40      	addlt	r0, r0, #1
    9a0e:	4410      	addlt	r0, r2
    9a10:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9a14:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    9a18:	b978      	cbnz	r0, 9a3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcaa>
    9a1a:	e005      	b.n	9a28 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc98>
    9a1c:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9a20:	1c40      	adds	r0, r0, #1
    9a22:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9a26:	e008      	b.n	9a3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcaa>
    9a28:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9a2c:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    9a30:	4288      	cmp	r0, r1
    9a32:	bf04      	itt	eq
    9a34:	1c40      	addeq	r0, r0, #1
    9a36:	f8a4 0152 	strheq.w	r0, [r4, #338]	; 0x152
    9a3a:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    9a3e:	f10d 0a04 	add.w	sl, sp, #4
    9a42:	1c40      	adds	r0, r0, #1
    9a44:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
    9a48:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
    9a4c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
    9a50:	1a40      	subs	r0, r0, r1
    9a52:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    9a56:	1e40      	subs	r0, r0, #1
    9a58:	4408      	add	r0, r1
    9a5a:	b287      	uxth	r7, r0
    9a5c:	e039      	b.n	9ad2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd42>
    9a5e:	2300      	movs	r3, #0
    9a60:	461a      	mov	r2, r3
    9a62:	4620      	mov	r0, r4
    9a64:	f8cd a000 	str.w	sl, [sp]
    9a68:	f7ff fac6 	bl	8ff8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x268>
    9a6c:	b130      	cbz	r0, 9a7c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcec>
    9a6e:	2801      	cmp	r0, #1
    9a70:	d028      	beq.n	9ac4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd34>
    9a72:	f240 6124 	movw	r1, #1572	; 0x624
    9a76:	2030      	movs	r0, #48	; 0x30
    9a78:	f7fa f8ca 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a7c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    9a7e:	2800      	cmp	r0, #0
    9a80:	bf04      	itt	eq
    9a82:	b003      	addeq	sp, #12
    9a84:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a88:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9a8c:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    9a90:	1a80      	subs	r0, r0, r2
    9a92:	b201      	sxth	r1, r0
    9a94:	2900      	cmp	r1, #0
    9a96:	bfdc      	itt	le
    9a98:	b003      	addle	sp, #12
    9a9a:	e8bd 8ff0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a9e:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    9aa2:	4401      	add	r1, r0
    9aa4:	1e49      	subs	r1, r1, #1
    9aa6:	fb91 f1f0 	sdiv	r1, r1, r0
    9aaa:	b289      	uxth	r1, r1
    9aac:	fb01 2000 	mla	r0, r1, r0, r2
    9ab0:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    9ab4:	b003      	add	sp, #12
    9ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9aba:	e03d      	b.n	9b38 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xda8>
    9abc:	2000133c 	.word	0x2000133c
    9ac0:	20000124 	.word	0x20000124
    9ac4:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9ac8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9acc:	4408      	add	r0, r1
    9ace:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9ad2:	f8b4 1152 	ldrh.w	r1, [r4, #338]	; 0x152
    9ad6:	1a78      	subs	r0, r7, r1
    9ad8:	b200      	sxth	r0, r0
    9ada:	2800      	cmp	r0, #0
    9adc:	dabf      	bge.n	9a5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcce>
    9ade:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    9ae2:	2800      	cmp	r0, #0
    9ae4:	bf0c      	ite	eq
    9ae6:	203e      	moveq	r0, #62	; 0x3e
    9ae8:	2008      	movne	r0, #8
    9aea:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    9aee:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
    9af2:	4620      	mov	r0, r4
    9af4:	e001      	b.n	9afa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6a>
    9af6:	e003      	b.n	9b00 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd70>
    9af8:	e022      	b.n	9b40 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xdb0>
    9afa:	f007 fe2d 	bl	11758 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9afe:	e007      	b.n	9b10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd80>
    9b00:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    9b04:	2804      	cmp	r0, #4
    9b06:	d003      	beq.n	9b10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd80>
    9b08:	21bd      	movs	r1, #189	; 0xbd
    9b0a:	2030      	movs	r0, #48	; 0x30
    9b0c:	f7fa f880 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b10:	f884 6140 	strb.w	r6, [r4, #320]	; 0x140
    9b14:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9b18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9b1c:	f7fc fdd4 	bl	66c8 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    9b20:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9b24:	f7f8 fac4 	bl	20b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9b28:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    9b2c:	7968      	ldrb	r0, [r5, #5]
    9b2e:	b003      	add	sp, #12
    9b30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b34:	f7f9 be5a 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9b38:	21c6      	movs	r1, #198	; 0xc6
    9b3a:	2030      	movs	r0, #48	; 0x30
    9b3c:	f7fa f868 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b40:	21ca      	movs	r1, #202	; 0xca
    9b42:	2030      	movs	r0, #48	; 0x30
    9b44:	f7fa f864 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009b48 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    9b48:	b510      	push	{r4, lr}
    9b4a:	4604      	mov	r4, r0
    9b4c:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
    9b50:	6861      	ldr	r1, [r4, #4]
    9b52:	4288      	cmp	r0, r1
    9b54:	d109      	bne.n	9b6a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    9b56:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
    9b5a:	8922      	ldrh	r2, [r4, #8]
    9b5c:	4291      	cmp	r1, r2
    9b5e:	d104      	bne.n	9b6a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    9b60:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
    9b64:	8962      	ldrh	r2, [r4, #10]
    9b66:	4291      	cmp	r1, r2
    9b68:	d015      	beq.n	9b96 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    9b6a:	8821      	ldrh	r1, [r4, #0]
    9b6c:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
    9b70:	f006 fc7f 	bl	10472 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9b74:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    9b78:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    9b7c:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    9b80:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    9b84:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    9b88:	2001      	movs	r0, #1
    9b8a:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
    9b8e:	4807      	ldr	r0, [pc, #28]	; (9bac <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    9b90:	7940      	ldrb	r0, [r0, #5]
    9b92:	f7f9 fe2b 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9b96:	2102      	movs	r1, #2
    9b98:	4620      	mov	r0, r4
    9b9a:	f7fc fc91 	bl	64c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9b9e:	2000      	movs	r0, #0
    9ba0:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    9ba4:	2003      	movs	r0, #3
    9ba6:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    9baa:	bd10      	pop	{r4, pc}
    9bac:	20000144 	.word	0x20000144

00009bb0 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>:
    9bb0:	4802      	ldr	r0, [pc, #8]	; (9bbc <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA+0xc>)
    9bb2:	6980      	ldr	r0, [r0, #24]
    9bb4:	2800      	cmp	r0, #0
    9bb6:	bf18      	it	ne
    9bb8:	2001      	movne	r0, #1
    9bba:	4770      	bx	lr
    9bbc:	20000144 	.word	0x20000144

00009bc0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    9bc0:	4806      	ldr	r0, [pc, #24]	; (9bdc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    9bc2:	4905      	ldr	r1, [pc, #20]	; (9bd8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    9bc4:	6501      	str	r1, [r0, #80]	; 0x50
    9bc6:	4906      	ldr	r1, [pc, #24]	; (9be0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    9bc8:	6541      	str	r1, [r0, #84]	; 0x54
    9bca:	4807      	ldr	r0, [pc, #28]	; (9be8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    9bcc:	4905      	ldr	r1, [pc, #20]	; (9be4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    9bce:	6501      	str	r1, [r0, #80]	; 0x50
    9bd0:	4906      	ldr	r1, [pc, #24]	; (9bec <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    9bd2:	6541      	str	r1, [r0, #84]	; 0x54
    9bd4:	4770      	bx	lr
    9bd6:	0000      	.short	0x0000
    9bd8:	0000b301 	.word	0x0000b301
    9bdc:	20000164 	.word	0x20000164
    9be0:	0000b3d9 	.word	0x0000b3d9
    9be4:	0000bbf9 	.word	0x0000bbf9
    9be8:	200001c8 	.word	0x200001c8
    9bec:	0000bc29 	.word	0x0000bc29

00009bf0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    9bf0:	491d      	ldr	r1, [pc, #116]	; (9c68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9bf2:	2200      	movs	r2, #0
    9bf4:	618a      	str	r2, [r1, #24]
    9bf6:	61ca      	str	r2, [r1, #28]
    9bf8:	7148      	strb	r0, [r1, #5]
    9bfa:	481d      	ldr	r0, [pc, #116]	; (9c70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9bfc:	491b      	ldr	r1, [pc, #108]	; (9c6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    9bfe:	6081      	str	r1, [r0, #8]
    9c00:	491c      	ldr	r1, [pc, #112]	; (9c74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    9c02:	6041      	str	r1, [r0, #4]
    9c04:	491c      	ldr	r1, [pc, #112]	; (9c78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    9c06:	6001      	str	r1, [r0, #0]
    9c08:	491c      	ldr	r1, [pc, #112]	; (9c7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    9c0a:	6281      	str	r1, [r0, #40]	; 0x28
    9c0c:	491c      	ldr	r1, [pc, #112]	; (9c80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9c0e:	62c1      	str	r1, [r0, #44]	; 0x2c
    9c10:	491c      	ldr	r1, [pc, #112]	; (9c84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    9c12:	60c1      	str	r1, [r0, #12]
    9c14:	491c      	ldr	r1, [pc, #112]	; (9c88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    9c16:	6181      	str	r1, [r0, #24]
    9c18:	491c      	ldr	r1, [pc, #112]	; (9c8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    9c1a:	6301      	str	r1, [r0, #48]	; 0x30
    9c1c:	491c      	ldr	r1, [pc, #112]	; (9c90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9c1e:	6201      	str	r1, [r0, #32]
    9c20:	491c      	ldr	r1, [pc, #112]	; (9c94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    9c22:	64c1      	str	r1, [r0, #76]	; 0x4c
    9c24:	491c      	ldr	r1, [pc, #112]	; (9c98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    9c26:	6481      	str	r1, [r0, #72]	; 0x48
    9c28:	491c      	ldr	r1, [pc, #112]	; (9c9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    9c2a:	6441      	str	r1, [r0, #68]	; 0x44
    9c2c:	491c      	ldr	r1, [pc, #112]	; (9ca0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9c2e:	6341      	str	r1, [r0, #52]	; 0x34
    9c30:	491c      	ldr	r1, [pc, #112]	; (9ca4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    9c32:	61c1      	str	r1, [r0, #28]
    9c34:	481d      	ldr	r0, [pc, #116]	; (9cac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    9c36:	491c      	ldr	r1, [pc, #112]	; (9ca8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    9c38:	6081      	str	r1, [r0, #8]
    9c3a:	491d      	ldr	r1, [pc, #116]	; (9cb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    9c3c:	61c1      	str	r1, [r0, #28]
    9c3e:	491d      	ldr	r1, [pc, #116]	; (9cb4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    9c40:	6241      	str	r1, [r0, #36]	; 0x24
    9c42:	491d      	ldr	r1, [pc, #116]	; (9cb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    9c44:	62c1      	str	r1, [r0, #44]	; 0x2c
    9c46:	491d      	ldr	r1, [pc, #116]	; (9cbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    9c48:	6101      	str	r1, [r0, #16]
    9c4a:	491d      	ldr	r1, [pc, #116]	; (9cc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    9c4c:	6141      	str	r1, [r0, #20]
    9c4e:	491d      	ldr	r1, [pc, #116]	; (9cc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    9c50:	6441      	str	r1, [r0, #68]	; 0x44
    9c52:	6341      	str	r1, [r0, #52]	; 0x34
    9c54:	491c      	ldr	r1, [pc, #112]	; (9cc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    9c56:	6181      	str	r1, [r0, #24]
    9c58:	491c      	ldr	r1, [pc, #112]	; (9ccc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    9c5a:	6301      	str	r1, [r0, #48]	; 0x30
    9c5c:	491c      	ldr	r1, [pc, #112]	; (9cd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    9c5e:	6481      	str	r1, [r0, #72]	; 0x48
    9c60:	491c      	ldr	r1, [pc, #112]	; (9cd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    9c62:	64c1      	str	r1, [r0, #76]	; 0x4c
    9c64:	4770      	bx	lr
    9c66:	0000      	.short	0x0000
    9c68:	20000144 	.word	0x20000144
    9c6c:	0000b945 	.word	0x0000b945
    9c70:	20000164 	.word	0x20000164
    9c74:	0000b08d 	.word	0x0000b08d
    9c78:	0000b0f1 	.word	0x0000b0f1
    9c7c:	0000b4cd 	.word	0x0000b4cd
    9c80:	0000b51d 	.word	0x0000b51d
    9c84:	0000b1ad 	.word	0x0000b1ad
    9c88:	0000b909 	.word	0x0000b909
    9c8c:	0000bab5 	.word	0x0000bab5
    9c90:	0000b259 	.word	0x0000b259
    9c94:	0000b49d 	.word	0x0000b49d
    9c98:	0000b469 	.word	0x0000b469
    9c9c:	0000b851 	.word	0x0000b851
    9ca0:	0000b8b9 	.word	0x0000b8b9
    9ca4:	0000b97d 	.word	0x0000b97d
    9ca8:	0000be15 	.word	0x0000be15
    9cac:	200001c8 	.word	0x200001c8
    9cb0:	0000be3d 	.word	0x0000be3d
    9cb4:	0000bbb5 	.word	0x0000bbb5
    9cb8:	0000bcd1 	.word	0x0000bcd1
    9cbc:	0000bb89 	.word	0x0000bb89
    9cc0:	0000bd79 	.word	0x0000bd79
    9cc4:	0000bd55 	.word	0x0000bd55
    9cc8:	0000bd9d 	.word	0x0000bd9d
    9ccc:	0000beb1 	.word	0x0000beb1
    9cd0:	0000bc6d 	.word	0x0000bc6d
    9cd4:	0000bc9d 	.word	0x0000bc9d

00009cd8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    9cd8:	4806      	ldr	r0, [pc, #24]	; (9cf4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    9cda:	4905      	ldr	r1, [pc, #20]	; (9cf0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    9cdc:	6581      	str	r1, [r0, #88]	; 0x58
    9cde:	4906      	ldr	r1, [pc, #24]	; (9cf8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    9ce0:	6601      	str	r1, [r0, #96]	; 0x60
    9ce2:	4807      	ldr	r0, [pc, #28]	; (9d00 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    9ce4:	4905      	ldr	r1, [pc, #20]	; (9cfc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    9ce6:	6581      	str	r1, [r0, #88]	; 0x58
    9ce8:	4906      	ldr	r1, [pc, #24]	; (9d04 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    9cea:	65c1      	str	r1, [r0, #92]	; 0x5c
    9cec:	4770      	bx	lr
    9cee:	0000      	.short	0x0000
    9cf0:	0000b53d 	.word	0x0000b53d
    9cf4:	20000164 	.word	0x20000164
    9cf8:	0000b61d 	.word	0x0000b61d
    9cfc:	0000bcfd 	.word	0x0000bcfd
    9d00:	200001c8 	.word	0x200001c8
    9d04:	0000bd2d 	.word	0x0000bd2d

00009d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    9d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d0c:	2701      	movs	r7, #1
    9d0e:	4cd1      	ldr	r4, [pc, #836]	; (a054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x34c>)
    9d10:	2500      	movs	r5, #0
    9d12:	f367 0907 	bfi	r9, r7, #0, #8
    9d16:	80e5      	strh	r5, [r4, #6]
    9d18:	70e5      	strb	r5, [r4, #3]
    9d1a:	7125      	strb	r5, [r4, #4]
    9d1c:	7025      	strb	r5, [r4, #0]
    9d1e:	60e0      	str	r0, [r4, #12]
    9d20:	4606      	mov	r6, r0
    9d22:	f880 710e 	strb.w	r7, [r0, #270]	; 0x10e
    9d26:	8800      	ldrh	r0, [r0, #0]
    9d28:	f7fa fb9c 	bl	4464 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9d2c:	ea5f 0a00 	movs.w	sl, r0
    9d30:	d010      	beq.n	9d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c>
    9d32:	68e0      	ldr	r0, [r4, #12]
    9d34:	8800      	ldrh	r0, [r0, #0]
    9d36:	f7fa fec5 	bl	4ac4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    9d3a:	68e0      	ldr	r0, [r4, #12]
    9d3c:	8800      	ldrh	r0, [r0, #0]
    9d3e:	f7fa fe67 	bl	4a10 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9d42:	68e0      	ldr	r0, [r4, #12]
    9d44:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    9d48:	b1a1      	cbz	r1, 9d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c>
    9d4a:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    9d4e:	29fe      	cmp	r1, #254	; 0xfe
    9d50:	d005      	beq.n	9d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56>
    9d52:	e014      	b.n	9d7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x76>
    9d54:	f640 31a8 	movw	r1, #2984	; 0xba8
    9d58:	2031      	movs	r0, #49	; 0x31
    9d5a:	f7f9 ff59 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d5e:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    9d62:	b189      	cbz	r1, 9d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    9d64:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    9d68:	2301      	movs	r3, #1
    9d6a:	4619      	mov	r1, r3
    9d6c:	3078      	adds	r0, #120	; 0x78
    9d6e:	f006 fba7 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d72:	b188      	cbz	r0, 9d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    9d74:	68e0      	ldr	r0, [r4, #12]
    9d76:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    9d7a:	28fe      	cmp	r0, #254	; 0xfe
    9d7c:	d004      	beq.n	9d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    9d7e:	68e0      	ldr	r0, [r4, #12]
    9d80:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    9d84:	f000 fc14 	bl	a5b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x53c>
    9d88:	68e0      	ldr	r0, [r4, #12]
    9d8a:	f890 110f 	ldrb.w	r1, [r0, #271]	; 0x10f
    9d8e:	2900      	cmp	r1, #0
    9d90:	bf18      	it	ne
    9d92:	8125      	strhne	r5, [r4, #8]
    9d94:	d11b      	bne.n	9dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    9d96:	e00f      	b.n	9db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    9d98:	68e0      	ldr	r0, [r4, #12]
    9d9a:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    9d9e:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    9da2:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    9da6:	2100      	movs	r1, #0
    9da8:	2002      	movs	r0, #2
    9daa:	f001 f8c1 	bl	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    9dae:	68e0      	ldr	r0, [r4, #12]
    9db0:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
    9db4:	2002      	movs	r0, #2
    9db6:	e7e5      	b.n	9d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    9db8:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    9dbc:	b929      	cbnz	r1, 9dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2>
    9dbe:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    9dc0:	8902      	ldrh	r2, [r0, #8]
    9dc2:	4291      	cmp	r1, r2
    9dc4:	bf88      	it	hi
    9dc6:	8121      	strhhi	r1, [r4, #8]
    9dc8:	d801      	bhi.n	9dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    9dca:	8901      	ldrh	r1, [r0, #8]
    9dcc:	8121      	strh	r1, [r4, #8]
    9dce:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    9dd2:	1e49      	subs	r1, r1, #1
    9dd4:	fa1f f881 	uxth.w	r8, r1
    9dd8:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    9ddc:	4441      	add	r1, r8
    9dde:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    9de2:	f890 110c 	ldrb.w	r1, [r0, #268]	; 0x10c
    9de6:	2900      	cmp	r1, #0
    9de8:	bf1c      	itt	ne
    9dea:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    9dee:	f880 510c 	strbne.w	r5, [r0, #268]	; 0x10c
    9df2:	d104      	bne.n	9dfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6>
    9df4:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    9df8:	4441      	add	r1, r8
    9dfa:	f8a0 110a 	strh.w	r1, [r0, #266]	; 0x10a
    9dfe:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    9e02:	4441      	add	r1, r8
    9e04:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    9e08:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9e0c:	b939      	cbnz	r1, 9e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116>
    9e0e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e12:	2301      	movs	r3, #1
    9e14:	2106      	movs	r1, #6
    9e16:	3078      	adds	r0, #120	; 0x78
    9e18:	f006 fb52 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e1c:	b128      	cbz	r0, 9e2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122>
    9e1e:	68e0      	ldr	r0, [r4, #12]
    9e20:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    9e24:	4441      	add	r1, r8
    9e26:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    9e2a:	68e0      	ldr	r0, [r4, #12]
    9e2c:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    9e30:	2901      	cmp	r1, #1
    9e32:	bf9c      	itt	ls
    9e34:	1c49      	addls	r1, r1, #1
    9e36:	f8a0 1102 	strhls.w	r1, [r0, #258]	; 0x102
    9e3a:	f1b8 0f00 	cmp.w	r8, #0
    9e3e:	bf18      	it	ne
    9e40:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    9e44:	4650      	mov	r0, sl
    9e46:	f005 fe5f 	bl	fb08 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9e4a:	4680      	mov	r8, r0
    9e4c:	68e0      	ldr	r0, [r4, #12]
    9e4e:	f890 110d 	ldrb.w	r1, [r0, #269]	; 0x10d
    9e52:	b199      	cbz	r1, 9e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    9e54:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    9e58:	8922      	ldrh	r2, [r4, #8]
    9e5a:	4291      	cmp	r1, r2
    9e5c:	d20e      	bcs.n	9e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    9e5e:	f1b8 0f00 	cmp.w	r8, #0
    9e62:	bf1c      	itt	ne
    9e64:	f890 1181 	ldrbne.w	r1, [r0, #385]	; 0x181
    9e68:	2900      	cmpne	r1, #0
    9e6a:	d007      	beq.n	9e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    9e6c:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    9e70:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
    9e74:	4281      	cmp	r1, r0
    9e76:	bf28      	it	cs
    9e78:	f7fa fec4 	blcs	4c04 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>
    9e7c:	68e2      	ldr	r2, [r4, #12]
    9e7e:	f882 510d 	strb.w	r5, [r2, #269]	; 0x10d
    9e82:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    9e86:	280b      	cmp	r0, #11
    9e88:	bf18      	it	ne
    9e8a:	280c      	cmpne	r0, #12
    9e8c:	d118      	bne.n	9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    9e8e:	f8b2 1078 	ldrh.w	r1, [r2, #120]	; 0x78
    9e92:	f8b2 31a4 	ldrh.w	r3, [r2, #420]	; 0x1a4
    9e96:	eba1 0103 	sub.w	r1, r1, r3
    9e9a:	b209      	sxth	r1, r1
    9e9c:	2900      	cmp	r1, #0
    9e9e:	db0f      	blt.n	9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    9ea0:	f502 71d3 	add.w	r1, r2, #422	; 0x1a6
    9ea4:	f102 000c 	add.w	r0, r2, #12
    9ea8:	f008 fd23 	bl	128f2 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    9eac:	2103      	movs	r1, #3
    9eae:	68e0      	ldr	r0, [r4, #12]
    9eb0:	f7fc fb06 	bl	64c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9eb4:	68e0      	ldr	r0, [r4, #12]
    9eb6:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9eba:	f880 70c0 	strb.w	r7, [r0, #192]	; 0xc0
    9ebe:	e093      	b.n	9fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9ec0:	2824      	cmp	r0, #36	; 0x24
    9ec2:	d146      	bne.n	9f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    9ec4:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    9ec8:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    9ecc:	1a40      	subs	r0, r0, r1
    9ece:	b200      	sxth	r0, r0
    9ed0:	2800      	cmp	r0, #0
    9ed2:	db3e      	blt.n	9f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    9ed4:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    9ed8:	2800      	cmp	r0, #0
    9eda:	bf14      	ite	ne
    9edc:	f04f 0a01 	movne.w	sl, #1
    9ee0:	f04f 0a00 	moveq.w	sl, #0
    9ee4:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    9ee8:	2900      	cmp	r1, #0
    9eea:	bf14      	ite	ne
    9eec:	f04f 0c01 	movne.w	ip, #1
    9ef0:	f04f 0c00 	moveq.w	ip, #0
    9ef4:	f1ba 0f00 	cmp.w	sl, #0
    9ef8:	bf08      	it	eq
    9efa:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    9efe:	f1bc 0f00 	cmp.w	ip, #0
    9f02:	bf08      	it	eq
    9f04:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    9f08:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    9f0c:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    9f10:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    9f14:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    9f18:	2801      	cmp	r0, #1
    9f1a:	d005      	beq.n	9f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    9f1c:	f1ba 0f00 	cmp.w	sl, #0
    9f20:	bf08      	it	eq
    9f22:	f1bc 0f00 	cmpeq.w	ip, #0
    9f26:	d003      	beq.n	9f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9f28:	f04f 0000 	mov.w	r0, #0
    9f2c:	f001 f876 	bl	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    9f30:	68e0      	ldr	r0, [r4, #12]
    9f32:	f006 ff52 	bl	10dda <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9f36:	b130      	cbz	r0, 9f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    9f38:	68e1      	ldr	r1, [r4, #12]
    9f3a:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9f3e:	8808      	ldrh	r0, [r1, #0]
    9f40:	3128      	adds	r1, #40	; 0x28
    9f42:	f006 ff0f 	bl	10d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9f46:	68e0      	ldr	r0, [r4, #12]
    9f48:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9f4c:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    9f50:	e04a      	b.n	9fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9f52:	f892 0084 	ldrb.w	r0, [r2, #132]	; 0x84
    9f56:	2824      	cmp	r0, #36	; 0x24
    9f58:	bf18      	it	ne
    9f5a:	2825      	cmpne	r0, #37	; 0x25
    9f5c:	d144      	bne.n	9fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9f5e:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    9f62:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    9f66:	eba0 0001 	sub.w	r0, r0, r1
    9f6a:	b200      	sxth	r0, r0
    9f6c:	2800      	cmp	r0, #0
    9f6e:	db3b      	blt.n	9fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    9f70:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    9f74:	2800      	cmp	r0, #0
    9f76:	bf14      	ite	ne
    9f78:	f04f 0a01 	movne.w	sl, #1
    9f7c:	f04f 0a00 	moveq.w	sl, #0
    9f80:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    9f84:	2900      	cmp	r1, #0
    9f86:	bf14      	ite	ne
    9f88:	f04f 0c01 	movne.w	ip, #1
    9f8c:	f04f 0c00 	moveq.w	ip, #0
    9f90:	f1ba 0f00 	cmp.w	sl, #0
    9f94:	bf08      	it	eq
    9f96:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    9f9a:	f1bc 0f00 	cmp.w	ip, #0
    9f9e:	bf08      	it	eq
    9fa0:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    9fa4:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    9fa8:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    9fac:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    9fb0:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    9fb4:	2801      	cmp	r0, #1
    9fb6:	d005      	beq.n	9fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9fb8:	f1ba 0f00 	cmp.w	sl, #0
    9fbc:	bf08      	it	eq
    9fbe:	f1bc 0f00 	cmpeq.w	ip, #0
    9fc2:	d003      	beq.n	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    9fc4:	f04f 0000 	mov.w	r0, #0
    9fc8:	f001 f828 	bl	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    9fcc:	68e0      	ldr	r0, [r4, #12]
    9fce:	f006 ff04 	bl	10dda <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9fd2:	b130      	cbz	r0, 9fe2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    9fd4:	68e1      	ldr	r1, [r4, #12]
    9fd6:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9fda:	8808      	ldrh	r0, [r1, #0]
    9fdc:	3128      	adds	r1, #40	; 0x28
    9fde:	f006 fec1 	bl	10d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9fe2:	68e0      	ldr	r0, [r4, #12]
    9fe4:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    9fe8:	68e1      	ldr	r1, [r4, #12]
    9fea:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9fee:	f8b1 2106 	ldrh.w	r2, [r1, #262]	; 0x106
    9ff2:	f7fc f975 	bl	62e0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    9ff6:	68e0      	ldr	r0, [r4, #12]
    9ff8:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
    9ffc:	2900      	cmp	r1, #0
    9ffe:	bf18      	it	ne
    a000:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    a004:	f1b8 0f00 	cmp.w	r8, #0
    a008:	bf17      	itett	ne
    a00a:	f890 0110 	ldrbne.w	r0, [r0, #272]	; 0x110
    a00e:	f880 5110 	strbeq.w	r5, [r0, #272]	; 0x110
    a012:	2800      	cmpne	r0, #0
    a014:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a018:	480f      	ldr	r0, [pc, #60]	; (a058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x350>)
    a01a:	9000      	str	r0, [sp, #0]
    a01c:	4b0f      	ldr	r3, [pc, #60]	; (a05c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x354>)
    a01e:	4a10      	ldr	r2, [pc, #64]	; (a060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>)
    a020:	4631      	mov	r1, r6
    a022:	4648      	mov	r0, r9
    a024:	f7fa fe4c 	bl	4cc0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    a028:	69e1      	ldr	r1, [r4, #28]
    a02a:	2900      	cmp	r1, #0
    a02c:	bf1c      	itt	ne
    a02e:	7860      	ldrbne	r0, [r4, #1]
    a030:	f003 fa90 	blne	d554 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>
    a034:	68e0      	ldr	r0, [r4, #12]
    a036:	2301      	movs	r3, #1
    a038:	2105      	movs	r1, #5
    a03a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a03e:	3078      	adds	r0, #120	; 0x78
    a040:	f006 fa3e 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a044:	2800      	cmp	r0, #0
    a046:	bf08      	it	eq
    a048:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a04c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a050:	f7fa be30 	b.w	4cb4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    a054:	20000144 	.word	0x20000144
    a058:	0000a775 	.word	0x0000a775
    a05c:	0000a091 	.word	0x0000a091
    a060:	0000af69 	.word	0x0000af69

0000a064 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    a064:	4802      	ldr	r0, [pc, #8]	; (a070 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI+0xc>)
    a066:	2100      	movs	r1, #0
    a068:	6181      	str	r1, [r0, #24]
    a06a:	61c1      	str	r1, [r0, #28]
    a06c:	4608      	mov	r0, r1
    a06e:	4770      	bx	lr
    a070:	20000144 	.word	0x20000144

0000a074 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    a074:	4805      	ldr	r0, [pc, #20]	; (a08c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18>)
    a076:	68c0      	ldr	r0, [r0, #12]
    a078:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    a07c:	b118      	cbz	r0, a086 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12>
    a07e:	2100      	movs	r1, #0
    a080:	4608      	mov	r0, r1
    a082:	f000 bb77 	b.w	a774 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x700>
    a086:	f7fa bfd7 	b.w	5038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    a08a:	0000      	.short	0x0000
    a08c:	20000144 	.word	0x20000144
    a090:	490d      	ldr	r1, [pc, #52]	; (a0c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x54>)
    a092:	4602      	mov	r2, r0
    a094:	78c8      	ldrb	r0, [r1, #3]
    a096:	790b      	ldrb	r3, [r1, #4]
    a098:	4318      	orrs	r0, r3
    a09a:	d113      	bne.n	a0c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    a09c:	4608      	mov	r0, r1
    a09e:	68c0      	ldr	r0, [r0, #12]
    a0a0:	b14a      	cbz	r2, a0b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42>
    a0a2:	7989      	ldrb	r1, [r1, #6]
    a0a4:	f011 0f08 	tst.w	r1, #8
    a0a8:	d003      	beq.n	a0b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3e>
    a0aa:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a0ae:	2808      	cmp	r0, #8
    a0b0:	d008      	beq.n	a0c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    a0b2:	2001      	movs	r0, #1
    a0b4:	4770      	bx	lr
    a0b6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    a0ba:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    a0bc:	428a      	cmp	r2, r1
    a0be:	d801      	bhi.n	a0c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    a0c0:	f7fe be3a 	b.w	8d38 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    a0c4:	2000      	movs	r0, #0
    a0c6:	4770      	bx	lr
    a0c8:	20000144 	.word	0x20000144
    a0cc:	b570      	push	{r4, r5, r6, lr}
    a0ce:	4cfd      	ldr	r4, [pc, #1012]	; (a4c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x450>)
    a0d0:	68e0      	ldr	r0, [r4, #12]
    a0d2:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    a0d6:	29fe      	cmp	r1, #254	; 0xfe
    a0d8:	bf06      	itte	eq
    a0da:	78e1      	ldrbeq	r1, [r4, #3]
    a0dc:	2900      	cmpeq	r1, #0
    a0de:	bd70      	popne	{r4, r5, r6, pc}
    a0e0:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a0e4:	f04f 0301 	mov.w	r3, #1
    a0e8:	4619      	mov	r1, r3
    a0ea:	f100 0078 	add.w	r0, r0, #120	; 0x78
    a0ee:	f006 f9e7 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0f2:	2800      	cmp	r0, #0
    a0f4:	bf18      	it	ne
    a0f6:	bd70      	popne	{r4, r5, r6, pc}
    a0f8:	68e0      	ldr	r0, [r4, #12]
    a0fa:	2500      	movs	r5, #0
    a0fc:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    a100:	b159      	cbz	r1, a11a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6>
    a102:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    a106:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    a10a:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a10e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a112:	2100      	movs	r1, #0
    a114:	2002      	movs	r0, #2
    a116:	f000 bf0b 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a11a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a11e:	2301      	movs	r3, #1
    a120:	2104      	movs	r1, #4
    a122:	3078      	adds	r0, #120	; 0x78
    a124:	f006 f9cc 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a128:	0006      	movs	r6, r0
    a12a:	68e0      	ldr	r0, [r4, #12]
    a12c:	d00c      	beq.n	a148 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4>
    a12e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a132:	2910      	cmp	r1, #16
    a134:	d07e      	beq.n	a234 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0>
    a136:	2914      	cmp	r1, #20
    a138:	d07d      	beq.n	a236 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c2>
    a13a:	2915      	cmp	r1, #21
    a13c:	d07c      	beq.n	a238 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c4>
    a13e:	291b      	cmp	r1, #27
    a140:	f000 80fe 	beq.w	a340 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2cc>
    a144:	f000 b912 	b.w	a36c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2f8>
    a148:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a14c:	f011 0f01 	tst.w	r1, #1
    a150:	d005      	beq.n	a15e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xea>
    a152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a156:	2101      	movs	r1, #1
    a158:	2009      	movs	r0, #9
    a15a:	f000 bee9 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a15e:	f011 0f02 	tst.w	r1, #2
    a162:	d00b      	beq.n	a17c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x108>
    a164:	2101      	movs	r1, #1
    a166:	200c      	movs	r0, #12
    a168:	f000 fee2 	bl	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a16c:	68e0      	ldr	r0, [r4, #12]
    a16e:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a172:	f041 0101 	orr.w	r1, r1, #1
    a176:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a17a:	bd70      	pop	{r4, r5, r6, pc}
    a17c:	f011 0f04 	tst.w	r1, #4
    a180:	d005      	beq.n	a18e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11a>
    a182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a186:	2101      	movs	r1, #1
    a188:	2013      	movs	r0, #19
    a18a:	f000 bed1 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a18e:	f011 0f08 	tst.w	r1, #8
    a192:	d009      	beq.n	a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x134>
    a194:	f890 10f1 	ldrb.w	r1, [r0, #241]	; 0xf1
    a198:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a19c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a1a0:	2101      	movs	r1, #1
    a1a2:	2007      	movs	r0, #7
    a1a4:	f000 bec4 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a1a8:	f011 0f30 	tst.w	r1, #48	; 0x30
    a1ac:	d07e      	beq.n	a2ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x238>
    a1ae:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    a1b2:	2900      	cmp	r1, #0
    a1b4:	d17a      	bne.n	a2ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x238>
    a1b6:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a1ba:	b1c9      	cbz	r1, a1f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c>
    a1bc:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a1c0:	2924      	cmp	r1, #36	; 0x24
    a1c2:	bf1b      	ittet	ne
    a1c4:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    a1c8:	2924      	cmpne	r1, #36	; 0x24
    a1ca:	2301      	moveq	r3, #1
    a1cc:	2300      	movne	r3, #0
    a1ce:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    a1d2:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    a1d6:	f7fc ff53 	bl	7080 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a1da:	68e0      	ldr	r0, [r4, #12]
    a1dc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a1e0:	f021 0120 	bic.w	r1, r1, #32
    a1e4:	f041 0110 	orr.w	r1, r1, #16
    a1e8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a1ec:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a1f0:	68e0      	ldr	r0, [r4, #12]
    a1f2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a1f6:	f011 0f10 	tst.w	r1, #16
    a1fa:	d057      	beq.n	a2ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x238>
    a1fc:	f006 fded 	bl	10dda <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a200:	68e1      	ldr	r1, [r4, #12]
    a202:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    a206:	2801      	cmp	r0, #1
    a208:	bf04      	itt	eq
    a20a:	2002      	moveq	r0, #2
    a20c:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    a210:	d008      	beq.n	a224 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0>
    a212:	8808      	ldrh	r0, [r1, #0]
    a214:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a218:	3128      	adds	r1, #40	; 0x28
    a21a:	f006 fda3 	bl	10d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a21e:	7960      	ldrb	r0, [r4, #5]
    a220:	f7f9 fae4 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a224:	68e0      	ldr	r0, [r4, #12]
    a226:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a22a:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a22e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a232:	e002      	b.n	a23a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c6>
    a234:	e009      	b.n	a24a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6>
    a236:	e00e      	b.n	a256 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e2>
    a238:	e04e      	b.n	a2d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x264>
    a23a:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a242:	2101      	movs	r1, #1
    a244:	2015      	movs	r0, #21
    a246:	f000 be73 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a24a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a24e:	2101      	movs	r1, #1
    a250:	200b      	movs	r0, #11
    a252:	f000 be6d 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a256:	f890 10fa 	ldrb.w	r1, [r0, #250]	; 0xfa
    a25a:	2908      	cmp	r1, #8
    a25c:	d20f      	bcs.n	a27e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20a>
    a25e:	f101 0208 	add.w	r2, r1, #8
    a262:	f1c1 0108 	rsb	r1, r1, #8
    a266:	4410      	add	r0, r2
    a268:	b2c9      	uxtb	r1, r1
    a26a:	f500 708e 	add.w	r0, r0, #284	; 0x11c
    a26e:	f7fa fb25 	bl	48bc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a272:	68e1      	ldr	r1, [r4, #12]
    a274:	f891 20fa 	ldrb.w	r2, [r1, #250]	; 0xfa
    a278:	4410      	add	r0, r2
    a27a:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
    a27e:	68e3      	ldr	r3, [r4, #12]
    a280:	f893 00fa 	ldrb.w	r0, [r3, #250]	; 0xfa
    a284:	f1a0 0108 	sub.w	r1, r0, #8
    a288:	2904      	cmp	r1, #4
    a28a:	d20e      	bcs.n	a2aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x236>
    a28c:	1f02      	subs	r2, r0, #4
    a28e:	3808      	subs	r0, #8
    a290:	f1c0 0004 	rsb	r0, r0, #4
    a294:	b2c1      	uxtb	r1, r0
    a296:	1898      	adds	r0, r3, r2
    a298:	30e8      	adds	r0, #232	; 0xe8
    a29a:	f7fa fb0f 	bl	48bc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a29e:	68e1      	ldr	r1, [r4, #12]
    a2a0:	f891 20fa 	ldrb.w	r2, [r1, #250]	; 0xfa
    a2a4:	4410      	add	r0, r2
    a2a6:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
    a2aa:	e000      	b.n	a2ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x23a>
    a2ac:	e04e      	b.n	a34c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2d8>
    a2ae:	68e0      	ldr	r0, [r4, #12]
    a2b0:	f890 10fa 	ldrb.w	r1, [r0, #250]	; 0xfa
    a2b4:	290c      	cmp	r1, #12
    a2b6:	bf38      	it	cc
    a2b8:	bd70      	popcc	{r4, r5, r6, pc}
    a2ba:	d005      	beq.n	a2c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x254>
    a2bc:	f240 71ac 	movw	r1, #1964	; 0x7ac
    a2c0:	f04f 0031 	mov.w	r0, #49	; 0x31
    a2c4:	f7f9 fca4 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2c8:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    a2cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2d0:	2101      	movs	r1, #1
    a2d2:	2004      	movs	r0, #4
    a2d4:	f000 be2c 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a2d8:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    a2dc:	2901      	cmp	r1, #1
    a2de:	d00b      	beq.n	a2f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x284>
    a2e0:	2902      	cmp	r1, #2
    a2e2:	bf18      	it	ne
    a2e4:	bd70      	popne	{r4, r5, r6, pc}
    a2e6:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a2ea:	b1d9      	cbz	r1, a324 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b0>
    a2ec:	2106      	movs	r1, #6
    a2ee:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a2f2:	2101      	movs	r1, #1
    a2f4:	2002      	movs	r0, #2
    a2f6:	e01d      	b.n	a334 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2c0>
    a2f8:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    a2fc:	2900      	cmp	r1, #0
    a2fe:	bf18      	it	ne
    a300:	bd70      	popne	{r4, r5, r6, pc}
    a302:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    a306:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    a30a:	2200      	movs	r2, #0
    a30c:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    a310:	f7fb ffa4 	bl	625c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a314:	2101      	movs	r1, #1
    a316:	2005      	movs	r0, #5
    a318:	f000 fe0a 	bl	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a31c:	68e0      	ldr	r0, [r4, #12]
    a31e:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a322:	bd70      	pop	{r4, r5, r6, pc}
    a324:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a328:	f010 0f04 	tst.w	r0, #4
    a32c:	bf14      	ite	ne
    a32e:	2011      	movne	r0, #17
    a330:	200d      	moveq	r0, #13
    a332:	2101      	movs	r1, #1
    a334:	f000 fdfc 	bl	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a338:	68e0      	ldr	r0, [r4, #12]
    a33a:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a33e:	bd70      	pop	{r4, r5, r6, pc}
    a340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a344:	2101      	movs	r1, #1
    a346:	2006      	movs	r0, #6
    a348:	f000 bdf2 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a34c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a350:	2921      	cmp	r1, #33	; 0x21
    a352:	d10b      	bne.n	a36c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2f8>
    a354:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a358:	2902      	cmp	r1, #2
    a35a:	d01d      	beq.n	a398 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x324>
    a35c:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a360:	2901      	cmp	r1, #1
    a362:	bf04      	itt	eq
    a364:	f890 01bf 	ldrbeq.w	r0, [r0, #447]	; 0x1bf
    a368:	2800      	cmpeq	r0, #0
    a36a:	d015      	beq.n	a398 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x324>
    a36c:	68e0      	ldr	r0, [r4, #12]
    a36e:	f04f 0301 	mov.w	r3, #1
    a372:	f04f 0100 	mov.w	r1, #0
    a376:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a37a:	f100 0078 	add.w	r0, r0, #120	; 0x78
    a37e:	f006 f89f 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a382:	b1c8      	cbz	r0, a3b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x344>
    a384:	68e0      	ldr	r0, [r4, #12]
    a386:	2301      	movs	r3, #1
    a388:	2104      	movs	r1, #4
    a38a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a38e:	3078      	adds	r0, #120	; 0x78
    a390:	f006 f896 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a394:	b130      	cbz	r0, a3a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x330>
    a396:	e00f      	b.n	a3b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x344>
    a398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a39c:	2101      	movs	r1, #1
    a39e:	2017      	movs	r0, #23
    a3a0:	f000 bdc6 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a3a4:	68e0      	ldr	r0, [r4, #12]
    a3a6:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
    a3aa:	b128      	cbz	r0, a3b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x344>
    a3ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a3b0:	2100      	movs	r1, #0
    a3b2:	2012      	movs	r0, #18
    a3b4:	f000 bdbc 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a3b8:	68e0      	ldr	r0, [r4, #12]
    a3ba:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a3be:	2a0a      	cmp	r2, #10
    a3c0:	d015      	beq.n	a3ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x37a>
    a3c2:	2e00      	cmp	r6, #0
    a3c4:	bf18      	it	ne
    a3c6:	bd70      	popne	{r4, r5, r6, pc}
    a3c8:	2301      	movs	r3, #1
    a3ca:	2100      	movs	r1, #0
    a3cc:	3078      	adds	r0, #120	; 0x78
    a3ce:	f006 f877 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3d2:	2800      	cmp	r0, #0
    a3d4:	d078      	beq.n	a4c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x454>
    a3d6:	68e0      	ldr	r0, [r4, #12]
    a3d8:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    a3dc:	b189      	cbz	r1, a402 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x38e>
    a3de:	2100      	movs	r1, #0
    a3e0:	200e      	movs	r0, #14
    a3e2:	f000 fda5 	bl	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a3e6:	68e0      	ldr	r0, [r4, #12]
    a3e8:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    a3ec:	bd70      	pop	{r4, r5, r6, pc}
    a3ee:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    a3f2:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a3f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a3fa:	2100      	movs	r1, #0
    a3fc:	2007      	movs	r0, #7
    a3fe:	f000 bd97 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a402:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a406:	b121      	cbz	r1, a412 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x39e>
    a408:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a40c:	f011 0f03 	tst.w	r1, #3
    a410:	d00e      	beq.n	a430 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3bc>
    a412:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a416:	b111      	cbz	r1, a41e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3aa>
    a418:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    a41c:	b1c1      	cbz	r1, a450 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3dc>
    a41e:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a422:	2901      	cmp	r1, #1
    a424:	bf04      	itt	eq
    a426:	f890 11bf 	ldrbeq.w	r1, [r0, #447]	; 0x1bf
    a42a:	2900      	cmpeq	r1, #0
    a42c:	d14c      	bne.n	a4c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x454>
    a42e:	e02f      	b.n	a490 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    a430:	f04f 0100 	mov.w	r1, #0
    a434:	f04f 000c 	mov.w	r0, #12
    a438:	f000 fd7a 	bl	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a43c:	68e0      	ldr	r0, [r4, #12]
    a43e:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a442:	f041 0101 	orr.w	r1, r1, #1
    a446:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a44a:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    a44e:	bd70      	pop	{r4, r5, r6, pc}
    a450:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a454:	2924      	cmp	r1, #36	; 0x24
    a456:	bf1d      	ittte	ne
    a458:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    a45c:	2924      	cmpne	r1, #36	; 0x24
    a45e:	2300      	movne	r3, #0
    a460:	2301      	moveq	r3, #1
    a462:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    a466:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    a46a:	f7fc fe09 	bl	7080 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a46e:	68e0      	ldr	r0, [r4, #12]
    a470:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a474:	2100      	movs	r1, #0
    a476:	2014      	movs	r0, #20
    a478:	f000 fd5a 	bl	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a47c:	68e0      	ldr	r0, [r4, #12]
    a47e:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a482:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a486:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a48a:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a48e:	bd70      	pop	{r4, r5, r6, pc}
    a490:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a494:	2301      	movs	r3, #1
    a496:	210b      	movs	r1, #11
    a498:	3078      	adds	r0, #120	; 0x78
    a49a:	f006 f811 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a49e:	b998      	cbnz	r0, a4c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x454>
    a4a0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    a4a4:	f89c 1066 	ldrb.w	r1, [ip, #102]	; 0x66
    a4a8:	2901      	cmp	r1, #1
    a4aa:	bf08      	it	eq
    a4ac:	2201      	moveq	r2, #1
    a4ae:	d012      	beq.n	a4d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x462>
    a4b0:	2902      	cmp	r1, #2
    a4b2:	bf08      	it	eq
    a4b4:	2202      	moveq	r2, #2
    a4b6:	d00e      	beq.n	a4d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x462>
    a4b8:	2904      	cmp	r1, #4
    a4ba:	bf14      	ite	ne
    a4bc:	2908      	cmpne	r1, #8
    a4be:	2203      	moveq	r2, #3
    a4c0:	d009      	beq.n	a4d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x462>
    a4c2:	e002      	b.n	a4ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    a4c4:	20000144 	.word	0x20000144
    a4c8:	e055      	b.n	a576 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    a4ca:	f240 218f 	movw	r1, #655	; 0x28f
    a4ce:	f04f 0006 	mov.w	r0, #6
    a4d2:	f7f9 fb9d 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4d6:	f89c 0067 	ldrb.w	r0, [ip, #103]	; 0x67
    a4da:	2801      	cmp	r0, #1
    a4dc:	bf18      	it	ne
    a4de:	2802      	cmpne	r0, #2
    a4e0:	d004      	beq.n	a4ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x478>
    a4e2:	2804      	cmp	r0, #4
    a4e4:	bf14      	ite	ne
    a4e6:	2808      	cmpne	r0, #8
    a4e8:	2003      	moveq	r0, #3
    a4ea:	d1ea      	bne.n	a4c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x44e>
    a4ec:	f89c 31c0 	ldrb.w	r3, [ip, #448]	; 0x1c0
    a4f0:	2a01      	cmp	r2, #1
    a4f2:	d006      	beq.n	a502 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x48e>
    a4f4:	2a02      	cmp	r2, #2
    a4f6:	d007      	beq.n	a508 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x494>
    a4f8:	2a03      	cmp	r2, #3
    a4fa:	bf08      	it	eq
    a4fc:	2b04      	cmpeq	r3, #4
    a4fe:	d005      	beq.n	a50c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x498>
    a500:	e014      	b.n	a52c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    a502:	2b01      	cmp	r3, #1
    a504:	d112      	bne.n	a52c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    a506:	e001      	b.n	a50c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x498>
    a508:	2b02      	cmp	r3, #2
    a50a:	d10f      	bne.n	a52c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    a50c:	f89c 21c1 	ldrb.w	r2, [ip, #449]	; 0x1c1
    a510:	2801      	cmp	r0, #1
    a512:	d006      	beq.n	a522 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ae>
    a514:	2802      	cmp	r0, #2
    a516:	d007      	beq.n	a528 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b4>
    a518:	2803      	cmp	r0, #3
    a51a:	bf08      	it	eq
    a51c:	2a04      	cmpeq	r2, #4
    a51e:	d00f      	beq.n	a540 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4cc>
    a520:	e004      	b.n	a52c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    a522:	2a01      	cmp	r2, #1
    a524:	d102      	bne.n	a52c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
    a526:	e00b      	b.n	a540 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4cc>
    a528:	2a02      	cmp	r2, #2
    a52a:	d009      	beq.n	a540 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4cc>
    a52c:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    a530:	2301      	movs	r3, #1
    a532:	2103      	movs	r1, #3
    a534:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    a538:	f005 ffc2 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a53c:	b9d8      	cbnz	r0, a576 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    a53e:	e011      	b.n	a564 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4f0>
    a540:	f8bc 3078 	ldrh.w	r3, [ip, #120]	; 0x78
    a544:	f8bc 01c2 	ldrh.w	r0, [ip, #450]	; 0x1c2
    a548:	f50c 72d2 	add.w	r2, ip, #420	; 0x1a4
    a54c:	f006 f916 	bl	1077c <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
    a550:	b120      	cbz	r0, a55c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4e8>
    a552:	68e1      	ldr	r1, [r4, #12]
    a554:	2025      	movs	r0, #37	; 0x25
    a556:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    a55a:	bd70      	pop	{r4, r5, r6, pc}
    a55c:	2000      	movs	r0, #0
    a55e:	f000 fd5d 	bl	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    a562:	e008      	b.n	a576 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    a564:	68e0      	ldr	r0, [r4, #12]
    a566:	2301      	movs	r3, #1
    a568:	2102      	movs	r1, #2
    a56a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a56e:	3078      	adds	r0, #120	; 0x78
    a570:	f005 ffa6 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a574:	b1b0      	cbz	r0, a5a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    a576:	68e0      	ldr	r0, [r4, #12]
    a578:	2301      	movs	r3, #1
    a57a:	2100      	movs	r1, #0
    a57c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a580:	3078      	adds	r0, #120	; 0x78
    a582:	f005 ff9d 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a586:	2800      	cmp	r0, #0
    a588:	bf08      	it	eq
    a58a:	bd70      	popeq	{r4, r5, r6, pc}
    a58c:	68e0      	ldr	r0, [r4, #12]
    a58e:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    a592:	2800      	cmp	r0, #0
    a594:	bf08      	it	eq
    a596:	bd70      	popeq	{r4, r5, r6, pc}
    a598:	2100      	movs	r1, #0
    a59a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a59e:	20ff      	movs	r0, #255	; 0xff
    a5a0:	f000 bcc6 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a5a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a5a8:	2100      	movs	r1, #0
    a5aa:	2016      	movs	r0, #22
    a5ac:	f000 bcc0 	b.w	af30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebc>
    a5b0:	b570      	push	{r4, r5, r6, lr}
    a5b2:	b084      	sub	sp, #16
    a5b4:	4605      	mov	r5, r0
    a5b6:	4668      	mov	r0, sp
    a5b8:	f7fa fa6e 	bl	4a98 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a5bc:	b318      	cbz	r0, a606 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x592>
    a5be:	2222      	movs	r2, #34	; 0x22
    a5c0:	2100      	movs	r1, #0
    a5c2:	9800      	ldr	r0, [sp, #0]
    a5c4:	f004 fd62 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a5c8:	2103      	movs	r1, #3
    a5ca:	9800      	ldr	r0, [sp, #0]
    a5cc:	f006 fa75 	bl	10aba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a5d0:	9800      	ldr	r0, [sp, #0]
    a5d2:	7801      	ldrb	r1, [r0, #0]
    a5d4:	f021 0110 	bic.w	r1, r1, #16
    a5d8:	7001      	strb	r1, [r0, #0]
    a5da:	4629      	mov	r1, r5
    a5dc:	f7fc fa00 	bl	69e0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a5e0:	2200      	movs	r2, #0
    a5e2:	4c63      	ldr	r4, [pc, #396]	; (a770 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6fc>)
    a5e4:	f644 162f 	movw	r6, #18735	; 0x492f
    a5e8:	2d0e      	cmp	r5, #14
    a5ea:	d06e      	beq.n	a6ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a5ec:	dc10      	bgt.n	a610 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x59c>
    a5ee:	f1a5 0002 	sub.w	r0, r5, #2
    a5f2:	280c      	cmp	r0, #12
    a5f4:	d21e      	bcs.n	a634 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c0>
    a5f6:	e8df f000 	tbb	[pc, r0]
    a5fa:	1d22      	.short	0x1d22
    a5fc:	22b0b048 	.word	0x22b0b048
    a600:	b01d551d 	.word	0xb01d551d
    a604:	3b27      	.short	0x3b27
    a606:	f640 116e 	movw	r1, #2414	; 0x96e
    a60a:	2031      	movs	r0, #49	; 0x31
    a60c:	f7f9 fb00 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a610:	2d15      	cmp	r5, #21
    a612:	d05b      	beq.n	a6cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x658>
    a614:	dc08      	bgt.n	a628 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5b4>
    a616:	2d11      	cmp	r5, #17
    a618:	d021      	beq.n	a65e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5ea>
    a61a:	2d12      	cmp	r5, #18
    a61c:	bf18      	it	ne
    a61e:	2d13      	cmpne	r5, #19
    a620:	d03f      	beq.n	a6a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x62e>
    a622:	2d14      	cmp	r5, #20
    a624:	d052      	beq.n	a6cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x658>
    a626:	e005      	b.n	a634 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c0>
    a628:	2d16      	cmp	r5, #22
    a62a:	d025      	beq.n	a678 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x604>
    a62c:	2d17      	cmp	r5, #23
    a62e:	d066      	beq.n	a6fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x68a>
    a630:	2dff      	cmp	r5, #255	; 0xff
    a632:	d076      	beq.n	a722 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6ae>
    a634:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
    a638:	2031      	movs	r0, #49	; 0x31
    a63a:	f7f9 fae9 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a63e:	68e1      	ldr	r1, [r4, #12]
    a640:	9800      	ldr	r0, [sp, #0]
    a642:	f891 10f6 	ldrb.w	r1, [r1, #246]	; 0xf6
    a646:	e015      	b.n	a674 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x600>
    a648:	9800      	ldr	r0, [sp, #0]
    a64a:	210b      	movs	r1, #11
    a64c:	7101      	strb	r1, [r0, #4]
    a64e:	2159      	movs	r1, #89	; 0x59
    a650:	7141      	strb	r1, [r0, #5]
    a652:	7182      	strb	r2, [r0, #6]
    a654:	2190      	movs	r1, #144	; 0x90
    a656:	71c1      	strb	r1, [r0, #7]
    a658:	2111      	movs	r1, #17
    a65a:	7201      	strb	r1, [r0, #8]
    a65c:	e07d      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    a65e:	2103      	movs	r1, #3
    a660:	9800      	ldr	r0, [sp, #0]
    a662:	f006 fa06 	bl	10a72 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a666:	2106      	movs	r1, #6
    a668:	9800      	ldr	r0, [sp, #0]
    a66a:	f006 fa04 	bl	10a76 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a66e:	e074      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    a670:	9800      	ldr	r0, [sp, #0]
    a672:	2106      	movs	r1, #6
    a674:	7101      	strb	r1, [r0, #4]
    a676:	e070      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    a678:	68e1      	ldr	r1, [r4, #12]
    a67a:	9800      	ldr	r0, [sp, #0]
    a67c:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    a680:	7102      	strb	r2, [r0, #4]
    a682:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    a686:	7141      	strb	r1, [r0, #5]
    a688:	e067      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    a68a:	68e0      	ldr	r0, [r4, #12]
    a68c:	f500 7192 	add.w	r1, r0, #292	; 0x124
    a690:	9800      	ldr	r0, [sp, #0]
    a692:	f006 fa03 	bl	10a9c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    a696:	68e0      	ldr	r0, [r4, #12]
    a698:	f100 01ec 	add.w	r1, r0, #236	; 0xec
    a69c:	9800      	ldr	r0, [sp, #0]
    a69e:	f006 f9fa 	bl	10a96 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    a6a2:	e05a      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    a6a4:	9202      	str	r2, [sp, #8]
    a6a6:	9203      	str	r2, [sp, #12]
    a6a8:	f002 fd10 	bl	d0cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a6ac:	68e1      	ldr	r1, [r4, #12]
    a6ae:	4030      	ands	r0, r6
    a6b0:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a6b4:	4001      	ands	r1, r0
    a6b6:	f88d 1008 	strb.w	r1, [sp, #8]
    a6ba:	0a00      	lsrs	r0, r0, #8
    a6bc:	f88d 0009 	strb.w	r0, [sp, #9]
    a6c0:	a902      	add	r1, sp, #8
    a6c2:	9800      	ldr	r0, [sp, #0]
    a6c4:	f006 f9f4 	bl	10ab0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    a6c8:	e047      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    a6ca:	e02b      	b.n	a724 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6b0>
    a6cc:	68e0      	ldr	r0, [r4, #12]
    a6ce:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a6d2:	9800      	ldr	r0, [sp, #0]
    a6d4:	f006 f9f9 	bl	10aca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a6d8:	68e0      	ldr	r0, [r4, #12]
    a6da:	f8b0 10f8 	ldrh.w	r1, [r0, #248]	; 0xf8
    a6de:	9800      	ldr	r0, [sp, #0]
    a6e0:	f006 f9f7 	bl	10ad2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a6e4:	68e0      	ldr	r0, [r4, #12]
    a6e6:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    a6ea:	9800      	ldr	r0, [sp, #0]
    a6ec:	f006 f9f5 	bl	10ada <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a6f0:	68e0      	ldr	r0, [r4, #12]
    a6f2:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
    a6f6:	9800      	ldr	r0, [sp, #0]
    a6f8:	f006 f9f3 	bl	10ae2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a6fc:	e02d      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    a6fe:	68e0      	ldr	r0, [r4, #12]
    a700:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a704:	2901      	cmp	r1, #1
    a706:	9900      	ldr	r1, [sp, #0]
    a708:	bf14      	ite	ne
    a70a:	f890 2062 	ldrbne.w	r2, [r0, #98]	; 0x62
    a70e:	f890 21c0 	ldrbeq.w	r2, [r0, #448]	; 0x1c0
    a712:	710a      	strb	r2, [r1, #4]
    a714:	bf14      	ite	ne
    a716:	f890 0063 	ldrbne.w	r0, [r0, #99]	; 0x63
    a71a:	f890 01c1 	ldrbeq.w	r0, [r0, #449]	; 0x1c1
    a71e:	7148      	strb	r0, [r1, #5]
    a720:	e01b      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    a722:	e012      	b.n	a74a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d6>
    a724:	9202      	str	r2, [sp, #8]
    a726:	9203      	str	r2, [sp, #12]
    a728:	f002 fcd0 	bl	d0cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a72c:	68e1      	ldr	r1, [r4, #12]
    a72e:	4030      	ands	r0, r6
    a730:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a734:	4001      	ands	r1, r0
    a736:	f88d 1008 	strb.w	r1, [sp, #8]
    a73a:	0a00      	lsrs	r0, r0, #8
    a73c:	f88d 0009 	strb.w	r0, [sp, #9]
    a740:	a902      	add	r1, sp, #8
    a742:	9800      	ldr	r0, [sp, #0]
    a744:	f006 f9af 	bl	10aa6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a748:	e007      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e6>
    a74a:	68e0      	ldr	r0, [r4, #12]
    a74c:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    a750:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    a754:	9800      	ldr	r0, [sp, #0]
    a756:	f006 f990 	bl	10a7a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    a75a:	f7fa f975 	bl	4a48 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a75e:	2800      	cmp	r0, #0
    a760:	bf1c      	itt	ne
    a762:	b004      	addne	sp, #16
    a764:	bd70      	popne	{r4, r5, r6, pc}
    a766:	f640 11e4 	movw	r1, #2532	; 0x9e4
    a76a:	2031      	movs	r0, #49	; 0x31
    a76c:	f7f9 fa50 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a770:	20000144 	.word	0x20000144
    a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a778:	4cff      	ldr	r4, [pc, #1020]	; (ab78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb04>)
    a77a:	4682      	mov	sl, r0
    a77c:	b087      	sub	sp, #28
    a77e:	68e0      	ldr	r0, [r4, #12]
    a780:	460d      	mov	r5, r1
    a782:	8800      	ldrh	r0, [r0, #0]
    a784:	f7f9 fe6e 	bl	4464 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    a788:	9005      	str	r0, [sp, #20]
    a78a:	b178      	cbz	r0, a7ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x738>
    a78c:	78e0      	ldrb	r0, [r4, #3]
    a78e:	4328      	orrs	r0, r5
    a790:	70e0      	strb	r0, [r4, #3]
    a792:	88e0      	ldrh	r0, [r4, #6]
    a794:	f04f 0500 	mov.w	r5, #0
    a798:	f410 7f80 	tst.w	r0, #256	; 0x100
    a79c:	68e0      	ldr	r0, [r4, #12]
    a79e:	bf1c      	itt	ne
    a7a0:	f8a0 50a6 	strhne.w	r5, [r0, #166]	; 0xa6
    a7a4:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    a7a8:	d005      	beq.n	a7b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x742>
    a7aa:	e009      	b.n	a7c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x74c>
    a7ac:	f640 5176 	movw	r1, #3446	; 0xd76
    a7b0:	2031      	movs	r0, #49	; 0x31
    a7b2:	f7f9 fa2d 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7b6:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    a7ba:	1c49      	adds	r1, r1, #1
    a7bc:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    a7c0:	68e0      	ldr	r0, [r4, #12]
    a7c2:	2701      	movs	r7, #1
    a7c4:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a7c8:	b939      	cbnz	r1, a7da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x766>
    a7ca:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a7ce:	2301      	movs	r3, #1
    a7d0:	2106      	movs	r1, #6
    a7d2:	3078      	adds	r0, #120	; 0x78
    a7d4:	f005 fe74 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7d8:	b340      	cbz	r0, a82c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    a7da:	88e0      	ldrh	r0, [r4, #6]
    a7dc:	f410 6f00 	tst.w	r0, #2048	; 0x800
    a7e0:	d007      	beq.n	a7f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x77e>
    a7e2:	68e0      	ldr	r0, [r4, #12]
    a7e4:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a7e8:	2900      	cmp	r1, #0
    a7ea:	bf18      	it	ne
    a7ec:	f8c0 5098 	strne.w	r5, [r0, #152]	; 0x98
    a7f0:	d11c      	bne.n	a82c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    a7f2:	68e0      	ldr	r0, [r4, #12]
    a7f4:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    a7f8:	1c49      	adds	r1, r1, #1
    a7fa:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    a7fe:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    a802:	428a      	cmp	r2, r1
    a804:	bf2c      	ite	cs
    a806:	1a53      	subcs	r3, r2, r1
    a808:	2300      	movcc	r3, #0
    a80a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    a80e:	f10c 0c05 	add.w	ip, ip, #5
    a812:	4563      	cmp	r3, ip
    a814:	bf98      	it	ls
    a816:	f880 70a4 	strbls.w	r7, [r0, #164]	; 0xa4
    a81a:	4291      	cmp	r1, r2
    a81c:	d306      	bcc.n	a82c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    a81e:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    a822:	f880 720a 	strb.w	r7, [r0, #522]	; 0x20a
    a826:	7960      	ldrb	r0, [r4, #5]
    a828:	f7f8 ffe0 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a82c:	88e0      	ldrh	r0, [r4, #6]
    a82e:	f04f 0602 	mov.w	r6, #2
    a832:	f410 7f40 	tst.w	r0, #768	; 0x300
    a836:	d011      	beq.n	a85c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7e8>
    a838:	68e0      	ldr	r0, [r4, #12]
    a83a:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a83e:	b111      	cbz	r1, a846 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7d2>
    a840:	2903      	cmp	r1, #3
    a842:	d006      	beq.n	a852 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7de>
    a844:	e00a      	b.n	a85c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7e8>
    a846:	f880 7088 	strb.w	r7, [r0, #136]	; 0x88
    a84a:	2101      	movs	r1, #1
    a84c:	f7fe faa0 	bl	8d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a850:	e004      	b.n	a85c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7e8>
    a852:	f880 6088 	strb.w	r6, [r0, #136]	; 0x88
    a856:	2101      	movs	r1, #1
    a858:	f7fe fa9a 	bl	8d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a85c:	68e0      	ldr	r0, [r4, #12]
    a85e:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a862:	2901      	cmp	r1, #1
    a864:	d105      	bne.n	a872 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7fe>
    a866:	88e1      	ldrh	r1, [r4, #6]
    a868:	f411 6f80 	tst.w	r1, #1024	; 0x400
    a86c:	bf18      	it	ne
    a86e:	f880 6088 	strbne.w	r6, [r0, #136]	; 0x88
    a872:	f04f 0808 	mov.w	r8, #8
    a876:	f1ba 0f00 	cmp.w	sl, #0
    a87a:	f040 8295 	bne.w	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd34>
    a87e:	88e1      	ldrh	r1, [r4, #6]
    a880:	f011 0f40 	tst.w	r1, #64	; 0x40
    a884:	bf18      	it	ne
    a886:	f8a0 512c 	strhne.w	r5, [r0, #300]	; 0x12c
    a88a:	d104      	bne.n	a896 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x822>
    a88c:	f8b0 212c 	ldrh.w	r2, [r0, #300]	; 0x12c
    a890:	1c52      	adds	r2, r2, #1
    a892:	f8a0 212c 	strh.w	r2, [r0, #300]	; 0x12c
    a896:	78e2      	ldrb	r2, [r4, #3]
    a898:	2a00      	cmp	r2, #0
    a89a:	d178      	bne.n	a98e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x91a>
    a89c:	f011 0f08 	tst.w	r1, #8
    a8a0:	f04f 0b20 	mov.w	fp, #32
    a8a4:	d045      	beq.n	a932 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8be>
    a8a6:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    a8aa:	29fe      	cmp	r1, #254	; 0xfe
    a8ac:	d00d      	beq.n	a8ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x856>
    a8ae:	21fe      	movs	r1, #254	; 0xfe
    a8b0:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    a8b4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a8b8:	2919      	cmp	r1, #25
    a8ba:	d00b      	beq.n	a8d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x860>
    a8bc:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    a8c0:	291f      	cmp	r1, #31
    a8c2:	d019      	beq.n	a8f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x884>
    a8c4:	2927      	cmp	r1, #39	; 0x27
    a8c6:	d026      	beq.n	a916 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8a2>
    a8c8:	e02b      	b.n	a922 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ae>
    a8ca:	f240 7144 	movw	r1, #1860	; 0x744
    a8ce:	2031      	movs	r0, #49	; 0x31
    a8d0:	f7f9 f99e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8d4:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
    a8d8:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    a8dc:	1e49      	subs	r1, r1, #1
    a8de:	b249      	sxtb	r1, r1
    a8e0:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    a8e4:	2900      	cmp	r1, #0
    a8e6:	bfa8      	it	ge
    a8e8:	f880 5085 	strbge.w	r5, [r0, #133]	; 0x85
    a8ec:	dae6      	bge.n	a8bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x848>
    a8ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
    a8f2:	2031      	movs	r0, #49	; 0x31
    a8f4:	f7f9 f98c 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8f8:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a8fc:	f005 fe4c 	bl	10598 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a900:	2800      	cmp	r0, #0
    a902:	bf1d      	ittte	ne
    a904:	2026      	movne	r0, #38	; 0x26
    a906:	68e1      	ldrne	r1, [r4, #12]
    a908:	f881 0084 	strbne.w	r0, [r1, #132]	; 0x84
    a90c:	68e0      	ldreq	r0, [r4, #12]
    a90e:	bf08      	it	eq
    a910:	f880 b084 	strbeq.w	fp, [r0, #132]	; 0x84
    a914:	e005      	b.n	a922 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ae>
    a916:	f880 719d 	strb.w	r7, [r0, #413]	; 0x19d
    a91a:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    a91e:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    a922:	68e0      	ldr	r0, [r4, #12]
    a924:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a928:	2908      	cmp	r1, #8
    a92a:	bf04      	itt	eq
    a92c:	7026      	strbeq	r6, [r4, #0]
    a92e:	f880 60f4 	strbeq.w	r6, [r0, #244]	; 0xf4
    a932:	2000      	movs	r0, #0
    a934:	79a1      	ldrb	r1, [r4, #6]
    a936:	f011 0f01 	tst.w	r1, #1
    a93a:	d060      	beq.n	a9fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98a>
    a93c:	6960      	ldr	r0, [r4, #20]
    a93e:	2301      	movs	r3, #1
    a940:	2105      	movs	r1, #5
    a942:	f890 9003 	ldrb.w	r9, [r0, #3]
    a946:	68e0      	ldr	r0, [r4, #12]
    a948:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a94c:	3078      	adds	r0, #120	; 0x78
    a94e:	f005 fdb7 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a952:	b160      	cbz	r0, a96e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fa>
    a954:	f1a9 0002 	sub.w	r0, r9, #2
    a958:	280a      	cmp	r0, #10
    a95a:	d206      	bcs.n	a96a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8f6>
    a95c:	e8df f000 	tbb	[pc, r0]
    a960:	05050707 	.word	0x05050707
    a964:	05050707 	.word	0x05050707
    a968:	0707      	.short	0x0707
    a96a:	4646      	mov	r6, r8
    a96c:	e048      	b.n	aa00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    a96e:	6960      	ldr	r0, [r4, #20]
    a970:	f7fc f808 	bl	6984 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    a974:	b160      	cbz	r0, a990 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x91c>
    a976:	6960      	ldr	r0, [r4, #20]
    a978:	f890 9003 	ldrb.w	r9, [r0, #3]
    a97c:	f1b9 0f00 	cmp.w	r9, #0
    a980:	bf1c      	itt	ne
    a982:	f1b9 0f01 	cmpne.w	r9, #1
    a986:	f1b9 0f16 	cmpne.w	r9, #22
    a98a:	d005      	beq.n	a998 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x924>
    a98c:	e01a      	b.n	a9c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x950>
    a98e:	e069      	b.n	aa64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    a990:	f000 fc98 	bl	b2c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    a994:	4606      	mov	r6, r0
    a996:	e033      	b.n	aa00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    a998:	68e0      	ldr	r0, [r4, #12]
    a99a:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    a99e:	f005 fdfb 	bl	10598 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a9a2:	b178      	cbz	r0, a9c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x950>
    a9a4:	68e1      	ldr	r1, [r4, #12]
    a9a6:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    a9aa:	281f      	cmp	r0, #31
    a9ac:	d00a      	beq.n	a9c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x950>
    a9ae:	2820      	cmp	r0, #32
    a9b0:	bf04      	itt	eq
    a9b2:	2026      	moveq	r0, #38	; 0x26
    a9b4:	f881 0084 	strbeq.w	r0, [r1, #132]	; 0x84
    a9b8:	d004      	beq.n	a9c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x950>
    a9ba:	f1b9 0f16 	cmp.w	r9, #22
    a9be:	bf08      	it	eq
    a9c0:	465e      	moveq	r6, fp
    a9c2:	e01d      	b.n	aa00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    a9c4:	f1b9 0f19 	cmp.w	r9, #25
    a9c8:	d205      	bcs.n	a9d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x962>
    a9ca:	486c      	ldr	r0, [pc, #432]	; (ab7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb08>)
    a9cc:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
    a9d0:	b108      	cbz	r0, a9d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x962>
    a9d2:	4780      	blx	r0
    a9d4:	e00b      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x97a>
    a9d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    a9da:	d106      	bne.n	a9ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x976>
    a9dc:	69a0      	ldr	r0, [r4, #24]
    a9de:	b120      	cbz	r0, a9ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x976>
    a9e0:	68e0      	ldr	r0, [r4, #12]
    a9e2:	f880 719e 	strb.w	r7, [r0, #414]	; 0x19e
    a9e6:	2000      	movs	r0, #0
    a9e8:	e001      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x97a>
    a9ea:	f000 fc6b 	bl	b2c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    a9ee:	68e1      	ldr	r1, [r4, #12]
    a9f0:	e9d1 2334 	ldrd	r2, r3, [r1, #208]	; 0xd0
    a9f4:	1c52      	adds	r2, r2, #1
    a9f6:	f143 0300 	adc.w	r3, r3, #0
    a9fa:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    a9fe:	4606      	mov	r6, r0
    aa00:	70e6      	strb	r6, [r4, #3]
    aa02:	bb7e      	cbnz	r6, aa64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    aa04:	88e0      	ldrh	r0, [r4, #6]
    aa06:	f010 0f04 	tst.w	r0, #4
    aa0a:	d005      	beq.n	aa18 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9a4>
    aa0c:	68e1      	ldr	r1, [r4, #12]
    aa0e:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    aa12:	2907      	cmp	r1, #7
    aa14:	bf08      	it	eq
    aa16:	7027      	strbeq	r7, [r4, #0]
    aa18:	f010 0f02 	tst.w	r0, #2
    aa1c:	d016      	beq.n	aa4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d8>
    aa1e:	6920      	ldr	r0, [r4, #16]
    aa20:	78c1      	ldrb	r1, [r0, #3]
    aa22:	2919      	cmp	r1, #25
    aa24:	d205      	bcs.n	aa32 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9be>
    aa26:	4856      	ldr	r0, [pc, #344]	; (ab80 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb0c>)
    aa28:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    aa2c:	b108      	cbz	r0, aa32 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9be>
    aa2e:	4780      	blx	r0
    aa30:	e00c      	b.n	aa4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d8>
    aa32:	29ff      	cmp	r1, #255	; 0xff
    aa34:	d004      	beq.n	aa40 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9cc>
    aa36:	f240 713a 	movw	r1, #1850	; 0x73a
    aa3a:	2031      	movs	r0, #49	; 0x31
    aa3c:	f7f9 f8e8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa40:	68e0      	ldr	r0, [r4, #12]
    aa42:	2127      	movs	r1, #39	; 0x27
    aa44:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    aa48:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    aa4c:	79a0      	ldrb	r0, [r4, #6]
    aa4e:	f010 0f10 	tst.w	r0, #16
    aa52:	d007      	beq.n	aa64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    aa54:	68e0      	ldr	r0, [r4, #12]
    aa56:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aa5a:	290b      	cmp	r1, #11
    aa5c:	bf04      	itt	eq
    aa5e:	210c      	moveq	r1, #12
    aa60:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    aa64:	7920      	ldrb	r0, [r4, #4]
    aa66:	f010 0f08 	tst.w	r0, #8
    aa6a:	d011      	beq.n	aa90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa1c>
    aa6c:	68e0      	ldr	r0, [r4, #12]
    aa6e:	2301      	movs	r3, #1
    aa70:	2105      	movs	r1, #5
    aa72:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa76:	3078      	adds	r0, #120	; 0x78
    aa78:	f005 fd22 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa7c:	b128      	cbz	r0, aa8a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa16>
    aa7e:	f884 8003 	strb.w	r8, [r4, #3]
    aa82:	68e0      	ldr	r0, [r4, #12]
    aa84:	f880 51d4 	strb.w	r5, [r0, #468]	; 0x1d4
    aa88:	e002      	b.n	aa90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa1c>
    aa8a:	2000      	movs	r0, #0
    aa8c:	f7fa fa30 	bl	4ef0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    aa90:	69a0      	ldr	r0, [r4, #24]
    aa92:	b3e8      	cbz	r0, ab10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa9c>
    aa94:	9500      	str	r5, [sp, #0]
    aa96:	9501      	str	r5, [sp, #4]
    aa98:	9502      	str	r5, [sp, #8]
    aa9a:	9503      	str	r5, [sp, #12]
    aa9c:	9504      	str	r5, [sp, #16]
    aa9e:	68e0      	ldr	r0, [r4, #12]
    aaa0:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    aaa4:	f007 fe6c 	bl	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    aaa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    aaac:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    aab0:	fbb0 f6f1 	udiv	r6, r0, r1
    aab4:	68e0      	ldr	r0, [r4, #12]
    aab6:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    aaba:	f007 fe4d 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    aabe:	4430      	add	r0, r6
    aac0:	f8ad 0006 	strh.w	r0, [sp, #6]
    aac4:	68e0      	ldr	r0, [r4, #12]
    aac6:	8801      	ldrh	r1, [r0, #0]
    aac8:	f8ad 1000 	strh.w	r1, [sp]
    aacc:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    aad0:	f8ad 1004 	strh.w	r1, [sp, #4]
    aad4:	6840      	ldr	r0, [r0, #4]
    aad6:	f005 fccc 	bl	10472 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    aada:	f8ad 0002 	strh.w	r0, [sp, #2]
    aade:	68e0      	ldr	r0, [r4, #12]
    aae0:	f890 019e 	ldrb.w	r0, [r0, #414]	; 0x19e
    aae4:	b130      	cbz	r0, aaf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa80>
    aae6:	6960      	ldr	r0, [r4, #20]
    aae8:	1cc1      	adds	r1, r0, #3
    aaea:	9103      	str	r1, [sp, #12]
    aaec:	f005 ff76 	bl	109dc <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>
    aaf0:	f88d 0010 	strb.w	r0, [sp, #16]
    aaf4:	68e0      	ldr	r0, [r4, #12]
    aaf6:	f890 019d 	ldrb.w	r0, [r0, #413]	; 0x19d
    aafa:	f88d 0008 	strb.w	r0, [sp, #8]
    aafe:	69a1      	ldr	r1, [r4, #24]
    ab00:	4668      	mov	r0, sp
    ab02:	4788      	blx	r1
    ab04:	68e0      	ldr	r0, [r4, #12]
    ab06:	f880 519e 	strb.w	r5, [r0, #414]	; 0x19e
    ab0a:	f880 519d 	strb.w	r5, [r0, #413]	; 0x19d
    ab0e:	e000      	b.n	ab12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa9e>
    ab10:	e021      	b.n	ab56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    ab12:	9903      	ldr	r1, [sp, #12]
    ab14:	b1f9      	cbz	r1, ab56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    ab16:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    ab1a:	b9e1      	cbnz	r1, ab56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    ab1c:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    ab20:	2927      	cmp	r1, #39	; 0x27
    ab22:	d018      	beq.n	ab56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    ab24:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ab28:	9a03      	ldr	r2, [sp, #12]
    ab2a:	b1a1      	cbz	r1, ab56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    ab2c:	7813      	ldrb	r3, [r2, #0]
    ab2e:	2bff      	cmp	r3, #255	; 0xff
    ab30:	d006      	beq.n	ab40 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xacc>
    ab32:	2b07      	cmp	r3, #7
    ab34:	bf02      	ittt	eq
    ab36:	2902      	cmpeq	r1, #2
    ab38:	7851      	ldrbeq	r1, [r2, #1]
    ab3a:	29ff      	cmpeq	r1, #255	; 0xff
    ab3c:	d002      	beq.n	ab44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad0>
    ab3e:	e00a      	b.n	ab56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    ab40:	291b      	cmp	r1, #27
    ab42:	d808      	bhi.n	ab56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae2>
    ab44:	f880 719c 	strb.w	r7, [r0, #412]	; 0x19c
    ab48:	9903      	ldr	r1, [sp, #12]
    ab4a:	f8c0 11a0 	str.w	r1, [r0, #416]	; 0x1a0
    ab4e:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ab52:	f880 119f 	strb.w	r1, [r0, #415]	; 0x19f
    ab56:	f7ff fab9 	bl	a0cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    ab5a:	f7fa f865 	bl	4c28 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    ab5e:	b138      	cbz	r0, ab70 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xafc>
    ab60:	68e0      	ldr	r0, [r4, #12]
    ab62:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ab66:	2900      	cmp	r1, #0
    ab68:	bf08      	it	eq
    ab6a:	f8a0 5108 	strheq.w	r5, [r0, #264]	; 0x108
    ab6e:	d00c      	beq.n	ab8a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb16>
    ab70:	68e0      	ldr	r0, [r4, #12]
    ab72:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    ab76:	e005      	b.n	ab84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb10>
    ab78:	20000144 	.word	0x20000144
    ab7c:	20000164 	.word	0x20000164
    ab80:	200001c8 	.word	0x200001c8
    ab84:	1c49      	adds	r1, r1, #1
    ab86:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    ab8a:	f7fa f847 	bl	4c1c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    ab8e:	b140      	cbz	r0, aba2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb2e>
    ab90:	68e1      	ldr	r1, [r4, #12]
    ab92:	f891 0118 	ldrb.w	r0, [r1, #280]	; 0x118
    ab96:	2802      	cmp	r0, #2
    ab98:	bf9c      	itt	ls
    ab9a:	1c40      	addls	r0, r0, #1
    ab9c:	f881 0118 	strbls.w	r0, [r1, #280]	; 0x118
    aba0:	d804      	bhi.n	abac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb38>
    aba2:	68e0      	ldr	r0, [r4, #12]
    aba4:	f890 0118 	ldrb.w	r0, [r0, #280]	; 0x118
    aba8:	2802      	cmp	r0, #2
    abaa:	d906      	bls.n	abba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb46>
    abac:	68e0      	ldr	r0, [r4, #12]
    abae:	f8a0 5108 	strh.w	r5, [r0, #264]	; 0x108
    abb2:	f8a0 510a 	strh.w	r5, [r0, #266]	; 0x10a
    abb6:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
    abba:	68e0      	ldr	r0, [r4, #12]
    abbc:	2301      	movs	r3, #1
    abbe:	2100      	movs	r1, #0
    abc0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    abc4:	3078      	adds	r0, #120	; 0x78
    abc6:	f005 fc7b 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abca:	b920      	cbnz	r0, abd6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb62>
    abcc:	68e0      	ldr	r0, [r4, #12]
    abce:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    abd2:	280c      	cmp	r0, #12
    abd4:	d168      	bne.n	aca8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    abd6:	68e0      	ldr	r0, [r4, #12]
    abd8:	2301      	movs	r3, #1
    abda:	2100      	movs	r1, #0
    abdc:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    abe0:	3078      	adds	r0, #120	; 0x78
    abe2:	f005 fc6d 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abe6:	b3e0      	cbz	r0, ac62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbee>
    abe8:	68e0      	ldr	r0, [r4, #12]
    abea:	2301      	movs	r3, #1
    abec:	2100      	movs	r1, #0
    abee:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    abf2:	3078      	adds	r0, #120	; 0x78
    abf4:	f005 fc64 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abf8:	b398      	cbz	r0, ac62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbee>
    abfa:	68e0      	ldr	r0, [r4, #12]
    abfc:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    ac00:	2902      	cmp	r1, #2
    ac02:	bf04      	itt	eq
    ac04:	f890 0118 	ldrbeq.w	r0, [r0, #280]	; 0x118
    ac08:	2800      	cmpeq	r0, #0
    ac0a:	d14d      	bne.n	aca8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    ac0c:	9805      	ldr	r0, [sp, #20]
    ac0e:	f004 ff7b 	bl	fb08 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    ac12:	b330      	cbz	r0, ac62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbee>
    ac14:	68e1      	ldr	r1, [r4, #12]
    ac16:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
    ac1a:	28fe      	cmp	r0, #254	; 0xfe
    ac1c:	d144      	bne.n	aca8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    ac1e:	f8b1 0102 	ldrh.w	r0, [r1, #258]	; 0x102
    ac22:	2801      	cmp	r0, #1
    ac24:	d940      	bls.n	aca8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    ac26:	f881 710d 	strb.w	r7, [r1, #269]	; 0x10d
    ac2a:	f8b1 00a8 	ldrh.w	r0, [r1, #168]	; 0xa8
    ac2e:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    ac32:	1e83      	subs	r3, r0, #2
    ac34:	429a      	cmp	r2, r3
    ac36:	bfaf      	iteee	ge
    ac38:	2001      	movge	r0, #1
    ac3a:	1a80      	sublt	r0, r0, r2
    ac3c:	1e40      	sublt	r0, r0, #1
    ac3e:	b280      	uxthlt	r0, r0
    ac40:	f8b1 2108 	ldrh.w	r2, [r1, #264]	; 0x108
    ac44:	8923      	ldrh	r3, [r4, #8]
    ac46:	429a      	cmp	r2, r3
    ac48:	bf2f      	iteee	cs
    ac4a:	2201      	movcs	r2, #1
    ac4c:	1a9a      	subcc	r2, r3, r2
    ac4e:	1c52      	addcc	r2, r2, #1
    ac50:	b292      	uxthcc	r2, r2
    ac52:	4290      	cmp	r0, r2
    ac54:	bf88      	it	hi
    ac56:	4610      	movhi	r0, r2
    ac58:	2801      	cmp	r0, #1
    ac5a:	bf08      	it	eq
    ac5c:	f881 510d 	strbeq.w	r5, [r1, #269]	; 0x10d
    ac60:	e000      	b.n	ac64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf0>
    ac62:	e021      	b.n	aca8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
    ac64:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
    ac68:	b96a      	cbnz	r2, ac86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc12>
    ac6a:	6eca      	ldr	r2, [r1, #108]	; 0x6c
    ac6c:	b15a      	cbz	r2, ac86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc12>
    ac6e:	f8b1 20a2 	ldrh.w	r2, [r1, #162]	; 0xa2
    ac72:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    ac76:	1ad2      	subs	r2, r2, r3
    ac78:	b212      	sxth	r2, r2
    ac7a:	2a00      	cmp	r2, #0
    ac7c:	dd03      	ble.n	ac86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc12>
    ac7e:	4282      	cmp	r2, r0
    ac80:	bfd8      	it	le
    ac82:	4610      	movle	r0, r2
    ac84:	b280      	uxth	r0, r0
    ac86:	f891 2181 	ldrb.w	r2, [r1, #385]	; 0x181
    ac8a:	b18a      	cbz	r2, acb0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc3c>
    ac8c:	f8b1 210a 	ldrh.w	r2, [r1, #266]	; 0x10a
    ac90:	f8b1 1182 	ldrh.w	r1, [r1, #386]	; 0x182
    ac94:	428a      	cmp	r2, r1
    ac96:	bf2f      	iteee	cs
    ac98:	2101      	movcs	r1, #1
    ac9a:	1a89      	subcc	r1, r1, r2
    ac9c:	1c49      	addcc	r1, r1, #1
    ac9e:	b289      	uxthcc	r1, r1
    aca0:	4288      	cmp	r0, r1
    aca2:	bf88      	it	hi
    aca4:	4608      	movhi	r0, r1
    aca6:	e003      	b.n	acb0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc3c>
    aca8:	68e1      	ldr	r1, [r4, #12]
    acaa:	2001      	movs	r0, #1
    acac:	f881 510d 	strb.w	r5, [r1, #269]	; 0x10d
    acb0:	78a1      	ldrb	r1, [r4, #2]
    acb2:	2900      	cmp	r1, #0
    acb4:	bf18      	it	ne
    acb6:	2801      	cmpne	r0, #1
    acb8:	bf9c      	itt	ls
    acba:	68e1      	ldrls	r1, [r4, #12]
    acbc:	f881 5110 	strbls.w	r5, [r1, #272]	; 0x110
    acc0:	d903      	bls.n	acca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc56>
    acc2:	68e0      	ldr	r0, [r4, #12]
    acc4:	f880 7110 	strb.w	r7, [r0, #272]	; 0x110
    acc8:	2001      	movs	r0, #1
    acca:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    acce:	f8bc 1078 	ldrh.w	r1, [ip, #120]	; 0x78
    acd2:	4408      	add	r0, r1
    acd4:	b280      	uxth	r0, r0
    acd6:	f8ac 0104 	strh.w	r0, [ip, #260]	; 0x104
    acda:	f89c 2088 	ldrb.w	r2, [ip, #136]	; 0x88
    acde:	2a00      	cmp	r2, #0
    ace0:	bf18      	it	ne
    ace2:	2a01      	cmpne	r2, #1
    ace4:	d009      	beq.n	acfa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc86>
    ace6:	2a02      	cmp	r2, #2
    ace8:	bf18      	it	ne
    acea:	2a03      	cmpne	r2, #3
    acec:	d008      	beq.n	ad00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc8c>
    acee:	f640 2162 	movw	r1, #2658	; 0xa62
    acf2:	f04f 0031 	mov.w	r0, #49	; 0x31
    acf6:	f7f8 ff8b 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acfa:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    acfe:	e053      	b.n	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd34>
    ad00:	f89c 2087 	ldrb.w	r2, [ip, #135]	; 0x87
    ad04:	2a08      	cmp	r2, #8
    ad06:	d022      	beq.n	ad4e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcda>
    ad08:	f8bc 00a6 	ldrh.w	r0, [ip, #166]	; 0xa6
    ad0c:	f8bc 10a8 	ldrh.w	r1, [ip, #168]	; 0xa8
    ad10:	2600      	movs	r6, #0
    ad12:	1c82      	adds	r2, r0, #2
    ad14:	4291      	cmp	r1, r2
    ad16:	d306      	bcc.n	ad26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcb2>
    ad18:	1a08      	subs	r0, r1, r0
    ad1a:	1e80      	subs	r0, r0, #2
    ad1c:	0406      	lsls	r6, r0, #16
    ad1e:	0c36      	lsrs	r6, r6, #16
    ad20:	bf1c      	itt	ne
    ad22:	1e70      	subne	r0, r6, #1
    ad24:	b286      	uxthne	r6, r0
    ad26:	f89c 00a4 	ldrb.w	r0, [ip, #164]	; 0xa4
    ad2a:	b158      	cbz	r0, ad44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcd0>
    ad2c:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    ad30:	2301      	movs	r3, #1
    ad32:	2109      	movs	r1, #9
    ad34:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    ad38:	f005 fbc2 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad3c:	2800      	cmp	r0, #0
    ad3e:	bf08      	it	eq
    ad40:	2600      	moveq	r6, #0
    ad42:	d02b      	beq.n	ad9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd28>
    ad44:	68e0      	ldr	r0, [r4, #12]
    ad46:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    ad4a:	b999      	cbnz	r1, ad74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd00>
    ad4c:	e00a      	b.n	ad64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcf0>
    ad4e:	f8bc 20a6 	ldrh.w	r2, [ip, #166]	; 0xa6
    ad52:	2a03      	cmp	r2, #3
    ad54:	d3d1      	bcc.n	acfa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc86>
    ad56:	f8bc 00a8 	ldrh.w	r0, [ip, #168]	; 0xa8
    ad5a:	4408      	add	r0, r1
    ad5c:	1c40      	adds	r0, r0, #1
    ad5e:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    ad62:	e021      	b.n	ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd34>
    ad64:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ad68:	2301      	movs	r3, #1
    ad6a:	2106      	movs	r1, #6
    ad6c:	3078      	adds	r0, #120	; 0x78
    ad6e:	f005 fba7 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad72:	b178      	cbz	r0, ad94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd20>
    ad74:	68e1      	ldr	r1, [r4, #12]
    ad76:	2000      	movs	r0, #0
    ad78:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
    ad7c:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    ad80:	1c8b      	adds	r3, r1, #2
    ad82:	429a      	cmp	r2, r3
    ad84:	d303      	bcc.n	ad8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd1a>
    ad86:	1a50      	subs	r0, r2, r1
    ad88:	1e80      	subs	r0, r0, #2
    ad8a:	bf18      	it	ne
    ad8c:	1e40      	subne	r0, r0, #1
    ad8e:	42b0      	cmp	r0, r6
    ad90:	bf38      	it	cc
    ad92:	b286      	uxthcc	r6, r0
    ad94:	2e00      	cmp	r6, #0
    ad96:	bf1c      	itt	ne
    ad98:	1e70      	subne	r0, r6, #1
    ad9a:	b286      	uxthne	r6, r0
    ad9c:	68e0      	ldr	r0, [r4, #12]
    ad9e:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
    ada2:	4431      	add	r1, r6
    ada4:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    ada8:	79a0      	ldrb	r0, [r4, #6]
    adaa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    adae:	2800      	cmp	r0, #0
    adb0:	68e0      	ldr	r0, [r4, #12]
    adb2:	bf18      	it	ne
    adb4:	f8a0 511a 	strhne.w	r5, [r0, #282]	; 0x11a
    adb8:	d106      	bne.n	adc8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd54>
    adba:	f8b0 111a 	ldrh.w	r1, [r0, #282]	; 0x11a
    adbe:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    adc2:	4411      	add	r1, r2
    adc4:	f8a0 111a 	strh.w	r1, [r0, #282]	; 0x11a
    adc8:	68e0      	ldr	r0, [r4, #12]
    adca:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    adce:	b939      	cbnz	r1, ade0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd6c>
    add0:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    add4:	2301      	movs	r3, #1
    add6:	4619      	mov	r1, r3
    add8:	3078      	adds	r0, #120	; 0x78
    adda:	f005 fb71 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    adde:	b138      	cbz	r0, adf0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd7c>
    ade0:	68e0      	ldr	r0, [r4, #12]
    ade2:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    ade6:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    adea:	4411      	add	r1, r2
    adec:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    adf0:	68e0      	ldr	r0, [r4, #12]
    adf2:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    adf6:	b132      	cbz	r2, ae06 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd92>
    adf8:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    adfc:	f8b0 3106 	ldrh.w	r3, [r0, #262]	; 0x106
    ae00:	4419      	add	r1, r3
    ae02:	f8a0 10ac 	strh.w	r1, [r0, #172]	; 0xac
    ae06:	f990 30b4 	ldrsb.w	r3, [r0, #180]	; 0xb4
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	dd06      	ble.n	ae1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xda8>
    ae0e:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    ae12:	f8b0 c106 	ldrh.w	ip, [r0, #262]	; 0x106
    ae16:	4461      	add	r1, ip
    ae18:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    ae1c:	f04f 0c3d 	mov.w	ip, #61	; 0x3d
    ae20:	f1ba 0f00 	cmp.w	sl, #0
    ae24:	bf18      	it	ne
    ae26:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    ae2a:	d14c      	bne.n	aec6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe52>
    ae2c:	7821      	ldrb	r1, [r4, #0]
    ae2e:	2902      	cmp	r1, #2
    ae30:	d011      	beq.n	ae56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xde2>
    ae32:	2901      	cmp	r1, #1
    ae34:	bf08      	it	eq
    ae36:	f890 118a 	ldrbeq.w	r1, [r0, #394]	; 0x18a
    ae3a:	d042      	beq.n	aec2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4e>
    ae3c:	78e1      	ldrb	r1, [r4, #3]
    ae3e:	b339      	cbz	r1, ae90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe1c>
    ae40:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    ae44:	f011 0f14 	tst.w	r1, #20
    ae48:	bf18      	it	ne
    ae4a:	211e      	movne	r1, #30
    ae4c:	d009      	beq.n	ae62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdee>
    ae4e:	bf00      	nop
    ae50:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    ae54:	e052      	b.n	aefc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    ae56:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
    ae5a:	2906      	cmp	r1, #6
    ae5c:	bf18      	it	ne
    ae5e:	2116      	movne	r1, #22
    ae60:	e02f      	b.n	aec2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4e>
    ae62:	f011 0f08 	tst.w	r1, #8
    ae66:	bf18      	it	ne
    ae68:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    ae6c:	d146      	bne.n	aefc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    ae6e:	f011 0f20 	tst.w	r1, #32
    ae72:	bf18      	it	ne
    ae74:	2123      	movne	r1, #35	; 0x23
    ae76:	d1eb      	bne.n	ae50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xddc>
    ae78:	f011 0f03 	tst.w	r1, #3
    ae7c:	bf1c      	itt	ne
    ae7e:	212a      	movne	r1, #42	; 0x2a
    ae80:	f880 1095 	strbne.w	r1, [r0, #149]	; 0x95
    ae84:	d13a      	bne.n	aefc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    ae86:	f640 41b5 	movw	r1, #3253	; 0xcb5
    ae8a:	2031      	movs	r0, #49	; 0x31
    ae8c:	f7f8 fec0 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae90:	b12a      	cbz	r2, ae9e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2a>
    ae92:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    ae96:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    ae9a:	4291      	cmp	r1, r2
    ae9c:	d210      	bcs.n	aec0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4c>
    ae9e:	2b00      	cmp	r3, #0
    aea0:	dd05      	ble.n	aeae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe3a>
    aea2:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    aea6:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    aeaa:	4291      	cmp	r1, r2
    aeac:	d208      	bcs.n	aec0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4c>
    aeae:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    aeb2:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    aeb6:	428a      	cmp	r2, r1
    aeb8:	d308      	bcc.n	aecc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe58>
    aeba:	f890 2188 	ldrb.w	r2, [r0, #392]	; 0x188
    aebe:	b12a      	cbz	r2, aecc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe58>
    aec0:	2122      	movs	r1, #34	; 0x22
    aec2:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    aec6:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    aeca:	e017      	b.n	aefc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    aecc:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    aed0:	b13a      	cbz	r2, aee2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe6e>
    aed2:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    aed6:	428a      	cmp	r2, r1
    aed8:	bf28      	it	cs
    aeda:	f880 8095 	strbcs.w	r8, [r0, #149]	; 0x95
    aede:	d2f2      	bcs.n	aec6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe52>
    aee0:	e009      	b.n	aef6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe82>
    aee2:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    aee6:	2906      	cmp	r1, #6
    aee8:	d305      	bcc.n	aef6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe82>
    aeea:	213e      	movs	r1, #62	; 0x3e
    aeec:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    aef0:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    aef4:	e002      	b.n	aefc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe88>
    aef6:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    aefa:	b171      	cbz	r1, af1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xea6>
    aefc:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    af00:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    af04:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    af08:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    af0c:	2900      	cmp	r1, #0
    af0e:	bf14      	ite	ne
    af10:	2102      	movne	r1, #2
    af12:	2103      	moveq	r1, #3
    af14:	f7fd ff3c 	bl	8d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    af18:	e002      	b.n	af20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xeac>
    af1a:	2100      	movs	r1, #0
    af1c:	f7fd ff38 	bl	8d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    af20:	68e0      	ldr	r0, [r4, #12]
    af22:	f880 510e 	strb.w	r5, [r0, #270]	; 0x10e
    af26:	b007      	add	sp, #28
    af28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af2c:	f7f9 bd76 	b.w	4a1c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    af30:	4a0c      	ldr	r2, [pc, #48]	; (af64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef0>)
    af32:	b510      	push	{r4, lr}
    af34:	68d2      	ldr	r2, [r2, #12]
    af36:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    af3a:	2bfe      	cmp	r3, #254	; 0xfe
    af3c:	d004      	beq.n	af48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed4>
    af3e:	f640 11f7 	movw	r1, #2551	; 0x9f7
    af42:	2031      	movs	r0, #49	; 0x31
    af44:	f7f8 fe64 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af48:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    af4c:	2000      	movs	r0, #0
    af4e:	2900      	cmp	r1, #0
    af50:	bf1c      	itt	ne
    af52:	f8a2 00b2 	strhne.w	r0, [r2, #178]	; 0xb2
    af56:	bd10      	popne	{r4, pc}
    af58:	f8a2 00ac 	strh.w	r0, [r2, #172]	; 0xac
    af5c:	2001      	movs	r0, #1
    af5e:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    af62:	bd10      	pop	{r4, pc}
    af64:	20000144 	.word	0x20000144
    af68:	b570      	push	{r4, r5, r6, lr}
    af6a:	4a2b      	ldr	r2, [pc, #172]	; (b018 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa4>)
    af6c:	4603      	mov	r3, r0
    af6e:	88d0      	ldrh	r0, [r2, #6]
    af70:	4318      	orrs	r0, r3
    af72:	80d0      	strh	r0, [r2, #6]
    af74:	4610      	mov	r0, r2
    af76:	2b40      	cmp	r3, #64	; 0x40
    af78:	68c0      	ldr	r0, [r0, #12]
    af7a:	d011      	beq.n	afa0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf2c>
    af7c:	f013 0f02 	tst.w	r3, #2
    af80:	f04f 0400 	mov.w	r4, #0
    af84:	f04f 0c01 	mov.w	ip, #1
    af88:	f003 0501 	and.w	r5, r3, #1
    af8c:	d00d      	beq.n	afaa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf36>
    af8e:	2d00      	cmp	r5, #0
    af90:	bf08      	it	eq
    af92:	6111      	streq	r1, [r2, #16]
    af94:	d026      	beq.n	afe4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf70>
    af96:	f640 5108 	movw	r1, #3336	; 0xd08
    af9a:	2031      	movs	r0, #49	; 0x31
    af9c:	f7f8 fe38 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    afa4:	2104      	movs	r1, #4
    afa6:	f7fd bef3 	b.w	8d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    afaa:	b1b5      	cbz	r5, afda <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf66>
    afac:	6151      	str	r1, [r2, #20]
    afae:	78c9      	ldrb	r1, [r1, #3]
    afb0:	2906      	cmp	r1, #6
    afb2:	d009      	beq.n	afc8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf54>
    afb4:	290b      	cmp	r1, #11
    afb6:	bf01      	itttt	eq
    afb8:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    afbc:	2911      	cmpeq	r1, #17
    afbe:	f880 4089 	strbeq.w	r4, [r0, #137]	; 0x89
    afc2:	f880 c0b6 	strbeq.w	ip, [r0, #182]	; 0xb6
    afc6:	e008      	b.n	afda <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf66>
    afc8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    afcc:	2917      	cmp	r1, #23
    afce:	d104      	bne.n	afda <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf66>
    afd0:	2100      	movs	r1, #0
    afd2:	e9c0 1132 	strd	r1, r1, [r0, #200]	; 0xc8
    afd6:	f880 c089 	strb.w	ip, [r0, #137]	; 0x89
    afda:	f013 0f02 	tst.w	r3, #2
    afde:	bf18      	it	ne
    afe0:	6911      	ldrne	r1, [r2, #16]
    afe2:	d013      	beq.n	b00c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf98>
    afe4:	78c9      	ldrb	r1, [r1, #3]
    afe6:	2905      	cmp	r1, #5
    afe8:	d007      	beq.n	affa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf86>
    afea:	290b      	cmp	r1, #11
    afec:	bf02      	ittt	eq
    afee:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    aff2:	2910      	cmpeq	r1, #16
    aff4:	f880 408a 	strbeq.w	r4, [r0, #138]	; 0x8a
    aff8:	e008      	b.n	b00c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf98>
    affa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    affe:	2915      	cmp	r1, #21
    b000:	d104      	bne.n	b00c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf98>
    b002:	2100      	movs	r1, #0
    b004:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    b008:	f880 c08a 	strb.w	ip, [r0, #138]	; 0x8a
    b00c:	f013 0f20 	tst.w	r3, #32
    b010:	bf1c      	itt	ne
    b012:	2008      	movne	r0, #8
    b014:	7110      	strbne	r0, [r2, #4]
    b016:	bd70      	pop	{r4, r5, r6, pc}
    b018:	20000144 	.word	0x20000144
    b01c:	4a1a      	ldr	r2, [pc, #104]	; (b088 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1014>)
    b01e:	b510      	push	{r4, lr}
    b020:	68d1      	ldr	r1, [r2, #12]
    b022:	880b      	ldrh	r3, [r1, #0]
    b024:	f8a1 3216 	strh.w	r3, [r1, #534]	; 0x216
    b028:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    b02c:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    b030:	2801      	cmp	r0, #1
    b032:	bf18      	it	ne
    b034:	2802      	cmpne	r0, #2
    b036:	d00b      	beq.n	b050 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfdc>
    b038:	2804      	cmp	r0, #4
    b03a:	bf14      	ite	ne
    b03c:	2808      	cmpne	r0, #8
    b03e:	2003      	moveq	r0, #3
    b040:	d006      	beq.n	b050 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfdc>
    b042:	bf00      	nop
    b044:	f240 218f 	movw	r1, #655	; 0x28f
    b048:	f04f 0006 	mov.w	r0, #6
    b04c:	f7f8 fde0 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b050:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    b054:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    b058:	2801      	cmp	r0, #1
    b05a:	bf18      	it	ne
    b05c:	2802      	cmpne	r0, #2
    b05e:	d004      	beq.n	b06a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xff6>
    b060:	2804      	cmp	r0, #4
    b062:	bf14      	ite	ne
    b064:	2808      	cmpne	r0, #8
    b066:	2003      	moveq	r0, #3
    b068:	d1ec      	bne.n	b044 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd0>
    b06a:	f881 0219 	strb.w	r0, [r1, #537]	; 0x219
    b06e:	f04f 0001 	mov.w	r0, #1
    b072:	f881 0212 	strb.w	r0, [r1, #530]	; 0x212
    b076:	f04f 0000 	mov.w	r0, #0
    b07a:	f881 01be 	strb.w	r0, [r1, #446]	; 0x1be
    b07e:	7950      	ldrb	r0, [r2, #5]
    b080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b084:	f7f8 bbb2 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b088:	20000144 	.word	0x20000144
    b08c:	b510      	push	{r4, lr}
    b08e:	4c17      	ldr	r4, [pc, #92]	; (b0ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1078>)
    b090:	2301      	movs	r3, #1
    b092:	2100      	movs	r1, #0
    b094:	68e0      	ldr	r0, [r4, #12]
    b096:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b09a:	3078      	adds	r0, #120	; 0x78
    b09c:	f005 fa10 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b0a0:	2800      	cmp	r0, #0
    b0a2:	bf04      	itt	eq
    b0a4:	2001      	moveq	r0, #1
    b0a6:	bd10      	popeq	{r4, pc}
    b0a8:	6960      	ldr	r0, [r4, #20]
    b0aa:	f005 fc73 	bl	10994 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    b0ae:	68e1      	ldr	r1, [r4, #12]
    b0b0:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    b0b4:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    b0b8:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    b0bc:	1a80      	subs	r0, r0, r2
    b0be:	b200      	sxth	r0, r0
    b0c0:	2201      	movs	r2, #1
    b0c2:	4283      	cmp	r3, r0
    b0c4:	bfa8      	it	ge
    b0c6:	2800      	cmpge	r0, #0
    b0c8:	dd09      	ble.n	b0de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x106a>
    b0ca:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    b0ce:	6960      	ldr	r0, [r4, #20]
    b0d0:	f005 fc5b 	bl	1098a <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    b0d4:	68e1      	ldr	r1, [r4, #12]
    b0d6:	200b      	movs	r0, #11
    b0d8:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b0dc:	e004      	b.n	b0e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1074>
    b0de:	2028      	movs	r0, #40	; 0x28
    b0e0:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    b0e4:	f881 2094 	strb.w	r2, [r1, #148]	; 0x94
    b0e8:	2000      	movs	r0, #0
    b0ea:	bd10      	pop	{r4, pc}
    b0ec:	20000144 	.word	0x20000144
    b0f0:	b570      	push	{r4, r5, r6, lr}
    b0f2:	4c2d      	ldr	r4, [pc, #180]	; (b1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1134>)
    b0f4:	2301      	movs	r3, #1
    b0f6:	2100      	movs	r1, #0
    b0f8:	68e0      	ldr	r0, [r4, #12]
    b0fa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b0fe:	3078      	adds	r0, #120	; 0x78
    b100:	f005 f9de 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b104:	2800      	cmp	r0, #0
    b106:	bf04      	itt	eq
    b108:	2001      	moveq	r0, #1
    b10a:	bd70      	popeq	{r4, r5, r6, pc}
    b10c:	68e0      	ldr	r0, [r4, #12]
    b10e:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    b112:	6960      	ldr	r0, [r4, #20]
    b114:	f005 fc0e 	bl	10934 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    b118:	2800      	cmp	r0, #0
    b11a:	d039      	beq.n	b190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x111c>
    b11c:	6960      	ldr	r0, [r4, #20]
    b11e:	68e1      	ldr	r1, [r4, #12]
    b120:	f647 7cfe 	movw	ip, #32766	; 0x7ffe
    b124:	f8b0 200d 	ldrh.w	r2, [r0, #13]
    b128:	f8a1 21a4 	strh.w	r2, [r1, #420]	; 0x1a4
    b12c:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    b130:	1ad2      	subs	r2, r2, r3
    b132:	b212      	sxth	r2, r2
    b134:	2301      	movs	r3, #1
    b136:	4594      	cmp	ip, r2
    b138:	bfa8      	it	ge
    b13a:	2a00      	cmpge	r2, #0
    b13c:	dd2c      	ble.n	b198 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1124>
    b13e:	f005 fc2c 	bl	1099a <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    b142:	f005 f98a 	bl	1045a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    b146:	4605      	mov	r5, r0
    b148:	68e0      	ldr	r0, [r4, #12]
    b14a:	4629      	mov	r1, r5
    b14c:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    b150:	6960      	ldr	r0, [r4, #20]
    b152:	7900      	ldrb	r0, [r0, #4]
    b154:	f005 fba5 	bl	108a2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    b158:	68e1      	ldr	r1, [r4, #12]
    b15a:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    b15e:	6960      	ldr	r0, [r4, #20]
    b160:	4629      	mov	r1, r5
    b162:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    b166:	f005 fb93 	bl	10890 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    b16a:	68e1      	ldr	r1, [r4, #12]
    b16c:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    b170:	6960      	ldr	r0, [r4, #20]
    b172:	f005 fc15 	bl	109a0 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    b176:	68e1      	ldr	r1, [r4, #12]
    b178:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    b17c:	6960      	ldr	r0, [r4, #20]
    b17e:	f005 fc12 	bl	109a6 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    b182:	68e1      	ldr	r1, [r4, #12]
    b184:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    b188:	200d      	movs	r0, #13
    b18a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b18e:	e008      	b.n	b1a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x112e>
    b190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b194:	f000 b896 	b.w	b2c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    b198:	2028      	movs	r0, #40	; 0x28
    b19a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    b19e:	f881 3094 	strb.w	r3, [r1, #148]	; 0x94
    b1a2:	2000      	movs	r0, #0
    b1a4:	bd70      	pop	{r4, r5, r6, pc}
    b1a6:	0000      	.short	0x0000
    b1a8:	20000144 	.word	0x20000144
    b1ac:	b510      	push	{r4, lr}
    b1ae:	4c29      	ldr	r4, [pc, #164]	; (b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11e0>)
    b1b0:	2301      	movs	r3, #1
    b1b2:	2100      	movs	r1, #0
    b1b4:	68e0      	ldr	r0, [r4, #12]
    b1b6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b1ba:	3078      	adds	r0, #120	; 0x78
    b1bc:	f005 f980 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1c0:	b970      	cbnz	r0, b1e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x116c>
    b1c2:	68e0      	ldr	r0, [r4, #12]
    b1c4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b1c8:	2a12      	cmp	r2, #18
    b1ca:	d009      	beq.n	b1e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x116c>
    b1cc:	2301      	movs	r3, #1
    b1ce:	2105      	movs	r1, #5
    b1d0:	3078      	adds	r0, #120	; 0x78
    b1d2:	f005 f975 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1d6:	2800      	cmp	r0, #0
    b1d8:	bf0c      	ite	eq
    b1da:	2001      	moveq	r0, #1
    b1dc:	2008      	movne	r0, #8
    b1de:	bd10      	pop	{r4, pc}
    b1e0:	68e0      	ldr	r0, [r4, #12]
    b1e2:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    b1e6:	b939      	cbnz	r1, b1f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1184>
    b1e8:	2100      	movs	r1, #0
    b1ea:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b1ee:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b1f2:	1c49      	adds	r1, r1, #1
    b1f4:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b1f8:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    b1fc:	6960      	ldr	r0, [r4, #20]
    b1fe:	f005 fbe1 	bl	109c4 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    b202:	68e0      	ldr	r0, [r4, #12]
    b204:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    b208:	6960      	ldr	r0, [r4, #20]
    b20a:	f005 fbd2 	bl	109b2 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    b20e:	68e0      	ldr	r0, [r4, #12]
    b210:	f890 11dc 	ldrb.w	r1, [r0, #476]	; 0x1dc
    b214:	b121      	cbz	r1, b220 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b216:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b21a:	2031      	movs	r0, #49	; 0x31
    b21c:	f7f8 fcf8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b220:	8801      	ldrh	r1, [r0, #0]
    b222:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    b226:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    b22a:	6960      	ldr	r0, [r4, #20]
    b22c:	f005 fbc5 	bl	109ba <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    b230:	68e0      	ldr	r0, [r4, #12]
    b232:	f500 71f4 	add.w	r1, r0, #488	; 0x1e8
    b236:	6960      	ldr	r0, [r4, #20]
    b238:	f005 fbb8 	bl	109ac <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    b23c:	68e0      	ldr	r0, [r4, #12]
    b23e:	2101      	movs	r1, #1
    b240:	f880 11dc 	strb.w	r1, [r0, #476]	; 0x1dc
    b244:	2114      	movs	r1, #20
    b246:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b24a:	7960      	ldrb	r0, [r4, #5]
    b24c:	f7f8 face 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b250:	2000      	movs	r0, #0
    b252:	bd10      	pop	{r4, pc}
    b254:	20000144 	.word	0x20000144
    b258:	b510      	push	{r4, lr}
    b25a:	4c19      	ldr	r4, [pc, #100]	; (b2c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x124c>)
    b25c:	b082      	sub	sp, #8
    b25e:	68e0      	ldr	r0, [r4, #12]
    b260:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    b264:	f010 0f01 	tst.w	r0, #1
    b268:	bf1e      	ittt	ne
    b26a:	2001      	movne	r0, #1
    b26c:	b002      	addne	sp, #8
    b26e:	bd10      	popne	{r4, pc}
    b270:	4669      	mov	r1, sp
    b272:	6960      	ldr	r0, [r4, #20]
    b274:	f005 fbad 	bl	109d2 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    b278:	f001 ff28 	bl	d0cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b27c:	f644 112f 	movw	r1, #18735	; 0x492f
    b280:	4001      	ands	r1, r0
    b282:	f89d 0000 	ldrb.w	r0, [sp]
    b286:	ea00 0201 	and.w	r2, r0, r1
    b28a:	68e0      	ldr	r0, [r4, #12]
    b28c:	f880 20be 	strb.w	r2, [r0, #190]	; 0xbe
    b290:	f89d 2001 	ldrb.w	r2, [sp, #1]
    b294:	ea02 2111 	and.w	r1, r2, r1, lsr #8
    b298:	f880 10bf 	strb.w	r1, [r0, #191]	; 0xbf
    b29c:	2100      	movs	r1, #0
    b29e:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b2a2:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b2a6:	1c49      	adds	r1, r1, #1
    b2a8:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b2ac:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b2b0:	f041 0101 	orr.w	r1, r1, #1
    b2b4:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b2b8:	b002      	add	sp, #8
    b2ba:	2000      	movs	r0, #0
    b2bc:	bd10      	pop	{r4, pc}
    b2be:	0000      	.short	0x0000
    b2c0:	20000144 	.word	0x20000144
    b2c4:	4a0d      	ldr	r2, [pc, #52]	; (b2fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1288>)
    b2c6:	68d0      	ldr	r0, [r2, #12]
    b2c8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b2cc:	f011 0f08 	tst.w	r1, #8
    b2d0:	bf1c      	itt	ne
    b2d2:	2001      	movne	r0, #1
    b2d4:	4770      	bxne	lr
    b2d6:	f041 0108 	orr.w	r1, r1, #8
    b2da:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b2de:	6951      	ldr	r1, [r2, #20]
    b2e0:	78c9      	ldrb	r1, [r1, #3]
    b2e2:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    b2e6:	2100      	movs	r1, #0
    b2e8:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b2ec:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b2f0:	1c49      	adds	r1, r1, #1
    b2f2:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b2f6:	2000      	movs	r0, #0
    b2f8:	4770      	bx	lr
    b2fa:	0000      	.short	0x0000
    b2fc:	20000144 	.word	0x20000144
    b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b302:	4c34      	ldr	r4, [pc, #208]	; (b3d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1360>)
    b304:	68e0      	ldr	r0, [r4, #12]
    b306:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    b30a:	f010 0f30 	tst.w	r0, #48	; 0x30
    b30e:	bf1c      	itt	ne
    b310:	2001      	movne	r0, #1
    b312:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    b314:	6960      	ldr	r0, [r4, #20]
    b316:	f005 fb79 	bl	10a0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b31a:	2800      	cmp	r0, #0
    b31c:	d030      	beq.n	b380 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x130c>
    b31e:	6960      	ldr	r0, [r4, #20]
    b320:	f005 fb66 	bl	109f0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b324:	4605      	mov	r5, r0
    b326:	6960      	ldr	r0, [r4, #20]
    b328:	f005 fb66 	bl	109f8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b32c:	4606      	mov	r6, r0
    b32e:	6960      	ldr	r0, [r4, #20]
    b330:	f005 fb5c 	bl	109ec <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b334:	4607      	mov	r7, r0
    b336:	6960      	ldr	r0, [r4, #20]
    b338:	f005 fb5c 	bl	109f4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b33c:	4601      	mov	r1, r0
    b33e:	9500      	str	r5, [sp, #0]
    b340:	68e0      	ldr	r0, [r4, #12]
    b342:	4633      	mov	r3, r6
    b344:	463a      	mov	r2, r7
    b346:	3028      	adds	r0, #40	; 0x28
    b348:	f005 fde2 	bl	10f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b34c:	79a0      	ldrb	r0, [r4, #6]
    b34e:	f010 0f02 	tst.w	r0, #2
    b352:	d003      	beq.n	b35c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12e8>
    b354:	6920      	ldr	r0, [r4, #16]
    b356:	78c0      	ldrb	r0, [r0, #3]
    b358:	2814      	cmp	r0, #20
    b35a:	d015      	beq.n	b388 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1314>
    b35c:	68e1      	ldr	r1, [r4, #12]
    b35e:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    b362:	281c      	cmp	r0, #28
    b364:	d010      	beq.n	b388 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1314>
    b366:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b36a:	2801      	cmp	r0, #1
    b36c:	d010      	beq.n	b390 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x131c>
    b36e:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    b372:	2800      	cmp	r0, #0
    b374:	bf04      	itt	eq
    b376:	f891 01b4 	ldrbeq.w	r0, [r1, #436]	; 0x1b4
    b37a:	2800      	cmpeq	r0, #0
    b37c:	d010      	beq.n	b3a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x132c>
    b37e:	e007      	b.n	b390 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x131c>
    b380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b384:	f7ff bf9e 	b.w	b2c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    b388:	68e1      	ldr	r1, [r4, #12]
    b38a:	2001      	movs	r0, #1
    b38c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    b390:	68e0      	ldr	r0, [r4, #12]
    b392:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b396:	f041 0110 	orr.w	r1, r1, #16
    b39a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b39e:	e00e      	b.n	b3be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x134a>
    b3a0:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    b3a4:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    b3a8:	f040 0020 	orr.w	r0, r0, #32
    b3ac:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    b3b0:	f831 0b28 	ldrh.w	r0, [r1], #40
    b3b4:	f005 fdb4 	bl	10f20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    b3b8:	7960      	ldrb	r0, [r4, #5]
    b3ba:	f7f8 fa17 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b3be:	68e0      	ldr	r0, [r4, #12]
    b3c0:	2100      	movs	r1, #0
    b3c2:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b3c6:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b3ca:	1c49      	adds	r1, r1, #1
    b3cc:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b3d0:	2000      	movs	r0, #0
    b3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b3d4:	20000144 	.word	0x20000144
    b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3da:	4c22      	ldr	r4, [pc, #136]	; (b464 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13f0>)
    b3dc:	2301      	movs	r3, #1
    b3de:	210a      	movs	r1, #10
    b3e0:	68e0      	ldr	r0, [r4, #12]
    b3e2:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b3e6:	3078      	adds	r0, #120	; 0x78
    b3e8:	f005 f86a 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b3ec:	2800      	cmp	r0, #0
    b3ee:	bf04      	itt	eq
    b3f0:	2001      	moveq	r0, #1
    b3f2:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    b3f4:	6960      	ldr	r0, [r4, #20]
    b3f6:	f005 fb09 	bl	10a0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b3fa:	b1c8      	cbz	r0, b430 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13bc>
    b3fc:	6960      	ldr	r0, [r4, #20]
    b3fe:	f005 faf7 	bl	109f0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b402:	4605      	mov	r5, r0
    b404:	6960      	ldr	r0, [r4, #20]
    b406:	f005 faf7 	bl	109f8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b40a:	4606      	mov	r6, r0
    b40c:	6960      	ldr	r0, [r4, #20]
    b40e:	f005 faed 	bl	109ec <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b412:	4607      	mov	r7, r0
    b414:	6960      	ldr	r0, [r4, #20]
    b416:	f005 faed 	bl	109f4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b41a:	4601      	mov	r1, r0
    b41c:	9500      	str	r5, [sp, #0]
    b41e:	68e0      	ldr	r0, [r4, #12]
    b420:	4633      	mov	r3, r6
    b422:	463a      	mov	r2, r7
    b424:	3028      	adds	r0, #40	; 0x28
    b426:	f005 fd73 	bl	10f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b42a:	68e0      	ldr	r0, [r4, #12]
    b42c:	f005 fcd5 	bl	10dda <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    b430:	68e1      	ldr	r1, [r4, #12]
    b432:	2000      	movs	r0, #0
    b434:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b438:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b43c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b440:	2801      	cmp	r0, #1
    b442:	bf04      	itt	eq
    b444:	2002      	moveq	r0, #2
    b446:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    b44a:	d008      	beq.n	b45e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13ea>
    b44c:	8808      	ldrh	r0, [r1, #0]
    b44e:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    b452:	3128      	adds	r1, #40	; 0x28
    b454:	f005 fc86 	bl	10d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    b458:	7960      	ldrb	r0, [r4, #5]
    b45a:	f7f8 f9c7 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b45e:	2000      	movs	r0, #0
    b460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b462:	0000      	.short	0x0000
    b464:	20000144 	.word	0x20000144
    b468:	480b      	ldr	r0, [pc, #44]	; (b498 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1424>)
    b46a:	68c0      	ldr	r0, [r0, #12]
    b46c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b470:	f011 0f04 	tst.w	r1, #4
    b474:	bf1c      	itt	ne
    b476:	2001      	movne	r0, #1
    b478:	4770      	bxne	lr
    b47a:	2200      	movs	r2, #0
    b47c:	f8a0 20b2 	strh.w	r2, [r0, #178]	; 0xb2
    b480:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    b484:	f041 0104 	orr.w	r1, r1, #4
    b488:	1c52      	adds	r2, r2, #1
    b48a:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    b48e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b492:	2000      	movs	r0, #0
    b494:	4770      	bx	lr
    b496:	0000      	.short	0x0000
    b498:	20000144 	.word	0x20000144
    b49c:	b510      	push	{r4, lr}
    b49e:	4c0a      	ldr	r4, [pc, #40]	; (b4c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1454>)
    b4a0:	2301      	movs	r3, #1
    b4a2:	2109      	movs	r1, #9
    b4a4:	68e0      	ldr	r0, [r4, #12]
    b4a6:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b4aa:	3078      	adds	r0, #120	; 0x78
    b4ac:	f005 f808 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b4b0:	2800      	cmp	r0, #0
    b4b2:	bf08      	it	eq
    b4b4:	bd10      	popeq	{r4, pc}
    b4b6:	2000      	movs	r0, #0
    b4b8:	68e1      	ldr	r1, [r4, #12]
    b4ba:	f881 00a4 	strb.w	r0, [r1, #164]	; 0xa4
    b4be:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b4c2:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b4c6:	bd10      	pop	{r4, pc}
    b4c8:	20000144 	.word	0x20000144
    b4cc:	b510      	push	{r4, lr}
    b4ce:	4c12      	ldr	r4, [pc, #72]	; (b518 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14a4>)
    b4d0:	2301      	movs	r3, #1
    b4d2:	2100      	movs	r1, #0
    b4d4:	68e0      	ldr	r0, [r4, #12]
    b4d6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b4da:	3078      	adds	r0, #120	; 0x78
    b4dc:	f004 fff0 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b4e0:	b168      	cbz	r0, b4fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x148a>
    b4e2:	68e0      	ldr	r0, [r4, #12]
    b4e4:	2100      	movs	r1, #0
    b4e6:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b4ea:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b4ee:	1c49      	adds	r1, r1, #1
    b4f0:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b4f4:	2110      	movs	r1, #16
    b4f6:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b4fa:	2000      	movs	r0, #0
    b4fc:	bd10      	pop	{r4, pc}
    b4fe:	68e0      	ldr	r0, [r4, #12]
    b500:	2301      	movs	r3, #1
    b502:	2105      	movs	r1, #5
    b504:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b508:	3078      	adds	r0, #120	; 0x78
    b50a:	f004 ffd9 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b50e:	2800      	cmp	r0, #0
    b510:	bf14      	ite	ne
    b512:	2008      	movne	r0, #8
    b514:	2001      	moveq	r0, #1
    b516:	bd10      	pop	{r4, pc}
    b518:	20000144 	.word	0x20000144
    b51c:	4806      	ldr	r0, [pc, #24]	; (b538 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14c4>)
    b51e:	68c0      	ldr	r0, [r0, #12]
    b520:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b524:	2911      	cmp	r1, #17
    b526:	bf1c      	itt	ne
    b528:	2002      	movne	r0, #2
    b52a:	4770      	bxne	lr
    b52c:	2112      	movs	r1, #18
    b52e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b532:	2000      	movs	r0, #0
    b534:	4770      	bx	lr
    b536:	0000      	.short	0x0000
    b538:	20000144 	.word	0x20000144
    b53c:	b570      	push	{r4, r5, r6, lr}
    b53e:	4c36      	ldr	r4, [pc, #216]	; (b618 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a4>)
    b540:	2301      	movs	r3, #1
    b542:	210b      	movs	r1, #11
    b544:	68e0      	ldr	r0, [r4, #12]
    b546:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b54a:	3078      	adds	r0, #120	; 0x78
    b54c:	f004 ffb8 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b550:	bb58      	cbnz	r0, b5aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1536>
    b552:	68e0      	ldr	r0, [r4, #12]
    b554:	2301      	movs	r3, #1
    b556:	2100      	movs	r1, #0
    b558:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b55c:	3078      	adds	r0, #120	; 0x78
    b55e:	f004 ffaf 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b562:	2800      	cmp	r0, #0
    b564:	bf04      	itt	eq
    b566:	2001      	moveq	r0, #1
    b568:	bd70      	popeq	{r4, r5, r6, pc}
    b56a:	68e0      	ldr	r0, [r4, #12]
    b56c:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    b570:	2824      	cmp	r0, #36	; 0x24
    b572:	d01a      	beq.n	b5aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1536>
    b574:	6960      	ldr	r0, [r4, #20]
    b576:	f005 fa64 	bl	10a42 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    b57a:	b1c0      	cbz	r0, b5ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x153a>
    b57c:	68e0      	ldr	r0, [r4, #12]
    b57e:	2500      	movs	r5, #0
    b580:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b584:	f041 0104 	orr.w	r1, r1, #4
    b588:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b58c:	6961      	ldr	r1, [r4, #20]
    b58e:	794a      	ldrb	r2, [r1, #5]
    b590:	f002 0207 	and.w	r2, r2, #7
    b594:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    b598:	7909      	ldrb	r1, [r1, #4]
    b59a:	f001 0107 	and.w	r1, r1, #7
    b59e:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    b5a2:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    b5a6:	b133      	cbz	r3, b5b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1542>
    b5a8:	e029      	b.n	b5fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158a>
    b5aa:	2020      	movs	r0, #32
    b5ac:	bd70      	pop	{r4, r5, r6, pc}
    b5ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b5b2:	f7ff be87 	b.w	b2c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    b5b6:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    b5ba:	2b01      	cmp	r3, #1
    b5bc:	d01f      	beq.n	b5fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158a>
    b5be:	f890 6067 	ldrb.w	r6, [r0, #103]	; 0x67
    b5c2:	f100 0366 	add.w	r3, r0, #102	; 0x66
    b5c6:	f04f 0c01 	mov.w	ip, #1
    b5ca:	428e      	cmp	r6, r1
    b5cc:	bf01      	itttt	eq
    b5ce:	7819      	ldrbeq	r1, [r3, #0]
    b5d0:	4291      	cmpeq	r1, r2
    b5d2:	2102      	moveq	r1, #2
    b5d4:	f880 11be 	strbeq.w	r1, [r0, #446]	; 0x1be
    b5d8:	d011      	beq.n	b5fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158a>
    b5da:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
    b5de:	f880 c20c 	strb.w	ip, [r0, #524]	; 0x20c
    b5e2:	8802      	ldrh	r2, [r0, #0]
    b5e4:	f8a0 220e 	strh.w	r2, [r0, #526]	; 0x20e
    b5e8:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    b5ec:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    b5f0:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    b5f4:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    b5f8:	7960      	ldrb	r0, [r4, #5]
    b5fa:	f7f8 f8f7 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b5fe:	68e0      	ldr	r0, [r4, #12]
    b600:	2121      	movs	r1, #33	; 0x21
    b602:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b606:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    b60a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b60e:	1c49      	adds	r1, r1, #1
    b610:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b614:	2000      	movs	r0, #0
    b616:	bd70      	pop	{r4, r5, r6, pc}
    b618:	20000144 	.word	0x20000144
    b61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b620:	4c8a      	ldr	r4, [pc, #552]	; (b84c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17d8>)
    b622:	68e0      	ldr	r0, [r4, #12]
    b624:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b628:	2920      	cmp	r1, #32
    b62a:	bf0c      	ite	eq
    b62c:	2501      	moveq	r5, #1
    b62e:	2500      	movne	r5, #0
    b630:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b634:	2922      	cmp	r1, #34	; 0x22
    b636:	bf08      	it	eq
    b638:	f100 0685 	addeq.w	r6, r0, #133	; 0x85
    b63c:	d006      	beq.n	b64c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15d8>
    b63e:	2d00      	cmp	r5, #0
    b640:	bf12      	itee	ne
    b642:	f100 0684 	addne.w	r6, r0, #132	; 0x84
    b646:	2002      	moveq	r0, #2
    b648:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b64c:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b650:	f041 0104 	orr.w	r1, r1, #4
    b654:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b658:	6960      	ldr	r0, [r4, #20]
    b65a:	f7fb f9a3 	bl	69a4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    b65e:	f04f 0a01 	mov.w	sl, #1
    b662:	f04f 0800 	mov.w	r8, #0
    b666:	2800      	cmp	r0, #0
    b668:	d052      	beq.n	b710 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    b66a:	6967      	ldr	r7, [r4, #20]
    b66c:	4638      	mov	r0, r7
    b66e:	f005 f9bb 	bl	109e8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    b672:	4681      	mov	r9, r0
    b674:	4638      	mov	r0, r7
    b676:	f005 f9c3 	bl	10a00 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    b67a:	4607      	mov	r7, r0
    b67c:	f004 ffd4 	bl	10628 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b680:	b1e8      	cbz	r0, b6be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    b682:	68e2      	ldr	r2, [r4, #12]
    b684:	f892 1066 	ldrb.w	r1, [r2, #102]	; 0x66
    b688:	4281      	cmp	r1, r0
    b68a:	d018      	beq.n	b6be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    b68c:	f892 31be 	ldrb.w	r3, [r2, #446]	; 0x1be
    b690:	2b01      	cmp	r3, #1
    b692:	d028      	beq.n	b6e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1672>
    b694:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
    b698:	423b      	tst	r3, r7
    b69a:	d039      	beq.n	b710 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    b69c:	2d00      	cmp	r5, #0
    b69e:	bf04      	itt	eq
    b6a0:	f892 205f 	ldrbeq.w	r2, [r2, #95]	; 0x5f
    b6a4:	423a      	tsteq	r2, r7
    b6a6:	d10a      	bne.n	b6be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    b6a8:	b311      	cbz	r1, b6f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x167c>
    b6aa:	2904      	cmp	r1, #4
    b6ac:	bf18      	it	ne
    b6ae:	2804      	cmpne	r0, #4
    b6b0:	d023      	beq.n	b6fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1686>
    b6b2:	2908      	cmp	r1, #8
    b6b4:	bf18      	it	ne
    b6b6:	2808      	cmpne	r0, #8
    b6b8:	d022      	beq.n	b700 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x168c>
    b6ba:	4281      	cmp	r1, r0
    b6bc:	d828      	bhi.n	b710 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    b6be:	4648      	mov	r0, r9
    b6c0:	f004 ffb2 	bl	10628 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b6c4:	0001      	movs	r1, r0
    b6c6:	d040      	beq.n	b74a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16d6>
    b6c8:	68e0      	ldr	r0, [r4, #12]
    b6ca:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    b6ce:	428a      	cmp	r2, r1
    b6d0:	d03b      	beq.n	b74a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16d6>
    b6d2:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b6d6:	2901      	cmp	r1, #1
    b6d8:	d015      	beq.n	b706 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1692>
    b6da:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    b6de:	ea10 0f09 	tst.w	r0, r9
    b6e2:	d015      	beq.n	b710 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    b6e4:	e031      	b.n	b74a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16d6>
    b6e6:	f892 31c0 	ldrb.w	r3, [r2, #448]	; 0x1c0
    b6ea:	423b      	tst	r3, r7
    b6ec:	d1d6      	bne.n	b69c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1628>
    b6ee:	e00f      	b.n	b710 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    b6f0:	f240 1181 	movw	r1, #385	; 0x181
    b6f4:	2006      	movs	r0, #6
    b6f6:	f7f8 fa8b 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6fa:	4281      	cmp	r1, r0
    b6fc:	d308      	bcc.n	b710 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    b6fe:	e7de      	b.n	b6be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    b700:	4281      	cmp	r1, r0
    b702:	d305      	bcc.n	b710 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169c>
    b704:	e7db      	b.n	b6be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
    b706:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    b70a:	ea10 0f09 	tst.w	r0, r9
    b70e:	d11c      	bne.n	b74a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16d6>
    b710:	68e0      	ldr	r0, [r4, #12]
    b712:	2700      	movs	r7, #0
    b714:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b718:	2901      	cmp	r1, #1
    b71a:	bf0a      	itet	eq
    b71c:	201e      	moveq	r0, #30
    b71e:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    b722:	f7ff fc7b 	bleq	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    b726:	b38d      	cbz	r5, b78c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1718>
    b728:	6960      	ldr	r0, [r4, #20]
    b72a:	78c1      	ldrb	r1, [r0, #3]
    b72c:	68e0      	ldr	r0, [r4, #12]
    b72e:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    b732:	fa0a f101 	lsl.w	r1, sl, r1
    b736:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
    b73a:	d028      	beq.n	b78e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x171a>
    b73c:	210a      	movs	r1, #10
    b73e:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    b742:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    b746:	b338      	cbz	r0, b798 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1724>
    b748:	e039      	b.n	b7be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174a>
    b74a:	466a      	mov	r2, sp
    b74c:	6961      	ldr	r1, [r4, #20]
    b74e:	68e0      	ldr	r0, [r4, #12]
    b750:	f7fa ffc8 	bl	66e4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    b754:	b3b0      	cbz	r0, b7c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1750>
    b756:	6960      	ldr	r0, [r4, #20]
    b758:	f005 f950 	bl	109fc <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    b75c:	68e1      	ldr	r1, [r4, #12]
    b75e:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    b762:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    b766:	1a80      	subs	r0, r0, r2
    b768:	b200      	sxth	r0, r0
    b76a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    b76e:	4282      	cmp	r2, r0
    b770:	bfa8      	it	ge
    b772:	2800      	cmpge	r0, #0
    b774:	dd4d      	ble.n	b812 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x179e>
    b776:	f89d 0000 	ldrb.w	r0, [sp]
    b77a:	f881 01a6 	strb.w	r0, [r1, #422]	; 0x1a6
    b77e:	f89d 0001 	ldrb.w	r0, [sp, #1]
    b782:	f881 01a7 	strb.w	r0, [r1, #423]	; 0x1a7
    b786:	2024      	movs	r0, #36	; 0x24
    b788:	7030      	strb	r0, [r6, #0]
    b78a:	e047      	b.n	b81c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17a8>
    b78c:	e009      	b.n	b7a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x172e>
    b78e:	f240 31c7 	movw	r1, #967	; 0x3c7
    b792:	2031      	movs	r0, #49	; 0x31
    b794:	f7f8 fa3c 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b798:	f240 31cf 	movw	r1, #975	; 0x3cf
    b79c:	2031      	movs	r0, #49	; 0x31
    b79e:	f7f8 fa37 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7a2:	f886 8000 	strb.w	r8, [r6]
    b7a6:	68e1      	ldr	r1, [r4, #12]
    b7a8:	f891 00b4 	ldrb.w	r0, [r1, #180]	; 0xb4
    b7ac:	1e40      	subs	r0, r0, #1
    b7ae:	b240      	sxtb	r0, r0
    b7b0:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    b7b4:	2800      	cmp	r0, #0
    b7b6:	db41      	blt.n	b83c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c8>
    b7b8:	f7ff fd84 	bl	b2c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1250>
    b7bc:	4607      	mov	r7, r0
    b7be:	4638      	mov	r0, r7
    b7c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7c4:	e7ff      	b.n	b7c6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1752>
    b7c6:	68e2      	ldr	r2, [r4, #12]
    b7c8:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    b7cc:	2801      	cmp	r0, #1
    b7ce:	bf18      	it	ne
    b7d0:	f882 81be 	strbne.w	r8, [r2, #446]	; 0x1be
    b7d4:	d007      	beq.n	b7e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1772>
    b7d6:	68e0      	ldr	r0, [r4, #12]
    b7d8:	f100 0185 	add.w	r1, r0, #133	; 0x85
    b7dc:	428e      	cmp	r6, r1
    b7de:	bf08      	it	eq
    b7e0:	f880 8085 	strbeq.w	r8, [r0, #133]	; 0x85
    b7e4:	e01a      	b.n	b81c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17a8>
    b7e6:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
    b7ea:	f892 1066 	ldrb.w	r1, [r2, #102]	; 0x66
    b7ee:	f8b2 01c2 	ldrh.w	r0, [r2, #450]	; 0x1c2
    b7f2:	f502 72d2 	add.w	r2, r2, #420	; 0x1a4
    b7f6:	f004 ffc1 	bl	1077c <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
    b7fa:	b120      	cbz	r0, b806 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1792>
    b7fc:	68e1      	ldr	r1, [r4, #12]
    b7fe:	2025      	movs	r0, #37	; 0x25
    b800:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b804:	e7e7      	b.n	b7d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1762>
    b806:	2000      	movs	r0, #0
    b808:	f7ff fc08 	bl	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    b80c:	f886 8000 	strb.w	r8, [r6]
    b810:	e7e1      	b.n	b7d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1762>
    b812:	2028      	movs	r0, #40	; 0x28
    b814:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    b818:	f881 a094 	strb.w	sl, [r1, #148]	; 0x94
    b81c:	68e0      	ldr	r0, [r4, #12]
    b81e:	f100 0185 	add.w	r1, r0, #133	; 0x85
    b822:	428e      	cmp	r6, r1
    b824:	bf18      	it	ne
    b826:	f880 80b0 	strbne.w	r8, [r0, #176]	; 0xb0
    b82a:	d10c      	bne.n	b846 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17d2>
    b82c:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b830:	1e49      	subs	r1, r1, #1
    b832:	b249      	sxtb	r1, r1
    b834:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b838:	2900      	cmp	r1, #0
    b83a:	da04      	bge.n	b846 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17d2>
    b83c:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b840:	2031      	movs	r0, #49	; 0x31
    b842:	f7f8 f9e5 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b846:	2000      	movs	r0, #0
    b848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b84c:	20000144 	.word	0x20000144
    b850:	b510      	push	{r4, lr}
    b852:	4c18      	ldr	r4, [pc, #96]	; (b8b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1840>)
    b854:	68e0      	ldr	r0, [r4, #12]
    b856:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b85a:	f041 0104 	orr.w	r1, r1, #4
    b85e:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b862:	6960      	ldr	r0, [r4, #20]
    b864:	f005 f901 	bl	10a6a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    b868:	2816      	cmp	r0, #22
    b86a:	d10a      	bne.n	b882 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x180e>
    b86c:	6960      	ldr	r0, [r4, #20]
    b86e:	f005 f8fe 	bl	10a6e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    b872:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b876:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    b87a:	2920      	cmp	r1, #32
    b87c:	d003      	beq.n	b886 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1812>
    b87e:	2926      	cmp	r1, #38	; 0x26
    b880:	d004      	beq.n	b88c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1818>
    b882:	2000      	movs	r0, #0
    b884:	bd10      	pop	{r4, pc}
    b886:	f7ff fbc9 	bl	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    b88a:	e00c      	b.n	b8a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1832>
    b88c:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    b890:	2301      	movs	r3, #1
    b892:	210b      	movs	r1, #11
    b894:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b898:	f004 fe12 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b89c:	2800      	cmp	r0, #0
    b89e:	bf04      	itt	eq
    b8a0:	202a      	moveq	r0, #42	; 0x2a
    b8a2:	f7ff fbbb 	bleq	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    b8a6:	2000      	movs	r0, #0
    b8a8:	68e1      	ldr	r1, [r4, #12]
    b8aa:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b8ae:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b8b2:	bd10      	pop	{r4, pc}
    b8b4:	20000144 	.word	0x20000144
    b8b8:	b510      	push	{r4, lr}
    b8ba:	4c12      	ldr	r4, [pc, #72]	; (b904 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1890>)
    b8bc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b8c0:	6960      	ldr	r0, [r4, #20]
    b8c2:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    b8c6:	7900      	ldrb	r0, [r0, #4]
    b8c8:	2920      	cmp	r1, #32
    b8ca:	d017      	beq.n	b8fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1888>
    b8cc:	2926      	cmp	r1, #38	; 0x26
    b8ce:	bf1c      	itt	ne
    b8d0:	2000      	movne	r0, #0
    b8d2:	bd10      	popne	{r4, pc}
    b8d4:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    b8d8:	2301      	movs	r3, #1
    b8da:	210b      	movs	r1, #11
    b8dc:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b8e0:	f004 fdee 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b8e4:	2800      	cmp	r0, #0
    b8e6:	bf04      	itt	eq
    b8e8:	202a      	moveq	r0, #42	; 0x2a
    b8ea:	f7ff fb97 	bleq	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    b8ee:	2000      	movs	r0, #0
    b8f0:	68e1      	ldr	r1, [r4, #12]
    b8f2:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b8f6:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b8fa:	bd10      	pop	{r4, pc}
    b8fc:	f7ff fb8e 	bl	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    b900:	e7f5      	b.n	b8ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x187a>
    b902:	0000      	.short	0x0000
    b904:	20000144 	.word	0x20000144
    b908:	480d      	ldr	r0, [pc, #52]	; (b940 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18cc>)
    b90a:	b510      	push	{r4, lr}
    b90c:	68c0      	ldr	r0, [r0, #12]
    b90e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b912:	2917      	cmp	r1, #23
    b914:	bf1c      	itt	ne
    b916:	2002      	movne	r0, #2
    b918:	bd10      	popne	{r4, pc}
    b91a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b91e:	1e49      	subs	r1, r1, #1
    b920:	b249      	sxtb	r1, r1
    b922:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b926:	2900      	cmp	r1, #0
    b928:	da04      	bge.n	b934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18c0>
    b92a:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b92e:	2031      	movs	r0, #49	; 0x31
    b930:	f7f8 f96e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b934:	211b      	movs	r1, #27
    b936:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b93a:	2000      	movs	r0, #0
    b93c:	bd10      	pop	{r4, pc}
    b93e:	0000      	.short	0x0000
    b940:	20000144 	.word	0x20000144
    b944:	b510      	push	{r4, lr}
    b946:	4c0c      	ldr	r4, [pc, #48]	; (b978 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1904>)
    b948:	2301      	movs	r3, #1
    b94a:	4619      	mov	r1, r3
    b94c:	68e0      	ldr	r0, [r4, #12]
    b94e:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    b952:	3078      	adds	r0, #120	; 0x78
    b954:	f004 fdb4 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b958:	2800      	cmp	r0, #0
    b95a:	bf1c      	itt	ne
    b95c:	2000      	movne	r0, #0
    b95e:	bd10      	popne	{r4, pc}
    b960:	6960      	ldr	r0, [r4, #20]
    b962:	f005 f84f 	bl	10a04 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    b966:	68e1      	ldr	r1, [r4, #12]
    b968:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    b96c:	2007      	movs	r0, #7
    b96e:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    b972:	2000      	movs	r0, #0
    b974:	bd10      	pop	{r4, pc}
    b976:	0000      	.short	0x0000
    b978:	20000144 	.word	0x20000144
    b97c:	b570      	push	{r4, r5, r6, lr}
    b97e:	4c4c      	ldr	r4, [pc, #304]	; (bab0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a3c>)
    b980:	2600      	movs	r6, #0
    b982:	4621      	mov	r1, r4
    b984:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    b988:	6949      	ldr	r1, [r1, #20]
    b98a:	2001      	movs	r0, #1
    b98c:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    b990:	7909      	ldrb	r1, [r1, #4]
    b992:	4635      	mov	r5, r6
    b994:	2a0e      	cmp	r2, #14
    b996:	bf08      	it	eq
    b998:	2912      	cmpeq	r1, #18
    b99a:	d01d      	beq.n	b9d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1964>
    b99c:	2a1c      	cmp	r2, #28
    b99e:	bf08      	it	eq
    b9a0:	2914      	cmpeq	r1, #20
    b9a2:	d029      	beq.n	b9f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1984>
    b9a4:	2a04      	cmp	r2, #4
    b9a6:	bf08      	it	eq
    b9a8:	290e      	cmpeq	r1, #14
    b9aa:	d043      	beq.n	ba34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19c0>
    b9ac:	2a20      	cmp	r2, #32
    b9ae:	bf08      	it	eq
    b9b0:	2916      	cmpeq	r1, #22
    b9b2:	d050      	beq.n	ba56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19e2>
    b9b4:	2a26      	cmp	r2, #38	; 0x26
    b9b6:	bf08      	it	eq
    b9b8:	2916      	cmpeq	r1, #22
    b9ba:	d04c      	beq.n	ba56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19e2>
    b9bc:	2917      	cmp	r1, #23
    b9be:	bf04      	itt	eq
    b9c0:	f89c 2085 	ldrbeq.w	r2, [ip, #133]	; 0x85
    b9c4:	2a22      	cmpeq	r2, #34	; 0x22
    b9c6:	d059      	beq.n	ba7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a08>
    b9c8:	69a2      	ldr	r2, [r4, #24]
    b9ca:	2a00      	cmp	r2, #0
    b9cc:	d054      	beq.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    b9ce:	29ff      	cmp	r1, #255	; 0xff
    b9d0:	bf08      	it	eq
    b9d2:	f88c 019e 	strbeq.w	r0, [ip, #414]	; 0x19e
    b9d6:	e04f      	b.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    b9d8:	2301      	movs	r3, #1
    b9da:	2109      	movs	r1, #9
    b9dc:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    b9e0:	f004 fd6e 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b9e4:	2800      	cmp	r0, #0
    b9e6:	d047      	beq.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    b9e8:	68e0      	ldr	r0, [r4, #12]
    b9ea:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    b9ee:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    b9f2:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    b9f6:	e03f      	b.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    b9f8:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    b9fc:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    ba00:	f89c 10be 	ldrb.w	r1, [ip, #190]	; 0xbe
    ba04:	f021 0120 	bic.w	r1, r1, #32
    ba08:	f88c 10be 	strb.w	r1, [ip, #190]	; 0xbe
    ba0c:	f89c 005c 	ldrb.w	r0, [ip, #92]	; 0x5c
    ba10:	2801      	cmp	r0, #1
    ba12:	bf04      	itt	eq
    ba14:	2002      	moveq	r0, #2
    ba16:	f88c 005c 	strbeq.w	r0, [ip, #92]	; 0x5c
    ba1a:	d02d      	beq.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    ba1c:	f8bc 0000 	ldrh.w	r0, [ip]
    ba20:	f50c 72f5 	add.w	r2, ip, #490	; 0x1ea
    ba24:	f10c 0128 	add.w	r1, ip, #40	; 0x28
    ba28:	f005 f99c 	bl	10d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    ba2c:	7960      	ldrb	r0, [r4, #5]
    ba2e:	f7f7 fedd 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ba32:	e021      	b.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    ba34:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    ba38:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    ba3c:	f8bc 1000 	ldrh.w	r1, [ip]
    ba40:	f8ac 121e 	strh.w	r1, [ip, #542]	; 0x21e
    ba44:	211a      	movs	r1, #26
    ba46:	f88c 121c 	strb.w	r1, [ip, #540]	; 0x21c
    ba4a:	f88c 021a 	strb.w	r0, [ip, #538]	; 0x21a
    ba4e:	7960      	ldrb	r0, [r4, #5]
    ba50:	f7f7 fecc 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ba54:	e010      	b.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    ba56:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    ba5a:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    ba5e:	f89c 0085 	ldrb.w	r0, [ip, #133]	; 0x85
    ba62:	2821      	cmp	r0, #33	; 0x21
    ba64:	d008      	beq.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    ba66:	f89c 00bf 	ldrb.w	r0, [ip, #191]	; 0xbf
    ba6a:	f020 0009 	bic.w	r0, r0, #9
    ba6e:	f88c 00bf 	strb.w	r0, [ip, #191]	; 0xbf
    ba72:	201a      	movs	r0, #26
    ba74:	f7ff fad2 	bl	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    ba78:	4630      	mov	r0, r6
    ba7a:	bd70      	pop	{r4, r5, r6, pc}
    ba7c:	f88c 5085 	strb.w	r5, [ip, #133]	; 0x85
    ba80:	f89c 00b4 	ldrb.w	r0, [ip, #180]	; 0xb4
    ba84:	1e40      	subs	r0, r0, #1
    ba86:	b240      	sxtb	r0, r0
    ba88:	f88c 00b4 	strb.w	r0, [ip, #180]	; 0xb4
    ba8c:	2800      	cmp	r0, #0
    ba8e:	da04      	bge.n	ba9a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a26>
    ba90:	f44f 71c8 	mov.w	r1, #400	; 0x190
    ba94:	2031      	movs	r0, #49	; 0x31
    ba96:	f7f8 f8bb 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba9a:	f89c 01be 	ldrb.w	r0, [ip, #446]	; 0x1be
    ba9e:	2801      	cmp	r0, #1
    baa0:	bf04      	itt	eq
    baa2:	2000      	moveq	r0, #0
    baa4:	f7ff faba 	bleq	b01c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa8>
    baa8:	68e0      	ldr	r0, [r4, #12]
    baaa:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    baae:	e7e3      	b.n	ba78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a04>
    bab0:	20000144 	.word	0x20000144
    bab4:	b570      	push	{r4, r5, r6, lr}
    bab6:	4c33      	ldr	r4, [pc, #204]	; (bb84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b10>)
    bab8:	68e0      	ldr	r0, [r4, #12]
    baba:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    babe:	f011 0f02 	tst.w	r1, #2
    bac2:	d00a      	beq.n	bada <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a66>
    bac4:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bac8:	2301      	movs	r3, #1
    baca:	2108      	movs	r1, #8
    bacc:	3078      	adds	r0, #120	; 0x78
    bace:	f004 fcf7 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bad2:	2800      	cmp	r0, #0
    bad4:	bf04      	itt	eq
    bad6:	2001      	moveq	r0, #1
    bad8:	bd70      	popeq	{r4, r5, r6, pc}
    bada:	68e0      	ldr	r0, [r4, #12]
    badc:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    bae0:	f010 0f02 	tst.w	r0, #2
    bae4:	d114      	bne.n	bb10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a9c>
    bae6:	6960      	ldr	r0, [r4, #20]
    bae8:	f004 ff8e 	bl	10a08 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    baec:	68e1      	ldr	r1, [r4, #12]
    baee:	f881 00b9 	strb.w	r0, [r1, #185]	; 0xb9
    baf2:	6960      	ldr	r0, [r4, #20]
    baf4:	f8b0 2005 	ldrh.w	r2, [r0, #5]
    baf8:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    bafc:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    bb00:	f8a1 00bc 	strh.w	r0, [r1, #188]	; 0xbc
    bb04:	f891 00b8 	ldrb.w	r0, [r1, #184]	; 0xb8
    bb08:	f040 0002 	orr.w	r0, r0, #2
    bb0c:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    bb10:	68e0      	ldr	r0, [r4, #12]
    bb12:	f04f 0500 	mov.w	r5, #0
    bb16:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    bb1a:	f011 0f01 	tst.w	r1, #1
    bb1e:	d114      	bne.n	bb4a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ad6>
    bb20:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bb24:	f011 0f02 	tst.w	r1, #2
    bb28:	d004      	beq.n	bb34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ac0>
    bb2a:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    bb2e:	2031      	movs	r0, #49	; 0x31
    bb30:	f7f8 f86e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb34:	f041 0102 	orr.w	r1, r1, #2
    bb38:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    bb3c:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    bb40:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bb44:	1c49      	adds	r1, r1, #1
    bb46:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bb4a:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    bb4e:	2906      	cmp	r1, #6
    bb50:	d106      	bne.n	bb60 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aec>
    bb52:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    bb56:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    bb5a:	7960      	ldrb	r0, [r4, #5]
    bb5c:	f7f7 fe46 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bb60:	68e0      	ldr	r0, [r4, #12]
    bb62:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    bb66:	b159      	cbz	r1, bb80 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0c>
    bb68:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    bb6c:	7960      	ldrb	r0, [r4, #5]
    bb6e:	f7f7 fe3d 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bb72:	68e0      	ldr	r0, [r4, #12]
    bb74:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    bb78:	2900      	cmp	r1, #0
    bb7a:	bf08      	it	eq
    bb7c:	f880 50b0 	strbeq.w	r5, [r0, #176]	; 0xb0
    bb80:	2000      	movs	r0, #0
    bb82:	bd70      	pop	{r4, r5, r6, pc}
    bb84:	20000144 	.word	0x20000144
    bb88:	4809      	ldr	r0, [pc, #36]	; (bbb0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b3c>)
    bb8a:	b510      	push	{r4, lr}
    bb8c:	68c0      	ldr	r0, [r0, #12]
    bb8e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bb92:	2914      	cmp	r1, #20
    bb94:	d004      	beq.n	bba0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b2c>
    bb96:	f240 6187 	movw	r1, #1671	; 0x687
    bb9a:	2031      	movs	r0, #49	; 0x31
    bb9c:	f7f8 f838 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bba0:	2101      	movs	r1, #1
    bba2:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    bba6:	2115      	movs	r1, #21
    bba8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    bbac:	bd10      	pop	{r4, pc}
    bbae:	0000      	.short	0x0000
    bbb0:	20000144 	.word	0x20000144
    bbb4:	480f      	ldr	r0, [pc, #60]	; (bbf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b80>)
    bbb6:	b510      	push	{r4, lr}
    bbb8:	68c0      	ldr	r0, [r0, #12]
    bbba:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bbbe:	f011 0f01 	tst.w	r1, #1
    bbc2:	d011      	beq.n	bbe8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b74>
    bbc4:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    bbc8:	1e52      	subs	r2, r2, #1
    bbca:	b252      	sxtb	r2, r2
    bbcc:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    bbd0:	2a00      	cmp	r2, #0
    bbd2:	bfa2      	ittt	ge
    bbd4:	f021 0101 	bicge.w	r1, r1, #1
    bbd8:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    bbdc:	bd10      	popge	{r4, pc}
    bbde:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bbe2:	2031      	movs	r0, #49	; 0x31
    bbe4:	f7f8 f814 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbe8:	f44f 61ce 	mov.w	r1, #1648	; 0x670
    bbec:	2031      	movs	r0, #49	; 0x31
    bbee:	f7f8 f80f 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbf2:	0000      	.short	0x0000
    bbf4:	20000144 	.word	0x20000144
    bbf8:	b510      	push	{r4, lr}
    bbfa:	4c0a      	ldr	r4, [pc, #40]	; (bc24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bb0>)
    bbfc:	2301      	movs	r3, #1
    bbfe:	2100      	movs	r1, #0
    bc00:	68e0      	ldr	r0, [r4, #12]
    bc02:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bc06:	3078      	adds	r0, #120	; 0x78
    bc08:	f004 fc5a 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bc0c:	b120      	cbz	r0, bc18 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ba4>
    bc0e:	68e1      	ldr	r1, [r4, #12]
    bc10:	201c      	movs	r0, #28
    bc12:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bc16:	bd10      	pop	{r4, pc}
    bc18:	f240 61f5 	movw	r1, #1781	; 0x6f5
    bc1c:	2031      	movs	r0, #49	; 0x31
    bc1e:	f7f7 fff7 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc22:	0000      	.short	0x0000
    bc24:	20000144 	.word	0x20000144
    bc28:	480f      	ldr	r0, [pc, #60]	; (bc68 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bf4>)
    bc2a:	b510      	push	{r4, lr}
    bc2c:	68c0      	ldr	r0, [r0, #12]
    bc2e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bc32:	f001 0230 	and.w	r2, r1, #48	; 0x30
    bc36:	2a10      	cmp	r2, #16
    bc38:	d004      	beq.n	bc44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bd0>
    bc3a:	f240 61fc 	movw	r1, #1788	; 0x6fc
    bc3e:	2031      	movs	r0, #49	; 0x31
    bc40:	f7f7 ffe6 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc44:	f021 0110 	bic.w	r1, r1, #16
    bc48:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    bc4c:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bc50:	1e49      	subs	r1, r1, #1
    bc52:	b249      	sxtb	r1, r1
    bc54:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bc58:	2900      	cmp	r1, #0
    bc5a:	bfa8      	it	ge
    bc5c:	bd10      	popge	{r4, pc}
    bc5e:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bc62:	2031      	movs	r0, #49	; 0x31
    bc64:	f7f7 ffd4 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc68:	20000144 	.word	0x20000144
    bc6c:	b510      	push	{r4, lr}
    bc6e:	4c0a      	ldr	r4, [pc, #40]	; (bc98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c24>)
    bc70:	2301      	movs	r3, #1
    bc72:	2100      	movs	r1, #0
    bc74:	68e0      	ldr	r0, [r4, #12]
    bc76:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bc7a:	3078      	adds	r0, #120	; 0x78
    bc7c:	f004 fc20 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bc80:	b120      	cbz	r0, bc8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c18>
    bc82:	68e1      	ldr	r1, [r4, #12]
    bc84:	200e      	movs	r0, #14
    bc86:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bc8a:	bd10      	pop	{r4, pc}
    bc8c:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    bc90:	2031      	movs	r0, #49	; 0x31
    bc92:	f7f7 ffbd 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc96:	0000      	.short	0x0000
    bc98:	20000144 	.word	0x20000144
    bc9c:	480b      	ldr	r0, [pc, #44]	; (bccc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c58>)
    bc9e:	68c0      	ldr	r0, [r0, #12]
    bca0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bca4:	f021 0104 	bic.w	r1, r1, #4
    bca8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    bcac:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bcb0:	1e49      	subs	r1, r1, #1
    bcb2:	b249      	sxtb	r1, r1
    bcb4:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bcb8:	2900      	cmp	r1, #0
    bcba:	bfa8      	it	ge
    bcbc:	4770      	bxge	lr
    bcbe:	b510      	push	{r4, lr}
    bcc0:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bcc4:	2031      	movs	r0, #49	; 0x31
    bcc6:	f7f7 ffa3 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcca:	0000      	.short	0x0000
    bccc:	20000144 	.word	0x20000144
    bcd0:	4809      	ldr	r0, [pc, #36]	; (bcf8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c84>)
    bcd2:	b510      	push	{r4, lr}
    bcd4:	68c0      	ldr	r0, [r0, #12]
    bcd6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bcda:	2910      	cmp	r1, #16
    bcdc:	d004      	beq.n	bce8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c74>
    bcde:	f240 617f 	movw	r1, #1663	; 0x67f
    bce2:	2031      	movs	r0, #49	; 0x31
    bce4:	f7f7 ff94 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bce8:	2101      	movs	r1, #1
    bcea:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    bcee:	2111      	movs	r1, #17
    bcf0:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    bcf4:	bd10      	pop	{r4, pc}
    bcf6:	0000      	.short	0x0000
    bcf8:	20000144 	.word	0x20000144
    bcfc:	b510      	push	{r4, lr}
    bcfe:	4c0a      	ldr	r4, [pc, #40]	; (bd28 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cb4>)
    bd00:	2301      	movs	r3, #1
    bd02:	2100      	movs	r1, #0
    bd04:	68e0      	ldr	r0, [r4, #12]
    bd06:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bd0a:	3078      	adds	r0, #120	; 0x78
    bd0c:	f004 fbd8 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bd10:	b120      	cbz	r0, bd1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ca8>
    bd12:	68e1      	ldr	r1, [r4, #12]
    bd14:	201f      	movs	r0, #31
    bd16:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bd1a:	bd10      	pop	{r4, pc}
    bd1c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    bd20:	2031      	movs	r0, #49	; 0x31
    bd22:	f7f7 ff75 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd26:	0000      	.short	0x0000
    bd28:	20000144 	.word	0x20000144
    bd2c:	4808      	ldr	r0, [pc, #32]	; (bd50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cdc>)
    bd2e:	b510      	push	{r4, lr}
    bd30:	68c0      	ldr	r0, [r0, #12]
    bd32:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bd36:	2921      	cmp	r1, #33	; 0x21
    bd38:	bf11      	iteee	ne
    bd3a:	2900      	cmpne	r1, #0
    bd3c:	2122      	moveq	r1, #34	; 0x22
    bd3e:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bd42:	bd10      	popeq	{r4, pc}
    bd44:	f240 710f 	movw	r1, #1807	; 0x70f
    bd48:	f04f 0031 	mov.w	r0, #49	; 0x31
    bd4c:	f7f7 ff60 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd50:	20000144 	.word	0x20000144
    bd54:	4807      	ldr	r0, [pc, #28]	; (bd74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d00>)
    bd56:	b510      	push	{r4, lr}
    bd58:	68c0      	ldr	r0, [r0, #12]
    bd5a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bd5e:	2915      	cmp	r1, #21
    bd60:	bf02      	ittt	eq
    bd62:	2119      	moveq	r1, #25
    bd64:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bd68:	bd10      	popeq	{r4, pc}
    bd6a:	f240 6194 	movw	r1, #1684	; 0x694
    bd6e:	2031      	movs	r0, #49	; 0x31
    bd70:	f7f7 ff4e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd74:	20000144 	.word	0x20000144
    bd78:	4807      	ldr	r0, [pc, #28]	; (bd98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d24>)
    bd7a:	b510      	push	{r4, lr}
    bd7c:	68c0      	ldr	r0, [r0, #12]
    bd7e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bd82:	2915      	cmp	r1, #21
    bd84:	bf02      	ittt	eq
    bd86:	2117      	moveq	r1, #23
    bd88:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bd8c:	bd10      	popeq	{r4, pc}
    bd8e:	f240 618e 	movw	r1, #1678	; 0x68e
    bd92:	2031      	movs	r0, #49	; 0x31
    bd94:	f7f7 ff3c 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd98:	20000144 	.word	0x20000144
    bd9c:	b570      	push	{r4, r5, r6, lr}
    bd9e:	4d1c      	ldr	r5, [pc, #112]	; (be10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d9c>)
    bda0:	68e8      	ldr	r0, [r5, #12]
    bda2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bda6:	291b      	cmp	r1, #27
    bda8:	d004      	beq.n	bdb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d40>
    bdaa:	f240 61ae 	movw	r1, #1710	; 0x6ae
    bdae:	2031      	movs	r0, #49	; 0x31
    bdb0:	f7f7 ff2e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdb4:	2400      	movs	r4, #0
    bdb6:	f880 40b5 	strb.w	r4, [r0, #181]	; 0xb5
    bdba:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    bdbe:	b121      	cbz	r1, bdca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d56>
    bdc0:	f240 61b2 	movw	r1, #1714	; 0x6b2
    bdc4:	2031      	movs	r0, #49	; 0x31
    bdc6:	f7f7 ff23 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdca:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    bdce:	b141      	cbz	r1, bde2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6e>
    bdd0:	f880 40b6 	strb.w	r4, [r0, #182]	; 0xb6
    bdd4:	8801      	ldrh	r1, [r0, #0]
    bdd6:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    bdda:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    bdde:	210e      	movs	r1, #14
    bde0:	e008      	b.n	bdf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d80>
    bde2:	8801      	ldrh	r1, [r0, #0]
    bde4:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    bde8:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    bdec:	2101      	movs	r1, #1
    bdee:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    bdf2:	210d      	movs	r1, #13
    bdf4:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    bdf8:	8800      	ldrh	r0, [r0, #0]
    bdfa:	f7f8 fb1d 	bl	4438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    bdfe:	f004 f8c4 	bl	ff8a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    be02:	7968      	ldrb	r0, [r5, #5]
    be04:	f7f7 fcf2 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    be08:	68e8      	ldr	r0, [r5, #12]
    be0a:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    be0e:	bd70      	pop	{r4, r5, r6, pc}
    be10:	20000144 	.word	0x20000144
    be14:	b510      	push	{r4, lr}
    be16:	4c08      	ldr	r4, [pc, #32]	; (be38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dc4>)
    be18:	2301      	movs	r3, #1
    be1a:	4619      	mov	r1, r3
    be1c:	68e0      	ldr	r0, [r4, #12]
    be1e:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    be22:	3078      	adds	r0, #120	; 0x78
    be24:	f004 fb4c 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    be28:	2800      	cmp	r0, #0
    be2a:	bf18      	it	ne
    be2c:	bd10      	popne	{r4, pc}
    be2e:	2008      	movs	r0, #8
    be30:	68e1      	ldr	r1, [r4, #12]
    be32:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    be36:	bd10      	pop	{r4, pc}
    be38:	20000144 	.word	0x20000144
    be3c:	481b      	ldr	r0, [pc, #108]	; (beac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e38>)
    be3e:	b510      	push	{r4, lr}
    be40:	6901      	ldr	r1, [r0, #16]
    be42:	68c0      	ldr	r0, [r0, #12]
    be44:	2200      	movs	r2, #0
    be46:	7909      	ldrb	r1, [r1, #4]
    be48:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    be4c:	2b0a      	cmp	r3, #10
    be4e:	bf01      	itttt	eq
    be50:	f890 30f2 	ldrbeq.w	r3, [r0, #242]	; 0xf2
    be54:	428b      	cmpeq	r3, r1
    be56:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    be5a:	f880 20b0 	strbeq.w	r2, [r0, #176]	; 0xb0
    be5e:	bf08      	it	eq
    be60:	bd10      	popeq	{r4, pc}
    be62:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    be66:	f013 0f08 	tst.w	r3, #8
    be6a:	d012      	beq.n	be92 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e1e>
    be6c:	f023 0108 	bic.w	r1, r3, #8
    be70:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    be74:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    be78:	f1a1 0101 	sub.w	r1, r1, #1
    be7c:	b249      	sxtb	r1, r1
    be7e:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    be82:	2900      	cmp	r1, #0
    be84:	bfa8      	it	ge
    be86:	bd10      	popge	{r4, pc}
    be88:	f44f 71c8 	mov.w	r1, #400	; 0x190
    be8c:	2031      	movs	r0, #49	; 0x31
    be8e:	f7f7 febf 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be92:	29ff      	cmp	r1, #255	; 0xff
    be94:	d004      	beq.n	bea0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e2c>
    be96:	f240 616a 	movw	r1, #1642	; 0x66a
    be9a:	2031      	movs	r0, #49	; 0x31
    be9c:	f7f7 feb8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bea0:	2127      	movs	r1, #39	; 0x27
    bea2:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    bea6:	f880 219c 	strb.w	r2, [r0, #412]	; 0x19c
    beaa:	bd10      	pop	{r4, pc}
    beac:	20000144 	.word	0x20000144
    beb0:	b510      	push	{r4, lr}
    beb2:	4c1b      	ldr	r4, [pc, #108]	; (bf20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1eac>)
    beb4:	68e0      	ldr	r0, [r4, #12]
    beb6:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    beba:	f011 0f02 	tst.w	r1, #2
    bebe:	d01d      	beq.n	befc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e88>
    bec0:	2100      	movs	r1, #0
    bec2:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    bec6:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    beca:	68e0      	ldr	r0, [r4, #12]
    becc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bed0:	f011 0f02 	tst.w	r1, #2
    bed4:	bf08      	it	eq
    bed6:	bd10      	popeq	{r4, pc}
    bed8:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    bedc:	1e52      	subs	r2, r2, #1
    bede:	b252      	sxtb	r2, r2
    bee0:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    bee4:	2a00      	cmp	r2, #0
    bee6:	bfa2      	ittt	ge
    bee8:	f021 0102 	bicge.w	r1, r1, #2
    beec:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    bef0:	bd10      	popge	{r4, pc}
    bef2:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bef6:	2031      	movs	r0, #49	; 0x31
    bef8:	f7f7 fe8a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    befc:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bf00:	2301      	movs	r3, #1
    bf02:	2100      	movs	r1, #0
    bf04:	3078      	adds	r0, #120	; 0x78
    bf06:	f004 fadb 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bf0a:	b120      	cbz	r0, bf16 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ea2>
    bf0c:	68e1      	ldr	r1, [r4, #12]
    bf0e:	2006      	movs	r0, #6
    bf10:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bf14:	e7d9      	b.n	beca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e56>
    bf16:	f240 61d4 	movw	r1, #1748	; 0x6d4
    bf1a:	2031      	movs	r0, #49	; 0x31
    bf1c:	f7f7 fe78 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf20:	20000144 	.word	0x20000144

0000bf24 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    bf24:	4804      	ldr	r0, [pc, #16]	; (bf38 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x14>)
    bf26:	6840      	ldr	r0, [r0, #4]
    bf28:	7801      	ldrb	r1, [r0, #0]
    bf2a:	2900      	cmp	r1, #0
    bf2c:	bf14      	ite	ne
    bf2e:	8880      	ldrhne	r0, [r0, #4]
    bf30:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    bf34:	4770      	bx	lr
    bf36:	0000      	.short	0x0000
    bf38:	2000022c 	.word	0x2000022c

0000bf3c <sym_S6BPBH5XQUKYY4ZXMDE725VHOLMGWM2NXJZTDWI>:
    bf3c:	4802      	ldr	r0, [pc, #8]	; (bf48 <sym_S6BPBH5XQUKYY4ZXMDE725VHOLMGWM2NXJZTDWI+0xc>)
    bf3e:	6840      	ldr	r0, [r0, #4]
    bf40:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    bf44:	4770      	bx	lr
    bf46:	0000      	.short	0x0000
    bf48:	2000022c 	.word	0x2000022c

0000bf4c <sym_3X3XIYZ47P6PUIPMHDVYO7YOEUWBHGUNR26JAYA>:
    bf4c:	4902      	ldr	r1, [pc, #8]	; (bf58 <sym_3X3XIYZ47P6PUIPMHDVYO7YOEUWBHGUNR26JAYA+0xc>)
    bf4e:	6849      	ldr	r1, [r1, #4]
    bf50:	f881 004b 	strb.w	r0, [r1, #75]	; 0x4b
    bf54:	4770      	bx	lr
    bf56:	0000      	.short	0x0000
    bf58:	2000022c 	.word	0x2000022c

0000bf5c <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>:
    bf5c:	4902      	ldr	r1, [pc, #8]	; (bf68 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY+0xc>)
    bf5e:	6849      	ldr	r1, [r1, #4]
    bf60:	f881 009b 	strb.w	r0, [r1, #155]	; 0x9b
    bf64:	4770      	bx	lr
    bf66:	0000      	.short	0x0000
    bf68:	2000022c 	.word	0x2000022c

0000bf6c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    bf6c:	4802      	ldr	r0, [pc, #8]	; (bf78 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    bf6e:	6840      	ldr	r0, [r0, #4]
    bf70:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    bf74:	4770      	bx	lr
    bf76:	0000      	.short	0x0000
    bf78:	2000022c 	.word	0x2000022c

0000bf7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    bf7c:	480c      	ldr	r0, [pc, #48]	; (bfb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    bf7e:	6841      	ldr	r1, [r0, #4]
    bf80:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    bf84:	2803      	cmp	r0, #3
    bf86:	d004      	beq.n	bf92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    bf88:	2801      	cmp	r0, #1
    bf8a:	bf18      	it	ne
    bf8c:	2802      	cmpne	r0, #2
    bf8e:	d007      	beq.n	bfa0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    bf90:	e004      	b.n	bf9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    bf92:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    bf96:	2801      	cmp	r0, #1
    bf98:	bf08      	it	eq
    bf9a:	4770      	bxeq	lr
    bf9c:	2000      	movs	r0, #0
    bf9e:	4770      	bx	lr
    bfa0:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    bfa4:	2801      	cmp	r0, #1
    bfa6:	bf14      	ite	ne
    bfa8:	2803      	cmpne	r0, #3
    bfaa:	2001      	moveq	r0, #1
    bfac:	d1f6      	bne.n	bf9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    bfae:	4770      	bx	lr
    bfb0:	2000022c 	.word	0x2000022c

0000bfb4 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>:
    bfb4:	4806      	ldr	r0, [pc, #24]	; (bfd0 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA+0x1c>)
    bfb6:	7800      	ldrb	r0, [r0, #0]
    bfb8:	2800      	cmp	r0, #0
    bfba:	bf1c      	itt	ne
    bfbc:	2000      	movne	r0, #0
    bfbe:	4770      	bxne	lr
    bfc0:	b510      	push	{r4, lr}
    bfc2:	2000      	movs	r0, #0
    bfc4:	f004 f913 	bl	101ee <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    bfc8:	f080 0001 	eor.w	r0, r0, #1
    bfcc:	bd10      	pop	{r4, pc}
    bfce:	0000      	.short	0x0000
    bfd0:	20001428 	.word	0x20001428

0000bfd4 <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA>:
    bfd4:	4901      	ldr	r1, [pc, #4]	; (bfdc <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA+0x8>)
    bfd6:	6048      	str	r0, [r1, #4]
    bfd8:	4770      	bx	lr
    bfda:	0000      	.short	0x0000
    bfdc:	20001414 	.word	0x20001414

0000bfe0 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    bfe0:	4901      	ldr	r1, [pc, #4]	; (bfe8 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    bfe2:	7048      	strb	r0, [r1, #1]
    bfe4:	4770      	bx	lr
    bfe6:	0000      	.short	0x0000
    bfe8:	20001414 	.word	0x20001414

0000bfec <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    bfec:	4905      	ldr	r1, [pc, #20]	; (c004 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x18>)
    bfee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bff2:	fbb1 f1f2 	udiv	r1, r1, r2
    bff6:	b510      	push	{r4, lr}
    bff8:	f201 11df 	addw	r1, r1, #479	; 0x1df
    bffc:	f004 ff7d 	bl	10efa <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    c000:	b280      	uxth	r0, r0
    c002:	bd10      	pop	{r4, pc}
    c004:	000122f9 	.word	0x000122f9

0000c008 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    c008:	4801      	ldr	r0, [pc, #4]	; (c010 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    c00a:	7800      	ldrb	r0, [r0, #0]
    c00c:	4770      	bx	lr
    c00e:	0000      	.short	0x0000
    c010:	20001428 	.word	0x20001428

0000c014 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>:
    c014:	4a01      	ldr	r2, [pc, #4]	; (c01c <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ+0x8>)
    c016:	e9c2 0105 	strd	r0, r1, [r2, #20]
    c01a:	4770      	bx	lr
    c01c:	2000023c 	.word	0x2000023c

0000c020 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    c020:	4806      	ldr	r0, [pc, #24]	; (c03c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    c022:	4905      	ldr	r1, [pc, #20]	; (c038 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    c024:	6501      	str	r1, [r0, #80]	; 0x50
    c026:	4906      	ldr	r1, [pc, #24]	; (c040 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    c028:	6541      	str	r1, [r0, #84]	; 0x54
    c02a:	4807      	ldr	r0, [pc, #28]	; (c048 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    c02c:	4905      	ldr	r1, [pc, #20]	; (c044 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    c02e:	6501      	str	r1, [r0, #80]	; 0x50
    c030:	4906      	ldr	r1, [pc, #24]	; (c04c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    c032:	6541      	str	r1, [r0, #84]	; 0x54
    c034:	4770      	bx	lr
    c036:	0000      	.short	0x0000
    c038:	0000c169 	.word	0x0000c169
    c03c:	20000258 	.word	0x20000258
    c040:	0000c229 	.word	0x0000c229
    c044:	0000c46d 	.word	0x0000c46d
    c048:	200002bc 	.word	0x200002bc
    c04c:	0000c49d 	.word	0x0000c49d

0000c050 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    c050:	4806      	ldr	r0, [pc, #24]	; (c06c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    c052:	4905      	ldr	r1, [pc, #20]	; (c068 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    c054:	6581      	str	r1, [r0, #88]	; 0x58
    c056:	4906      	ldr	r1, [pc, #24]	; (c070 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    c058:	65c1      	str	r1, [r0, #92]	; 0x5c
    c05a:	4807      	ldr	r0, [pc, #28]	; (c078 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    c05c:	4905      	ldr	r1, [pc, #20]	; (c074 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    c05e:	6581      	str	r1, [r0, #88]	; 0x58
    c060:	4906      	ldr	r1, [pc, #24]	; (c07c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    c062:	6601      	str	r1, [r0, #96]	; 0x60
    c064:	4770      	bx	lr
    c066:	0000      	.short	0x0000
    c068:	0000c2b9 	.word	0x0000c2b9
    c06c:	20000258 	.word	0x20000258
    c070:	0000c3cd 	.word	0x0000c3cd
    c074:	0000c4cd 	.word	0x0000c4cd
    c078:	200002bc 	.word	0x200002bc
    c07c:	0000c4fd 	.word	0x0000c4fd
    c080:	4a1a      	ldr	r2, [pc, #104]	; (c0ec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x9c>)
    c082:	b510      	push	{r4, lr}
    c084:	6891      	ldr	r1, [r2, #8]
    c086:	880b      	ldrh	r3, [r1, #0]
    c088:	f8a1 31b4 	strh.w	r3, [r1, #436]	; 0x1b4
    c08c:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    c090:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    c094:	2801      	cmp	r0, #1
    c096:	bf18      	it	ne
    c098:	2802      	cmpne	r0, #2
    c09a:	d00b      	beq.n	c0b4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x64>
    c09c:	2804      	cmp	r0, #4
    c09e:	bf14      	ite	ne
    c0a0:	2808      	cmpne	r0, #8
    c0a2:	2003      	moveq	r0, #3
    c0a4:	d006      	beq.n	c0b4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x64>
    c0a6:	bf00      	nop
    c0a8:	f240 218f 	movw	r1, #655	; 0x28f
    c0ac:	f04f 0006 	mov.w	r0, #6
    c0b0:	f7f7 fdae 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0b4:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    c0b8:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    c0bc:	2801      	cmp	r0, #1
    c0be:	bf18      	it	ne
    c0c0:	2802      	cmpne	r0, #2
    c0c2:	d004      	beq.n	c0ce <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x7e>
    c0c4:	2804      	cmp	r0, #4
    c0c6:	bf14      	ite	ne
    c0c8:	2808      	cmpne	r0, #8
    c0ca:	2003      	moveq	r0, #3
    c0cc:	d1ec      	bne.n	c0a8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x58>
    c0ce:	f881 01b7 	strb.w	r0, [r1, #439]	; 0x1b7
    c0d2:	f04f 0001 	mov.w	r0, #1
    c0d6:	f881 01b0 	strb.w	r0, [r1, #432]	; 0x1b0
    c0da:	f04f 0000 	mov.w	r0, #0
    c0de:	f881 013e 	strb.w	r0, [r1, #318]	; 0x13e
    c0e2:	78d0      	ldrb	r0, [r2, #3]
    c0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c0e8:	f7f7 bb80 	b.w	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c0ec:	2000023c 	.word	0x2000023c
    c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0f4:	4c1b      	ldr	r4, [pc, #108]	; (c164 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x114>)
    c0f6:	2600      	movs	r6, #0
    c0f8:	2703      	movs	r7, #3
    c0fa:	f8d4 c008 	ldr.w	ip, [r4, #8]
    c0fe:	2501      	movs	r5, #1
    c100:	b1a0      	cbz	r0, c12c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xdc>
    c102:	6920      	ldr	r0, [r4, #16]
    c104:	78c0      	ldrb	r0, [r0, #3]
    c106:	f88c 00f2 	strb.w	r0, [ip, #242]	; 0xf2
    c10a:	fa05 f000 	lsl.w	r0, r5, r0
    c10e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c112:	d006      	beq.n	c122 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xd2>
    c114:	f88c 7084 	strb.w	r7, [ip, #132]	; 0x84
    c118:	f8ac 60ac 	strh.w	r6, [ip, #172]	; 0xac
    c11c:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    c120:	e01c      	b.n	c15c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x10c>
    c122:	f240 512f 	movw	r1, #1327	; 0x52f
    c126:	2036      	movs	r0, #54	; 0x36
    c128:	f7f7 fd72 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c12c:	2300      	movs	r3, #0
    c12e:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    c132:	4619      	mov	r1, r3
    c134:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    c138:	f004 f9c2 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c13c:	2800      	cmp	r0, #0
    c13e:	bf04      	itt	eq
    c140:	2001      	moveq	r0, #1
    c142:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    c146:	6920      	ldr	r0, [r4, #16]
    c148:	78c1      	ldrb	r1, [r0, #3]
    c14a:	68a0      	ldr	r0, [r4, #8]
    c14c:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    c150:	f880 7085 	strb.w	r7, [r0, #133]	; 0x85
    c154:	f8a0 60b2 	strh.w	r6, [r0, #178]	; 0xb2
    c158:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c15c:	2000      	movs	r0, #0
    c15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c162:	0000      	.short	0x0000
    c164:	2000023c 	.word	0x2000023c
    c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c16a:	4c2e      	ldr	r4, [pc, #184]	; (c224 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1d4>)
    c16c:	2300      	movs	r3, #0
    c16e:	4619      	mov	r1, r3
    c170:	68a0      	ldr	r0, [r4, #8]
    c172:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c176:	3078      	adds	r0, #120	; 0x78
    c178:	f004 f9a2 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c17c:	2800      	cmp	r0, #0
    c17e:	bf04      	itt	eq
    c180:	2001      	moveq	r0, #1
    c182:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    c184:	6920      	ldr	r0, [r4, #16]
    c186:	f004 fc41 	bl	10a0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    c18a:	2800      	cmp	r0, #0
    c18c:	d02f      	beq.n	c1ee <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x19e>
    c18e:	6920      	ldr	r0, [r4, #16]
    c190:	f004 fc2e 	bl	109f0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    c194:	4605      	mov	r5, r0
    c196:	6920      	ldr	r0, [r4, #16]
    c198:	f004 fc2e 	bl	109f8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    c19c:	4606      	mov	r6, r0
    c19e:	6920      	ldr	r0, [r4, #16]
    c1a0:	f004 fc24 	bl	109ec <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    c1a4:	4607      	mov	r7, r0
    c1a6:	6920      	ldr	r0, [r4, #16]
    c1a8:	f004 fc24 	bl	109f4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    c1ac:	4601      	mov	r1, r0
    c1ae:	9500      	str	r5, [sp, #0]
    c1b0:	68a0      	ldr	r0, [r4, #8]
    c1b2:	4633      	mov	r3, r6
    c1b4:	463a      	mov	r2, r7
    c1b6:	3028      	adds	r0, #40	; 0x28
    c1b8:	f004 feaa 	bl	10f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    c1bc:	68a1      	ldr	r1, [r4, #8]
    c1be:	2501      	movs	r5, #1
    c1c0:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    c1c4:	281c      	cmp	r0, #28
    c1c6:	bf16      	itet	ne
    c1c8:	f891 005c 	ldrbne.w	r0, [r1, #92]	; 0x5c
    c1cc:	f881 505c 	strbeq.w	r5, [r1, #92]	; 0x5c
    c1d0:	2801      	cmpne	r0, #1
    c1d2:	d007      	beq.n	c1e4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x194>
    c1d4:	f891 0135 	ldrb.w	r0, [r1, #309]	; 0x135
    c1d8:	2800      	cmp	r0, #0
    c1da:	bf04      	itt	eq
    c1dc:	f891 0134 	ldrbeq.w	r0, [r1, #308]	; 0x134
    c1e0:	2800      	cmpeq	r0, #0
    c1e2:	d00a      	beq.n	c1fa <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1aa>
    c1e4:	f04f 001e 	mov.w	r0, #30
    c1e8:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    c1ec:	e011      	b.n	c212 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c2>
    c1ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c1f2:	f04f 0000 	mov.w	r0, #0
    c1f6:	f7ff bf7b 	b.w	c0f0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa0>
    c1fa:	201d      	movs	r0, #29
    c1fc:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    c200:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    c204:	f831 0b28 	ldrh.w	r0, [r1], #40
    c208:	f004 fe8a 	bl	10f20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    c20c:	78e0      	ldrb	r0, [r4, #3]
    c20e:	f7f7 faed 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c212:	68a0      	ldr	r0, [r4, #8]
    c214:	2100      	movs	r1, #0
    c216:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    c21a:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c21e:	4608      	mov	r0, r1
    c220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c222:	0000      	.short	0x0000
    c224:	2000023c 	.word	0x2000023c
    c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c22a:	4c22      	ldr	r4, [pc, #136]	; (c2b4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x264>)
    c22c:	2300      	movs	r3, #0
    c22e:	210a      	movs	r1, #10
    c230:	68a0      	ldr	r0, [r4, #8]
    c232:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c236:	3078      	adds	r0, #120	; 0x78
    c238:	f004 f942 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c23c:	2800      	cmp	r0, #0
    c23e:	bf04      	itt	eq
    c240:	2001      	moveq	r0, #1
    c242:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    c244:	6920      	ldr	r0, [r4, #16]
    c246:	f004 fbe1 	bl	10a0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    c24a:	b1c8      	cbz	r0, c280 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x230>
    c24c:	6920      	ldr	r0, [r4, #16]
    c24e:	f004 fbcf 	bl	109f0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    c252:	4605      	mov	r5, r0
    c254:	6920      	ldr	r0, [r4, #16]
    c256:	f004 fbcf 	bl	109f8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    c25a:	4606      	mov	r6, r0
    c25c:	6920      	ldr	r0, [r4, #16]
    c25e:	f004 fbc5 	bl	109ec <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    c262:	4607      	mov	r7, r0
    c264:	6920      	ldr	r0, [r4, #16]
    c266:	f004 fbc5 	bl	109f4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    c26a:	4601      	mov	r1, r0
    c26c:	9500      	str	r5, [sp, #0]
    c26e:	68a0      	ldr	r0, [r4, #8]
    c270:	4633      	mov	r3, r6
    c272:	463a      	mov	r2, r7
    c274:	3028      	adds	r0, #40	; 0x28
    c276:	f004 fe4b 	bl	10f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    c27a:	68a0      	ldr	r0, [r4, #8]
    c27c:	f004 fdad 	bl	10dda <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    c280:	68a1      	ldr	r1, [r4, #8]
    c282:	2000      	movs	r0, #0
    c284:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    c288:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c28c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    c290:	2801      	cmp	r0, #1
    c292:	bf04      	itt	eq
    c294:	2002      	moveq	r0, #2
    c296:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    c29a:	d008      	beq.n	c2ae <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x25e>
    c29c:	8808      	ldrh	r0, [r1, #0]
    c29e:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    c2a2:	3128      	adds	r1, #40	; 0x28
    c2a4:	f004 fd5e 	bl	10d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    c2a8:	78e0      	ldrb	r0, [r4, #3]
    c2aa:	f7f7 fa9f 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c2ae:	2000      	movs	r0, #0
    c2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2b2:	0000      	.short	0x0000
    c2b4:	2000023c 	.word	0x2000023c
    c2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2ba:	4c43      	ldr	r4, [pc, #268]	; (c3c8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x378>)
    c2bc:	2500      	movs	r5, #0
    c2be:	b087      	sub	sp, #28
    c2c0:	68a0      	ldr	r0, [r4, #8]
    c2c2:	462b      	mov	r3, r5
    c2c4:	4629      	mov	r1, r5
    c2c6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c2ca:	3078      	adds	r0, #120	; 0x78
    c2cc:	f004 f8f8 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c2d0:	2800      	cmp	r0, #0
    c2d2:	bf02      	ittt	eq
    c2d4:	2001      	moveq	r0, #1
    c2d6:	b007      	addeq	sp, #28
    c2d8:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    c2da:	68a0      	ldr	r0, [r4, #8]
    c2dc:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c2e0:	2823      	cmp	r0, #35	; 0x23
    c2e2:	bf11      	iteee	ne
    c2e4:	2824      	cmpne	r0, #36	; 0x24
    c2e6:	2020      	moveq	r0, #32
    c2e8:	b007      	addeq	sp, #28
    c2ea:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    c2ec:	4668      	mov	r0, sp
    c2ee:	f7f8 fbbf 	bl	4a70 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    c2f2:	2800      	cmp	r0, #0
    c2f4:	bf08      	it	eq
    c2f6:	2100      	moveq	r1, #0
    c2f8:	d004      	beq.n	c304 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2b4>
    c2fa:	9800      	ldr	r0, [sp, #0]
    c2fc:	a901      	add	r1, sp, #4
    c2fe:	78c0      	ldrb	r0, [r0, #3]
    c300:	f88d 0004 	strb.w	r0, [sp, #4]
    c304:	68a0      	ldr	r0, [r4, #8]
    c306:	ab04      	add	r3, sp, #16
    c308:	2216      	movs	r2, #22
    c30a:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c30e:	f004 f9b3 	bl	10678 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    c312:	2700      	movs	r7, #0
    c314:	2601      	movs	r6, #1
    c316:	b188      	cbz	r0, c33c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2ec>
    c318:	68a0      	ldr	r0, [r4, #8]
    c31a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    c31e:	2116      	movs	r1, #22
    c320:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    c324:	f880 1121 	strb.w	r1, [r0, #289]	; 0x121
    c328:	2119      	movs	r1, #25
    c32a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c32e:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c332:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c336:	b007      	add	sp, #28
    c338:	2000      	movs	r0, #0
    c33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c33c:	6920      	ldr	r0, [r4, #16]
    c33e:	f004 fb80 	bl	10a42 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    c342:	b178      	cbz	r0, c364 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x314>
    c344:	6922      	ldr	r2, [r4, #16]
    c346:	68a1      	ldr	r1, [r4, #8]
    c348:	7910      	ldrb	r0, [r2, #4]
    c34a:	f000 0007 	and.w	r0, r0, #7
    c34e:	f881 005e 	strb.w	r0, [r1, #94]	; 0x5e
    c352:	7952      	ldrb	r2, [r2, #5]
    c354:	f002 0307 	and.w	r3, r2, #7
    c358:	f881 305f 	strb.w	r3, [r1, #95]	; 0x5f
    c35c:	f891 213f 	ldrb.w	r2, [r1, #319]	; 0x13f
    c360:	b12a      	cbz	r2, c36e <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x31e>
    c362:	e026      	b.n	c3b2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x362>
    c364:	2000      	movs	r0, #0
    c366:	f7ff fec3 	bl	c0f0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa0>
    c36a:	4605      	mov	r5, r0
    c36c:	e029      	b.n	c3c2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x372>
    c36e:	f891 213e 	ldrb.w	r2, [r1, #318]	; 0x13e
    c372:	2a01      	cmp	r2, #1
    c374:	d01d      	beq.n	c3b2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x362>
    c376:	f891 c067 	ldrb.w	ip, [r1, #103]	; 0x67
    c37a:	f101 0266 	add.w	r2, r1, #102	; 0x66
    c37e:	4584      	cmp	ip, r0
    c380:	bf01      	itttt	eq
    c382:	7810      	ldrbeq	r0, [r2, #0]
    c384:	4298      	cmpeq	r0, r3
    c386:	2002      	moveq	r0, #2
    c388:	f881 013e 	strbeq.w	r0, [r1, #318]	; 0x13e
    c38c:	d011      	beq.n	c3b2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x362>
    c38e:	880a      	ldrh	r2, [r1, #0]
    c390:	f8a1 21ac 	strh.w	r2, [r1, #428]	; 0x1ac
    c394:	f891 205e 	ldrb.w	r2, [r1, #94]	; 0x5e
    c398:	f501 70c4 	add.w	r0, r1, #392	; 0x188
    c39c:	f881 21ae 	strb.w	r2, [r1, #430]	; 0x1ae
    c3a0:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    c3a4:	f880 1027 	strb.w	r1, [r0, #39]	; 0x27
    c3a8:	f880 6022 	strb.w	r6, [r0, #34]	; 0x22
    c3ac:	78e0      	ldrb	r0, [r4, #3]
    c3ae:	f7f7 fa1d 	bl	37ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c3b2:	68a0      	ldr	r0, [r4, #8]
    c3b4:	2121      	movs	r1, #33	; 0x21
    c3b6:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c3ba:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c3be:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c3c2:	b007      	add	sp, #28
    c3c4:	4628      	mov	r0, r5
    c3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3c8:	2000023c 	.word	0x2000023c
    c3cc:	b538      	push	{r3, r4, r5, lr}
    c3ce:	4c26      	ldr	r4, [pc, #152]	; (c468 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x418>)
    c3d0:	68a0      	ldr	r0, [r4, #8]
    c3d2:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c3d6:	281f      	cmp	r0, #31
    c3d8:	bf1c      	itt	ne
    c3da:	2001      	movne	r0, #1
    c3dc:	bd38      	popne	{r3, r4, r5, pc}
    c3de:	6920      	ldr	r0, [r4, #16]
    c3e0:	f004 fb39 	bl	10a56 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    c3e4:	2800      	cmp	r0, #0
    c3e6:	d036      	beq.n	c456 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x406>
    c3e8:	6920      	ldr	r0, [r4, #16]
    c3ea:	68a2      	ldr	r2, [r4, #8]
    c3ec:	7901      	ldrb	r1, [r0, #4]
    c3ee:	7940      	ldrb	r0, [r0, #5]
    c3f0:	f001 0107 	and.w	r1, r1, #7
    c3f4:	f361 0507 	bfi	r5, r1, #0, #8
    c3f8:	4629      	mov	r1, r5
    c3fa:	f000 0007 	and.w	r0, r0, #7
    c3fe:	f360 210f 	bfi	r1, r0, #8, #8
    c402:	2001      	movs	r0, #1
    c404:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    c408:	2500      	movs	r5, #0
    c40a:	f8a2 50ac 	strh.w	r5, [r2, #172]	; 0xac
    c40e:	2023      	movs	r0, #35	; 0x23
    c410:	f882 0084 	strb.w	r0, [r2, #132]	; 0x84
    c414:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    c418:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
    c41c:	f8ad 2000 	strh.w	r2, [sp]
    c420:	f004 f946 	bl	106b0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    c424:	f89d 2000 	ldrb.w	r2, [sp]
    c428:	b2c1      	uxtb	r1, r0
    c42a:	428a      	cmp	r2, r1
    c42c:	bf07      	ittee	eq
    c42e:	68a1      	ldreq	r1, [r4, #8]
    c430:	f881 5126 	strbeq.w	r5, [r1, #294]	; 0x126
    c434:	68a2      	ldrne	r2, [r4, #8]
    c436:	f882 1126 	strbne.w	r1, [r2, #294]	; 0x126
    c43a:	f89d 1001 	ldrb.w	r1, [sp, #1]
    c43e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c442:	4281      	cmp	r1, r0
    c444:	bf19      	ittee	ne
    c446:	68a1      	ldrne	r1, [r4, #8]
    c448:	f881 0127 	strbne.w	r0, [r1, #295]	; 0x127
    c44c:	68a0      	ldreq	r0, [r4, #8]
    c44e:	f880 5127 	strbeq.w	r5, [r0, #295]	; 0x127
    c452:	2000      	movs	r0, #0
    c454:	bd38      	pop	{r3, r4, r5, pc}
    c456:	2001      	movs	r0, #1
    c458:	f7ff fe4a 	bl	c0f0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xa0>
    c45c:	4604      	mov	r4, r0
    c45e:	201e      	movs	r0, #30
    c460:	f7ff fe0e 	bl	c080 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c464:	4620      	mov	r0, r4
    c466:	bd38      	pop	{r3, r4, r5, pc}
    c468:	2000023c 	.word	0x2000023c
    c46c:	b510      	push	{r4, lr}
    c46e:	4c0a      	ldr	r4, [pc, #40]	; (c498 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x448>)
    c470:	2300      	movs	r3, #0
    c472:	4619      	mov	r1, r3
    c474:	68a0      	ldr	r0, [r4, #8]
    c476:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c47a:	3078      	adds	r0, #120	; 0x78
    c47c:	f004 f820 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c480:	b120      	cbz	r0, c48c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x43c>
    c482:	68a1      	ldr	r1, [r4, #8]
    c484:	201c      	movs	r0, #28
    c486:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c48a:	bd10      	pop	{r4, pc}
    c48c:	f44f 61c7 	mov.w	r1, #1592	; 0x638
    c490:	2036      	movs	r0, #54	; 0x36
    c492:	f7f7 fbbd 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c496:	0000      	.short	0x0000
    c498:	2000023c 	.word	0x2000023c
    c49c:	b510      	push	{r4, lr}
    c49e:	4c0a      	ldr	r4, [pc, #40]	; (c4c8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x478>)
    c4a0:	2300      	movs	r3, #0
    c4a2:	4619      	mov	r1, r3
    c4a4:	68a0      	ldr	r0, [r4, #8]
    c4a6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c4aa:	3078      	adds	r0, #120	; 0x78
    c4ac:	f004 f808 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c4b0:	b120      	cbz	r0, c4bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x46c>
    c4b2:	68a1      	ldr	r1, [r4, #8]
    c4b4:	2000      	movs	r0, #0
    c4b6:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    c4ba:	bd10      	pop	{r4, pc}
    c4bc:	f240 613f 	movw	r1, #1599	; 0x63f
    c4c0:	2036      	movs	r0, #54	; 0x36
    c4c2:	f7f7 fba5 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4c6:	0000      	.short	0x0000
    c4c8:	2000023c 	.word	0x2000023c
    c4cc:	b510      	push	{r4, lr}
    c4ce:	4c0a      	ldr	r4, [pc, #40]	; (c4f8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4a8>)
    c4d0:	2300      	movs	r3, #0
    c4d2:	4619      	mov	r1, r3
    c4d4:	68a0      	ldr	r0, [r4, #8]
    c4d6:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c4da:	3078      	adds	r0, #120	; 0x78
    c4dc:	f003 fff0 	bl	104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c4e0:	b120      	cbz	r0, c4ec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x49c>
    c4e2:	68a1      	ldr	r1, [r4, #8]
    c4e4:	201f      	movs	r0, #31
    c4e6:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c4ea:	bd10      	pop	{r4, pc}
    c4ec:	f44f 61c9 	mov.w	r1, #1608	; 0x648
    c4f0:	2036      	movs	r0, #54	; 0x36
    c4f2:	f7f7 fb8d 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4f6:	0000      	.short	0x0000
    c4f8:	2000023c 	.word	0x2000023c
    c4fc:	b570      	push	{r4, r5, r6, lr}
    c4fe:	4c1f      	ldr	r4, [pc, #124]	; (c57c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x52c>)
    c500:	68a0      	ldr	r0, [r4, #8]
    c502:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    c506:	2900      	cmp	r1, #0
    c508:	bf05      	ittet	eq
    c50a:	f890 1127 	ldrbeq.w	r1, [r0, #295]	; 0x127
    c50e:	2900      	cmpeq	r1, #0
    c510:	2100      	movne	r1, #0
    c512:	2101      	moveq	r1, #1
    c514:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    c518:	f04f 0224 	mov.w	r2, #36	; 0x24
    c51c:	f04f 0500 	mov.w	r5, #0
    c520:	2b21      	cmp	r3, #33	; 0x21
    c522:	d008      	beq.n	c536 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4e6>
    c524:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    c528:	2b23      	cmp	r3, #35	; 0x23
    c52a:	d019      	beq.n	c560 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x510>
    c52c:	f240 6174 	movw	r1, #1652	; 0x674
    c530:	2036      	movs	r0, #54	; 0x36
    c532:	f7f7 fb6d 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c536:	2900      	cmp	r1, #0
    c538:	bf08      	it	eq
    c53a:	f880 2085 	strbeq.w	r2, [r0, #133]	; 0x85
    c53e:	d00b      	beq.n	c558 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x508>
    c540:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    c544:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    c548:	2801      	cmp	r0, #1
    c54a:	bf04      	itt	eq
    c54c:	2000      	moveq	r0, #0
    c54e:	f7ff fd97 	bleq	c080 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c552:	68a0      	ldr	r0, [r4, #8]
    c554:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    c558:	68a0      	ldr	r0, [r4, #8]
    c55a:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c55e:	bd70      	pop	{r4, r5, r6, pc}
    c560:	2900      	cmp	r1, #0
    c562:	bf08      	it	eq
    c564:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    c568:	d004      	beq.n	c574 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x524>
    c56a:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    c56e:	2000      	movs	r0, #0
    c570:	f7ff fd86 	bl	c080 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c574:	68a0      	ldr	r0, [r4, #8]
    c576:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    c57a:	bd70      	pop	{r4, r5, r6, pc}
    c57c:	2000023c 	.word	0x2000023c

0000c580 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    c580:	b510      	push	{r4, lr}
    c582:	4905      	ldr	r1, [pc, #20]	; (c598 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>)
    c584:	4604      	mov	r4, r0
    c586:	2001      	movs	r0, #1
    c588:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c58c:	f7fb f9de 	bl	794c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    c590:	7020      	strb	r0, [r4, #0]
    c592:	2000      	movs	r0, #0
    c594:	bd10      	pop	{r4, pc}
    c596:	0000      	.short	0x0000
    c598:	20001004 	.word	0x20001004

0000c59c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    c59c:	4904      	ldr	r1, [pc, #16]	; (c5b0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x14>)
    c59e:	f8b1 2242 	ldrh.w	r2, [r1, #578]	; 0x242
    c5a2:	8002      	strh	r2, [r0, #0]
    c5a4:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
    c5a8:	7081      	strb	r1, [r0, #2]
    c5aa:	2000      	movs	r0, #0
    c5ac:	4770      	bx	lr
    c5ae:	0000      	.short	0x0000
    c5b0:	20001004 	.word	0x20001004

0000c5b4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    c5b4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c5b8:	460d      	mov	r5, r1
    c5ba:	4606      	mov	r6, r0
    c5bc:	f005 ff45 	bl	1244a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    c5c0:	b1e0      	cbz	r0, c5fc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    c5c2:	8830      	ldrh	r0, [r6, #0]
    c5c4:	4669      	mov	r1, sp
    c5c6:	f003 ff30 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c5ca:	2800      	cmp	r0, #0
    c5cc:	d114      	bne.n	c5f8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x44>
    c5ce:	f8dd 4004 	ldr.w	r4, [sp, #4]
    c5d2:	2700      	movs	r7, #0
    c5d4:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    c5d8:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    c5dc:	f005 fda7 	bl	1212e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x72>
    c5e0:	70a8      	strb	r0, [r5, #2]
    c5e2:	7860      	ldrb	r0, [r4, #1]
    c5e4:	f005 fda3 	bl	1212e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x72>
    c5e8:	70e8      	strb	r0, [r5, #3]
    c5ea:	78a0      	ldrb	r0, [r4, #2]
    c5ec:	3c66      	subs	r4, #102	; 0x66
    c5ee:	2800      	cmp	r0, #0
    c5f0:	d1f0      	bne.n	c5d4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    c5f2:	8830      	ldrh	r0, [r6, #0]
    c5f4:	8028      	strh	r0, [r5, #0]
    c5f6:	2000      	movs	r0, #0
    c5f8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c5fc:	2001      	movs	r0, #1
    c5fe:	e7fb      	b.n	c5f8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x44>

0000c600 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    c600:	b51c      	push	{r2, r3, r4, lr}
    c602:	8800      	ldrh	r0, [r0, #0]
    c604:	4669      	mov	r1, sp
    c606:	f003 ff10 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c60a:	2800      	cmp	r0, #0
    c60c:	d10f      	bne.n	c62e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    c60e:	f89d 0000 	ldrb.w	r0, [sp]
    c612:	2401      	movs	r4, #1
    c614:	b160      	cbz	r0, c630 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    c616:	4811      	ldr	r0, [pc, #68]	; (c65c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x5c>)
    c618:	7800      	ldrb	r0, [r0, #0]
    c61a:	b1e8      	cbz	r0, c658 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x58>
    c61c:	9801      	ldr	r0, [sp, #4]
    c61e:	f005 ff08 	bl	12432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x376>
    c622:	b190      	cbz	r0, c64a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c624:	9801      	ldr	r0, [sp, #4]
    c626:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
    c62a:	b180      	cbz	r0, c64e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4e>
    c62c:	203a      	movs	r0, #58	; 0x3a
    c62e:	bd1c      	pop	{r2, r3, r4, pc}
    c630:	9801      	ldr	r0, [sp, #4]
    c632:	f005 fef2 	bl	1241a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    c636:	b140      	cbz	r0, c64a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c638:	9801      	ldr	r0, [sp, #4]
    c63a:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    c63e:	2800      	cmp	r0, #0
    c640:	d1f4      	bne.n	c62c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    c642:	9801      	ldr	r0, [sp, #4]
    c644:	f880 4159 	strb.w	r4, [r0, #345]	; 0x159
    c648:	e004      	b.n	c654 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x54>
    c64a:	2002      	movs	r0, #2
    c64c:	bd1c      	pop	{r2, r3, r4, pc}
    c64e:	9801      	ldr	r0, [sp, #4]
    c650:	f880 41c5 	strb.w	r4, [r0, #453]	; 0x1c5
    c654:	2000      	movs	r0, #0
    c656:	bd1c      	pop	{r2, r3, r4, pc}
    c658:	2011      	movs	r0, #17
    c65a:	bd1c      	pop	{r2, r3, r4, pc}
    c65c:	20000320 	.word	0x20000320

0000c660 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    c660:	b510      	push	{r4, lr}
    c662:	4604      	mov	r4, r0
    c664:	f005 fecc 	bl	12400 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
    c668:	b130      	cbz	r0, c678 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    c66a:	4804      	ldr	r0, [pc, #16]	; (c67c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    c66c:	8941      	ldrh	r1, [r0, #10]
    c66e:	8021      	strh	r1, [r4, #0]
    c670:	8980      	ldrh	r0, [r0, #12]
    c672:	8060      	strh	r0, [r4, #2]
    c674:	2000      	movs	r0, #0
    c676:	bd10      	pop	{r4, pc}
    c678:	2001      	movs	r0, #1
    c67a:	bd10      	pop	{r4, pc}
    c67c:	20001488 	.word	0x20001488

0000c680 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    c680:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    c682:	4915      	ldr	r1, [pc, #84]	; (c6d8 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>)
    c684:	4605      	mov	r5, r0
    c686:	2001      	movs	r0, #1
    c688:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c68c:	4813      	ldr	r0, [pc, #76]	; (c6dc <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x5c>)
    c68e:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
    c692:	6020      	str	r0, [r4, #0]
    c694:	301f      	adds	r0, #31
    c696:	60a0      	str	r0, [r4, #8]
    c698:	f000 fc2c 	bl	cef4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    c69c:	f894 0020 	ldrb.w	r0, [r4, #32]
    c6a0:	7829      	ldrb	r1, [r5, #0]
    c6a2:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    c6a6:	221f      	movs	r2, #31
    c6a8:	1c68      	adds	r0, r5, #1
    c6aa:	f005 fd55 	bl	12158 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
    c6ae:	b120      	cbz	r0, c6ba <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x3a>
    c6b0:	f241 4105 	movw	r1, #5125	; 0x1405
    c6b4:	2039      	movs	r0, #57	; 0x39
    c6b6:	f7f7 faab 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6ba:	f894 0020 	ldrb.w	r0, [r4, #32]
    c6be:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    c6c2:	9001      	str	r0, [sp, #4]
    c6c4:	7828      	ldrb	r0, [r5, #0]
    c6c6:	f8ad 0002 	strh.w	r0, [sp, #2]
    c6ca:	2000      	movs	r0, #0
    c6cc:	f88d 0000 	strb.w	r0, [sp]
    c6d0:	4668      	mov	r0, sp
    c6d2:	f000 f921 	bl	c918 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    c6d6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    c6d8:	20001004 	.word	0x20001004
    c6dc:	200014ba 	.word	0x200014ba

0000c6e0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    c6e0:	b51c      	push	{r2, r3, r4, lr}
    c6e2:	4a0d      	ldr	r2, [pc, #52]	; (c718 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x38>)
    c6e4:	2101      	movs	r1, #1
    c6e6:	2400      	movs	r4, #0
    c6e8:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c6ec:	7800      	ldrb	r0, [r0, #0]
    c6ee:	f88d 0000 	strb.w	r0, [sp]
    c6f2:	f88d 1001 	strb.w	r1, [sp, #1]
    c6f6:	f88d 4002 	strb.w	r4, [sp, #2]
    c6fa:	f7fb f907 	bl	790c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    c6fe:	b118      	cbz	r0, c708 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x28>
    c700:	2080      	movs	r0, #128	; 0x80
    c702:	f8ad 0003 	strh.w	r0, [sp, #3]
    c706:	e001      	b.n	c70c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2c>
    c708:	f8ad 4003 	strh.w	r4, [sp, #3]
    c70c:	f88d 4005 	strb.w	r4, [sp, #5]
    c710:	4668      	mov	r0, sp
    c712:	f000 fb0f 	bl	cd34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    c716:	bd1c      	pop	{r2, r3, r4, pc}
    c718:	20001004 	.word	0x20001004

0000c71c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    c71c:	b510      	push	{r4, lr}
    c71e:	4a39      	ldr	r2, [pc, #228]	; (c804 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe8>)
    c720:	b08a      	sub	sp, #40	; 0x28
    c722:	2101      	movs	r1, #1
    c724:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c728:	8841      	ldrh	r1, [r0, #2]
    c72a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    c72e:	d902      	bls.n	c736 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    c730:	2012      	movs	r0, #18
    c732:	b00a      	add	sp, #40	; 0x28
    c734:	bd10      	pop	{r4, pc}
    c736:	2400      	movs	r4, #0
    c738:	f88d 4004 	strb.w	r4, [sp, #4]
    c73c:	7902      	ldrb	r2, [r0, #4]
    c73e:	9400      	str	r4, [sp, #0]
    c740:	f89d 1000 	ldrb.w	r1, [sp]
    c744:	2a05      	cmp	r2, #5
    c746:	f041 0110 	orr.w	r1, r1, #16
    c74a:	f88d 1000 	strb.w	r1, [sp]
    c74e:	d253      	bcs.n	c7f8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xdc>
    c750:	e8df f002 	tbb	[pc, r2]
    c754:	11050803 	.word	0x11050803
    c758:	000b      	.short	0x000b
    c75a:	f041 0101 	orr.w	r1, r1, #1
    c75e:	f041 0102 	orr.w	r1, r1, #2
    c762:	e006      	b.n	c772 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    c764:	f041 0109 	orr.w	r1, r1, #9
    c768:	e001      	b.n	c76e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    c76a:	f041 0101 	orr.w	r1, r1, #1
    c76e:	f041 0104 	orr.w	r1, r1, #4
    c772:	f88d 1000 	strb.w	r1, [sp]
    c776:	f8bd 1000 	ldrh.w	r1, [sp]
    c77a:	9100      	str	r1, [sp, #0]
    c77c:	f8bd 1000 	ldrh.w	r1, [sp]
    c780:	f8ad 1005 	strh.w	r1, [sp, #5]
    c784:	8802      	ldrh	r2, [r0, #0]
    c786:	f8dd 1006 	ldr.w	r1, [sp, #6]
    c78a:	f362 211f 	bfi	r1, r2, #8, #24
    c78e:	f8cd 1006 	str.w	r1, [sp, #6]
    c792:	8842      	ldrh	r2, [r0, #2]
    c794:	f8dd 1009 	ldr.w	r1, [sp, #9]
    c798:	f362 211f 	bfi	r1, r2, #8, #24
    c79c:	f8cd 1009 	str.w	r1, [sp, #9]
    c7a0:	7b41      	ldrb	r1, [r0, #13]
    c7a2:	f88d 100d 	strb.w	r1, [sp, #13]
    c7a6:	7941      	ldrb	r1, [r0, #5]
    c7a8:	f88d 100e 	strb.w	r1, [sp, #14]
    c7ac:	7981      	ldrb	r1, [r0, #6]
    c7ae:	f88d 100f 	strb.w	r1, [sp, #15]
    c7b2:	f8d0 1007 	ldr.w	r1, [r0, #7]
    c7b6:	9104      	str	r1, [sp, #16]
    c7b8:	f8b0 100b 	ldrh.w	r1, [r0, #11]
    c7bc:	f8ad 1014 	strh.w	r1, [sp, #20]
    c7c0:	7b80      	ldrb	r0, [r0, #14]
    c7c2:	f88d 0016 	strb.w	r0, [sp, #22]
    c7c6:	207f      	movs	r0, #127	; 0x7f
    c7c8:	f88d 0017 	strb.w	r0, [sp, #23]
    c7cc:	2001      	movs	r0, #1
    c7ce:	f88d 0018 	strb.w	r0, [sp, #24]
    c7d2:	f88d 4019 	strb.w	r4, [sp, #25]
    c7d6:	f88d 001a 	strb.w	r0, [sp, #26]
    c7da:	f88d 401b 	strb.w	r4, [sp, #27]
    c7de:	f7fb f903 	bl	79e8 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    c7e2:	f88d 001c 	strb.w	r0, [sp, #28]
    c7e6:	f88d 401d 	strb.w	r4, [sp, #29]
    c7ea:	f88d 401e 	strb.w	r4, [sp, #30]
    c7ee:	a908      	add	r1, sp, #32
    c7f0:	a801      	add	r0, sp, #4
    c7f2:	f005 fa8d 	bl	11d10 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    c7f6:	e79c      	b.n	c732 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    c7f8:	f241 0159 	movw	r1, #4185	; 0x1059
    c7fc:	2039      	movs	r0, #57	; 0x39
    c7fe:	f7f7 fa07 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c802:	0000      	.short	0x0000
    c804:	20001004 	.word	0x20001004

0000c808 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    c808:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c80a:	4604      	mov	r4, r0
    c80c:	f005 fe1d 	bl	1244a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    c810:	b318      	cbz	r0, c85a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    c812:	2000      	movs	r0, #0
    c814:	f88d 0004 	strb.w	r0, [sp, #4]
    c818:	f88d 0008 	strb.w	r0, [sp, #8]
    c81c:	a802      	add	r0, sp, #8
    c81e:	9000      	str	r0, [sp, #0]
    c820:	78a2      	ldrb	r2, [r4, #2]
    c822:	7861      	ldrb	r1, [r4, #1]
    c824:	7820      	ldrb	r0, [r4, #0]
    c826:	ab01      	add	r3, sp, #4
    c828:	f005 febe 	bl	125a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ec>
    c82c:	2800      	cmp	r0, #0
    c82e:	d113      	bne.n	c858 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x50>
    c830:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c834:	f005 fd5e 	bl	122f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
    c838:	b188      	cbz	r0, c85e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    c83a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c83e:	f005 fd59 	bl	122f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
    c842:	b160      	cbz	r0, c85e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    c844:	4807      	ldr	r0, [pc, #28]	; (c864 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    c846:	f89d 1004 	ldrb.w	r1, [sp, #4]
    c84a:	f880 1252 	strb.w	r1, [r0, #594]	; 0x252
    c84e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    c852:	f880 1253 	strb.w	r1, [r0, #595]	; 0x253
    c856:	2000      	movs	r0, #0
    c858:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c85a:	2001      	movs	r0, #1
    c85c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c85e:	2011      	movs	r0, #17
    c860:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c862:	0000      	.short	0x0000
    c864:	20001004 	.word	0x20001004

0000c868 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    c868:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    c86a:	4916      	ldr	r1, [pc, #88]	; (c8c4 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x5c>)
    c86c:	4605      	mov	r5, r0
    c86e:	2001      	movs	r0, #1
    c870:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c874:	4814      	ldr	r0, [pc, #80]	; (c8c8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x60>)
    c876:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
    c87a:	6120      	str	r0, [r4, #16]
    c87c:	301f      	adds	r0, #31
    c87e:	61a0      	str	r0, [r4, #24]
    c880:	f000 fb48 	bl	cf14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    c884:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c888:	7829      	ldrb	r1, [r5, #0]
    c88a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    c88e:	221f      	movs	r2, #31
    c890:	1c68      	adds	r0, r5, #1
    c892:	3310      	adds	r3, #16
    c894:	f005 fc60 	bl	12158 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
    c898:	b120      	cbz	r0, c8a4 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x3c>
    c89a:	f241 2188 	movw	r1, #4744	; 0x1288
    c89e:	2039      	movs	r0, #57	; 0x39
    c8a0:	f7f7 f9b6 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8a4:	2000      	movs	r0, #0
    c8a6:	f88d 0000 	strb.w	r0, [sp]
    c8aa:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c8ae:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    c8b2:	6900      	ldr	r0, [r0, #16]
    c8b4:	9001      	str	r0, [sp, #4]
    c8b6:	7828      	ldrb	r0, [r5, #0]
    c8b8:	f8ad 0002 	strh.w	r0, [sp, #2]
    c8bc:	4668      	mov	r0, sp
    c8be:	f000 f857 	bl	c970 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    c8c2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    c8c4:	20001004 	.word	0x20001004
    c8c8:	200014f8 	.word	0x200014f8

0000c8cc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    c8cc:	7801      	ldrb	r1, [r0, #0]
    c8ce:	b181      	cbz	r1, c8f2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c8d0:	7841      	ldrb	r1, [r0, #1]
    c8d2:	b171      	cbz	r1, c8f2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c8d4:	8841      	ldrh	r1, [r0, #2]
    c8d6:	291b      	cmp	r1, #27
    c8d8:	d30b      	bcc.n	c8f2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c8da:	8881      	ldrh	r1, [r0, #4]
    c8dc:	291b      	cmp	r1, #27
    c8de:	d308      	bcc.n	c8f2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    c8e0:	4905      	ldr	r1, [pc, #20]	; (c8f8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x2c>)
    c8e2:	6802      	ldr	r2, [r0, #0]
    c8e4:	f8c1 2240 	str.w	r2, [r1, #576]	; 0x240
    c8e8:	8880      	ldrh	r0, [r0, #4]
    c8ea:	f8a1 0244 	strh.w	r0, [r1, #580]	; 0x244
    c8ee:	2000      	movs	r0, #0
    c8f0:	4770      	bx	lr
    c8f2:	2012      	movs	r0, #18
    c8f4:	4770      	bx	lr
    c8f6:	0000      	.short	0x0000
    c8f8:	20001004 	.word	0x20001004

0000c8fc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    c8fc:	6800      	ldr	r0, [r0, #0]
    c8fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    c902:	d304      	bcc.n	c90e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    c904:	4903      	ldr	r1, [pc, #12]	; (c914 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    c906:	f8c1 0248 	str.w	r0, [r1, #584]	; 0x248
    c90a:	2000      	movs	r0, #0
    c90c:	4770      	bx	lr
    c90e:	2012      	movs	r0, #18
    c910:	4770      	bx	lr
    c912:	0000      	.short	0x0000
    c914:	20001004 	.word	0x20001004

0000c918 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    c918:	b570      	push	{r4, r5, r6, lr}
    c91a:	4d14      	ldr	r5, [pc, #80]	; (c96c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>)
    c91c:	4604      	mov	r4, r0
    c91e:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c922:	b920      	cbnz	r0, c92e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    c924:	8860      	ldrh	r0, [r4, #2]
    c926:	b110      	cbz	r0, c92e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    c928:	f7fa ffc4 	bl	78b4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
    c92c:	b198      	cbz	r0, c956 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x3e>
    c92e:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    c932:	8861      	ldrh	r1, [r4, #2]
    c934:	7820      	ldrb	r0, [r4, #0]
    c936:	f005 fc24 	bl	12182 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc6>
    c93a:	2800      	cmp	r0, #0
    c93c:	d10c      	bne.n	c958 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x40>
    c93e:	f7fa fd21 	bl	7384 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    c942:	4601      	mov	r1, r0
    c944:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c948:	2800      	cmp	r0, #0
    c94a:	8860      	ldrh	r0, [r4, #2]
    c94c:	d005      	beq.n	c95a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    c94e:	4288      	cmp	r0, r1
    c950:	d907      	bls.n	c962 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    c952:	4608      	mov	r0, r1
    c954:	e005      	b.n	c962 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    c956:	2012      	movs	r0, #18
    c958:	bd70      	pop	{r4, r5, r6, pc}
    c95a:	4288      	cmp	r0, r1
    c95c:	d901      	bls.n	c962 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    c95e:	2007      	movs	r0, #7
    c960:	bd70      	pop	{r4, r5, r6, pc}
    c962:	6861      	ldr	r1, [r4, #4]
    c964:	f7fb f852 	bl	7a0c <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    c968:	2000      	movs	r0, #0
    c96a:	bd70      	pop	{r4, r5, r6, pc}
    c96c:	20001004 	.word	0x20001004

0000c970 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    c970:	b570      	push	{r4, r5, r6, lr}
    c972:	4d11      	ldr	r5, [pc, #68]	; (c9b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x48>)
    c974:	4604      	mov	r4, r0
    c976:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c97a:	b920      	cbnz	r0, c986 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    c97c:	8860      	ldrh	r0, [r4, #2]
    c97e:	b110      	cbz	r0, c986 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    c980:	f7fa ffd4 	bl	792c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    c984:	b178      	cbz	r0, c9a6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x36>
    c986:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    c98a:	8861      	ldrh	r1, [r4, #2]
    c98c:	7820      	ldrb	r0, [r4, #0]
    c98e:	f005 fbf8 	bl	12182 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc6>
    c992:	2800      	cmp	r0, #0
    c994:	d108      	bne.n	c9a8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x38>
    c996:	8866      	ldrh	r6, [r4, #2]
    c998:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    c99c:	b130      	cbz	r0, c9ac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    c99e:	f7fa ffc5 	bl	792c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    c9a2:	b110      	cbz	r0, c9aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3a>
    c9a4:	e002      	b.n	c9ac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    c9a6:	2012      	movs	r0, #18
    c9a8:	bd70      	pop	{r4, r5, r6, pc}
    c9aa:	2600      	movs	r6, #0
    c9ac:	4630      	mov	r0, r6
    c9ae:	6861      	ldr	r1, [r4, #4]
    c9b0:	f7fb f83a 	bl	7a28 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    c9b4:	2000      	movs	r0, #0
    c9b6:	bd70      	pop	{r4, r5, r6, pc}
    c9b8:	20001004 	.word	0x20001004

0000c9bc <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    c9bc:	b510      	push	{r4, lr}
    c9be:	4604      	mov	r4, r0
    c9c0:	7800      	ldrb	r0, [r0, #0]
    c9c2:	07c0      	lsls	r0, r0, #31
    c9c4:	d004      	beq.n	c9d0 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    c9c6:	f001 f8cb 	bl	db60 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>
    c9ca:	b108      	cbz	r0, c9d0 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    c9cc:	200c      	movs	r0, #12
    c9ce:	bd10      	pop	{r4, pc}
    c9d0:	7820      	ldrb	r0, [r4, #0]
    c9d2:	4903      	ldr	r1, [pc, #12]	; (c9e0 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x24>)
    c9d4:	f000 0001 	and.w	r0, r0, #1
    c9d8:	7388      	strb	r0, [r1, #14]
    c9da:	2000      	movs	r0, #0
    c9dc:	bd10      	pop	{r4, pc}
    c9de:	0000      	.short	0x0000
    c9e0:	20001488 	.word	0x20001488

0000c9e4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    c9e4:	4a03      	ldr	r2, [pc, #12]	; (c9f4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    c9e6:	e9d2 1200 	ldrd	r1, r2, [r2]
    c9ea:	6001      	str	r1, [r0, #0]
    c9ec:	6042      	str	r2, [r0, #4]
    c9ee:	2000      	movs	r0, #0
    c9f0:	4770      	bx	lr
    c9f2:	0000      	.short	0x0000
    c9f4:	0000cf6c 	.word	0x0000cf6c

0000c9f8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    c9f8:	b510      	push	{r4, lr}
    c9fa:	2005      	movs	r0, #5
    c9fc:	f000 fb5c 	bl	d0b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ca00:	f7ff fb0e 	bl	c020 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    ca04:	f7fd f8dc 	bl	9bc0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    ca08:	4902      	ldr	r1, [pc, #8]	; (ca14 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x1c>)
    ca0a:	4801      	ldr	r0, [pc, #4]	; (ca10 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    ca0c:	6048      	str	r0, [r1, #4]
    ca0e:	bd10      	pop	{r4, pc}
    ca10:	0000cb61 	.word	0x0000cb61
    ca14:	20000320 	.word	0x20000320

0000ca18 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    ca18:	4901      	ldr	r1, [pc, #4]	; (ca20 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    ca1a:	7048      	strb	r0, [r1, #1]
    ca1c:	f000 b802 	b.w	ca24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    ca20:	20000320 	.word	0x20000320

0000ca24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    ca24:	b570      	push	{r4, r5, r6, lr}
    ca26:	f7f8 f8bf 	bl	4ba8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ca2a:	f7f9 f867 	bl	5afc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ca2e:	4c1d      	ldr	r4, [pc, #116]	; (caa4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>)
    ca30:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ca34:	2500      	movs	r5, #0
    ca36:	f8a4 024e 	strh.w	r0, [r4, #590]	; 0x24e
    ca3a:	f8a4 0250 	strh.w	r0, [r4, #592]	; 0x250
    ca3e:	f884 5258 	strb.w	r5, [r4, #600]	; 0x258
    ca42:	f8a4 525a 	strh.w	r5, [r4, #602]	; 0x25a
    ca46:	f884 523e 	strb.w	r5, [r4, #574]	; 0x23e
    ca4a:	f204 243e 	addw	r4, r4, #574	; 0x23e
    ca4e:	f000 fa51 	bl	cef4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    ca52:	f000 fa5f 	bl	cf14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    ca56:	a014      	add	r0, pc, #80	; (adr r0, caa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>)
    ca58:	7665      	strb	r5, [r4, #25]
    ca5a:	4e15      	ldr	r6, [pc, #84]	; (cab0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8c>)
    ca5c:	6801      	ldr	r1, [r0, #0]
    ca5e:	7900      	ldrb	r0, [r0, #4]
    ca60:	7035      	strb	r5, [r6, #0]
    ca62:	f8c6 1001 	str.w	r1, [r6, #1]
    ca66:	7170      	strb	r0, [r6, #5]
    ca68:	1c71      	adds	r1, r6, #1
    ca6a:	4630      	mov	r0, r6
    ca6c:	f7ff fad2 	bl	c014 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>
    ca70:	201b      	movs	r0, #27
    ca72:	80f0      	strh	r0, [r6, #6]
    ca74:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ca78:	8131      	strh	r1, [r6, #8]
    ca7a:	8170      	strh	r0, [r6, #10]
    ca7c:	81b1      	strh	r1, [r6, #12]
    ca7e:	7525      	strb	r5, [r4, #20]
    ca80:	7565      	strb	r5, [r4, #21]
    ca82:	73f5      	strb	r5, [r6, #15]
    ca84:	2103      	movs	r1, #3
    ca86:	70a1      	strb	r1, [r4, #2]
    ca88:	70e1      	strb	r1, [r4, #3]
    ca8a:	80a0      	strh	r0, [r4, #4]
    ca8c:	80e0      	strh	r0, [r4, #6]
    ca8e:	f640 60a6 	movw	r0, #3750	; 0xea6
    ca92:	f8c4 000a 	str.w	r0, [r4, #10]
    ca96:	4807      	ldr	r0, [pc, #28]	; (cab4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x90>)
    ca98:	73b5      	strb	r5, [r6, #14]
    ca9a:	7005      	strb	r5, [r0, #0]
    ca9c:	7625      	strb	r5, [r4, #24]
    ca9e:	73a5      	strb	r5, [r4, #14]
    caa0:	bd70      	pop	{r4, r5, r6, pc}
    caa2:	0000      	.short	0x0000
    caa4:	20001004 	.word	0x20001004
    caa8:	ffffffff 	.word	0xffffffff
    caac:	0000001f 	.word	0x0000001f
    cab0:	20001488 	.word	0x20001488
    cab4:	20000328 	.word	0x20000328

0000cab8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    cab8:	b570      	push	{r4, r5, r6, lr}
    caba:	b150      	cbz	r0, cad2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a>
    cabc:	4d16      	ldr	r5, [pc, #88]	; (cb18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x60>)
    cabe:	2400      	movs	r4, #0
    cac0:	7829      	ldrb	r1, [r5, #0]
    cac2:	b159      	cbz	r1, cadc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    cac4:	7044      	strb	r4, [r0, #1]
    cac6:	2103      	movs	r1, #3
    cac8:	7001      	strb	r1, [r0, #0]
    caca:	2101      	movs	r1, #1
    cacc:	7101      	strb	r1, [r0, #4]
    cace:	702c      	strb	r4, [r5, #0]
    cad0:	e01c      	b.n	cb0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    cad2:	f241 6192 	movw	r1, #5778	; 0x1692
    cad6:	2039      	movs	r0, #57	; 0x39
    cad8:	f7f7 f89a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cadc:	78ab      	ldrb	r3, [r5, #2]
    cade:	2105      	movs	r1, #5
    cae0:	f44f 728e 	mov.w	r2, #284	; 0x11c
    cae4:	b13b      	cbz	r3, caf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    cae6:	7044      	strb	r4, [r0, #1]
    cae8:	f800 1b04 	strb.w	r1, [r0], #4
    caec:	1d29      	adds	r1, r5, #4
    caee:	f7f6 ff03 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    caf2:	70ac      	strb	r4, [r5, #2]
    caf4:	e00a      	b.n	cb0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    caf6:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    cafa:	b14b      	cbz	r3, cb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    cafc:	7044      	strb	r4, [r0, #1]
    cafe:	f800 1b04 	strb.w	r1, [r0], #4
    cb02:	4906      	ldr	r1, [pc, #24]	; (cb1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>)
    cb04:	f7f6 fef8 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb08:	f885 4120 	strb.w	r4, [r5, #288]	; 0x120
    cb0c:	2001      	movs	r0, #1
    cb0e:	bd70      	pop	{r4, r5, r6, pc}
    cb10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb14:	f7f9 bf78 	b.w	6a08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    cb18:	20001004 	.word	0x20001004
    cb1c:	20001126 	.word	0x20001126
    cb20:	b570      	push	{r4, r5, r6, lr}
    cb22:	4604      	mov	r4, r0
    cb24:	480d      	ldr	r0, [pc, #52]	; (cb5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    cb26:	f890 5257 	ldrb.w	r5, [r0, #599]	; 0x257
    cb2a:	f7fc f831 	bl	8b90 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    cb2e:	b148      	cbz	r0, cb44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    cb30:	b11d      	cbz	r5, cb3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x82>
    cb32:	f7fa fefb 	bl	792c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    cb36:	b110      	cbz	r0, cb3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x86>
    cb38:	e00b      	b.n	cb52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    cb3a:	b154      	cbz	r4, cb52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    cb3c:	e002      	b.n	cb44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    cb3e:	f7fa fed3 	bl	78e8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    cb42:	b930      	cbnz	r0, cb52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    cb44:	f005 fc8e 	bl	12464 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    cb48:	b128      	cbz	r0, cb56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    cb4a:	f7ff fa0f 	bl	bf6c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    cb4e:	2801      	cmp	r0, #1
    cb50:	d001      	beq.n	cb56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    cb52:	2000      	movs	r0, #0
    cb54:	bd70      	pop	{r4, r5, r6, pc}
    cb56:	2001      	movs	r0, #1
    cb58:	bd70      	pop	{r4, r5, r6, pc}
    cb5a:	0000      	.short	0x0000
    cb5c:	20001004 	.word	0x20001004
    cb60:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb64:	4692      	mov	sl, r2
    cb66:	460f      	mov	r7, r1
    cb68:	4681      	mov	r9, r0
    cb6a:	f005 fc49 	bl	12400 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
    cb6e:	2800      	cmp	r0, #0
    cb70:	d066      	beq.n	cc40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    cb72:	4834      	ldr	r0, [pc, #208]	; (cc44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18c>)
    cb74:	f8b9 1050 	ldrh.w	r1, [r9, #80]	; 0x50
    cb78:	f8b9 504e 	ldrh.w	r5, [r9, #78]	; 0x4e
    cb7c:	88c6      	ldrh	r6, [r0, #6]
    cb7e:	428e      	cmp	r6, r1
    cb80:	d300      	bcc.n	cb84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    cb82:	460e      	mov	r6, r1
    cb84:	8941      	ldrh	r1, [r0, #10]
    cb86:	42a9      	cmp	r1, r5
    cb88:	d200      	bcs.n	cb8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd4>
    cb8a:	460d      	mov	r5, r1
    cb8c:	8904      	ldrh	r4, [r0, #8]
    cb8e:	f44f 6229 	mov.w	r2, #2704	; 0xa90
    cb92:	4294      	cmp	r4, r2
    cb94:	d300      	bcc.n	cb98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe0>
    cb96:	4614      	mov	r4, r2
    cb98:	8980      	ldrh	r0, [r0, #12]
    cb9a:	f640 0148 	movw	r1, #2120	; 0x848
    cb9e:	4290      	cmp	r0, r2
    cba0:	d201      	bcs.n	cba6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    cba2:	4288      	cmp	r0, r1
    cba4:	d300      	bcc.n	cba8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    cba6:	4608      	mov	r0, r1
    cba8:	4680      	mov	r8, r0
    cbaa:	428c      	cmp	r4, r1
    cbac:	d300      	bcc.n	cbb0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf8>
    cbae:	460c      	mov	r4, r1
    cbb0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    cbb4:	2d1b      	cmp	r5, #27
    cbb6:	d001      	beq.n	cbbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x104>
    cbb8:	4588      	cmp	r8, r1
    cbba:	d103      	bne.n	cbc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10c>
    cbbc:	2e1b      	cmp	r6, #27
    cbbe:	d03f      	beq.n	cc40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    cbc0:	428c      	cmp	r4, r1
    cbc2:	d03d      	beq.n	cc40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    cbc4:	466a      	mov	r2, sp
    cbc6:	4651      	mov	r1, sl
    cbc8:	4648      	mov	r0, r9
    cbca:	f005 fbb5 	bl	12338 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x27c>
    cbce:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    cbd2:	42b0      	cmp	r0, r6
    cbd4:	d800      	bhi.n	cbd8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x120>
    cbd6:	4606      	mov	r6, r0
    cbd8:	80fe      	strh	r6, [r7, #6]
    cbda:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    cbde:	42a0      	cmp	r0, r4
    cbe0:	d800      	bhi.n	cbe4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>
    cbe2:	4604      	mov	r4, r0
    cbe4:	813c      	strh	r4, [r7, #8]
    cbe6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
    cbea:	42a8      	cmp	r0, r5
    cbec:	d800      	bhi.n	cbf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    cbee:	4605      	mov	r5, r0
    cbf0:	807d      	strh	r5, [r7, #2]
    cbf2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    cbf6:	4641      	mov	r1, r8
    cbf8:	4540      	cmp	r0, r8
    cbfa:	d900      	bls.n	cbfe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x146>
    cbfc:	4608      	mov	r0, r1
    cbfe:	80b8      	strh	r0, [r7, #4]
    cc00:	2101      	movs	r1, #1
    cc02:	7039      	strb	r1, [r7, #0]
    cc04:	3e1b      	subs	r6, #27
    cc06:	2ee0      	cmp	r6, #224	; 0xe0
    cc08:	d902      	bls.n	cc10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    cc0a:	f640 4155 	movw	r1, #3157	; 0xc55
    cc0e:	e014      	b.n	cc3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    cc10:	3d1b      	subs	r5, #27
    cc12:	2de0      	cmp	r5, #224	; 0xe0
    cc14:	d902      	bls.n	cc1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    cc16:	f640 4157 	movw	r1, #3159	; 0xc57
    cc1a:	e00e      	b.n	cc3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    cc1c:	f640 1148 	movw	r1, #2376	; 0x948
    cc20:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    cc24:	428c      	cmp	r4, r1
    cc26:	d902      	bls.n	cc2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x176>
    cc28:	f640 4159 	movw	r1, #3161	; 0xc59
    cc2c:	e005      	b.n	cc3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    cc2e:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
    cc32:	4288      	cmp	r0, r1
    cc34:	d904      	bls.n	cc40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    cc36:	f640 415b 	movw	r1, #3163	; 0xc5b
    cc3a:	2039      	movs	r0, #57	; 0x39
    cc3c:	f7f6 ffe8 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc40:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc44:	20001488 	.word	0x20001488
    cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc4c:	461d      	mov	r5, r3
    cc4e:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    cc52:	f1a1 0c06 	sub.w	ip, r1, #6
    cc56:	f640 437a 	movw	r3, #3194	; 0xc7a
    cc5a:	9e08      	ldr	r6, [sp, #32]
    cc5c:	459c      	cmp	ip, r3
    cc5e:	d805      	bhi.n	cc6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    cc60:	f1a2 0c06 	sub.w	ip, r2, #6
    cc64:	459c      	cmp	ip, r3
    cc66:	d801      	bhi.n	cc6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    cc68:	2301      	movs	r3, #1
    cc6a:	e000      	b.n	cc6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    cc6c:	2300      	movs	r3, #0
    cc6e:	b120      	cbz	r0, cc7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c2>
    cc70:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    cc74:	b168      	cbz	r0, cc92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1da>
    cc76:	b96b      	cbnz	r3, cc94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1dc>
    cc78:	e002      	b.n	cc80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    cc7a:	4815      	ldr	r0, [pc, #84]	; (ccd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x218>)
    cc7c:	7b80      	ldrb	r0, [r0, #14]
    cc7e:	e7f9      	b.n	cc74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1bc>
    cc80:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    cc84:	2806      	cmp	r0, #6
    cc86:	d821      	bhi.n	cccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    cc88:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    cc8c:	2806      	cmp	r0, #6
    cc8e:	d901      	bls.n	cc94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1dc>
    cc90:	e01c      	b.n	cccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    cc92:	b1db      	cbz	r3, cccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    cc94:	4291      	cmp	r1, r2
    cc96:	d819      	bhi.n	cccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    cc98:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    cc9c:	d216      	bcs.n	cccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    cc9e:	f1a4 000a 	sub.w	r0, r4, #10
    cca2:	f640 4176 	movw	r1, #3190	; 0xc76
    cca6:	4288      	cmp	r0, r1
    cca8:	d810      	bhi.n	cccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    ccaa:	4610      	mov	r0, r2
    ccac:	f003 fbd5 	bl	1045a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ccb0:	1c6d      	adds	r5, r5, #1
    ccb2:	4368      	muls	r0, r5
    ccb4:	f240 2171 	movw	r1, #625	; 0x271
    ccb8:	0040      	lsls	r0, r0, #1
    ccba:	434c      	muls	r4, r1
    ccbc:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    ccc0:	d204      	bcs.n	cccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    ccc2:	42b7      	cmp	r7, r6
    ccc4:	d802      	bhi.n	cccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>
    ccc6:	2001      	movs	r0, #1
    ccc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cccc:	2000      	movs	r0, #0
    ccce:	e7fb      	b.n	ccc8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ccd0:	20001488 	.word	0x20001488
    ccd4:	b530      	push	{r4, r5, lr}
    ccd6:	b087      	sub	sp, #28
    ccd8:	4605      	mov	r5, r0
    ccda:	2000      	movs	r0, #0
    ccdc:	9005      	str	r0, [sp, #20]
    ccde:	9001      	str	r0, [sp, #4]
    cce0:	9002      	str	r0, [sp, #8]
    cce2:	8808      	ldrh	r0, [r1, #0]
    cce4:	f8ad 0004 	strh.w	r0, [sp, #4]
    cce8:	4811      	ldr	r0, [pc, #68]	; (cd30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x278>)
    ccea:	460c      	mov	r4, r1
    ccec:	ab03      	add	r3, sp, #12
    ccee:	f890 1252 	ldrb.w	r1, [r0, #594]	; 0x252
    ccf2:	f88d 1006 	strb.w	r1, [sp, #6]
    ccf6:	f890 0253 	ldrb.w	r0, [r0, #595]	; 0x253
    ccfa:	f88d 0007 	strb.w	r0, [sp, #7]
    ccfe:	a804      	add	r0, sp, #16
    cd00:	9000      	str	r0, [sp, #0]
    cd02:	aa01      	add	r2, sp, #4
    cd04:	4621      	mov	r1, r4
    cd06:	4628      	mov	r0, r5
    cd08:	f005 fb5a 	bl	123c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    cd0c:	0005      	movs	r5, r0
    cd0e:	d10c      	bne.n	cd2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x272>
    cd10:	f89d 000c 	ldrb.w	r0, [sp, #12]
    cd14:	f88d 0014 	strb.w	r0, [sp, #20]
    cd18:	f89d 0010 	ldrb.w	r0, [sp, #16]
    cd1c:	f88d 0015 	strb.w	r0, [sp, #21]
    cd20:	a905      	add	r1, sp, #20
    cd22:	4620      	mov	r0, r4
    cd24:	f003 fc7c 	bl	10620 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    cd28:	4628      	mov	r0, r5
    cd2a:	b007      	add	sp, #28
    cd2c:	bd30      	pop	{r4, r5, pc}
    cd2e:	0000      	.short	0x0000
    cd30:	20001004 	.word	0x20001004

0000cd34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    cd34:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    cd38:	4604      	mov	r4, r0
    cd3a:	7840      	ldrb	r0, [r0, #1]
    cd3c:	2542      	movs	r5, #66	; 0x42
    cd3e:	2801      	cmp	r0, #1
    cd40:	d808      	bhi.n	cd54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cd42:	78a0      	ldrb	r0, [r4, #2]
    cd44:	f7fa fe0e 	bl	7964 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    cd48:	b120      	cbz	r0, cd54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cd4a:	7820      	ldrb	r0, [r4, #0]
    cd4c:	2512      	movs	r5, #18
    cd4e:	2801      	cmp	r0, #1
    cd50:	d003      	beq.n	cd5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    cd52:	b1a0      	cbz	r0, cd7e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4a>
    cd54:	4628      	mov	r0, r5
    cd56:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    cd5a:	f7fa fdd7 	bl	790c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    cd5e:	b128      	cbz	r0, cd6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    cd60:	f8b4 0003 	ldrh.w	r0, [r4, #3]
    cd64:	2800      	cmp	r0, #0
    cd66:	d0f5      	beq.n	cd54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cd68:	2880      	cmp	r0, #128	; 0x80
    cd6a:	d8f3      	bhi.n	cd54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cd6c:	7860      	ldrb	r0, [r4, #1]
    cd6e:	2800      	cmp	r0, #0
    cd70:	d0f0      	beq.n	cd54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cd72:	f7fa fd8d 	bl	7890 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    cd76:	b148      	cbz	r0, cd8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cd78:	7820      	ldrb	r0, [r4, #0]
    cd7a:	2801      	cmp	r0, #1
    cd7c:	d008      	beq.n	cd90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    cd7e:	f7fb ff01 	bl	8b84 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    cd82:	4604      	mov	r4, r0
    cd84:	f7fb fed8 	bl	8b38 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    cd88:	2800      	cmp	r0, #0
    cd8a:	d079      	beq.n	ce80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
    cd8c:	200c      	movs	r0, #12
    cd8e:	e7e2      	b.n	cd56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cd90:	4d55      	ldr	r5, [pc, #340]	; (cee8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b4>)
    cd92:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cd96:	f7fa f9ff 	bl	7198 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    cd9a:	b910      	cbnz	r0, cda2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x6e>
    cd9c:	f7fa fd9c 	bl	78d8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    cda0:	b3f0      	cbz	r0, ce20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    cda2:	f7fb fef5 	bl	8b90 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    cda6:	2800      	cmp	r0, #0
    cda8:	d1f0      	bne.n	cd8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cdaa:	f7fa fadf 	bl	736c <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    cdae:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    cdb2:	39ff      	subs	r1, #255	; 0xff
    cdb4:	d1ea      	bne.n	cd8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cdb6:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cdba:	f7fa fa17 	bl	71ec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    cdbe:	f8b4 6003 	ldrh.w	r6, [r4, #3]
    cdc2:	f242 7010 	movw	r0, #10000	; 0x2710
    cdc6:	4346      	muls	r6, r0
    cdc8:	7960      	ldrb	r0, [r4, #5]
    cdca:	f7fa fbeb 	bl	75a4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    cdce:	f7fa fd8b 	bl	78e8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    cdd2:	b138      	cbz	r0, cde4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb0>
    cdd4:	f7fa fd9a 	bl	790c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    cdd8:	4f44      	ldr	r7, [pc, #272]	; (ceec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    cdda:	b170      	cbz	r0, cdfa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    cddc:	f7fa fd9e 	bl	791c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    cde0:	b148      	cbz	r0, cdf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    cde2:	e00a      	b.n	cdfa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    cde4:	4631      	mov	r1, r6
    cde6:	2000      	movs	r0, #0
    cde8:	f7fb fe0e 	bl	8a08 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    cdec:	2800      	cmp	r0, #0
    cdee:	d0b2      	beq.n	cd56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cdf0:	f241 3150 	movw	r1, #4944	; 0x1350
    cdf4:	e073      	b.n	cede <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cdf6:	7bb8      	ldrb	r0, [r7, #14]
    cdf8:	b190      	cbz	r0, ce20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    cdfa:	2200      	movs	r2, #0
    cdfc:	2101      	movs	r1, #1
    cdfe:	a801      	add	r0, sp, #4
    ce00:	f7f7 f8e0 	bl	3fc4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>
    ce04:	0004      	movs	r4, r0
    ce06:	d03c      	beq.n	ce82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    ce08:	2100      	movs	r1, #0
    ce0a:	f7f9 fb59 	bl	64c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ce0e:	4620      	mov	r0, r4
    ce10:	f7fa fdf6 	bl	7a00 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    ce14:	f005 faf4 	bl	12400 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
    ce18:	b148      	cbz	r0, ce2e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    ce1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ce1e:	e000      	b.n	ce22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xee>
    ce20:	e016      	b.n	ce50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11c>
    ce22:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    ce26:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    ce2a:	84c1      	strh	r1, [r0, #38]	; 0x26
    ce2c:	8502      	strh	r2, [r0, #40]	; 0x28
    ce2e:	7bb8      	ldrb	r0, [r7, #14]
    ce30:	b100      	cbz	r0, ce34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>
    ce32:	2001      	movs	r0, #1
    ce34:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
    ce38:	f8d5 0248 	ldr.w	r0, [r5, #584]	; 0x248
    ce3c:	62a0      	str	r0, [r4, #40]	; 0x28
    ce3e:	4620      	mov	r0, r4
    ce40:	f004 faf3 	bl	1142a <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>
    ce44:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    ce48:	b120      	cbz	r0, ce54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x120>
    ce4a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    ce4e:	e003      	b.n	ce58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x124>
    ce50:	2012      	movs	r0, #18
    ce52:	e780      	b.n	cd56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    ce54:	f641 574c 	movw	r7, #7500	; 0x1d4c
    ce58:	f7fa fd60 	bl	791c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ce5c:	b908      	cbnz	r0, ce62 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    ce5e:	f7fa fdc9 	bl	79f4 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    ce62:	4621      	mov	r1, r4
    ce64:	2001      	movs	r0, #1
    ce66:	6067      	str	r7, [r4, #4]
    ce68:	f7ff ff34 	bl	ccd4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x21c>
    ce6c:	b158      	cbz	r0, ce86 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x152>
    ce6e:	2101      	movs	r1, #1
    ce70:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ce74:	f7f7 f954 	bl	4120 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ce78:	b118      	cbz	r0, ce82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    ce7a:	f241 319e 	movw	r1, #5022	; 0x139e
    ce7e:	e02e      	b.n	cede <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    ce80:	e022      	b.n	cec8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>
    ce82:	2009      	movs	r0, #9
    ce84:	e767      	b.n	cd56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    ce86:	f895 0241 	ldrb.w	r0, [r5, #577]	; 0x241
    ce8a:	9000      	str	r0, [sp, #0]
    ce8c:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
    ce90:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    ce94:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    ce98:	8820      	ldrh	r0, [r4, #0]
    ce9a:	f7f7 fa07 	bl	42ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    ce9e:	b110      	cbz	r0, cea6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x172>
    cea0:	f241 31a9 	movw	r1, #5033	; 0x13a9
    cea4:	e01b      	b.n	cede <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cea6:	4631      	mov	r1, r6
    cea8:	4620      	mov	r0, r4
    ceaa:	f7fb fdad 	bl	8a08 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    ceae:	b110      	cbz	r0, ceb6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x182>
    ceb0:	f241 31ab 	movw	r1, #5035	; 0x13ab
    ceb4:	e013      	b.n	cede <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    ceb6:	480e      	ldr	r0, [pc, #56]	; (cef0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    ceb8:	6843      	ldr	r3, [r0, #4]
    ceba:	b19b      	cbz	r3, cee4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cebc:	2200      	movs	r2, #0
    cebe:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    cec2:	4620      	mov	r0, r4
    cec4:	4798      	blx	r3
    cec6:	e00d      	b.n	cee4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    cec8:	b164      	cbz	r4, cee4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    ceca:	8820      	ldrh	r0, [r4, #0]
    cecc:	f7f7 fd80 	bl	49d0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ced0:	8820      	ldrh	r0, [r4, #0]
    ced2:	2101      	movs	r1, #1
    ced4:	f7f7 f924 	bl	4120 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ced8:	b120      	cbz	r0, cee4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    ceda:	f241 31c3 	movw	r1, #5059	; 0x13c3
    cede:	2039      	movs	r0, #57	; 0x39
    cee0:	f7f6 fe96 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cee4:	2000      	movs	r0, #0
    cee6:	e736      	b.n	cd56 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cee8:	20001004 	.word	0x20001004
    ceec:	20001488 	.word	0x20001488
    cef0:	20000320 	.word	0x20000320
    cef4:	4806      	ldr	r0, [pc, #24]	; (cf10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>)
    cef6:	2100      	movs	r1, #0
    cef8:	f890 2020 	ldrb.w	r2, [r0, #32]
    cefc:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    cf00:	8091      	strh	r1, [r2, #4]
    cf02:	f810 1f20 	ldrb.w	r1, [r0, #32]!
    cf06:	1c49      	adds	r1, r1, #1
    cf08:	f001 0101 	and.w	r1, r1, #1
    cf0c:	7001      	strb	r1, [r0, #0]
    cf0e:	4770      	bx	lr
    cf10:	20001498 	.word	0x20001498
    cf14:	4806      	ldr	r0, [pc, #24]	; (cf30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>)
    cf16:	2100      	movs	r1, #0
    cf18:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    cf1c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    cf20:	8291      	strh	r1, [r2, #20]
    cf22:	f810 1f21 	ldrb.w	r1, [r0, #33]!
    cf26:	1c49      	adds	r1, r1, #1
    cf28:	f001 0101 	and.w	r1, r1, #1
    cf2c:	7001      	strb	r1, [r0, #0]
    cf2e:	4770      	bx	lr
    cf30:	20001498 	.word	0x20001498
    cf34:	b510      	push	{r4, lr}
    cf36:	4604      	mov	r4, r0
    cf38:	88c1      	ldrh	r1, [r0, #6]
    cf3a:	8880      	ldrh	r0, [r0, #4]
    cf3c:	f005 f9ee 	bl	1231c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x260>
    cf40:	2800      	cmp	r0, #0
    cf42:	d10f      	bne.n	cf64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    cf44:	8861      	ldrh	r1, [r4, #2]
    cf46:	8820      	ldrh	r0, [r4, #0]
    cf48:	f005 f9e8 	bl	1231c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x260>
    cf4c:	2800      	cmp	r0, #0
    cf4e:	d109      	bne.n	cf64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    cf50:	4805      	ldr	r0, [pc, #20]	; (cf68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>)
    cf52:	88a1      	ldrh	r1, [r4, #4]
    cf54:	8141      	strh	r1, [r0, #10]
    cf56:	8821      	ldrh	r1, [r4, #0]
    cf58:	80c1      	strh	r1, [r0, #6]
    cf5a:	88e1      	ldrh	r1, [r4, #6]
    cf5c:	8181      	strh	r1, [r0, #12]
    cf5e:	8861      	ldrh	r1, [r4, #2]
    cf60:	8101      	strh	r1, [r0, #8]
    cf62:	2000      	movs	r0, #0
    cf64:	bd10      	pop	{r4, pc}
    cf66:	0000      	.short	0x0000
    cf68:	20001488 	.word	0x20001488
    cf6c:	0b11900b 	.word	0x0b11900b
    cf70:	11900059 	.word	0x11900059

0000cf74 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    cf74:	b510      	push	{r4, lr}
    cf76:	4a06      	ldr	r2, [pc, #24]	; (cf90 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    cf78:	4604      	mov	r4, r0
    cf7a:	7010      	strb	r0, [r2, #0]
    cf7c:	6051      	str	r1, [r2, #4]
    cf7e:	6890      	ldr	r0, [r2, #8]
    cf80:	f005 fbb8 	bl	126f4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
    cf84:	4620      	mov	r0, r4
    cf86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cf8a:	f7ff bd45 	b.w	ca18 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    cf8e:	0000      	.short	0x0000
    cf90:	20000330 	.word	0x20000330

0000cf94 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    cf94:	b510      	push	{r4, lr}
    cf96:	4c07      	ldr	r4, [pc, #28]	; (cfb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    cf98:	68e0      	ldr	r0, [r4, #12]
    cf9a:	f005 fbab 	bl	126f4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
    cf9e:	6920      	ldr	r0, [r4, #16]
    cfa0:	f005 fba8 	bl	126f4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
    cfa4:	f7f7 fe00 	bl	4ba8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    cfa8:	f7f8 fda8 	bl	5afc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    cfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cfb0:	f7ff bd38 	b.w	ca24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    cfb4:	20000330 	.word	0x20000330

0000cfb8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    cfb8:	b500      	push	{lr}
    cfba:	4905      	ldr	r1, [pc, #20]	; (cfd0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    cfbc:	4805      	ldr	r0, [pc, #20]	; (cfd4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    cfbe:	f005 fb4a 	bl	12656 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cfc2:	4804      	ldr	r0, [pc, #16]	; (cfd4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    cfc4:	4904      	ldr	r1, [pc, #16]	; (cfd8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    cfc6:	1d00      	adds	r0, r0, #4
    cfc8:	f85d eb04 	ldr.w	lr, [sp], #4
    cfcc:	f005 bb43 	b.w	12656 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cfd0:	20000344 	.word	0x20000344
    cfd4:	20000338 	.word	0x20000338
    cfd8:	2000034c 	.word	0x2000034c

0000cfdc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    cfdc:	b500      	push	{lr}
    cfde:	4908      	ldr	r1, [pc, #32]	; (d000 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    cfe0:	4808      	ldr	r0, [pc, #32]	; (d004 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    cfe2:	f005 fb38 	bl	12656 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cfe6:	4807      	ldr	r0, [pc, #28]	; (d004 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    cfe8:	4907      	ldr	r1, [pc, #28]	; (d008 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    cfea:	1d00      	adds	r0, r0, #4
    cfec:	f005 fb33 	bl	12656 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cff0:	4804      	ldr	r0, [pc, #16]	; (d004 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    cff2:	4906      	ldr	r1, [pc, #24]	; (d00c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    cff4:	3008      	adds	r0, #8
    cff6:	f85d eb04 	ldr.w	lr, [sp], #4
    cffa:	f005 bb2c 	b.w	12656 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    cffe:	0000      	.short	0x0000
    d000:	2000037c 	.word	0x2000037c
    d004:	20000338 	.word	0x20000338
    d008:	20000384 	.word	0x20000384
    d00c:	20000374 	.word	0x20000374

0000d010 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    d010:	4801      	ldr	r0, [pc, #4]	; (d018 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    d012:	7840      	ldrb	r0, [r0, #1]
    d014:	4770      	bx	lr
    d016:	0000      	.short	0x0000
    d018:	20000330 	.word	0x20000330
    d01c:	4807      	ldr	r0, [pc, #28]	; (d03c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    d01e:	b510      	push	{r4, lr}
    d020:	7800      	ldrb	r0, [r0, #0]
    d022:	f7fb fdbd 	bl	8ba0 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    d026:	4806      	ldr	r0, [pc, #24]	; (d040 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    d028:	f7fa fbf4 	bl	7814 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    d02c:	4906      	ldr	r1, [pc, #24]	; (d048 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    d02e:	4805      	ldr	r0, [pc, #20]	; (d044 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    d030:	6008      	str	r0, [r1, #0]
    d032:	4907      	ldr	r1, [pc, #28]	; (d050 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x40>)
    d034:	4805      	ldr	r0, [pc, #20]	; (d04c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    d036:	6008      	str	r0, [r1, #0]
    d038:	bd10      	pop	{r4, pc}
    d03a:	0000      	.short	0x0000
    d03c:	20000330 	.word	0x20000330
    d040:	20001a34 	.word	0x20001a34
    d044:	000073b9 	.word	0x000073b9
    d048:	20000354 	.word	0x20000354
    d04c:	00006b51 	.word	0x00006b51
    d050:	20000358 	.word	0x20000358
    d054:	b510      	push	{r4, lr}
    d056:	f7f7 fd3b 	bl	4ad0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    d05a:	4806      	ldr	r0, [pc, #24]	; (d074 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x64>)
    d05c:	4904      	ldr	r1, [pc, #16]	; (d070 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x60>)
    d05e:	7800      	ldrb	r0, [r0, #0]
    d060:	f7f7 fe0e 	bl	4c80 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    d064:	f005 fb1a 	bl	1269c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x46>
    d068:	4904      	ldr	r1, [pc, #16]	; (d07c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x6c>)
    d06a:	4803      	ldr	r0, [pc, #12]	; (d078 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x68>)
    d06c:	6008      	str	r0, [r1, #0]
    d06e:	bd10      	pop	{r4, pc}
    d070:	20001a34 	.word	0x20001a34
    d074:	20000330 	.word	0x20000330
    d078:	00004c35 	.word	0x00004c35
    d07c:	20000370 	.word	0x20000370
    d080:	b510      	push	{r4, lr}
    d082:	4c08      	ldr	r4, [pc, #32]	; (d0a4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    d084:	2001      	movs	r0, #1
    d086:	7060      	strb	r0, [r4, #1]
    d088:	f7fa fcf0 	bl	7a6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    d08c:	7820      	ldrb	r0, [r4, #0]
    d08e:	f7fc fdaf 	bl	9bf0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    d092:	f7ff ffdf 	bl	d054 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>
    d096:	4905      	ldr	r1, [pc, #20]	; (d0ac <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    d098:	4803      	ldr	r0, [pc, #12]	; (d0a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    d09a:	6008      	str	r0, [r1, #0]
    d09c:	4905      	ldr	r1, [pc, #20]	; (d0b4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    d09e:	4804      	ldr	r0, [pc, #16]	; (d0b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    d0a0:	6008      	str	r0, [r1, #0]
    d0a2:	bd10      	pop	{r4, pc}
    d0a4:	20000330 	.word	0x20000330
    d0a8:	00011563 	.word	0x00011563
    d0ac:	2000036c 	.word	0x2000036c
    d0b0:	00006bb1 	.word	0x00006bb1
    d0b4:	20000360 	.word	0x20000360

0000d0b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    d0b8:	2101      	movs	r1, #1
    d0ba:	4081      	lsls	r1, r0
    d0bc:	4802      	ldr	r0, [pc, #8]	; (d0c8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    d0be:	6802      	ldr	r2, [r0, #0]
    d0c0:	4311      	orrs	r1, r2
    d0c2:	6001      	str	r1, [r0, #0]
    d0c4:	4770      	bx	lr
    d0c6:	0000      	.short	0x0000
    d0c8:	2000038c 	.word	0x2000038c

0000d0cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    d0cc:	4801      	ldr	r0, [pc, #4]	; (d0d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    d0ce:	6800      	ldr	r0, [r0, #0]
    d0d0:	4770      	bx	lr
    d0d2:	0000      	.short	0x0000
    d0d4:	2000038c 	.word	0x2000038c

0000d0d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    d0d8:	4805      	ldr	r0, [pc, #20]	; (d0f0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x18>)
    d0da:	2201      	movs	r2, #1
    d0dc:	8800      	ldrh	r0, [r0, #0]
    d0de:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    d0e2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    d0e6:	f3c0 2000 	ubfx	r0, r0, #8, #1
    d0ea:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    d0ee:	4770      	bx	lr
    d0f0:	2000038c 	.word	0x2000038c

0000d0f4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    d0f4:	b570      	push	{r4, r5, r6, lr}
    d0f6:	4605      	mov	r5, r0
    d0f8:	4616      	mov	r6, r2
    d0fa:	460c      	mov	r4, r1
    d0fc:	2002      	movs	r0, #2
    d0fe:	f000 f9db 	bl	d4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d102:	4905      	ldr	r1, [pc, #20]	; (d118 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    d104:	2001      	movs	r0, #1
    d106:	7008      	strb	r0, [r1, #0]
    d108:	4904      	ldr	r1, [pc, #16]	; (d11c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    d10a:	1ef0      	subs	r0, r6, #3
    d10c:	6008      	str	r0, [r1, #0]
    d10e:	4804      	ldr	r0, [pc, #16]	; (d120 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    d110:	6005      	str	r5, [r0, #0]
    d112:	1f00      	subs	r0, r0, #4
    d114:	6004      	str	r4, [r0, #0]
    d116:	bd70      	pop	{r4, r5, r6, pc}
    d118:	200003c3 	.word	0x200003c3
    d11c:	4000f510 	.word	0x4000f510
    d120:	4000f508 	.word	0x4000f508

0000d124 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    d124:	4811      	ldr	r0, [pc, #68]	; (d16c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    d126:	7801      	ldrb	r1, [r0, #0]
    d128:	b1d9      	cbz	r1, d162 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3e>
    d12a:	4a11      	ldr	r2, [pc, #68]	; (d170 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    d12c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    d130:	6011      	str	r1, [r2, #0]
    d132:	4910      	ldr	r1, [pc, #64]	; (d174 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    d134:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    d138:	2200      	movs	r2, #0
    d13a:	2b00      	cmp	r3, #0
    d13c:	bf1c      	itt	ne
    d13e:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    d142:	2b00      	cmpne	r3, #0
    d144:	d002      	beq.n	d14c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    d146:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    d14a:	b119      	cbz	r1, d154 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x30>
    d14c:	7042      	strb	r2, [r0, #1]
    d14e:	f04f 0110 	mov.w	r1, #16
    d152:	e004      	b.n	d15e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    d154:	f04f 0101 	mov.w	r1, #1
    d158:	7041      	strb	r1, [r0, #1]
    d15a:	4907      	ldr	r1, [pc, #28]	; (d178 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x54>)
    d15c:	6809      	ldr	r1, [r1, #0]
    d15e:	7081      	strb	r1, [r0, #2]
    d160:	7002      	strb	r2, [r0, #0]
    d162:	f04f 0000 	mov.w	r0, #0
    d166:	f000 b9a7 	b.w	d4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d16a:	0000      	.short	0x0000
    d16c:	200003c3 	.word	0x200003c3
    d170:	4001f508 	.word	0x4001f508
    d174:	4000f000 	.word	0x4000f000
    d178:	4000f400 	.word	0x4000f400

0000d17c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    d17c:	b510      	push	{r4, lr}
    d17e:	2002      	movs	r0, #2
    d180:	f000 f99a 	bl	d4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d184:	4907      	ldr	r1, [pc, #28]	; (d1a4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    d186:	2001      	movs	r0, #1
    d188:	7008      	strb	r0, [r1, #0]
    d18a:	4907      	ldr	r1, [pc, #28]	; (d1a8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    d18c:	2000      	movs	r0, #0
    d18e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d192:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    d196:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d19a:	4904      	ldr	r1, [pc, #16]	; (d1ac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    d19c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d1a0:	6008      	str	r0, [r1, #0]
    d1a2:	bd10      	pop	{r4, pc}
    d1a4:	200003c3 	.word	0x200003c3
    d1a8:	4000f000 	.word	0x4000f000
    d1ac:	4001f504 	.word	0x4001f504

0000d1b0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    d1b0:	4803      	ldr	r0, [pc, #12]	; (d1c0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    d1b2:	2100      	movs	r1, #0
    d1b4:	7001      	strb	r1, [r0, #0]
    d1b6:	7041      	strb	r1, [r0, #1]
    d1b8:	2110      	movs	r1, #16
    d1ba:	7081      	strb	r1, [r0, #2]
    d1bc:	4770      	bx	lr
    d1be:	0000      	.short	0x0000
    d1c0:	200003c3 	.word	0x200003c3

0000d1c4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    d1c4:	480c      	ldr	r0, [pc, #48]	; (d1f8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    d1c6:	7801      	ldrb	r1, [r0, #0]
    d1c8:	2900      	cmp	r1, #0
    d1ca:	bf04      	itt	eq
    d1cc:	7880      	ldrbeq	r0, [r0, #2]
    d1ce:	4770      	bxeq	lr
    d1d0:	480a      	ldr	r0, [pc, #40]	; (d1fc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    d1d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d1d6:	2900      	cmp	r1, #0
    d1d8:	bf1c      	itt	ne
    d1da:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    d1de:	2900      	cmpne	r1, #0
    d1e0:	d002      	beq.n	d1e8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    d1e2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    d1e6:	b110      	cbz	r0, d1ee <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    d1e8:	f04f 0010 	mov.w	r0, #16
    d1ec:	4770      	bx	lr
    d1ee:	4804      	ldr	r0, [pc, #16]	; (d200 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    d1f0:	6800      	ldr	r0, [r0, #0]
    d1f2:	b2c0      	uxtb	r0, r0
    d1f4:	4770      	bx	lr
    d1f6:	0000      	.short	0x0000
    d1f8:	200003c3 	.word	0x200003c3
    d1fc:	4000f000 	.word	0x4000f000
    d200:	4000f400 	.word	0x4000f400

0000d204 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    d204:	480e      	ldr	r0, [pc, #56]	; (d240 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3c>)
    d206:	7801      	ldrb	r1, [r0, #0]
    d208:	2900      	cmp	r1, #0
    d20a:	bf04      	itt	eq
    d20c:	7840      	ldrbeq	r0, [r0, #1]
    d20e:	4770      	bxeq	lr
    d210:	480c      	ldr	r0, [pc, #48]	; (d244 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x40>)
    d212:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d216:	2900      	cmp	r1, #0
    d218:	bf04      	itt	eq
    d21a:	2002      	moveq	r0, #2
    d21c:	4770      	bxeq	lr
    d21e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d222:	2900      	cmp	r1, #0
    d224:	bf1c      	itt	ne
    d226:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    d22a:	2900      	cmpne	r1, #0
    d22c:	d005      	beq.n	d23a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x36>
    d22e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    d232:	2800      	cmp	r0, #0
    d234:	bf04      	itt	eq
    d236:	2001      	moveq	r0, #1
    d238:	4770      	bxeq	lr
    d23a:	2000      	movs	r0, #0
    d23c:	4770      	bx	lr
    d23e:	0000      	.short	0x0000
    d240:	200003c3 	.word	0x200003c3
    d244:	4000f000 	.word	0x4000f000

0000d248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    d248:	4813      	ldr	r0, [pc, #76]	; (d298 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x50>)
    d24a:	b510      	push	{r4, lr}
    d24c:	7802      	ldrb	r2, [r0, #0]
    d24e:	4b13      	ldr	r3, [pc, #76]	; (d29c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x54>)
    d250:	7840      	ldrb	r0, [r0, #1]
    d252:	21c8      	movs	r1, #200	; 0xc8
    d254:	1e49      	subs	r1, r1, #1
    d256:	b2c9      	uxtb	r1, r1
    d258:	b182      	cbz	r2, d27c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x34>
    d25a:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    d25e:	f1bc 0f00 	cmp.w	ip, #0
    d262:	d011      	beq.n	d288 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    d264:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    d268:	2800      	cmp	r0, #0
    d26a:	bf1c      	itt	ne
    d26c:	f8d3 0104 	ldrne.w	r0, [r3, #260]	; 0x104
    d270:	2800      	cmpne	r0, #0
    d272:	d007      	beq.n	d284 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    d274:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    d278:	b160      	cbz	r0, d294 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    d27a:	e003      	b.n	d284 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    d27c:	2802      	cmp	r0, #2
    d27e:	d003      	beq.n	d288 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    d280:	2801      	cmp	r0, #1
    d282:	d007      	beq.n	d294 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    d284:	2000      	movs	r0, #0
    d286:	bd10      	pop	{r4, pc}
    d288:	2900      	cmp	r1, #0
    d28a:	d1e3      	bne.n	d254 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    d28c:	218e      	movs	r1, #142	; 0x8e
    d28e:	203b      	movs	r0, #59	; 0x3b
    d290:	f7f6 fcbe 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d294:	2001      	movs	r0, #1
    d296:	bd10      	pop	{r4, pc}
    d298:	200003c3 	.word	0x200003c3
    d29c:	4000f000 	.word	0x4000f000

0000d2a0 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    d2a0:	b570      	push	{r4, r5, r6, lr}
    d2a2:	4606      	mov	r6, r0
    d2a4:	4614      	mov	r4, r2
    d2a6:	460d      	mov	r5, r1
    d2a8:	2001      	movs	r0, #1
    d2aa:	f000 f905 	bl	d4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d2ae:	4803      	ldr	r0, [pc, #12]	; (d2bc <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    d2b0:	6006      	str	r6, [r0, #0]
    d2b2:	1d00      	adds	r0, r0, #4
    d2b4:	6004      	str	r4, [r0, #0]
    d2b6:	1d00      	adds	r0, r0, #4
    d2b8:	6005      	str	r5, [r0, #0]
    d2ba:	bd70      	pop	{r4, r5, r6, pc}
    d2bc:	4000f508 	.word	0x4000f508

0000d2c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    d2c0:	480a      	ldr	r0, [pc, #40]	; (d2ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    d2c2:	7801      	ldrb	r1, [r0, #0]
    d2c4:	b171      	cbz	r1, d2e4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    d2c6:	4a0b      	ldr	r2, [pc, #44]	; (d2f4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    d2c8:	4909      	ldr	r1, [pc, #36]	; (d2f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    d2ca:	6011      	str	r1, [r2, #0]
    d2cc:	490a      	ldr	r1, [pc, #40]	; (d2f8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    d2ce:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    d2d2:	2100      	movs	r1, #0
    d2d4:	2a00      	cmp	r2, #0
    d2d6:	bf08      	it	eq
    d2d8:	7041      	strbeq	r1, [r0, #1]
    d2da:	d002      	beq.n	d2e2 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    d2dc:	4a07      	ldr	r2, [pc, #28]	; (d2fc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x3c>)
    d2de:	6812      	ldr	r2, [r2, #0]
    d2e0:	7042      	strb	r2, [r0, #1]
    d2e2:	7001      	strb	r1, [r0, #0]
    d2e4:	2000      	movs	r0, #0
    d2e6:	f000 b8e7 	b.w	d4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d2ea:	0000      	.short	0x0000
    d2ec:	200003c6 	.word	0x200003c6
    d2f0:	02020000 	.word	0x02020000
    d2f4:	4001f508 	.word	0x4001f508
    d2f8:	4000f000 	.word	0x4000f000
    d2fc:	4000f400 	.word	0x4000f400

0000d300 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    d300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d304:	4606      	mov	r6, r0
    d306:	4821      	ldr	r0, [pc, #132]	; (d38c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x8c>)
    d308:	460f      	mov	r7, r1
    d30a:	2401      	movs	r4, #1
    d30c:	4615      	mov	r5, r2
    d30e:	7004      	strb	r4, [r0, #0]
    d310:	491f      	ldr	r1, [pc, #124]	; (d390 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x90>)
    d312:	ea46 4005 	orr.w	r0, r6, r5, lsl #16
    d316:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    d31a:	6008      	str	r0, [r1, #0]
    d31c:	f001 fe66 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d320:	b928      	cbnz	r0, d32e <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2e>
    d322:	481c      	ldr	r0, [pc, #112]	; (d394 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x94>)
    d324:	6801      	ldr	r1, [r0, #0]
    d326:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    d32a:	4339      	orrs	r1, r7
    d32c:	6001      	str	r1, [r0, #0]
    d32e:	491a      	ldr	r1, [pc, #104]	; (d398 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x98>)
    d330:	f04f 0c00 	mov.w	ip, #0
    d334:	f8c1 c104 	str.w	ip, [r1, #260]	; 0x104
    d338:	4819      	ldr	r0, [pc, #100]	; (d3a0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xa0>)
    d33a:	4b18      	ldr	r3, [pc, #96]	; (d39c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x9c>)
    d33c:	6003      	str	r3, [r0, #0]
    d33e:	2e00      	cmp	r6, #0
    d340:	bf02      	ittt	eq
    d342:	f8c1 4200 	streq.w	r4, [r1, #512]	; 0x200
    d346:	600c      	streq	r4, [r1, #0]
    d348:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    d34c:	2e01      	cmp	r6, #1
    d34e:	d003      	beq.n	d358 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x58>
    d350:	2183      	movs	r1, #131	; 0x83
    d352:	203c      	movs	r0, #60	; 0x3c
    d354:	f7f6 fc5c 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d358:	f8c1 c200 	str.w	ip, [r1, #512]	; 0x200
    d35c:	600c      	str	r4, [r1, #0]
    d35e:	2d02      	cmp	r5, #2
    d360:	bf18      	it	ne
    d362:	2d03      	cmpne	r5, #3
    d364:	d10d      	bne.n	d382 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x82>
    d366:	4810      	ldr	r0, [pc, #64]	; (d3a8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xa8>)
    d368:	490e      	ldr	r1, [pc, #56]	; (d3a4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xa4>)
    d36a:	f8c0 c150 	str.w	ip, [r0, #336]	; 0x150
    d36e:	4a0f      	ldr	r2, [pc, #60]	; (d3ac <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xac>)
    d370:	f04f 0003 	mov.w	r0, #3
    d374:	6010      	str	r0, [r2, #0]
    d376:	480e      	ldr	r0, [pc, #56]	; (d3b0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xb0>)
    d378:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    d37c:	490d      	ldr	r1, [pc, #52]	; (d3b4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xb4>)
    d37e:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    d382:	480d      	ldr	r0, [pc, #52]	; (d3b8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0xb8>)
    d384:	6003      	str	r3, [r0, #0]
    d386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d38a:	0000      	.short	0x0000
    d38c:	200003c6 	.word	0x200003c6
    d390:	4000f504 	.word	0x4000f504
    d394:	4000f518 	.word	0x4000f518
    d398:	4000f000 	.word	0x4000f000
    d39c:	02020000 	.word	0x02020000
    d3a0:	4001f508 	.word	0x4001f508
    d3a4:	40001150 	.word	0x40001150
    d3a8:	40001000 	.word	0x40001000
    d3ac:	4000f51c 	.word	0x4000f51c
    d3b0:	4001f088 	.word	0x4001f088
    d3b4:	4000f00c 	.word	0x4000f00c
    d3b8:	4001f504 	.word	0x4001f504

0000d3bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    d3bc:	4802      	ldr	r0, [pc, #8]	; (d3c8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    d3be:	2100      	movs	r1, #0
    d3c0:	7001      	strb	r1, [r0, #0]
    d3c2:	7041      	strb	r1, [r0, #1]
    d3c4:	4770      	bx	lr
    d3c6:	0000      	.short	0x0000
    d3c8:	200003c6 	.word	0x200003c6

0000d3cc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    d3cc:	4807      	ldr	r0, [pc, #28]	; (d3ec <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    d3ce:	7801      	ldrb	r1, [r0, #0]
    d3d0:	2900      	cmp	r1, #0
    d3d2:	bf04      	itt	eq
    d3d4:	7840      	ldrbeq	r0, [r0, #1]
    d3d6:	4770      	bxeq	lr
    d3d8:	4805      	ldr	r0, [pc, #20]	; (d3f0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    d3da:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    d3de:	2800      	cmp	r0, #0
    d3e0:	bf08      	it	eq
    d3e2:	4770      	bxeq	lr
    d3e4:	4803      	ldr	r0, [pc, #12]	; (d3f4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x28>)
    d3e6:	6800      	ldr	r0, [r0, #0]
    d3e8:	b2c0      	uxtb	r0, r0
    d3ea:	4770      	bx	lr
    d3ec:	200003c6 	.word	0x200003c6
    d3f0:	4000f000 	.word	0x4000f000
    d3f4:	4000f400 	.word	0x4000f400

0000d3f8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    d3f8:	4901      	ldr	r1, [pc, #4]	; (d400 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    d3fa:	2001      	movs	r0, #1
    d3fc:	6088      	str	r0, [r1, #8]
    d3fe:	4770      	bx	lr
    d400:	4000f000 	.word	0x4000f000

0000d404 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    d404:	2800      	cmp	r0, #0
    d406:	bf08      	it	eq
    d408:	4770      	bxeq	lr
    d40a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d40e:	481b      	ldr	r0, [pc, #108]	; (d47c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>)
    d410:	7800      	ldrb	r0, [r0, #0]
    d412:	b1e0      	cbz	r0, d44e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4a>
    d414:	4c1a      	ldr	r4, [pc, #104]	; (d480 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    d416:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d41a:	2800      	cmp	r0, #0
    d41c:	bf18      	it	ne
    d41e:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d422:	f04f 0902 	mov.w	r9, #2
    d426:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    d42a:	4f16      	ldr	r7, [pc, #88]	; (d484 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    d42c:	6838      	ldr	r0, [r7, #0]
    d42e:	f3c0 1800 	ubfx	r8, r0, #4, #1
    d432:	6838      	ldr	r0, [r7, #0]
    d434:	f040 0010 	orr.w	r0, r0, #16
    d438:	6038      	str	r0, [r7, #0]
    d43a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d43e:	2800      	cmp	r0, #0
    d440:	bf04      	itt	eq
    d442:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
    d446:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
    d44a:	d10c      	bne.n	d466 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    d44c:	e003      	b.n	d456 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d44e:	21ed      	movs	r1, #237	; 0xed
    d450:	203c      	movs	r0, #60	; 0x3c
    d452:	f7f6 fbdd 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d456:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
    d45a:	f7f6 fa1d 	bl	3898 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    d45e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d462:	2800      	cmp	r0, #0
    d464:	d0f7      	beq.n	d456 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d466:	f1b8 0f00 	cmp.w	r8, #0
    d46a:	d103      	bne.n	d474 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    d46c:	6838      	ldr	r0, [r7, #0]
    d46e:	f020 0010 	bic.w	r0, r0, #16
    d472:	6038      	str	r0, [r7, #0]
    d474:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    d478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d47c:	200003c6 	.word	0x200003c6
    d480:	4000f000 	.word	0x4000f000
    d484:	e000ed10 	.word	0xe000ed10

0000d488 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    d488:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    d48c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    d490:	2000      	movs	r0, #0
    d492:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    d496:	f3bf 8f4f 	dsb	sy
    d49a:	f3bf 8f6f 	isb	sy
    d49e:	4904      	ldr	r1, [pc, #16]	; (d4b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x28>)
    d4a0:	6008      	str	r0, [r1, #0]
    d4a2:	6008      	str	r0, [r1, #0]
    d4a4:	4903      	ldr	r1, [pc, #12]	; (d4b4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    d4a6:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    d4aa:	6008      	str	r0, [r1, #0]
    d4ac:	4770      	bx	lr
    d4ae:	0000      	.short	0x0000
    d4b0:	4000f500 	.word	0x4000f500
    d4b4:	4001f508 	.word	0x4001f508

0000d4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    d4b8:	4912      	ldr	r1, [pc, #72]	; (d504 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    d4ba:	b510      	push	{r4, lr}
    d4bc:	2200      	movs	r2, #0
    d4be:	600a      	str	r2, [r1, #0]
    d4c0:	600a      	str	r2, [r1, #0]
    d4c2:	4b11      	ldr	r3, [pc, #68]	; (d508 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    d4c4:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
    d4c8:	601a      	str	r2, [r3, #0]
    d4ca:	2800      	cmp	r0, #0
    d4cc:	bf08      	it	eq
    d4ce:	bd10      	popeq	{r4, pc}
    d4d0:	4a0e      	ldr	r2, [pc, #56]	; (d50c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    d4d2:	4b0f      	ldr	r3, [pc, #60]	; (d510 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    d4d4:	f8df c03c 	ldr.w	ip, [pc, #60]	; d514 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x5c>
    d4d8:	2801      	cmp	r0, #1
    d4da:	d005      	beq.n	d4e8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    d4dc:	2802      	cmp	r0, #2
    d4de:	d008      	beq.n	d4f2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    d4e0:	217d      	movs	r1, #125	; 0x7d
    d4e2:	203d      	movs	r0, #61	; 0x3d
    d4e4:	f7f6 fb94 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4e8:	2002      	movs	r0, #2
    d4ea:	6008      	str	r0, [r1, #0]
    d4ec:	601a      	str	r2, [r3, #0]
    d4ee:	0600      	lsls	r0, r0, #24
    d4f0:	e004      	b.n	d4fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    d4f2:	2003      	movs	r0, #3
    d4f4:	6008      	str	r0, [r1, #0]
    d4f6:	601a      	str	r2, [r3, #0]
    d4f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d4fc:	f8cc 0000 	str.w	r0, [ip]
    d500:	bd10      	pop	{r4, pc}
    d502:	0000      	.short	0x0000
    d504:	4000f500 	.word	0x4000f500
    d508:	4001f508 	.word	0x4001f508
    d50c:	20001b36 	.word	0x20001b36
    d510:	4000f514 	.word	0x4000f514
    d514:	4001f504 	.word	0x4001f504

0000d518 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    d518:	4805      	ldr	r0, [pc, #20]	; (d530 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    d51a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d51e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    d522:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d526:	4903      	ldr	r1, [pc, #12]	; (d534 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    d528:	2000      	movs	r0, #0
    d52a:	6008      	str	r0, [r1, #0]
    d52c:	4770      	bx	lr
    d52e:	0000      	.short	0x0000
    d530:	40001000 	.word	0x40001000
    d534:	40001560 	.word	0x40001560

0000d538 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    d538:	4904      	ldr	r1, [pc, #16]	; (d54c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    d53a:	6008      	str	r0, [r1, #0]
    d53c:	4804      	ldr	r0, [pc, #16]	; (d550 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    d53e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d542:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    d546:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d54a:	4770      	bx	lr
    d54c:	40001560 	.word	0x40001560
    d550:	40001000 	.word	0x40001000

0000d554 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>:
    d554:	00c2      	lsls	r2, r0, #3
    d556:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d55a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    d55e:	4b07      	ldr	r3, [pc, #28]	; (d57c <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x28>)
    d560:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    d564:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    d568:	2101      	movs	r1, #1
    d56a:	fa01 f000 	lsl.w	r0, r1, r0
    d56e:	4904      	ldr	r1, [pc, #16]	; (d580 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x2c>)
    d570:	6008      	str	r0, [r1, #0]
    d572:	4904      	ldr	r1, [pc, #16]	; (d584 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x30>)
    d574:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    d576:	4310      	orrs	r0, r2
    d578:	6388      	str	r0, [r1, #56]	; 0x38
    d57a:	4770      	bx	lr
    d57c:	40001104 	.word	0x40001104
    d580:	4001f504 	.word	0x4001f504
    d584:	200016cc 	.word	0x200016cc

0000d588 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    d588:	4801      	ldr	r0, [pc, #4]	; (d590 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    d58a:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    d58e:	4770      	bx	lr
    d590:	200016cc 	.word	0x200016cc

0000d594 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    d594:	4a01      	ldr	r2, [pc, #4]	; (d59c <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    d596:	7051      	strb	r1, [r2, #1]
    d598:	7010      	strb	r0, [r2, #0]
    d59a:	4770      	bx	lr
    d59c:	200016cc 	.word	0x200016cc

0000d5a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    d5a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5a4:	f7f6 f9e8 	bl	3978 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    d5a8:	f7f6 fa4a 	bl	3a40 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    d5ac:	4d31      	ldr	r5, [pc, #196]	; (d674 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd4>)
    d5ae:	4680      	mov	r8, r0
    d5b0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    d5b4:	f04f 0a10 	mov.w	sl, #16
    d5b8:	f3c0 1900 	ubfx	r9, r0, #4, #1
    d5bc:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    d5c0:	2002      	movs	r0, #2
    d5c2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    d5c6:	4c2c      	ldr	r4, [pc, #176]	; (d678 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd8>)
    d5c8:	492d      	ldr	r1, [pc, #180]	; (d680 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xe0>)
    d5ca:	2600      	movs	r6, #0
    d5cc:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    d5d0:	482a      	ldr	r0, [pc, #168]	; (d67c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xdc>)
    d5d2:	6008      	str	r0, [r1, #0]
    d5d4:	7ae0      	ldrb	r0, [r4, #11]
    d5d6:	2701      	movs	r7, #1
    d5d8:	2801      	cmp	r0, #1
    d5da:	d002      	beq.n	d5e2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x42>
    d5dc:	2802      	cmp	r0, #2
    d5de:	d003      	beq.n	d5e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x48>
    d5e0:	e015      	b.n	d60e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    d5e2:	7e20      	ldrb	r0, [r4, #24]
    d5e4:	b910      	cbnz	r0, d5ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    d5e6:	e012      	b.n	d60e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    d5e8:	7e60      	ldrb	r0, [r4, #25]
    d5ea:	b180      	cbz	r0, d60e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    d5ec:	7fa0      	ldrb	r0, [r4, #30]
    d5ee:	7fe2      	ldrb	r2, [r4, #31]
    d5f0:	fa07 f000 	lsl.w	r0, r7, r0
    d5f4:	fa07 f202 	lsl.w	r2, r7, r2
    d5f8:	4310      	orrs	r0, r2
    d5fa:	6008      	str	r0, [r1, #0]
    d5fc:	f894 0020 	ldrb.w	r0, [r4, #32]
    d600:	0080      	lsls	r0, r0, #2
    d602:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    d606:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    d60a:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    d60e:	481d      	ldr	r0, [pc, #116]	; (d684 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xe4>)
    d610:	6800      	ldr	r0, [r0, #0]
    d612:	b1b0      	cbz	r0, d642 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xa2>
    d614:	20ff      	movs	r0, #255	; 0xff
    d616:	f88d 0000 	strb.w	r0, [sp]
    d61a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    d61e:	612f      	str	r7, [r5, #16]
    d620:	e005      	b.n	d62e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8e>
    d622:	bf00      	nop
    d624:	f89d 0000 	ldrb.w	r0, [sp]
    d628:	1e40      	subs	r0, r0, #1
    d62a:	f88d 0000 	strb.w	r0, [sp]
    d62e:	f89d 1000 	ldrb.w	r1, [sp]
    d632:	b119      	cbz	r1, d63c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>
    d634:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    d638:	2800      	cmp	r0, #0
    d63a:	d0f3      	beq.n	d624 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    d63c:	f89d 0000 	ldrb.w	r0, [sp]
    d640:	b198      	cbz	r0, d66a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xca>
    d642:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    d646:	2000      	movs	r0, #0
    d648:	f001 fa9c 	bl	eb84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    d64c:	7266      	strb	r6, [r4, #9]
    d64e:	72a6      	strb	r6, [r4, #10]
    d650:	72e6      	strb	r6, [r4, #11]
    d652:	7327      	strb	r7, [r4, #12]
    d654:	f1b9 0f00 	cmp.w	r9, #0
    d658:	bf18      	it	ne
    d65a:	f8c5 a304 	strne.w	sl, [r5, #772]	; 0x304
    d65e:	f1b8 0f00 	cmp.w	r8, #0
    d662:	bf18      	it	ne
    d664:	612f      	strne	r7, [r5, #16]
    d666:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d66a:	f240 7172 	movw	r1, #1906	; 0x772
    d66e:	203e      	movs	r0, #62	; 0x3e
    d670:	f7f6 face 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d674:	40001000 	.word	0x40001000
    d678:	200016cc 	.word	0x200016cc
    d67c:	0c0e0000 	.word	0x0c0e0000
    d680:	4001f508 	.word	0x4001f508
    d684:	40001550 	.word	0x40001550

0000d688 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    d688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d68c:	f8df a2d8 	ldr.w	sl, [pc, #728]	; d968 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2e0>
    d690:	4607      	mov	r7, r0
    d692:	b087      	sub	sp, #28
    d694:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    d698:	460d      	mov	r5, r1
    d69a:	f8ca 0000 	str.w	r0, [sl]
    d69e:	4cb3      	ldr	r4, [pc, #716]	; (d96c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2e4>)
    d6a0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    d6a4:	f040 0002 	orr.w	r0, r0, #2
    d6a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    d6ac:	4608      	mov	r0, r1
    d6ae:	f001 fb47 	bl	ed40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    d6b2:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    d6b6:	2825      	cmp	r0, #37	; 0x25
    d6b8:	bf08      	it	eq
    d6ba:	2102      	moveq	r1, #2
    d6bc:	d00f      	beq.n	d6de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    d6be:	2826      	cmp	r0, #38	; 0x26
    d6c0:	bf08      	it	eq
    d6c2:	211a      	moveq	r1, #26
    d6c4:	d00b      	beq.n	d6de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    d6c6:	2827      	cmp	r0, #39	; 0x27
    d6c8:	bf08      	it	eq
    d6ca:	2150      	moveq	r1, #80	; 0x50
    d6cc:	d007      	beq.n	d6de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
    d6ce:	280a      	cmp	r0, #10
    d6d0:	4601      	mov	r1, r0
    d6d2:	bf94      	ite	ls
    d6d4:	2204      	movls	r2, #4
    d6d6:	2206      	movhi	r2, #6
    d6d8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d6dc:	b2c9      	uxtb	r1, r1
    d6de:	4aa4      	ldr	r2, [pc, #656]	; (d970 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2e8>)
    d6e0:	6011      	str	r1, [r2, #0]
    d6e2:	49a4      	ldr	r1, [pc, #656]	; (d974 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2ec>)
    d6e4:	6008      	str	r0, [r1, #0]
    d6e6:	4628      	mov	r0, r5
    d6e8:	f001 fb0a 	bl	ed00 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    d6ec:	4ea2      	ldr	r6, [pc, #648]	; (d978 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2f0>)
    d6ee:	f04f 0900 	mov.w	r9, #0
    d6f2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    d6f6:	f04f 0801 	mov.w	r8, #1
    d6fa:	b117      	cbz	r7, d702 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x7a>
    d6fc:	2f01      	cmp	r7, #1
    d6fe:	d054      	beq.n	d7aa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x122>
    d700:	e0b2      	b.n	d868 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1e0>
    d702:	2d01      	cmp	r5, #1
    d704:	bf08      	it	eq
    d706:	2000      	moveq	r0, #0
    d708:	d00b      	beq.n	d722 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9a>
    d70a:	2d02      	cmp	r5, #2
    d70c:	bf08      	it	eq
    d70e:	2001      	moveq	r0, #1
    d710:	d007      	beq.n	d722 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9a>
    d712:	2d04      	cmp	r5, #4
    d714:	bf08      	it	eq
    d716:	2003      	moveq	r0, #3
    d718:	d003      	beq.n	d722 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9a>
    d71a:	2d08      	cmp	r5, #8
    d71c:	bf08      	it	eq
    d71e:	2002      	moveq	r0, #2
    d720:	d157      	bne.n	d7d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    d722:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d726:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    d72a:	ab05      	add	r3, sp, #20
    d72c:	f7f2 fe52 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d730:	2800      	cmp	r0, #0
    d732:	d15b      	bne.n	d7ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x164>
    d734:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d738:	f001 fafc 	bl	ed34 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d73c:	7a60      	ldrb	r0, [r4, #9]
    d73e:	2801      	cmp	r0, #1
    d740:	d105      	bne.n	d74e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc6>
    d742:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d746:	f040 0008 	orr.w	r0, r0, #8
    d74a:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d74e:	f001 fc69 	bl	f024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d752:	b178      	cbz	r0, d774 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xec>
    d754:	4989      	ldr	r1, [pc, #548]	; (d97c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2f4>)
    d756:	680a      	ldr	r2, [r1, #0]
    d758:	0648      	lsls	r0, r1, #25
    d75a:	2d02      	cmp	r5, #2
    d75c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    d760:	bf0c      	ite	eq
    d762:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    d766:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    d76a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    d76e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    d772:	6008      	str	r0, [r1, #0]
    d774:	f884 800b 	strb.w	r8, [r4, #11]
    d778:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d77a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    d77e:	63a0      	str	r0, [r4, #56]	; 0x38
    d780:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d784:	f8ca 0000 	str.w	r0, [sl]
    d788:	2d02      	cmp	r5, #2
    d78a:	bf08      	it	eq
    d78c:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    d790:	d005      	beq.n	d79e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x116>
    d792:	2d01      	cmp	r5, #1
    d794:	bf0c      	ite	eq
    d796:	f640 0034 	movweq	r0, #2100	; 0x834
    d79a:	f640 2028 	movwne	r0, #2600	; 0xa28
    d79e:	f649 71ec 	movw	r1, #40940	; 0x9fec
    d7a2:	4408      	add	r0, r1
    d7a4:	fbb0 f9fb 	udiv	r9, r0, fp
    d7a8:	e05e      	b.n	d868 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1e0>
    d7aa:	7aa0      	ldrb	r0, [r4, #10]
    d7ac:	2801      	cmp	r0, #1
    d7ae:	d126      	bne.n	d7fe <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x176>
    d7b0:	7b60      	ldrb	r0, [r4, #13]
    d7b2:	2801      	cmp	r0, #1
    d7b4:	bf08      	it	eq
    d7b6:	2000      	moveq	r0, #0
    d7b8:	d010      	beq.n	d7dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    d7ba:	2802      	cmp	r0, #2
    d7bc:	bf08      	it	eq
    d7be:	2001      	moveq	r0, #1
    d7c0:	d00c      	beq.n	d7dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    d7c2:	2804      	cmp	r0, #4
    d7c4:	bf08      	it	eq
    d7c6:	2003      	moveq	r0, #3
    d7c8:	d008      	beq.n	d7dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    d7ca:	2808      	cmp	r0, #8
    d7cc:	bf08      	it	eq
    d7ce:	2002      	moveq	r0, #2
    d7d0:	d004      	beq.n	d7dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    d7d2:	f240 31f3 	movw	r1, #1011	; 0x3f3
    d7d6:	2006      	movs	r0, #6
    d7d8:	f7f6 fa1a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7dc:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d7e0:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    d7e4:	ab05      	add	r3, sp, #20
    d7e6:	f7f2 fdf5 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d7ea:	b120      	cbz	r0, d7f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    d7ec:	f240 41a1 	movw	r1, #1185	; 0x4a1
    d7f0:	203e      	movs	r0, #62	; 0x3e
    d7f2:	f7f6 fa0d 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7f6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d7fa:	f001 fa9b 	bl	ed34 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d7fe:	7a60      	ldrb	r0, [r4, #9]
    d800:	2801      	cmp	r0, #1
    d802:	d105      	bne.n	d810 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x188>
    d804:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d808:	f040 0004 	orr.w	r0, r0, #4
    d80c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d810:	2002      	movs	r0, #2
    d812:	72e0      	strb	r0, [r4, #11]
    d814:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d816:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    d81a:	63a0      	str	r0, [r4, #56]	; 0x38
    d81c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    d820:	f8ca 0000 	str.w	r0, [sl]
    d824:	4856      	ldr	r0, [pc, #344]	; (d980 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2f8>)
    d826:	f04f 0929 	mov.w	r9, #41	; 0x29
    d82a:	6800      	ldr	r0, [r0, #0]
    d82c:	b970      	cbnz	r0, d84c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1c4>
    d82e:	f015 0f0c 	tst.w	r5, #12
    d832:	d00b      	beq.n	d84c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1c4>
    d834:	f8c6 8304 	str.w	r8, [r6, #772]	; 0x304
    d838:	2001      	movs	r0, #1
    d83a:	f001 f9a3 	bl	eb84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    d83e:	f8c6 803c 	str.w	r8, [r6, #60]	; 0x3c
    d842:	f8c6 8040 	str.w	r8, [r6, #64]	; 0x40
    d846:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    d84a:	e002      	b.n	d852 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1ca>
    d84c:	2000      	movs	r0, #0
    d84e:	f001 f999 	bl	eb84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    d852:	f001 fbe7 	bl	f024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d856:	b938      	cbnz	r0, d868 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1e0>
    d858:	f001 fbd4 	bl	f004 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    d85c:	b920      	cbnz	r0, d868 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1e0>
    d85e:	4849      	ldr	r0, [pc, #292]	; (d984 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2fc>)
    d860:	6801      	ldr	r1, [r0, #0]
    d862:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    d866:	6001      	str	r1, [r0, #0]
    d868:	7a60      	ldrb	r0, [r4, #9]
    d86a:	2800      	cmp	r0, #0
    d86c:	bf04      	itt	eq
    d86e:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    d872:	f040 0002 	orreq.w	r0, r0, #2
    d876:	d006      	beq.n	d886 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1fe>
    d878:	2801      	cmp	r0, #1
    d87a:	bf04      	itt	eq
    d87c:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    d880:	f040 0004 	orreq.w	r0, r0, #4
    d884:	d101      	bne.n	d88a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
    d886:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    d88a:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    d88e:	f010 0f01 	tst.w	r0, #1
    d892:	d027      	beq.n	d8e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>
    d894:	f010 0f02 	tst.w	r0, #2
    d898:	d018      	beq.n	d8cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x244>
    d89a:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d89e:	f040 0001 	orr.w	r0, r0, #1
    d8a2:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d8a6:	4838      	ldr	r0, [pc, #224]	; (d988 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x300>)
    d8a8:	6801      	ldr	r1, [r0, #0]
    d8aa:	290b      	cmp	r1, #11
    d8ac:	bf1c      	itt	ne
    d8ae:	6801      	ldrne	r1, [r0, #0]
    d8b0:	290a      	cmpne	r1, #10
    d8b2:	d005      	beq.n	d8c0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x238>
    d8b4:	6801      	ldr	r1, [r0, #0]
    d8b6:	2903      	cmp	r1, #3
    d8b8:	bf1c      	itt	ne
    d8ba:	6800      	ldrne	r0, [r0, #0]
    d8bc:	2802      	cmpne	r0, #2
    d8be:	d111      	bne.n	d8e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>
    d8c0:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    d8c4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    d8c8:	f7f6 f9a2 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8cc:	f010 0f04 	tst.w	r0, #4
    d8d0:	d008      	beq.n	d8e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>
    d8d2:	492f      	ldr	r1, [pc, #188]	; (d990 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x308>)
    d8d4:	482d      	ldr	r0, [pc, #180]	; (d98c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x304>)
    d8d6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    d8da:	482e      	ldr	r0, [pc, #184]	; (d994 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x30c>)
    d8dc:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    d8e0:	2801      	cmp	r0, #1
    d8e2:	d036      	beq.n	d952 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2ca>
    d8e4:	f001 fa5c 	bl	eda0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    d8e8:	6800      	ldr	r0, [r0, #0]
    d8ea:	2801      	cmp	r0, #1
    d8ec:	d036      	beq.n	d95c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2d4>
    d8ee:	2f01      	cmp	r7, #1
    d8f0:	bf08      	it	eq
    d8f2:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    d8f6:	d00d      	beq.n	d914 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28c>
    d8f8:	2d02      	cmp	r5, #2
    d8fa:	bf08      	it	eq
    d8fc:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    d900:	d005      	beq.n	d90e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x286>
    d902:	2d01      	cmp	r5, #1
    d904:	bf0c      	ite	eq
    d906:	f640 0034 	movweq	r0, #2100	; 0x834
    d90a:	f640 2028 	movwne	r0, #2600	; 0xa28
    d90e:	f24a 0150 	movw	r1, #41040	; 0xa050
    d912:	4408      	add	r0, r1
    d914:	fbb0 f0fb 	udiv	r0, r0, fp
    d918:	491f      	ldr	r1, [pc, #124]	; (d998 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x310>)
    d91a:	6809      	ldr	r1, [r1, #0]
    d91c:	4a1f      	ldr	r2, [pc, #124]	; (d99c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x314>)
    d91e:	2f01      	cmp	r7, #1
    d920:	f102 0314 	add.w	r3, r2, #20
    d924:	e893 1038 	ldmia.w	r3, {r3, r4, r5, ip}
    d928:	e88d 1038 	stmia.w	sp, {r3, r4, r5, ip}
    d92c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    d92e:	9204      	str	r2, [sp, #16]
    d930:	bf14      	ite	ne
    d932:	2201      	movne	r2, #1
    d934:	2200      	moveq	r2, #0
    d936:	f88d 2001 	strb.w	r2, [sp, #1]
    d93a:	e9cd 1003 	strd	r1, r0, [sp, #12]
    d93e:	4668      	mov	r0, sp
    d940:	f7f6 f868 	bl	3a14 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    d944:	2000      	movs	r0, #0
    d946:	f001 f947 	bl	ebd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb8>
    d94a:	b007      	add	sp, #28
    d94c:	4648      	mov	r0, r9
    d94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d952:	f240 511f 	movw	r1, #1311	; 0x51f
    d956:	203e      	movs	r0, #62	; 0x3e
    d958:	f7f6 f95a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d95c:	f7ff fe20 	bl	d5a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    d960:	b007      	add	sp, #28
    d962:	2000      	movs	r0, #0
    d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d968:	4001f504 	.word	0x4001f504
    d96c:	200016cc 	.word	0x200016cc
    d970:	40001508 	.word	0x40001508
    d974:	40001554 	.word	0x40001554
    d978:	40001000 	.word	0x40001000
    d97c:	40001588 	.word	0x40001588
    d980:	40001788 	.word	0x40001788
    d984:	40001568 	.word	0x40001568
    d988:	40001550 	.word	0x40001550
    d98c:	40001008 	.word	0x40001008
    d990:	4001f098 	.word	0x4001f098
    d994:	40008000 	.word	0x40008000
    d998:	40008540 	.word	0x40008540
    d99c:	0000ecb0 	.word	0x0000ecb0

0000d9a0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    d9a0:	4a02      	ldr	r2, [pc, #8]	; (d9ac <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    d9a2:	6c53      	ldr	r3, [r2, #68]	; 0x44
    d9a4:	6003      	str	r3, [r0, #0]
    d9a6:	6c90      	ldr	r0, [r2, #72]	; 0x48
    d9a8:	6008      	str	r0, [r1, #0]
    d9aa:	4770      	bx	lr
    d9ac:	200016cc 	.word	0x200016cc

0000d9b0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    d9b0:	b410      	push	{r4}
    d9b2:	e890 101c 	ldmia.w	r0, {r2, r3, r4, ip}
    d9b6:	4903      	ldr	r1, [pc, #12]	; (d9c4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x14>)
    d9b8:	e881 101c 	stmia.w	r1, {r2, r3, r4, ip}
    d9bc:	6900      	ldr	r0, [r0, #16]
    d9be:	6108      	str	r0, [r1, #16]
    d9c0:	bc10      	pop	{r4}
    d9c2:	4770      	bx	lr
    d9c4:	200016b8 	.word	0x200016b8

0000d9c8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    d9c8:	4914      	ldr	r1, [pc, #80]	; (da1c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x54>)
    d9ca:	b510      	push	{r4, lr}
    d9cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    d9ce:	4282      	cmp	r2, r0
    d9d0:	d304      	bcc.n	d9dc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
    d9d2:	f240 71db 	movw	r1, #2011	; 0x7db
    d9d6:	203e      	movs	r0, #62	; 0x3e
    d9d8:	f7f6 f91a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9dc:	2201      	movs	r2, #1
    d9de:	f8df c040 	ldr.w	ip, [pc, #64]	; da20 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x58>
    d9e2:	740a      	strb	r2, [r1, #16]
    d9e4:	6148      	str	r0, [r1, #20]
    d9e6:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
    d9ea:	4b0e      	ldr	r3, [pc, #56]	; (da24 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
    d9ec:	681c      	ldr	r4, [r3, #0]
    d9ee:	1d64      	adds	r4, r4, #5
    d9f0:	4284      	cmp	r4, r0
    d9f2:	d306      	bcc.n	da02 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3a>
    d9f4:	480c      	ldr	r0, [pc, #48]	; (da28 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>)
    d9f6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    d9fa:	2900      	cmp	r1, #0
    d9fc:	bf08      	it	eq
    d9fe:	6102      	streq	r2, [r0, #16]
    da00:	bd10      	pop	{r4, pc}
    da02:	2200      	movs	r2, #0
    da04:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
    da08:	6018      	str	r0, [r3, #0]
    da0a:	6b88      	ldr	r0, [r1, #56]	; 0x38
    da0c:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    da10:	6388      	str	r0, [r1, #56]	; 0x38
    da12:	4906      	ldr	r1, [pc, #24]	; (da2c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
    da14:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    da18:	6008      	str	r0, [r1, #0]
    da1a:	bd10      	pop	{r4, pc}
    da1c:	200016cc 	.word	0x200016cc
    da20:	40008000 	.word	0x40008000
    da24:	40008544 	.word	0x40008544
    da28:	40001000 	.word	0x40001000
    da2c:	4001f504 	.word	0x4001f504

0000da30 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    da30:	b570      	push	{r4, r5, r6, lr}
    da32:	4c11      	ldr	r4, [pc, #68]	; (da78 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    da34:	4606      	mov	r6, r0
    da36:	2002      	movs	r0, #2
    da38:	7420      	strb	r0, [r4, #16]
    da3a:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
    da3e:	f000 f899 	bl	db74 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY>
    da42:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
    da46:	2901      	cmp	r1, #1
    da48:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    da4c:	d00e      	beq.n	da6c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3c>
    da4e:	4602      	mov	r2, r0
    da50:	4628      	mov	r0, r5
    da52:	f004 feaf 	bl	127b4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    da56:	4909      	ldr	r1, [pc, #36]	; (da7c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    da58:	6160      	str	r0, [r4, #20]
    da5a:	2000      	movs	r0, #0
    da5c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    da60:	6961      	ldr	r1, [r4, #20]
    da62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    da64:	4408      	add	r0, r1
    da66:	4906      	ldr	r1, [pc, #24]	; (da80 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x50>)
    da68:	6008      	str	r0, [r1, #0]
    da6a:	bd70      	pop	{r4, r5, r6, pc}
    da6c:	4602      	mov	r2, r0
    da6e:	4633      	mov	r3, r6
    da70:	4628      	mov	r0, r5
    da72:	f004 fec0 	bl	127f6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    da76:	e7ee      	b.n	da56 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x26>
    da78:	200016cc 	.word	0x200016cc
    da7c:	40008000 	.word	0x40008000
    da80:	40008544 	.word	0x40008544

0000da84 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    da84:	b510      	push	{r4, lr}
    da86:	f001 facd 	bl	f024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    da8a:	2800      	cmp	r0, #0
    da8c:	bf08      	it	eq
    da8e:	bd10      	popeq	{r4, pc}
    da90:	4803      	ldr	r0, [pc, #12]	; (daa0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    da92:	6801      	ldr	r1, [r0, #0]
    da94:	f021 0101 	bic.w	r1, r1, #1
    da98:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    da9c:	6001      	str	r1, [r0, #0]
    da9e:	bd10      	pop	{r4, pc}
    daa0:	40001774 	.word	0x40001774

0000daa4 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
    daa4:	b510      	push	{r4, lr}
    daa6:	2896      	cmp	r0, #150	; 0x96
    daa8:	bf9e      	ittt	ls
    daaa:	4904      	ldrls	r1, [pc, #16]	; (dabc <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
    daac:	f881 0023 	strbls.w	r0, [r1, #35]	; 0x23
    dab0:	bd10      	popls	{r4, pc}
    dab2:	f240 11ad 	movw	r1, #429	; 0x1ad
    dab6:	203e      	movs	r0, #62	; 0x3e
    dab8:	f7f6 f8aa 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dabc:	200016cc 	.word	0x200016cc

0000dac0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    dac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dac4:	224c      	movs	r2, #76	; 0x4c
    dac6:	2100      	movs	r1, #0
    dac8:	481e      	ldr	r0, [pc, #120]	; (db44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
    daca:	f001 fadf 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dace:	481d      	ldr	r0, [pc, #116]	; (db44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
    dad0:	2400      	movs	r4, #0
    dad2:	2101      	movs	r1, #1
    dad4:	7244      	strb	r4, [r0, #9]
    dad6:	7284      	strb	r4, [r0, #10]
    dad8:	72c4      	strb	r4, [r0, #11]
    dada:	7301      	strb	r1, [r0, #12]
    dadc:	21ff      	movs	r1, #255	; 0xff
    dade:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
    dae2:	215f      	movs	r1, #95	; 0x5f
    dae4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    dae8:	f001 fa55 	bl	ef96 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    daec:	4f16      	ldr	r7, [pc, #88]	; (db48 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x88>)
    daee:	4d17      	ldr	r5, [pc, #92]	; (db4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x8c>)
    daf0:	4e17      	ldr	r6, [pc, #92]	; (db50 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x90>)
    daf2:	b928      	cbnz	r0, db00 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    daf4:	f001 fa66 	bl	efc4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    daf8:	b910      	cbnz	r0, db00 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    dafa:	f001 fa6d 	bl	efd8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    dafe:	b140      	cbz	r0, db12 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    db00:	2224      	movs	r2, #36	; 0x24
    db02:	21ff      	movs	r1, #255	; 0xff
    db04:	4638      	mov	r0, r7
    db06:	f001 fac1 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db0a:	602c      	str	r4, [r5, #0]
    db0c:	6034      	str	r4, [r6, #0]
    db0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db12:	f001 faa1 	bl	f058 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    db16:	b910      	cbnz	r0, db1e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5e>
    db18:	f001 fa94 	bl	f044 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    db1c:	b140      	cbz	r0, db30 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x70>
    db1e:	2240      	movs	r2, #64	; 0x40
    db20:	21ff      	movs	r1, #255	; 0xff
    db22:	4638      	mov	r0, r7
    db24:	f001 fab2 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db28:	602c      	str	r4, [r5, #0]
    db2a:	6034      	str	r4, [r6, #0]
    db2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db30:	2238      	movs	r2, #56	; 0x38
    db32:	21ff      	movs	r1, #255	; 0xff
    db34:	4638      	mov	r0, r7
    db36:	f001 faa9 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db3a:	602c      	str	r4, [r5, #0]
    db3c:	6034      	str	r4, [r6, #0]
    db3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db42:	0000      	.short	0x0000
    db44:	200016cc 	.word	0x200016cc
    db48:	40000e00 	.word	0x40000e00
    db4c:	40000e08 	.word	0x40000e08
    db50:	40000e10 	.word	0x40000e10

0000db54 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    db54:	4901      	ldr	r1, [pc, #4]	; (db5c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    db56:	7008      	strb	r0, [r1, #0]
    db58:	4770      	bx	lr
    db5a:	0000      	.short	0x0000
    db5c:	20000390 	.word	0x20000390

0000db60 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>:
    db60:	4803      	ldr	r0, [pc, #12]	; (db70 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI+0x10>)
    db62:	7e01      	ldrb	r1, [r0, #24]
    db64:	2900      	cmp	r1, #0
    db66:	bf06      	itte	eq
    db68:	7e40      	ldrbeq	r0, [r0, #25]
    db6a:	2800      	cmpeq	r0, #0
    db6c:	2001      	movne	r0, #1
    db6e:	4770      	bx	lr
    db70:	200016cc 	.word	0x200016cc

0000db74 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY>:
    db74:	4814      	ldr	r0, [pc, #80]	; (dbc8 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY+0x54>)
    db76:	4913      	ldr	r1, [pc, #76]	; (dbc4 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY+0x50>)
    db78:	6802      	ldr	r2, [r0, #0]
    db7a:	f002 020f 	and.w	r2, r2, #15
    db7e:	2a03      	cmp	r2, #3
    db80:	bf04      	itt	eq
    db82:	2001      	moveq	r0, #1
    db84:	4770      	bxeq	lr
    db86:	6802      	ldr	r2, [r0, #0]
    db88:	f002 020f 	and.w	r2, r2, #15
    db8c:	2a04      	cmp	r2, #4
    db8e:	bf04      	itt	eq
    db90:	2002      	moveq	r0, #2
    db92:	4770      	bxeq	lr
    db94:	6802      	ldr	r2, [r0, #0]
    db96:	f002 020f 	and.w	r2, r2, #15
    db9a:	2a05      	cmp	r2, #5
    db9c:	d004      	beq.n	dba8 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY+0x34>
    db9e:	6800      	ldr	r0, [r0, #0]
    dba0:	f000 000f 	and.w	r0, r0, #15
    dba4:	2806      	cmp	r0, #6
    dba6:	d106      	bne.n	dbb6 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY+0x42>
    dba8:	6808      	ldr	r0, [r1, #0]
    dbaa:	f010 0f06 	tst.w	r0, #6
    dbae:	bf0c      	ite	eq
    dbb0:	2008      	moveq	r0, #8
    dbb2:	2004      	movne	r0, #4
    dbb4:	4770      	bx	lr
    dbb6:	b510      	push	{r4, lr}
    dbb8:	f240 11ef 	movw	r1, #495	; 0x1ef
    dbbc:	203e      	movs	r0, #62	; 0x3e
    dbbe:	f7f6 f827 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbc2:	0000      	.short	0x0000
    dbc4:	40001414 	.word	0x40001414
    dbc8:	40001510 	.word	0x40001510

0000dbcc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    dbcc:	4801      	ldr	r0, [pc, #4]	; (dbd4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    dbce:	6a80      	ldr	r0, [r0, #40]	; 0x28
    dbd0:	4770      	bx	lr
    dbd2:	0000      	.short	0x0000
    dbd4:	200016cc 	.word	0x200016cc

0000dbd8 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    dbd8:	4801      	ldr	r0, [pc, #4]	; (dbe0 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    dbda:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    dbde:	4770      	bx	lr
    dbe0:	200016cc 	.word	0x200016cc

0000dbe4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    dbe4:	4915      	ldr	r1, [pc, #84]	; (dc3c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    dbe6:	b510      	push	{r4, lr}
    dbe8:	6b88      	ldr	r0, [r1, #56]	; 0x38
    dbea:	4a15      	ldr	r2, [pc, #84]	; (dc40 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    dbec:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    dbf0:	6010      	str	r0, [r2, #0]
    dbf2:	2000      	movs	r0, #0
    dbf4:	6388      	str	r0, [r1, #56]	; 0x38
    dbf6:	7408      	strb	r0, [r1, #16]
    dbf8:	62c8      	str	r0, [r1, #44]	; 0x2c
    dbfa:	6288      	str	r0, [r1, #40]	; 0x28
    dbfc:	4911      	ldr	r1, [pc, #68]	; (dc44 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    dbfe:	6008      	str	r0, [r1, #0]
    dc00:	1f09      	subs	r1, r1, #4
    dc02:	6008      	str	r0, [r1, #0]
    dc04:	1f09      	subs	r1, r1, #4
    dc06:	6008      	str	r0, [r1, #0]
    dc08:	490f      	ldr	r1, [pc, #60]	; (dc48 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    dc0a:	6008      	str	r0, [r1, #0]
    dc0c:	490f      	ldr	r1, [pc, #60]	; (dc4c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x68>)
    dc0e:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    dc12:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    dc16:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    dc1a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    dc1e:	f7ff fcbf 	bl	d5a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    dc22:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    dc26:	2002      	movs	r0, #2
    dc28:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    dc2c:	f3bf 8f4f 	dsb	sy
    dc30:	f3bf 8f6f 	isb	sy
    dc34:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    dc38:	bd10      	pop	{r4, pc}
    dc3a:	0000      	.short	0x0000
    dc3c:	200016cc 	.word	0x200016cc
    dc40:	4001f508 	.word	0x4001f508
    dc44:	40008548 	.word	0x40008548
    dc48:	4000854c 	.word	0x4000854c
    dc4c:	40008000 	.word	0x40008000

0000dc50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    dc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc54:	2601      	movs	r6, #1
    dc56:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    dc5a:	2402      	movs	r4, #2
    dc5c:	f04f 0800 	mov.w	r8, #0
    dc60:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
    dc64:	f3bf 8f4f 	dsb	sy
    dc68:	f3bf 8f6f 	isb	sy
    dc6c:	4830      	ldr	r0, [pc, #192]	; (dd30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe0>)
    dc6e:	f8c0 8000 	str.w	r8, [r0]
    dc72:	6006      	str	r6, [r0, #0]
    dc74:	f001 f9c6 	bl	f004 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    dc78:	4f2e      	ldr	r7, [pc, #184]	; (dd34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>)
    dc7a:	b118      	cbz	r0, dc84 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    dc7c:	6838      	ldr	r0, [r7, #0]
    dc7e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    dc82:	6038      	str	r0, [r7, #0]
    dc84:	f001 f9b2 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    dc88:	b138      	cbz	r0, dc9a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    dc8a:	6838      	ldr	r0, [r7, #0]
    dc8c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    dc90:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    dc94:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    dc98:	6038      	str	r0, [r7, #0]
    dc9a:	f001 f9c3 	bl	f024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    dc9e:	b130      	cbz	r0, dcae <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x5e>
    dca0:	4825      	ldr	r0, [pc, #148]	; (dd38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    dca2:	6801      	ldr	r1, [r0, #0]
    dca4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    dca8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    dcac:	6001      	str	r1, [r0, #0]
    dcae:	4924      	ldr	r1, [pc, #144]	; (dd40 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    dcb0:	4822      	ldr	r0, [pc, #136]	; (dd3c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    dcb2:	6008      	str	r0, [r1, #0]
    dcb4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    dcb8:	6e00      	ldr	r0, [r0, #96]	; 0x60
    dcba:	f1b0 3fff 	cmp.w	r0, #4294967295
    dcbe:	d004      	beq.n	dcca <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7a>
    dcc0:	4920      	ldr	r1, [pc, #128]	; (dd44 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    dcc2:	680a      	ldr	r2, [r1, #0]
    dcc4:	f360 4217 	bfi	r2, r0, #16, #8
    dcc8:	600a      	str	r2, [r1, #0]
    dcca:	491f      	ldr	r1, [pc, #124]	; (dd48 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    dccc:	f240 605b 	movw	r0, #1627	; 0x65b
    dcd0:	6008      	str	r0, [r1, #0]
    dcd2:	1f09      	subs	r1, r1, #4
    dcd4:	f240 1003 	movw	r0, #259	; 0x103
    dcd8:	6008      	str	r0, [r1, #0]
    dcda:	1f08      	subs	r0, r1, #4
    dcdc:	6006      	str	r6, [r0, #0]
    dcde:	491b      	ldr	r1, [pc, #108]	; (dd4c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    dce0:	2003      	movs	r0, #3
    dce2:	6008      	str	r0, [r1, #0]
    dce4:	491a      	ldr	r1, [pc, #104]	; (dd50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    dce6:	f240 1001 	movw	r0, #257	; 0x101
    dcea:	6008      	str	r0, [r1, #0]
    dcec:	4919      	ldr	r1, [pc, #100]	; (dd54 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    dcee:	f8c1 4200 	str.w	r4, [r1, #512]	; 0x200
    dcf2:	4a1a      	ldr	r2, [pc, #104]	; (dd5c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    dcf4:	4818      	ldr	r0, [pc, #96]	; (dd58 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    dcf6:	6010      	str	r0, [r2, #0]
    dcf8:	4819      	ldr	r0, [pc, #100]	; (dd60 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    dcfa:	f8a0 8044 	strh.w	r8, [r0, #68]	; 0x44
    dcfe:	3014      	adds	r0, #20
    dd00:	2296      	movs	r2, #150	; 0x96
    dd02:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
    dd06:	f880 803c 	strb.w	r8, [r0, #60]	; 0x3c
    dd0a:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
    dd0e:	f8c5 4280 	str.w	r4, [r5, #640]	; 0x280
    dd12:	2010      	movs	r0, #16
    dd14:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
    dd18:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    dd1c:	4811      	ldr	r0, [pc, #68]	; (dd64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    dd1e:	6840      	ldr	r0, [r0, #4]
    dd20:	2800      	cmp	r0, #0
    dd22:	bf08      	it	eq
    dd24:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dd2c:	4700      	bx	r0
    dd2e:	0000      	.short	0x0000
    dd30:	40001ffc 	.word	0x40001ffc
    dd34:	4000173c 	.word	0x4000173c
    dd38:	40001740 	.word	0x40001740
    dd3c:	8900002c 	.word	0x8900002c
    dd40:	40001778 	.word	0x40001778
    dd44:	4000158c 	.word	0x4000158c
    dd48:	40001538 	.word	0x40001538
    dd4c:	40001510 	.word	0x40001510
    dd50:	40001650 	.word	0x40001650
    dd54:	40001000 	.word	0x40001000
    dd58:	0c0e0000 	.word	0x0c0e0000
    dd5c:	4001f508 	.word	0x4001f508
    dd60:	200016b8 	.word	0x200016b8
    dd64:	20000390 	.word	0x20000390

0000dd68 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    dd68:	4901      	ldr	r1, [pc, #4]	; (dd70 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    dd6a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
    dd6e:	4770      	bx	lr
    dd70:	200016cc 	.word	0x200016cc

0000dd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    dd74:	491e      	ldr	r1, [pc, #120]	; (ddf0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    dd76:	b510      	push	{r4, lr}
    dd78:	6008      	str	r0, [r1, #0]
    dd7a:	491e      	ldr	r1, [pc, #120]	; (ddf4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    dd7c:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
    dd80:	f040 0001 	orr.w	r0, r0, #1
    dd84:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
    dd88:	f010 0f01 	tst.w	r0, #1
    dd8c:	bf08      	it	eq
    dd8e:	bd10      	popeq	{r4, pc}
    dd90:	f010 0f02 	tst.w	r0, #2
    dd94:	d019      	beq.n	ddca <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x56>
    dd96:	4818      	ldr	r0, [pc, #96]	; (ddf8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    dd98:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    dd9c:	f041 0101 	orr.w	r1, r1, #1
    dda0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    dda4:	4815      	ldr	r0, [pc, #84]	; (ddfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    dda6:	6801      	ldr	r1, [r0, #0]
    dda8:	290b      	cmp	r1, #11
    ddaa:	bf1c      	itt	ne
    ddac:	6801      	ldrne	r1, [r0, #0]
    ddae:	290a      	cmpne	r1, #10
    ddb0:	d005      	beq.n	ddbe <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x4a>
    ddb2:	6801      	ldr	r1, [r0, #0]
    ddb4:	2903      	cmp	r1, #3
    ddb6:	bf1e      	ittt	ne
    ddb8:	6800      	ldrne	r0, [r0, #0]
    ddba:	2802      	cmpne	r0, #2
    ddbc:	bd10      	popne	{r4, pc}
    ddbe:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    ddc2:	f04f 003e 	mov.w	r0, #62	; 0x3e
    ddc6:	f7f5 ff23 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddca:	f010 0f04 	tst.w	r0, #4
    ddce:	bf08      	it	eq
    ddd0:	bd10      	popeq	{r4, pc}
    ddd2:	480b      	ldr	r0, [pc, #44]	; (de00 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    ddd4:	490b      	ldr	r1, [pc, #44]	; (de04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x90>)
    ddd6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ddda:	480b      	ldr	r0, [pc, #44]	; (de08 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x94>)
    dddc:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    dde0:	2801      	cmp	r0, #1
    dde2:	bf18      	it	ne
    dde4:	bd10      	popne	{r4, pc}
    dde6:	f240 511f 	movw	r1, #1311	; 0x51f
    ddea:	203e      	movs	r0, #62	; 0x3e
    ddec:	f7f5 ff10 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddf0:	40001504 	.word	0x40001504
    ddf4:	200016cc 	.word	0x200016cc
    ddf8:	40001000 	.word	0x40001000
    ddfc:	40001550 	.word	0x40001550
    de00:	40001008 	.word	0x40001008
    de04:	4001f098 	.word	0x4001f098
    de08:	40008000 	.word	0x40008000

0000de0c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    de0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de10:	460e      	mov	r6, r1
    de12:	49bd      	ldr	r1, [pc, #756]	; (e108 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2fc>)
    de14:	4680      	mov	r8, r0
    de16:	b087      	sub	sp, #28
    de18:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    de1c:	4614      	mov	r4, r2
    de1e:	6008      	str	r0, [r1, #0]
    de20:	4dba      	ldr	r5, [pc, #744]	; (e10c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x300>)
    de22:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
    de26:	42a0      	cmp	r0, r4
    de28:	bf1c      	itt	ne
    de2a:	4610      	movne	r0, r2
    de2c:	f000 ff88 	blne	ed40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    de30:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    de34:	2925      	cmp	r1, #37	; 0x25
    de36:	bf08      	it	eq
    de38:	2002      	moveq	r0, #2
    de3a:	d00f      	beq.n	de5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x50>
    de3c:	2926      	cmp	r1, #38	; 0x26
    de3e:	bf08      	it	eq
    de40:	201a      	moveq	r0, #26
    de42:	d00b      	beq.n	de5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x50>
    de44:	2927      	cmp	r1, #39	; 0x27
    de46:	bf08      	it	eq
    de48:	2050      	moveq	r0, #80	; 0x50
    de4a:	d007      	beq.n	de5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x50>
    de4c:	290a      	cmp	r1, #10
    de4e:	4608      	mov	r0, r1
    de50:	bf94      	ite	ls
    de52:	2204      	movls	r2, #4
    de54:	2206      	movhi	r2, #6
    de56:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    de5a:	b2c0      	uxtb	r0, r0
    de5c:	4aac      	ldr	r2, [pc, #688]	; (e110 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x304>)
    de5e:	6010      	str	r0, [r2, #0]
    de60:	48ac      	ldr	r0, [pc, #688]	; (e114 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x308>)
    de62:	6001      	str	r1, [r0, #0]
    de64:	f8df b2b0 	ldr.w	fp, [pc, #688]	; e118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x30c>
    de68:	4fac      	ldr	r7, [pc, #688]	; (e11c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x310>)
    de6a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    de6e:	f04f 0901 	mov.w	r9, #1
    de72:	f1b8 0f00 	cmp.w	r8, #0
    de76:	d007      	beq.n	de88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x7c>
    de78:	f1b8 0f01 	cmp.w	r8, #1
    de7c:	d066      	beq.n	df4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x140>
    de7e:	f240 61f2 	movw	r1, #1778	; 0x6f2
    de82:	203e      	movs	r0, #62	; 0x3e
    de84:	f7f5 fec4 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de88:	2c01      	cmp	r4, #1
    de8a:	bf08      	it	eq
    de8c:	2000      	moveq	r0, #0
    de8e:	d00b      	beq.n	dea8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9c>
    de90:	2c02      	cmp	r4, #2
    de92:	bf08      	it	eq
    de94:	2001      	moveq	r0, #1
    de96:	d007      	beq.n	dea8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9c>
    de98:	2c04      	cmp	r4, #4
    de9a:	bf08      	it	eq
    de9c:	2003      	moveq	r0, #3
    de9e:	d003      	beq.n	dea8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9c>
    dea0:	2c08      	cmp	r4, #8
    dea2:	bf08      	it	eq
    dea4:	2002      	moveq	r0, #2
    dea6:	d165      	bne.n	df74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x168>
    dea8:	f995 2021 	ldrsb.w	r2, [r5, #33]	; 0x21
    deac:	ab05      	add	r3, sp, #20
    deae:	f7f2 fa91 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    deb2:	2800      	cmp	r0, #0
    deb4:	d169      	bne.n	df8a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17e>
    deb6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    deba:	f000 ff3b 	bl	ed34 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    debe:	f001 f8b1 	bl	f024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    dec2:	b178      	cbz	r0, dee4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>
    dec4:	4996      	ldr	r1, [pc, #600]	; (e120 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x314>)
    dec6:	680a      	ldr	r2, [r1, #0]
    dec8:	0648      	lsls	r0, r1, #25
    deca:	2c02      	cmp	r4, #2
    decc:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    ded0:	bf0c      	ite	eq
    ded2:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    ded6:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    deda:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    dede:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    dee2:	6008      	str	r0, [r1, #0]
    dee4:	2c02      	cmp	r4, #2
    dee6:	bf08      	it	eq
    dee8:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    deec:	d005      	beq.n	defa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xee>
    deee:	2c01      	cmp	r4, #1
    def0:	bf0c      	ite	eq
    def2:	f640 0034 	movweq	r0, #2100	; 0x834
    def6:	f640 2028 	movwne	r0, #2600	; 0xa28
    defa:	f649 51f8 	movw	r1, #40440	; 0x9df8
    defe:	4401      	add	r1, r0
    df00:	7a68      	ldrb	r0, [r5, #9]
    df02:	2801      	cmp	r0, #1
    df04:	d004      	beq.n	df10 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x104>
    df06:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    df0a:	fbb1 f1fa 	udiv	r1, r1, sl
    df0e:	1a76      	subs	r6, r6, r1
    df10:	2800      	cmp	r0, #0
    df12:	bf04      	itt	eq
    df14:	4638      	moveq	r0, r7
    df16:	f8cb 7514 	streq.w	r7, [fp, #1300]	; 0x514
    df1a:	f885 900b 	strb.w	r9, [r5, #11]
    df1e:	4881      	ldr	r0, [pc, #516]	; (e124 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x318>)
    df20:	6006      	str	r6, [r0, #0]
    df22:	497d      	ldr	r1, [pc, #500]	; (e118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x30c>)
    df24:	4880      	ldr	r0, [pc, #512]	; (e128 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x31c>)
    df26:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    df2a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    df2c:	f8df b1d8 	ldr.w	fp, [pc, #472]	; e108 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2fc>
    df30:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    df34:	63a8      	str	r0, [r5, #56]	; 0x38
    df36:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    df3a:	f8cb 0000 	str.w	r0, [fp]
    df3e:	2010      	movs	r0, #16
    df40:	f8c7 0304 	str.w	r0, [r7, #772]	; 0x304
    df44:	f1b8 0f01 	cmp.w	r8, #1
    df48:	d046      	beq.n	dfd8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    df4a:	e05a      	b.n	e002 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f6>
    df4c:	7aa8      	ldrb	r0, [r5, #10]
    df4e:	2801      	cmp	r0, #1
    df50:	d124      	bne.n	df9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x190>
    df52:	7b68      	ldrb	r0, [r5, #13]
    df54:	2801      	cmp	r0, #1
    df56:	bf08      	it	eq
    df58:	2000      	moveq	r0, #0
    df5a:	d010      	beq.n	df7e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x172>
    df5c:	2802      	cmp	r0, #2
    df5e:	bf08      	it	eq
    df60:	2001      	moveq	r0, #1
    df62:	d00c      	beq.n	df7e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x172>
    df64:	2804      	cmp	r0, #4
    df66:	bf08      	it	eq
    df68:	2003      	moveq	r0, #3
    df6a:	d008      	beq.n	df7e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x172>
    df6c:	2808      	cmp	r0, #8
    df6e:	bf08      	it	eq
    df70:	2002      	moveq	r0, #2
    df72:	d004      	beq.n	df7e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x172>
    df74:	f240 31f3 	movw	r1, #1011	; 0x3f3
    df78:	2006      	movs	r0, #6
    df7a:	f7f5 fe49 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df7e:	f995 2021 	ldrsb.w	r2, [r5, #33]	; 0x21
    df82:	ab05      	add	r3, sp, #20
    df84:	f7f2 fa26 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    df88:	b120      	cbz	r0, df94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x188>
    df8a:	f240 41a1 	movw	r1, #1185	; 0x4a1
    df8e:	203e      	movs	r0, #62	; 0x3e
    df90:	f7f5 fe3e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df94:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    df98:	f000 fecc 	bl	ed34 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    df9c:	4620      	mov	r0, r4
    df9e:	f000 feaf 	bl	ed00 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
    dfa2:	f001 f83f 	bl	f024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    dfa6:	b938      	cbnz	r0, dfb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ac>
    dfa8:	f001 f82c 	bl	f004 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    dfac:	b920      	cbnz	r0, dfb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ac>
    dfae:	485f      	ldr	r0, [pc, #380]	; (e12c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x320>)
    dfb0:	6801      	ldr	r1, [r0, #0]
    dfb2:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    dfb6:	6001      	str	r1, [r0, #0]
    dfb8:	7a69      	ldrb	r1, [r5, #9]
    dfba:	2901      	cmp	r1, #1
    dfbc:	d004      	beq.n	dfc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1bc>
    dfbe:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    dfc2:	fbb0 f0fa 	udiv	r0, r0, sl
    dfc6:	1a36      	subs	r6, r6, r0
    dfc8:	4859      	ldr	r0, [pc, #356]	; (e130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x324>)
    dfca:	2900      	cmp	r1, #0
    dfcc:	bf08      	it	eq
    dfce:	f8cb 0514 	streq.w	r0, [fp, #1300]	; 0x514
    dfd2:	2002      	movs	r0, #2
    dfd4:	72e8      	strb	r0, [r5, #11]
    dfd6:	e7a2      	b.n	df1e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x112>
    dfd8:	4856      	ldr	r0, [pc, #344]	; (e134 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x328>)
    dfda:	6800      	ldr	r0, [r0, #0]
    dfdc:	b970      	cbnz	r0, dffc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f0>
    dfde:	f014 0f0c 	tst.w	r4, #12
    dfe2:	d00b      	beq.n	dffc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f0>
    dfe4:	f8c7 9304 	str.w	r9, [r7, #772]	; 0x304
    dfe8:	2001      	movs	r0, #1
    dfea:	f000 fdcb 	bl	eb84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    dfee:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
    dff2:	f8c7 9040 	str.w	r9, [r7, #64]	; 0x40
    dff6:	f885 903d 	strb.w	r9, [r5, #61]	; 0x3d
    dffa:	e002      	b.n	e002 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f6>
    dffc:	2000      	movs	r0, #0
    dffe:	f000 fdc1 	bl	eb84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    e002:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    e006:	f8cb 0000 	str.w	r0, [fp]
    e00a:	7a68      	ldrb	r0, [r5, #9]
    e00c:	2800      	cmp	r0, #0
    e00e:	bf04      	itt	eq
    e010:	f895 003c 	ldrbeq.w	r0, [r5, #60]	; 0x3c
    e014:	f040 0002 	orreq.w	r0, r0, #2
    e018:	d006      	beq.n	e028 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x21c>
    e01a:	2801      	cmp	r0, #1
    e01c:	bf04      	itt	eq
    e01e:	f895 003c 	ldrbeq.w	r0, [r5, #60]	; 0x3c
    e022:	f040 0004 	orreq.w	r0, r0, #4
    e026:	d101      	bne.n	e02c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x220>
    e028:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    e02c:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
    e030:	4941      	ldr	r1, [pc, #260]	; (e138 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32c>)
    e032:	f010 0f01 	tst.w	r0, #1
    e036:	d026      	beq.n	e086 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27a>
    e038:	f010 0f02 	tst.w	r0, #2
    e03c:	d018      	beq.n	e070 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>
    e03e:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
    e042:	f040 0001 	orr.w	r0, r0, #1
    e046:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    e04a:	483c      	ldr	r0, [pc, #240]	; (e13c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x330>)
    e04c:	6802      	ldr	r2, [r0, #0]
    e04e:	2a0b      	cmp	r2, #11
    e050:	bf1c      	itt	ne
    e052:	6802      	ldrne	r2, [r0, #0]
    e054:	2a0a      	cmpne	r2, #10
    e056:	d005      	beq.n	e064 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x258>
    e058:	6802      	ldr	r2, [r0, #0]
    e05a:	2a03      	cmp	r2, #3
    e05c:	bf1c      	itt	ne
    e05e:	6800      	ldrne	r0, [r0, #0]
    e060:	2802      	cmpne	r0, #2
    e062:	d110      	bne.n	e086 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27a>
    e064:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    e068:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e06c:	f7f5 fdd0 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e070:	f010 0f04 	tst.w	r0, #4
    e074:	d007      	beq.n	e086 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27a>
    e076:	4a28      	ldr	r2, [pc, #160]	; (e118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x30c>)
    e078:	4831      	ldr	r0, [pc, #196]	; (e140 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x334>)
    e07a:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    e07e:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
    e082:	2801      	cmp	r0, #1
    e084:	d00a      	beq.n	e09c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x290>
    e086:	f8c1 904c 	str.w	r9, [r1, #76]	; 0x4c
    e08a:	482e      	ldr	r0, [pc, #184]	; (e144 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x338>)
    e08c:	6800      	ldr	r0, [r0, #0]
    e08e:	42b0      	cmp	r0, r6
    e090:	d309      	bcc.n	e0a6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x29a>
    e092:	f44f 61e3 	mov.w	r1, #1816	; 0x718
    e096:	203e      	movs	r0, #62	; 0x3e
    e098:	f7f5 fdba 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e09c:	f240 511f 	movw	r1, #1311	; 0x51f
    e0a0:	203e      	movs	r0, #62	; 0x3e
    e0a2:	f7f5 fdb5 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0a6:	f1b8 0f01 	cmp.w	r8, #1
    e0aa:	bf08      	it	eq
    e0ac:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    e0b0:	d00d      	beq.n	e0ce <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c2>
    e0b2:	2c02      	cmp	r4, #2
    e0b4:	bf08      	it	eq
    e0b6:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e0ba:	d005      	beq.n	e0c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2bc>
    e0bc:	2c01      	cmp	r4, #1
    e0be:	bf0c      	ite	eq
    e0c0:	f640 0034 	movweq	r0, #2100	; 0x834
    e0c4:	f640 2028 	movwne	r0, #2600	; 0xa28
    e0c8:	f24a 0150 	movw	r1, #41040	; 0xa050
    e0cc:	4408      	add	r0, r1
    e0ce:	491e      	ldr	r1, [pc, #120]	; (e148 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x33c>)
    e0d0:	fbb0 f0fa 	udiv	r0, r0, sl
    e0d4:	f101 0228 	add.w	r2, r1, #40	; 0x28
    e0d8:	f1b8 0f01 	cmp.w	r8, #1
    e0dc:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    e0e0:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    e0e4:	6b89      	ldr	r1, [r1, #56]	; 0x38
    e0e6:	9104      	str	r1, [sp, #16]
    e0e8:	bf14      	ite	ne
    e0ea:	2101      	movne	r1, #1
    e0ec:	2100      	moveq	r1, #0
    e0ee:	f88d 1001 	strb.w	r1, [sp, #1]
    e0f2:	e9cd 6003 	strd	r6, r0, [sp, #12]
    e0f6:	4668      	mov	r0, sp
    e0f8:	f7f5 fc8c 	bl	3a14 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    e0fc:	4630      	mov	r0, r6
    e0fe:	f000 fd6b 	bl	ebd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb8>
    e102:	b007      	add	sp, #28
    e104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e108:	4001f504 	.word	0x4001f504
    e10c:	200016cc 	.word	0x200016cc
    e110:	40001508 	.word	0x40001508
    e114:	40001554 	.word	0x40001554
    e118:	4001f098 	.word	0x4001f098
    e11c:	40001000 	.word	0x40001000
    e120:	40001588 	.word	0x40001588
    e124:	40008540 	.word	0x40008540
    e128:	40008140 	.word	0x40008140
    e12c:	40001568 	.word	0x40001568
    e130:	40001004 	.word	0x40001004
    e134:	40001788 	.word	0x40001788
    e138:	40008000 	.word	0x40008000
    e13c:	40001550 	.word	0x40001550
    e140:	40001008 	.word	0x40001008
    e144:	4000854c 	.word	0x4000854c
    e148:	0000ecb0 	.word	0x0000ecb0

0000e14c <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>:
    e14c:	b508      	push	{r3, lr}
    e14e:	20ff      	movs	r0, #255	; 0xff
    e150:	f88d 0000 	strb.w	r0, [sp]
    e154:	480e      	ldr	r0, [pc, #56]	; (e190 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x44>)
    e156:	2100      	movs	r1, #0
    e158:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    e15c:	2101      	movs	r1, #1
    e15e:	6101      	str	r1, [r0, #16]
    e160:	e005      	b.n	e16e <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x22>
    e162:	bf00      	nop
    e164:	f89d 1000 	ldrb.w	r1, [sp]
    e168:	1e49      	subs	r1, r1, #1
    e16a:	f88d 1000 	strb.w	r1, [sp]
    e16e:	f89d 1000 	ldrb.w	r1, [sp]
    e172:	b119      	cbz	r1, e17c <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x30>
    e174:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    e178:	2900      	cmp	r1, #0
    e17a:	d0f3      	beq.n	e164 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x18>
    e17c:	f89d 0000 	ldrb.w	r0, [sp]
    e180:	2800      	cmp	r0, #0
    e182:	bf18      	it	ne
    e184:	bd08      	popne	{r3, pc}
    e186:	f240 7172 	movw	r1, #1906	; 0x772
    e18a:	203e      	movs	r0, #62	; 0x3e
    e18c:	f7f5 fd40 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e190:	40001000 	.word	0x40001000

0000e194 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    e194:	b530      	push	{r4, r5, lr}
    e196:	b087      	sub	sp, #28
    e198:	460d      	mov	r5, r1
    e19a:	b16a      	cbz	r2, e1b8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    e19c:	4c4d      	ldr	r4, [pc, #308]	; (e2d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x140>)
    e19e:	f012 0f01 	tst.w	r2, #1
    e1a2:	7260      	strb	r0, [r4, #9]
    e1a4:	7363      	strb	r3, [r4, #13]
    e1a6:	bf18      	it	ne
    e1a8:	2a01      	cmpne	r2, #1
    e1aa:	d00a      	beq.n	e1c2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x2e>
    e1ac:	f640 01d9 	movw	r1, #2265	; 0x8d9
    e1b0:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e1b4:	f7f5 fd2c 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1b8:	f640 01d2 	movw	r1, #2258	; 0x8d2
    e1bc:	203e      	movs	r0, #62	; 0x3e
    e1be:	f7f5 fd27 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1c2:	2d00      	cmp	r5, #0
    e1c4:	bf0c      	ite	eq
    e1c6:	2001      	moveq	r0, #1
    e1c8:	2002      	movne	r0, #2
    e1ca:	72a0      	strb	r0, [r4, #10]
    e1cc:	7322      	strb	r2, [r4, #12]
    e1ce:	2801      	cmp	r0, #1
    e1d0:	d006      	beq.n	e1e0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4c>
    e1d2:	2802      	cmp	r0, #2
    e1d4:	d02d      	beq.n	e232 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    e1d6:	f640 01ef 	movw	r1, #2287	; 0x8ef
    e1da:	203e      	movs	r0, #62	; 0x3e
    e1dc:	f7f5 fd18 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1e0:	7ae0      	ldrb	r0, [r4, #11]
    e1e2:	2802      	cmp	r0, #2
    e1e4:	d125      	bne.n	e232 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    e1e6:	2b01      	cmp	r3, #1
    e1e8:	bf08      	it	eq
    e1ea:	2000      	moveq	r0, #0
    e1ec:	d010      	beq.n	e210 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e1ee:	2b02      	cmp	r3, #2
    e1f0:	bf08      	it	eq
    e1f2:	2001      	moveq	r0, #1
    e1f4:	d00c      	beq.n	e210 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e1f6:	2b04      	cmp	r3, #4
    e1f8:	bf08      	it	eq
    e1fa:	2003      	moveq	r0, #3
    e1fc:	d008      	beq.n	e210 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e1fe:	2b08      	cmp	r3, #8
    e200:	bf08      	it	eq
    e202:	2002      	moveq	r0, #2
    e204:	d004      	beq.n	e210 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e206:	f240 31f3 	movw	r1, #1011	; 0x3f3
    e20a:	2006      	movs	r0, #6
    e20c:	f7f5 fd00 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e210:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    e214:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    e218:	ab05      	add	r3, sp, #20
    e21a:	f7f2 f8db 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e21e:	b120      	cbz	r0, e22a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x96>
    e220:	f240 41a1 	movw	r1, #1185	; 0x4a1
    e224:	203e      	movs	r0, #62	; 0x3e
    e226:	f7f5 fcf3 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e22a:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e22e:	f000 fd81 	bl	ed34 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e232:	f7ff fc9f 	bl	db74 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY>
    e236:	7ae2      	ldrb	r2, [r4, #11]
    e238:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e23c:	2a02      	cmp	r2, #2
    e23e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    e242:	d028      	beq.n	e296 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x102>
    e244:	2802      	cmp	r0, #2
    e246:	bf08      	it	eq
    e248:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e24c:	d009      	beq.n	e262 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xce>
    e24e:	2801      	cmp	r0, #1
    e250:	bf08      	it	eq
    e252:	f240 50dc 	movweq	r0, #1500	; 0x5dc
    e256:	d004      	beq.n	e262 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xce>
    e258:	2804      	cmp	r0, #4
    e25a:	bf0c      	ite	eq
    e25c:	2000      	moveq	r0, #0
    e25e:	f241 7070 	movwne	r0, #6000	; 0x1770
    e262:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e266:	fbb0 f0f1 	udiv	r0, r0, r1
    e26a:	4410      	add	r0, r2
    e26c:	491a      	ldr	r1, [pc, #104]	; (e2d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x144>)
    e26e:	2d01      	cmp	r5, #1
    e270:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    e274:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    e278:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    e27c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    e27e:	9104      	str	r1, [sp, #16]
    e280:	bf14      	ite	ne
    e282:	2101      	movne	r1, #1
    e284:	2100      	moveq	r1, #0
    e286:	f88d 1001 	strb.w	r1, [sp, #1]
    e28a:	9001      	str	r0, [sp, #4]
    e28c:	4668      	mov	r0, sp
    e28e:	f7f5 fbc1 	bl	3a14 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    e292:	b007      	add	sp, #28
    e294:	bd30      	pop	{r4, r5, pc}
    e296:	2801      	cmp	r0, #1
    e298:	bf08      	it	eq
    e29a:	f641 6014 	movweq	r0, #7700	; 0x1e14
    e29e:	d013      	beq.n	e2c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x134>
    e2a0:	2802      	cmp	r0, #2
    e2a2:	bf08      	it	eq
    e2a4:	f241 1030 	movweq	r0, #4400	; 0x1130
    e2a8:	d00e      	beq.n	e2c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x134>
    e2aa:	2804      	cmp	r0, #4
    e2ac:	bf08      	it	eq
    e2ae:	f645 70b4 	movweq	r0, #24500	; 0x5fb4
    e2b2:	d009      	beq.n	e2c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x134>
    e2b4:	2808      	cmp	r0, #8
    e2b6:	bf08      	it	eq
    e2b8:	f247 303c 	movweq	r0, #29500	; 0x733c
    e2bc:	d004      	beq.n	e2c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x134>
    e2be:	f640 318c 	movw	r1, #2956	; 0xb8c
    e2c2:	203e      	movs	r0, #62	; 0x3e
    e2c4:	f7f5 fca4 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2c8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e2cc:	fbb0 f0f1 	udiv	r0, r0, r1
    e2d0:	1a10      	subs	r0, r2, r0
    e2d2:	e7cb      	b.n	e26c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xd8>
    e2d4:	200016cc 	.word	0x200016cc
    e2d8:	0000ecb0 	.word	0x0000ecb0

0000e2dc <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
    e2dc:	4901      	ldr	r1, [pc, #4]	; (e2e4 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
    e2de:	7248      	strb	r0, [r1, #9]
    e2e0:	4770      	bx	lr
    e2e2:	0000      	.short	0x0000
    e2e4:	200016cc 	.word	0x200016cc

0000e2e8 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>:
    e2e8:	4804      	ldr	r0, [pc, #16]	; (e2fc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA+0x14>)
    e2ea:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e2ee:	f021 0110 	bic.w	r1, r1, #16
    e2f2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    e2f6:	2101      	movs	r1, #1
    e2f8:	6181      	str	r1, [r0, #24]
    e2fa:	4770      	bx	lr
    e2fc:	40001000 	.word	0x40001000

0000e300 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>:
    e300:	4907      	ldr	r1, [pc, #28]	; (e320 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ+0x20>)
    e302:	20ff      	movs	r0, #255	; 0xff
    e304:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f
    e308:	4806      	ldr	r0, [pc, #24]	; (e324 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ+0x24>)
    e30a:	2100      	movs	r1, #0
    e30c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    e310:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e314:	f041 0110 	orr.w	r1, r1, #16
    e318:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    e31c:	4770      	bx	lr
    e31e:	0000      	.short	0x0000
    e320:	200016cc 	.word	0x200016cc
    e324:	40001000 	.word	0x40001000

0000e328 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    e328:	4910      	ldr	r1, [pc, #64]	; (e36c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x44>)
    e32a:	b081      	sub	sp, #4
    e32c:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    e330:	2a01      	cmp	r2, #1
    e332:	d00d      	beq.n	e350 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x28>
    e334:	490e      	ldr	r1, [pc, #56]	; (e370 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x48>)
    e336:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
    e33a:	29ff      	cmp	r1, #255	; 0xff
    e33c:	bf0d      	iteet	eq
    e33e:	2000      	moveq	r0, #0
    e340:	4249      	negne	r1, r1
    e342:	7001      	strbne	r1, [r0, #0]
    e344:	b001      	addeq	sp, #4
    e346:	bf08      	it	eq
    e348:	4770      	bxeq	lr
    e34a:	2001      	movs	r0, #1
    e34c:	b001      	add	sp, #4
    e34e:	4770      	bx	lr
    e350:	4a08      	ldr	r2, [pc, #32]	; (e374 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x4c>)
    e352:	6812      	ldr	r2, [r2, #0]
    e354:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e358:	4252      	negs	r2, r2
    e35a:	7002      	strb	r2, [r0, #0]
    e35c:	2000      	movs	r0, #0
    e35e:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    e362:	4805      	ldr	r0, [pc, #20]	; (e378 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x50>)
    e364:	6800      	ldr	r0, [r0, #0]
    e366:	9000      	str	r0, [sp, #0]
    e368:	e7ef      	b.n	e34a <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x22>
    e36a:	0000      	.short	0x0000
    e36c:	40001000 	.word	0x40001000
    e370:	200016cc 	.word	0x200016cc
    e374:	40001548 	.word	0x40001548
    e378:	4000111c 	.word	0x4000111c

0000e37c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    e37c:	4a04      	ldr	r2, [pc, #16]	; (e390 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    e37e:	6803      	ldr	r3, [r0, #0]
    e380:	f8c2 3016 	str.w	r3, [r2, #22]
    e384:	8880      	ldrh	r0, [r0, #4]
    e386:	8350      	strh	r0, [r2, #26]
    e388:	f102 0014 	add.w	r0, r2, #20
    e38c:	7201      	strb	r1, [r0, #8]
    e38e:	4770      	bx	lr
    e390:	200016b8 	.word	0x200016b8

0000e394 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    e394:	4a03      	ldr	r2, [pc, #12]	; (e3a4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    e396:	78c1      	ldrb	r1, [r0, #3]
    e398:	6011      	str	r1, [r2, #0]
    e39a:	6800      	ldr	r0, [r0, #0]
    e39c:	4902      	ldr	r1, [pc, #8]	; (e3a8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    e39e:	0200      	lsls	r0, r0, #8
    e3a0:	6008      	str	r0, [r1, #0]
    e3a2:	4770      	bx	lr
    e3a4:	40001524 	.word	0x40001524
    e3a8:	4000151c 	.word	0x4000151c

0000e3ac <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    e3ac:	6800      	ldr	r0, [r0, #0]
    e3ae:	4902      	ldr	r1, [pc, #8]	; (e3b8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    e3b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e3b4:	6008      	str	r0, [r1, #0]
    e3b6:	4770      	bx	lr
    e3b8:	4000153c 	.word	0x4000153c

0000e3bc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    e3bc:	b510      	push	{r4, lr}
    e3be:	2200      	movs	r2, #0
    e3c0:	2901      	cmp	r1, #1
    e3c2:	d010      	beq.n	e3e6 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x2a>
    e3c4:	2902      	cmp	r1, #2
    e3c6:	bf08      	it	eq
    e3c8:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    e3cc:	d00b      	beq.n	e3e6 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x2a>
    e3ce:	2904      	cmp	r1, #4
    e3d0:	bf14      	ite	ne
    e3d2:	2908      	cmpne	r1, #8
    e3d4:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    e3d8:	d005      	beq.n	e3e6 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x2a>
    e3da:	f44f 7115 	mov.w	r1, #596	; 0x254
    e3de:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e3e2:	f7f5 fc15 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3e6:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    e3ea:	4a0b      	ldr	r2, [pc, #44]	; (e418 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x5c>)
    e3ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e3f0:	6011      	str	r1, [r2, #0]
    e3f2:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    e3f6:	1d11      	adds	r1, r2, #4
    e3f8:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    e3fc:	6008      	str	r0, [r1, #0]
    e3fe:	4807      	ldr	r0, [pc, #28]	; (e41c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x60>)
    e400:	6801      	ldr	r1, [r0, #0]
    e402:	2903      	cmp	r1, #3
    e404:	bf1e      	ittt	ne
    e406:	6800      	ldrne	r0, [r0, #0]
    e408:	280b      	cmpne	r0, #11
    e40a:	bd10      	popne	{r4, pc}
    e40c:	f44f 711d 	mov.w	r1, #628	; 0x274
    e410:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e414:	f7f5 fbfc 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e418:	40001514 	.word	0x40001514
    e41c:	40001550 	.word	0x40001550

0000e420 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    e420:	b510      	push	{r4, lr}
    e422:	2200      	movs	r2, #0
    e424:	2901      	cmp	r1, #1
    e426:	d010      	beq.n	e44a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x2a>
    e428:	2902      	cmp	r1, #2
    e42a:	bf08      	it	eq
    e42c:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    e430:	d00b      	beq.n	e44a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x2a>
    e432:	2904      	cmp	r1, #4
    e434:	bf14      	ite	ne
    e436:	2908      	cmpne	r1, #8
    e438:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    e43c:	d005      	beq.n	e44a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x2a>
    e43e:	f44f 7115 	mov.w	r1, #596	; 0x254
    e442:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e446:	f7f5 fbe3 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e44a:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    e44e:	4a05      	ldr	r2, [pc, #20]	; (e464 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x44>)
    e450:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e454:	6011      	str	r1, [r2, #0]
    e456:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    e45a:	1d11      	adds	r1, r2, #4
    e45c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    e460:	6008      	str	r0, [r1, #0]
    e462:	bd10      	pop	{r4, pc}
    e464:	40001514 	.word	0x40001514

0000e468 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    e468:	4901      	ldr	r1, [pc, #4]	; (e470 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    e46a:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    e46e:	4770      	bx	lr
    e470:	200016cc 	.word	0x200016cc

0000e474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    e474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e478:	f8df 8404 	ldr.w	r8, [pc, #1028]	; e880 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>
    e47c:	b083      	sub	sp, #12
    e47e:	2601      	movs	r6, #1
    e480:	f8c8 604c 	str.w	r6, [r8, #76]	; 0x4c
    e484:	f8d8 b14c 	ldr.w	fp, [r8, #332]	; 0x14c
    e488:	48fe      	ldr	r0, [pc, #1016]	; (e884 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    e48a:	f8d0 a000 	ldr.w	sl, [r0]
    e48e:	48fe      	ldr	r0, [pc, #1016]	; (e888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>)
    e490:	6800      	ldr	r0, [r0, #0]
    e492:	4dfe      	ldr	r5, [pc, #1016]	; (e88c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    e494:	49fe      	ldr	r1, [pc, #1016]	; (e890 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    e496:	e9c5 0a11 	strd	r0, sl, [r5, #68]	; 0x44
    e49a:	7808      	ldrb	r0, [r1, #0]
    e49c:	2804      	cmp	r0, #4
    e49e:	d304      	bcc.n	e4aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36>
    e4a0:	f640 216c 	movw	r1, #2668	; 0xa6c
    e4a4:	203e      	movs	r0, #62	; 0x3e
    e4a6:	f7f5 fbb3 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4aa:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
    e4ae:	4cf9      	ldr	r4, [pc, #996]	; (e894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    e4b0:	4bf9      	ldr	r3, [pc, #996]	; (e898 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    e4b2:	2700      	movs	r7, #0
    e4b4:	b1f2      	cbz	r2, e4f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x80>
    e4b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    e4ba:	f112 0900 	adds.w	r9, r2, #0
    e4be:	bf18      	it	ne
    e4c0:	f04f 0901 	movne.w	r9, #1
    e4c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    e4c8:	2a00      	cmp	r2, #0
    e4ca:	bf18      	it	ne
    e4cc:	2201      	movne	r2, #1
    e4ce:	ea52 0c09 	orrs.w	ip, r2, r9
    e4d2:	d015      	beq.n	e500 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    e4d4:	f04f 0c80 	mov.w	ip, #128	; 0x80
    e4d8:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
    e4dc:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    e4e0:	f8c4 c000 	str.w	ip, [r4]
    e4e4:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
    e4e8:	f092 0f01 	teq	r2, #1
    e4ec:	bf1c      	itt	ne
    e4ee:	b003      	addne	sp, #12
    e4f0:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4f4:	7aea      	ldrb	r2, [r5, #11]
    e4f6:	2a01      	cmp	r2, #1
    e4f8:	d07e      	beq.n	e5f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x184>
    e4fa:	2a02      	cmp	r2, #2
    e4fc:	d07d      	beq.n	e5fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x186>
    e4fe:	e0c1      	b.n	e684 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x210>
    e500:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    e504:	469a      	mov	sl, r3
    e506:	49e1      	ldr	r1, [pc, #900]	; (e88c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    e508:	4ae4      	ldr	r2, [pc, #912]	; (e89c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    e50a:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    e50e:	b350      	cbz	r0, e566 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    e510:	f8ca 7100 	str.w	r7, [sl, #256]	; 0x100
    e514:	f8ca 6014 	str.w	r6, [sl, #20]
    e518:	20ff      	movs	r0, #255	; 0xff
    e51a:	9000      	str	r0, [sp, #0]
    e51c:	e002      	b.n	e524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb0>
    e51e:	1e40      	subs	r0, r0, #1
    e520:	9000      	str	r0, [sp, #0]
    e522:	d01b      	beq.n	e55c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    e524:	f8da 011c 	ldr.w	r0, [sl, #284]	; 0x11c
    e528:	2800      	cmp	r0, #0
    e52a:	9800      	ldr	r0, [sp, #0]
    e52c:	d0f7      	beq.n	e51e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    e52e:	b1a8      	cbz	r0, e55c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    e530:	6810      	ldr	r0, [r2, #0]
    e532:	f000 0b7f 	and.w	fp, r0, #127	; 0x7f
    e536:	4559      	cmp	r1, fp
    e538:	bf3c      	itt	cc
    e53a:	2000      	movcc	r0, #0
    e53c:	f000 fb22 	blcc	eb84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    e540:	f885 b03f 	strb.w	fp, [r5, #63]	; 0x3f
    e544:	f8ca 711c 	str.w	r7, [sl, #284]	; 0x11c
    e548:	f8ca 6308 	str.w	r6, [sl, #776]	; 0x308
    e54c:	48d4      	ldr	r0, [pc, #848]	; (e8a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e54e:	6800      	ldr	r0, [r0, #0]
    e550:	9000      	str	r0, [sp, #0]
    e552:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
    e556:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38
    e55a:	e007      	b.n	e56c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    e55c:	f640 210f 	movw	r1, #2575	; 0xa0f
    e560:	203e      	movs	r0, #62	; 0x3e
    e562:	f7f5 fb55 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e566:	f1b9 0f00 	cmp.w	r9, #0
    e56a:	d003      	beq.n	e574 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    e56c:	f1b9 0f00 	cmp.w	r9, #0
    e570:	d02b      	beq.n	e5ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    e572:	e05e      	b.n	e632 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1be>
    e574:	6810      	ldr	r0, [r2, #0]
    e576:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    e57a:	f885 003f 	strb.w	r0, [r5, #63]	; 0x3f
    e57e:	f8ca 711c 	str.w	r7, [sl, #284]	; 0x11c
    e582:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
    e586:	b14a      	cbz	r2, e59c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    e588:	4281      	cmp	r1, r0
    e58a:	d21b      	bcs.n	e5c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    e58c:	2000      	movs	r0, #0
    e58e:	f000 faf9 	bl	eb84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    e592:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
    e596:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38
    e59a:	e013      	b.n	e5c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    e59c:	4ac1      	ldr	r2, [pc, #772]	; (e8a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>)
    e59e:	6812      	ldr	r2, [r2, #0]
    e5a0:	b293      	uxth	r3, r2
    e5a2:	0c12      	lsrs	r2, r2, #16
    e5a4:	4288      	cmp	r0, r1
    e5a6:	d303      	bcc.n	e5b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    e5a8:	2b0f      	cmp	r3, #15
    e5aa:	d907      	bls.n	e5bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    e5ac:	2a02      	cmp	r2, #2
    e5ae:	d205      	bcs.n	e5bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    e5b0:	2001      	movs	r0, #1
    e5b2:	f000 fae7 	bl	eb84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    e5b6:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
    e5ba:	e003      	b.n	e5c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    e5bc:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
    e5c0:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38
    e5c4:	48b6      	ldr	r0, [pc, #728]	; (e8a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e5c6:	6800      	ldr	r0, [r0, #0]
    e5c8:	9000      	str	r0, [sp, #0]
    e5ca:	2180      	movs	r1, #128	; 0x80
    e5cc:	f8ca 1304 	str.w	r1, [sl, #772]	; 0x304
    e5d0:	f8c8 6040 	str.w	r6, [r8, #64]	; 0x40
    e5d4:	48b4      	ldr	r0, [pc, #720]	; (e8a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>)
    e5d6:	6803      	ldr	r3, [r0, #0]
    e5d8:	1d02      	adds	r2, r0, #4
    e5da:	6812      	ldr	r2, [r2, #0]
    e5dc:	f643 2c98 	movw	ip, #15000	; 0x3a98
    e5e0:	4463      	add	r3, ip
    e5e2:	4293      	cmp	r3, r2
    e5e4:	d21b      	bcs.n	e61e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1aa>
    e5e6:	6801      	ldr	r1, [r0, #0]
    e5e8:	f242 7210 	movw	r2, #10000	; 0x2710
    e5ec:	4411      	add	r1, r2
    e5ee:	6001      	str	r1, [r0, #0]
    e5f0:	f8c8 7140 	str.w	r7, [r8, #320]	; 0x140
    e5f4:	49ad      	ldr	r1, [pc, #692]	; (e8ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    e5f6:	e001      	b.n	e5fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x188>
    e5f8:	e023      	b.n	e642 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ce>
    e5fa:	e028      	b.n	e64e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    e5fc:	48ac      	ldr	r0, [pc, #688]	; (e8b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    e5fe:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    e602:	49ac      	ldr	r1, [pc, #688]	; (e8b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    e604:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    e608:	49ab      	ldr	r1, [pc, #684]	; (e8b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    e60a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    e60e:	6008      	str	r0, [r1, #0]
    e610:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    e612:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    e616:	63a8      	str	r0, [r5, #56]	; 0x38
    e618:	b003      	add	sp, #12
    e61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e61e:	6007      	str	r7, [r0, #0]
    e620:	f8c8 7140 	str.w	r7, [r8, #320]	; 0x140
    e624:	f8ca 1308 	str.w	r1, [sl, #776]	; 0x308
    e628:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    e62c:	6020      	str	r0, [r4, #0]
    e62e:	f8c8 7140 	str.w	r7, [r8, #320]	; 0x140
    e632:	2080      	movs	r0, #128	; 0x80
    e634:	f8ca 0308 	str.w	r0, [sl, #776]	; 0x308
    e638:	0300      	lsls	r0, r0, #12
    e63a:	6020      	str	r0, [r4, #0]
    e63c:	b003      	add	sp, #12
    e63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e642:	f895 c018 	ldrb.w	ip, [r5, #24]
    e646:	f1bc 0f00 	cmp.w	ip, #0
    e64a:	d105      	bne.n	e658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    e64c:	e01a      	b.n	e684 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x210>
    e64e:	f895 c019 	ldrb.w	ip, [r5, #25]
    e652:	f1bc 0f00 	cmp.w	ip, #0
    e656:	d015      	beq.n	e684 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x210>
    e658:	f895 c01e 	ldrb.w	ip, [r5, #30]
    e65c:	f895 901f 	ldrb.w	r9, [r5, #31]
    e660:	fa06 fc0c 	lsl.w	ip, r6, ip
    e664:	fa06 f909 	lsl.w	r9, r6, r9
    e668:	ea4c 0c09 	orr.w	ip, ip, r9
    e66c:	f8c4 c000 	str.w	ip, [r4]
    e670:	f895 c020 	ldrb.w	ip, [r5, #32]
    e674:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    e678:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
    e67c:	f50c 4cc0 	add.w	ip, ip, #24576	; 0x6000
    e680:	f8cc 7510 	str.w	r7, [ip, #1296]	; 0x510
    e684:	4c83      	ldr	r4, [pc, #524]	; (e894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    e686:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38
    e68a:	f8c4 c000 	str.w	ip, [r4]
    e68e:	461c      	mov	r4, r3
    e690:	63af      	str	r7, [r5, #56]	; 0x38
    e692:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    e696:	f023 030d 	bic.w	r3, r3, #13
    e69a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e69e:	f885 703c 	strb.w	r7, [r5, #60]	; 0x3c
    e6a2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    e6a6:	2b00      	cmp	r3, #0
    e6a8:	bf08      	it	eq
    e6aa:	f8c8 6048 	streq.w	r6, [r8, #72]	; 0x48
    e6ae:	f04f 0900 	mov.w	r9, #0
    e6b2:	7c2b      	ldrb	r3, [r5, #16]
    e6b4:	b11b      	cbz	r3, e6be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x24a>
    e6b6:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
    e6ba:	2b01      	cmp	r3, #1
    e6bc:	d000      	beq.n	e6c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x24c>
    e6be:	2300      	movs	r3, #0
    e6c0:	2a01      	cmp	r2, #1
    e6c2:	d009      	beq.n	e6d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x264>
    e6c4:	2a02      	cmp	r2, #2
    e6c6:	d010      	beq.n	e6ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    e6c8:	f019 0f0b 	tst.w	r9, #11
    e6cc:	d023      	beq.n	e716 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    e6ce:	bf00      	nop
    e6d0:	f010 0f01 	tst.w	r0, #1
    e6d4:	d028      	beq.n	e728 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>
    e6d6:	e049      	b.n	e76c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2f8>
    e6d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e6dc:	2a01      	cmp	r2, #1
    e6de:	bf14      	ite	ne
    e6e0:	f04f 0900 	movne.w	r9, #0
    e6e4:	f04f 0908 	moveq.w	r9, #8
    e6e8:	e7ee      	b.n	e6c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x254>
    e6ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    e6ee:	2a01      	cmp	r2, #1
    e6f0:	bf14      	ite	ne
    e6f2:	2200      	movne	r2, #0
    e6f4:	2202      	moveq	r2, #2
    e6f6:	f8df c1c4 	ldr.w	ip, [pc, #452]	; e8bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    e6fa:	f8dc c000 	ldr.w	ip, [ip]
    e6fe:	f1bc 0f01 	cmp.w	ip, #1
    e702:	bf14      	ite	ne
    e704:	f04f 0c04 	movne.w	ip, #4
    e708:	f04f 0c00 	moveq.w	ip, #0
    e70c:	ea4c 0202 	orr.w	r2, ip, r2
    e710:	ea42 0903 	orr.w	r9, r2, r3
    e714:	e7d8      	b.n	e6c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x254>
    e716:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    e71a:	2a01      	cmp	r2, #1
    e71c:	bf14      	ite	ne
    e71e:	2200      	movne	r2, #0
    e720:	2210      	moveq	r2, #16
    e722:	ea42 0909 	orr.w	r9, r2, r9
    e726:	e7d3      	b.n	e6d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x25c>
    e728:	4865      	ldr	r0, [pc, #404]	; (e8c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>)
    e72a:	6801      	ldr	r1, [r0, #0]
    e72c:	f011 0fff 	tst.w	r1, #255	; 0xff
    e730:	d003      	beq.n	e73a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c6>
    e732:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    e736:	2901      	cmp	r1, #1
    e738:	d000      	beq.n	e73c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c8>
    e73a:	2100      	movs	r1, #0
    e73c:	f885 1032 	strb.w	r1, [r5, #50]	; 0x32
    e740:	6800      	ldr	r0, [r0, #0]
    e742:	f010 0fff 	tst.w	r0, #255	; 0xff
    e746:	d003      	beq.n	e750 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    e748:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    e74c:	2801      	cmp	r0, #1
    e74e:	d000      	beq.n	e752 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2de>
    e750:	2000      	movs	r0, #0
    e752:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
    e756:	485b      	ldr	r0, [pc, #364]	; (e8c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x450>)
    e758:	6800      	ldr	r0, [r0, #0]
    e75a:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    e75e:	f7fe fd51 	bl	d204 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    e762:	2801      	cmp	r0, #1
    e764:	bf18      	it	ne
    e766:	2000      	movne	r0, #0
    e768:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    e76c:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e770:	2800      	cmp	r0, #0
    e772:	bf18      	it	ne
    e774:	2001      	movne	r0, #1
    e776:	f88d 0000 	strb.w	r0, [sp]
    e77a:	4847      	ldr	r0, [pc, #284]	; (e898 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    e77c:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
    e780:	f8c0 710c 	str.w	r7, [r0, #268]	; 0x10c
    e784:	f8c0 7110 	str.w	r7, [r0, #272]	; 0x110
    e788:	f8c0 7104 	str.w	r7, [r0, #260]	; 0x104
    e78c:	f8c0 7114 	str.w	r7, [r0, #276]	; 0x114
    e790:	f8c0 7118 	str.w	r7, [r0, #280]	; 0x118
    e794:	484c      	ldr	r0, [pc, #304]	; (e8c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x454>)
    e796:	6800      	ldr	r0, [r0, #0]
    e798:	9001      	str	r0, [sp, #4]
    e79a:	4668      	mov	r0, sp
    e79c:	f7f5 f92c 	bl	39f8 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    e7a0:	2800      	cmp	r0, #0
    e7a2:	bf18      	it	ne
    e7a4:	2010      	movne	r0, #16
    e7a6:	ea40 0409 	orr.w	r4, r0, r9
    e7aa:	f8c8 7144 	str.w	r7, [r8, #324]	; 0x144
    e7ae:	f014 0f10 	tst.w	r4, #16
    e7b2:	d006      	beq.n	e7c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34e>
    e7b4:	f014 0f08 	tst.w	r4, #8
    e7b8:	bf02      	ittt	eq
    e7ba:	7ae8      	ldrbeq	r0, [r5, #11]
    e7bc:	2801      	cmpeq	r0, #1
    e7be:	f044 0420 	orreq.w	r4, r4, #32
    e7c2:	4842      	ldr	r0, [pc, #264]	; (e8cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    e7c4:	6800      	ldr	r0, [r0, #0]
    e7c6:	9001      	str	r0, [sp, #4]
    e7c8:	4841      	ldr	r0, [pc, #260]	; (e8d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    e7ca:	6800      	ldr	r0, [r0, #0]
    e7cc:	62e8      	str	r0, [r5, #44]	; 0x2c
    e7ce:	f7ff f9d1 	bl	db74 <sym_JG3FLXKERY3S5SBPRH7U5J23J3XUE7OJESVKCZY>
    e7d2:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    e7d6:	7ae8      	ldrb	r0, [r5, #11]
    e7d8:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    e7dc:	f8df 80f4 	ldr.w	r8, [pc, #244]	; e8d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    e7e0:	62af      	str	r7, [r5, #40]	; 0x28
    e7e2:	2802      	cmp	r0, #2
    e7e4:	d10c      	bne.n	e800 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x38c>
    e7e6:	7868      	ldrb	r0, [r5, #1]
    e7e8:	b150      	cbz	r0, e800 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x38c>
    e7ea:	f8d8 1000 	ldr.w	r1, [r8]
    e7ee:	7809      	ldrb	r1, [r1, #0]
    e7f0:	4008      	ands	r0, r1
    e7f2:	7829      	ldrb	r1, [r5, #0]
    e7f4:	ea31 0000 	bics.w	r0, r1, r0
    e7f8:	bf08      	it	eq
    e7fa:	f885 6024 	strbeq.w	r6, [r5, #36]	; 0x24
    e7fe:	d001      	beq.n	e804 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x390>
    e800:	f885 7024 	strb.w	r7, [r5, #36]	; 0x24
    e804:	f014 0f02 	tst.w	r4, #2
    e808:	d002      	beq.n	e810 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x39c>
    e80a:	4833      	ldr	r0, [pc, #204]	; (e8d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>)
    e80c:	6800      	ldr	r0, [r0, #0]
    e80e:	62a8      	str	r0, [r5, #40]	; 0x28
    e810:	f014 0f08 	tst.w	r4, #8
    e814:	d002      	beq.n	e81c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a8>
    e816:	4830      	ldr	r0, [pc, #192]	; (e8d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>)
    e818:	6800      	ldr	r0, [r0, #0]
    e81a:	62a8      	str	r0, [r5, #40]	; 0x28
    e81c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; e8dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x468>
    e820:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    e822:	f8d9 1010 	ldr.w	r1, [r9, #16]
    e826:	4788      	blx	r1
    e828:	4819      	ldr	r0, [pc, #100]	; (e890 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    e82a:	7800      	ldrb	r0, [r0, #0]
    e82c:	f010 0f01 	tst.w	r0, #1
    e830:	d11e      	bne.n	e870 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
    e832:	f8d8 0000 	ldr.w	r0, [r8]
    e836:	7800      	ldrb	r0, [r0, #0]
    e838:	f000 000f 	and.w	r0, r0, #15
    e83c:	2807      	cmp	r0, #7
    e83e:	bf28      	it	cs
    e840:	f885 7025 	strbcs.w	r7, [r5, #37]	; 0x25
    e844:	d214      	bcs.n	e870 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
    e846:	f8d8 0000 	ldr.w	r0, [r8]
    e84a:	2206      	movs	r2, #6
    e84c:	f100 0109 	add.w	r1, r0, #9
    e850:	1ca8      	adds	r0, r5, #2
    e852:	f000 fc0b 	bl	f06c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    e856:	b940      	cbnz	r0, e86a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f6>
    e858:	7a28      	ldrb	r0, [r5, #8]
    e85a:	f8d8 1000 	ldr.w	r1, [r8]
    e85e:	7809      	ldrb	r1, [r1, #0]
    e860:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    e864:	bf08      	it	eq
    e866:	2001      	moveq	r0, #1
    e868:	d000      	beq.n	e86c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    e86a:	2000      	movs	r0, #0
    e86c:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
    e870:	2000      	movs	r0, #0
    e872:	9000      	str	r0, [sp, #0]
    e874:	7aa9      	ldrb	r1, [r5, #10]
    e876:	b399      	cbz	r1, e8e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46c>
    e878:	7b28      	ldrb	r0, [r5, #12]
    e87a:	f010 0f02 	tst.w	r0, #2
    e87e:	e030      	b.n	e8e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46e>
    e880:	40008000 	.word	0x40008000
    e884:	4000854c 	.word	0x4000854c
    e888:	4000b504 	.word	0x4000b504
    e88c:	200016cc 	.word	0x200016cc
    e890:	20000390 	.word	0x20000390
    e894:	4001f508 	.word	0x4001f508
    e898:	40001000 	.word	0x40001000
    e89c:	40001548 	.word	0x40001548
    e8a0:	4000111c 	.word	0x4000111c
    e8a4:	40001574 	.word	0x40001574
    e8a8:	40008540 	.word	0x40008540
    e8ac:	40008140 	.word	0x40008140
    e8b0:	4001f098 	.word	0x4001f098
    e8b4:	40001014 	.word	0x40001014
    e8b8:	4001f504 	.word	0x4001f504
    e8bc:	40001400 	.word	0x40001400
    e8c0:	40001640 	.word	0x40001640
    e8c4:	40001410 	.word	0x40001410
    e8c8:	40001118 	.word	0x40001118
    e8cc:	40008144 	.word	0x40008144
    e8d0:	40008548 	.word	0x40008548
    e8d4:	40001504 	.word	0x40001504
    e8d8:	40008544 	.word	0x40008544
    e8dc:	200016b8 	.word	0x200016b8
    e8e0:	e006      	b.n	e8f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47c>
    e8e2:	bf1c      	itt	ne
    e8e4:	f014 0f02 	tstne.w	r4, #2
    e8e8:	f014 0f04 	tstne.w	r4, #4
    e8ec:	d00a      	beq.n	e904 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x490>
    e8ee:	e023      	b.n	e938 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c4>
    e8f0:	4984      	ldr	r1, [pc, #528]	; (eb04 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4>)
    e8f2:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    e8f6:	6008      	str	r0, [r1, #0]
    e8f8:	726f      	strb	r7, [r5, #9]
    e8fa:	72af      	strb	r7, [r5, #10]
    e8fc:	72ef      	strb	r7, [r5, #11]
    e8fe:	732e      	strb	r6, [r5, #12]
    e900:	742f      	strb	r7, [r5, #16]
    e902:	e068      	b.n	e9d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x562>
    e904:	f010 0f10 	tst.w	r0, #16
    e908:	bf1c      	itt	ne
    e90a:	f895 2033 	ldrbne.w	r2, [r5, #51]	; 0x33
    e90e:	2a00      	cmpne	r2, #0
    e910:	d002      	beq.n	e918 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a4>
    e912:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    e916:	b17a      	cbz	r2, e938 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c4>
    e918:	f010 0f08 	tst.w	r0, #8
    e91c:	bf1c      	itt	ne
    e91e:	f895 2024 	ldrbne.w	r2, [r5, #36]	; 0x24
    e922:	2a00      	cmpne	r2, #0
    e924:	d108      	bne.n	e938 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c4>
    e926:	f010 0f04 	tst.w	r0, #4
    e92a:	d002      	beq.n	e932 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4be>
    e92c:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
    e930:	b110      	cbz	r0, e938 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c4>
    e932:	f014 0f11 	tst.w	r4, #17
    e936:	d002      	beq.n	e93e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ca>
    e938:	f7fe fe32 	bl	d5a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e93c:	e04b      	b.n	e9d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x562>
    e93e:	2901      	cmp	r1, #1
    e940:	bf14      	ite	ne
    e942:	f04f 0801 	movne.w	r8, #1
    e946:	f04f 0800 	moveq.w	r8, #0
    e94a:	7a68      	ldrb	r0, [r5, #9]
    e94c:	2801      	cmp	r0, #1
    e94e:	bf18      	it	ne
    e950:	2000      	movne	r0, #0
    e952:	9001      	str	r0, [sp, #4]
    e954:	726f      	strb	r7, [r5, #9]
    e956:	72af      	strb	r7, [r5, #10]
    e958:	72ef      	strb	r7, [r5, #11]
    e95a:	732e      	strb	r6, [r5, #12]
    e95c:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    e960:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    e964:	2100      	movs	r1, #0
    e966:	b1d2      	cbz	r2, e99e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    e968:	f1b8 0f00 	cmp.w	r8, #0
    e96c:	d01c      	beq.n	e9a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x534>
    e96e:	f1b8 0f00 	cmp.w	r8, #0
    e972:	d007      	beq.n	e984 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    e974:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e978:	2a01      	cmp	r2, #1
    e97a:	d023      	beq.n	e9c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x550>
    e97c:	f003 ff6d 	bl	1285a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    e980:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e982:	4401      	add	r1, r0
    e984:	9801      	ldr	r0, [sp, #4]
    e986:	b310      	cbz	r0, e9ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x55a>
    e988:	f10a 003b 	add.w	r0, sl, #59	; 0x3b
    e98c:	4288      	cmp	r0, r1
    e98e:	bf98      	it	ls
    e990:	726e      	strbls	r6, [r5, #9]
    e992:	d91c      	bls.n	e9ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x55a>
    e994:	485c      	ldr	r0, [pc, #368]	; (eb08 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa8>)
    e996:	6106      	str	r6, [r0, #16]
    e998:	2001      	movs	r0, #1
    e99a:	9000      	str	r0, [sp, #0]
    e99c:	e01b      	b.n	e9d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x562>
    e99e:	f240 7135 	movw	r1, #1845	; 0x735
    e9a2:	203e      	movs	r0, #62	; 0x3e
    e9a4:	f7f5 f934 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9a8:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e9ac:	2a01      	cmp	r2, #1
    e9ae:	d004      	beq.n	e9ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x546>
    e9b0:	f003 ff61 	bl	12876 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    e9b4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e9b6:	4401      	add	r1, r0
    e9b8:	e7e4      	b.n	e984 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    e9ba:	f003 ff7f 	bl	128bc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    e9be:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e9c0:	4401      	add	r1, r0
    e9c2:	e7df      	b.n	e984 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    e9c4:	f003 ff62 	bl	1288c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    e9c8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e9ca:	4401      	add	r1, r0
    e9cc:	e7da      	b.n	e984 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    e9ce:	7b6a      	ldrb	r2, [r5, #13]
    e9d0:	4640      	mov	r0, r8
    e9d2:	f7ff fa1b 	bl	de0c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    e9d6:	f014 0f01 	tst.w	r4, #1
    e9da:	d003      	beq.n	e9e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    e9dc:	f8d9 0000 	ldr.w	r0, [r9]
    e9e0:	4780      	blx	r0
    e9e2:	e048      	b.n	ea76 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
    e9e4:	f014 0f02 	tst.w	r4, #2
    e9e8:	d034      	beq.n	ea54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5e0>
    e9ea:	7e68      	ldrb	r0, [r5, #25]
    e9ec:	b110      	cbz	r0, e9f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x580>
    e9ee:	f1bb 0f00 	cmp.w	fp, #0
    e9f2:	d003      	beq.n	e9fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x588>
    e9f4:	f014 0f04 	tst.w	r4, #4
    e9f8:	d126      	bne.n	ea48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    e9fa:	e004      	b.n	ea06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x592>
    e9fc:	f640 21c6 	movw	r1, #2758	; 0xac6
    ea00:	203e      	movs	r0, #62	; 0x3e
    ea02:	f7f5 f905 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea06:	f000 fb0d 	bl	f024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ea0a:	b9e8      	cbnz	r0, ea48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    ea0c:	f000 fafa 	bl	f004 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ea10:	b9d0      	cbnz	r0, ea48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    ea12:	483e      	ldr	r0, [pc, #248]	; (eb0c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac>)
    ea14:	6800      	ldr	r0, [r0, #0]
    ea16:	f3c0 5342 	ubfx	r3, r0, #21, #3
    ea1a:	f3c0 6200 	ubfx	r2, r0, #24, #1
    ea1e:	f000 010f 	and.w	r1, r0, #15
    ea22:	f3c0 1c03 	ubfx	ip, r0, #4, #4
    ea26:	f3c0 2003 	ubfx	r0, r0, #8, #4
    ea2a:	b16a      	cbz	r2, ea48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    ea2c:	2900      	cmp	r1, #0
    ea2e:	bf1c      	itt	ne
    ea30:	f1bc 0f00 	cmpne.w	ip, #0
    ea34:	2800      	cmpne	r0, #0
    ea36:	d107      	bne.n	ea48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5d4>
    ea38:	4835      	ldr	r0, [pc, #212]	; (eb10 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0>)
    ea3a:	6800      	ldr	r0, [r0, #0]
    ea3c:	2800      	cmp	r0, #0
    ea3e:	bf18      	it	ne
    ea40:	2b03      	cmpne	r3, #3
    ea42:	bf38      	it	cc
    ea44:	f044 0404 	orrcc.w	r4, r4, #4
    ea48:	ea26 0094 	bic.w	r0, r6, r4, lsr #2
    ea4c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    ea50:	9900      	ldr	r1, [sp, #0]
    ea52:	e00f      	b.n	ea74 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>
    ea54:	f014 0f28 	tst.w	r4, #40	; 0x28
    ea58:	d00d      	beq.n	ea76 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16>
    ea5a:	f014 0f20 	tst.w	r4, #32
    ea5e:	d104      	bne.n	ea6a <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa>
    ea60:	7e28      	ldrb	r0, [r5, #24]
    ea62:	b110      	cbz	r0, ea6a <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa>
    ea64:	f1bb 0f00 	cmp.w	fp, #0
    ea68:	d00f      	beq.n	ea8a <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
    ea6a:	f8d9 2008 	ldr.w	r2, [r9, #8]
    ea6e:	ea26 1154 	bic.w	r1, r6, r4, lsr #5
    ea72:	9800      	ldr	r0, [sp, #0]
    ea74:	4790      	blx	r2
    ea76:	f014 0f10 	tst.w	r4, #16
    ea7a:	bf1c      	itt	ne
    ea7c:	f8d9 000c 	ldrne.w	r0, [r9, #12]
    ea80:	4780      	blxne	r0
    ea82:	7ae8      	ldrb	r0, [r5, #11]
    ea84:	2802      	cmp	r0, #2
    ea86:	d11d      	bne.n	eac4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
    ea88:	e004      	b.n	ea94 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34>
    ea8a:	f640 21f6 	movw	r1, #2806	; 0xaf6
    ea8e:	203e      	movs	r0, #62	; 0x3e
    ea90:	f7f5 f8be 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea94:	7c28      	ldrb	r0, [r5, #16]
    ea96:	b1a8      	cbz	r0, eac4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
    ea98:	2802      	cmp	r0, #2
    ea9a:	d006      	beq.n	eaaa <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4a>
    ea9c:	2801      	cmp	r0, #1
    ea9e:	d025      	beq.n	eaec <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>
    eaa0:	f640 311a 	movw	r1, #2842	; 0xb1a
    eaa4:	203e      	movs	r0, #62	; 0x3e
    eaa6:	f7f5 f8b3 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaaa:	6969      	ldr	r1, [r5, #20]
    eaac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    eaae:	4401      	add	r1, r0
    eab0:	4818      	ldr	r0, [pc, #96]	; (eb14 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4>)
    eab2:	6001      	str	r1, [r0, #0]
    eab4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    eab6:	4918      	ldr	r1, [pc, #96]	; (eb18 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8>)
    eab8:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    eabc:	63a8      	str	r0, [r5, #56]	; 0x38
    eabe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    eac2:	6008      	str	r0, [r1, #0]
    eac4:	f014 0f10 	tst.w	r4, #16
    eac8:	bf04      	itt	eq
    eaca:	b003      	addeq	sp, #12
    eacc:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ead0:	480d      	ldr	r0, [pc, #52]	; (eb08 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa8>)
    ead2:	f8c0 7110 	str.w	r7, [r0, #272]	; 0x110
    ead6:	4811      	ldr	r0, [pc, #68]	; (eb1c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbc>)
    ead8:	6800      	ldr	r0, [r0, #0]
    eada:	9000      	str	r0, [sp, #0]
    eadc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    eae0:	2002      	movs	r0, #2
    eae2:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    eae6:	b003      	add	sp, #12
    eae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eaec:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    eaee:	6968      	ldr	r0, [r5, #20]
    eaf0:	4288      	cmp	r0, r1
    eaf2:	bf84      	itt	hi
    eaf4:	4907      	ldrhi	r1, [pc, #28]	; (eb14 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4>)
    eaf6:	6008      	strhi	r0, [r1, #0]
    eaf8:	d8dc      	bhi.n	eab4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>
    eafa:	f640 311b 	movw	r1, #2843	; 0xb1b
    eafe:	203e      	movs	r0, #62	; 0x3e
    eb00:	f7f5 f886 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb04:	4001f508 	.word	0x4001f508
    eb08:	40001000 	.word	0x40001000
    eb0c:	40001450 	.word	0x40001450
    eb10:	40001454 	.word	0x40001454
    eb14:	40008544 	.word	0x40008544
    eb18:	4001f504 	.word	0x4001f504
    eb1c:	40001110 	.word	0x40001110

0000eb20 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    eb20:	0083      	lsls	r3, r0, #2
    eb22:	b510      	push	{r4, lr}
    eb24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eb28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    eb2c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    eb30:	f8c3 c620 	str.w	ip, [r3, #1568]	; 0x620
    eb34:	f891 c000 	ldrb.w	ip, [r1]
    eb38:	f8d1 1001 	ldr.w	r1, [r1, #1]
    eb3c:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    eb40:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    eb44:	f100 0108 	add.w	r1, r0, #8
    eb48:	f04f 0c01 	mov.w	ip, #1
    eb4c:	fa0c f301 	lsl.w	r3, ip, r1
    eb50:	490b      	ldr	r1, [pc, #44]	; (eb80 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x60>)
    eb52:	2a00      	cmp	r2, #0
    eb54:	bf04      	itt	eq
    eb56:	680a      	ldreq	r2, [r1, #0]
    eb58:	439a      	biceq	r2, r3
    eb5a:	d009      	beq.n	eb70 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    eb5c:	2a01      	cmp	r2, #1
    eb5e:	bf04      	itt	eq
    eb60:	680a      	ldreq	r2, [r1, #0]
    eb62:	431a      	orreq	r2, r3
    eb64:	d004      	beq.n	eb70 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    eb66:	f240 4172 	movw	r1, #1138	; 0x472
    eb6a:	203e      	movs	r0, #62	; 0x3e
    eb6c:	f7f5 f850 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb70:	600a      	str	r2, [r1, #0]
    eb72:	680a      	ldr	r2, [r1, #0]
    eb74:	fa0c f000 	lsl.w	r0, ip, r0
    eb78:	4310      	orrs	r0, r2
    eb7a:	6008      	str	r0, [r1, #0]
    eb7c:	bd10      	pop	{r4, pc}
    eb7e:	0000      	.short	0x0000
    eb80:	40001640 	.word	0x40001640
    eb84:	4910      	ldr	r1, [pc, #64]	; (ebc8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>)
    eb86:	6809      	ldr	r1, [r1, #0]
    eb88:	b9c9      	cbnz	r1, ebbe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x9e>
    eb8a:	4a10      	ldr	r2, [pc, #64]	; (ebcc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>)
    eb8c:	4910      	ldr	r1, [pc, #64]	; (ebd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb0>)
    eb8e:	6813      	ldr	r3, [r2, #0]
    eb90:	b170      	cbz	r0, ebb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x90>
    eb92:	f023 0382 	bic.w	r3, r3, #130	; 0x82
    eb96:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
    eb9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    eb9e:	6013      	str	r3, [r2, #0]
    eba0:	680a      	ldr	r2, [r1, #0]
    eba2:	f022 0210 	bic.w	r2, r2, #16
    eba6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    ebaa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    ebae:	e005      	b.n	ebbc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x9c>
    ebb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    ebb4:	6013      	str	r3, [r2, #0]
    ebb6:	680a      	ldr	r2, [r1, #0]
    ebb8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    ebbc:	600a      	str	r2, [r1, #0]
    ebbe:	4905      	ldr	r1, [pc, #20]	; (ebd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>)
    ebc0:	f881 003e 	strb.w	r0, [r1, #62]	; 0x3e
    ebc4:	4770      	bx	lr
    ebc6:	0000      	.short	0x0000
    ebc8:	40001788 	.word	0x40001788
    ebcc:	4000173c 	.word	0x4000173c
    ebd0:	4000177c 	.word	0x4000177c
    ebd4:	200016cc 	.word	0x200016cc
    ebd8:	492e      	ldr	r1, [pc, #184]	; (ec94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x174>)
    ebda:	7aca      	ldrb	r2, [r1, #11]
    ebdc:	2a01      	cmp	r2, #1
    ebde:	d04a      	beq.n	ec76 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x156>
    ebe0:	2a02      	cmp	r2, #2
    ebe2:	bf18      	it	ne
    ebe4:	4770      	bxne	lr
    ebe6:	7e4b      	ldrb	r3, [r1, #25]
    ebe8:	2b00      	cmp	r3, #0
    ebea:	bf08      	it	eq
    ebec:	4770      	bxeq	lr
    ebee:	2a01      	cmp	r2, #1
    ebf0:	d045      	beq.n	ec7e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x15e>
    ebf2:	7ecb      	ldrb	r3, [r1, #27]
    ebf4:	7f4a      	ldrb	r2, [r1, #29]
    ebf6:	f113 0c00 	adds.w	ip, r3, #0
    ebfa:	bf18      	it	ne
    ebfc:	f04f 0c01 	movne.w	ip, #1
    ec00:	2324      	movs	r3, #36	; 0x24
    ec02:	4418      	add	r0, r3
    ec04:	4b24      	ldr	r3, [pc, #144]	; (ec98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>)
    ec06:	6018      	str	r0, [r3, #0]
    ec08:	0210      	lsls	r0, r2, #8
    ec0a:	f08c 0201 	eor.w	r2, ip, #1
    ec0e:	ea40 5002 	orr.w	r0, r0, r2, lsl #20
    ec12:	f040 1203 	orr.w	r2, r0, #196611	; 0x30003
    ec16:	f891 0020 	ldrb.w	r0, [r1, #32]
    ec1a:	0083      	lsls	r3, r0, #2
    ec1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ec20:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    ec24:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    ec28:	4b1c      	ldr	r3, [pc, #112]	; (ec9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x17c>)
    ec2a:	7f8a      	ldrb	r2, [r1, #30]
    ec2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    ec30:	00d3      	lsls	r3, r2, #3
    ec32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ec36:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    ec3a:	f8df c064 	ldr.w	ip, [pc, #100]	; eca0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x180>
    ec3e:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    ec42:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    ec46:	7fc9      	ldrb	r1, [r1, #31]
    ec48:	f8df c058 	ldr.w	ip, [pc, #88]	; eca4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x184>
    ec4c:	00cb      	lsls	r3, r1, #3
    ec4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ec52:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    ec56:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    ec5a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    ec5e:	2001      	movs	r0, #1
    ec60:	fa00 f202 	lsl.w	r2, r0, r2
    ec64:	4088      	lsls	r0, r1
    ec66:	4910      	ldr	r1, [pc, #64]	; (eca8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x188>)
    ec68:	4310      	orrs	r0, r2
    ec6a:	6008      	str	r0, [r1, #0]
    ec6c:	490f      	ldr	r1, [pc, #60]	; (ecac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x18c>)
    ec6e:	2000      	movs	r0, #0
    ec70:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    ec74:	4770      	bx	lr
    ec76:	7e0b      	ldrb	r3, [r1, #24]
    ec78:	2b00      	cmp	r3, #0
    ec7a:	d1b8      	bne.n	ebee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xce>
    ec7c:	4770      	bx	lr
    ec7e:	7e8b      	ldrb	r3, [r1, #26]
    ec80:	7f0a      	ldrb	r2, [r1, #28]
    ec82:	2b00      	cmp	r3, #0
    ec84:	bf14      	ite	ne
    ec86:	f04f 0c01 	movne.w	ip, #1
    ec8a:	f04f 0c00 	moveq.w	ip, #0
    ec8e:	2311      	movs	r3, #17
    ec90:	e7b7      	b.n	ec02 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe2>
    ec92:	0000      	.short	0x0000
    ec94:	200016cc 	.word	0x200016cc
    ec98:	4000854c 	.word	0x4000854c
    ec9c:	40006000 	.word	0x40006000
    eca0:	4000814c 	.word	0x4000814c
    eca4:	40001110 	.word	0x40001110
    eca8:	4001f504 	.word	0x4001f504
    ecac:	40008000 	.word	0x40008000
    ecb0:	00000002 	.word	0x00000002
	...
    ecc8:	40008000 	.word	0x40008000
	...
    ecdc:	40008000 	.word	0x40008000
	...
    ecec:	00000001 	.word	0x00000001
	...

0000ed00 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>:
    ed00:	b510      	push	{r4, lr}
    ed02:	4604      	mov	r4, r0
    ed04:	f000 f9a8 	bl	f058 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ed08:	2800      	cmp	r0, #0
    ed0a:	bf08      	it	eq
    ed0c:	bd10      	popeq	{r4, pc}
    ed0e:	4908      	ldr	r1, [pc, #32]	; (ed30 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI+0x30>)
    ed10:	2c08      	cmp	r4, #8
    ed12:	bf18      	it	ne
    ed14:	2c04      	cmpne	r4, #4
    ed16:	6808      	ldr	r0, [r1, #0]
    ed18:	bf03      	ittte	eq
    ed1a:	f420 506c 	biceq.w	r0, r0, #15104	; 0x3b00
    ed1e:	f440 4044 	orreq.w	r0, r0, #50176	; 0xc400
    ed22:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    ed26:	f020 4000 	bicne.w	r0, r0, #2147483648	; 0x80000000
    ed2a:	6008      	str	r0, [r1, #0]
    ed2c:	bd10      	pop	{r4, pc}
    ed2e:	0000      	.short	0x0000
    ed30:	40001740 	.word	0x40001740

0000ed34 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    ed34:	4901      	ldr	r1, [pc, #4]	; (ed3c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    ed36:	b2c0      	uxtb	r0, r0
    ed38:	6008      	str	r0, [r1, #0]
    ed3a:	4770      	bx	lr
    ed3c:	4000150c 	.word	0x4000150c

0000ed40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    ed40:	b510      	push	{r4, lr}
    ed42:	490b      	ldr	r1, [pc, #44]	; (ed70 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x30>)
    ed44:	2801      	cmp	r0, #1
    ed46:	bf08      	it	eq
    ed48:	2003      	moveq	r0, #3
    ed4a:	d00f      	beq.n	ed6c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    ed4c:	2802      	cmp	r0, #2
    ed4e:	bf08      	it	eq
    ed50:	2004      	moveq	r0, #4
    ed52:	d00b      	beq.n	ed6c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    ed54:	2804      	cmp	r0, #4
    ed56:	bf08      	it	eq
    ed58:	2006      	moveq	r0, #6
    ed5a:	d007      	beq.n	ed6c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    ed5c:	2808      	cmp	r0, #8
    ed5e:	bf08      	it	eq
    ed60:	2005      	moveq	r0, #5
    ed62:	d003      	beq.n	ed6c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x2c>
    ed64:	2164      	movs	r1, #100	; 0x64
    ed66:	203f      	movs	r0, #63	; 0x3f
    ed68:	f7f4 ff52 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed6c:	6008      	str	r0, [r1, #0]
    ed6e:	bd10      	pop	{r4, pc}
    ed70:	40001510 	.word	0x40001510

0000ed74 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    ed74:	4770      	bx	lr
    ed76:	2100      	movs	r1, #0
    ed78:	7081      	strb	r1, [r0, #2]
    ed7a:	7001      	strb	r1, [r0, #0]
    ed7c:	7041      	strb	r1, [r0, #1]
    ed7e:	4770      	bx	lr

0000ed80 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    ed80:	b570      	push	{r4, r5, r6, lr}
    ed82:	f7f1 fb41 	bl	408 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ed86:	4605      	mov	r5, r0
    ed88:	2400      	movs	r4, #0
    ed8a:	e006      	b.n	ed9a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    ed8c:	4620      	mov	r0, r4
    ed8e:	f7f1 fb41 	bl	414 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ed92:	f7ff fff0 	bl	ed76 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    ed96:	1c64      	adds	r4, r4, #1
    ed98:	b2e4      	uxtb	r4, r4
    ed9a:	42ac      	cmp	r4, r5
    ed9c:	d3f6      	bcc.n	ed8c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    ed9e:	bd70      	pop	{r4, r5, r6, pc}

0000eda0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    eda0:	2000      	movs	r0, #0
    eda2:	f7f4 b86f 	b.w	2e84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000eda6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    eda6:	b510      	push	{r4, lr}
    eda8:	f7f3 fd64 	bl	2874 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    edac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edb0:	f000 b800 	b.w	edb4 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000edb4 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    edb4:	0a41      	lsrs	r1, r0, #9
    edb6:	f643 5209 	movw	r2, #15625	; 0x3d09
    edba:	4351      	muls	r1, r2
    edbc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    edc0:	fb10 f002 	smulbb	r0, r0, r2
    edc4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    edc8:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    edcc:	4770      	bx	lr

0000edce <MPSL_IRQ_RADIO_Handler>:
    edce:	f7f2 bb5d 	b.w	148c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    edd2:	2800      	cmp	r0, #0
    edd4:	db09      	blt.n	edea <MPSL_IRQ_RADIO_Handler+0x1c>
    edd6:	f000 021f 	and.w	r2, r0, #31
    edda:	2101      	movs	r1, #1
    eddc:	4091      	lsls	r1, r2
    edde:	0940      	lsrs	r0, r0, #5
    ede0:	0080      	lsls	r0, r0, #2
    ede2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ede6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    edea:	4770      	bx	lr
    edec:	2800      	cmp	r0, #0
    edee:	db0d      	blt.n	ee0c <MPSL_IRQ_RADIO_Handler+0x3e>
    edf0:	f000 021f 	and.w	r2, r0, #31
    edf4:	2101      	movs	r1, #1
    edf6:	4091      	lsls	r1, r2
    edf8:	0940      	lsrs	r0, r0, #5
    edfa:	0080      	lsls	r0, r0, #2
    edfc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ee00:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ee04:	f3bf 8f4f 	dsb	sy
    ee08:	f3bf 8f6f 	isb	sy
    ee0c:	4770      	bx	lr

0000ee0e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    ee0e:	b570      	push	{r4, r5, r6, lr}
    ee10:	4602      	mov	r2, r0
    ee12:	2000      	movs	r0, #0
    ee14:	2900      	cmp	r1, #0
    ee16:	d01d      	beq.n	ee54 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    ee18:	fba2 0101 	umull	r0, r1, r2, r1
    ee1c:	0a40      	lsrs	r0, r0, #9
    ee1e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    ee22:	0a49      	lsrs	r1, r1, #9
    ee24:	1c40      	adds	r0, r0, #1
    ee26:	f141 0100 	adc.w	r1, r1, #0
    ee2a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    ee2e:	1883      	adds	r3, r0, r2
    ee30:	f141 0100 	adc.w	r1, r1, #0
    ee34:	1c5b      	adds	r3, r3, #1
    ee36:	f141 0400 	adc.w	r4, r1, #0
    ee3a:	2100      	movs	r1, #0
    ee3c:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    ee40:	41a1      	sbcs	r1, r4
    ee42:	d203      	bcs.n	ee4c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    ee44:	2170      	movs	r1, #112	; 0x70
    ee46:	206d      	movs	r0, #109	; 0x6d
    ee48:	f7f4 fc00 	bl	364c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ee4c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    ee50:	fbb0 f0f2 	udiv	r0, r0, r2
    ee54:	bd70      	pop	{r4, r5, r6, pc}
    ee56:	5840      	ldr	r0, [r0, r1]
    ee58:	2800      	cmp	r0, #0
    ee5a:	d000      	beq.n	ee5e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    ee5c:	2001      	movs	r0, #1
    ee5e:	4770      	bx	lr
    ee60:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    ee64:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    ee68:	f002 0201 	and.w	r2, r2, #1
    ee6c:	03c0      	lsls	r0, r0, #15
    ee6e:	d503      	bpl.n	ee78 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ee70:	428a      	cmp	r2, r1
    ee72:	d101      	bne.n	ee78 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ee74:	2001      	movs	r0, #1
    ee76:	4770      	bx	lr
    ee78:	2000      	movs	r0, #0
    ee7a:	4770      	bx	lr

0000ee7c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    ee7c:	b510      	push	{r4, lr}
    ee7e:	2101      	movs	r1, #1
    ee80:	0788      	lsls	r0, r1, #30
    ee82:	f7f4 fba1 	bl	35c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    ee86:	2800      	cmp	r0, #0
    ee88:	d000      	beq.n	ee8c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    ee8a:	2001      	movs	r0, #1
    ee8c:	bd10      	pop	{r4, pc}

0000ee8e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    ee8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ee92:	2101      	movs	r1, #1
    ee94:	6001      	str	r1, [r0, #0]
    ee96:	4770      	bx	lr

0000ee98 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    ee98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    ee9c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    eea0:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    eea4:	f002 0203 	and.w	r2, r2, #3
    eea8:	03c9      	lsls	r1, r1, #15
    eeaa:	d503      	bpl.n	eeb4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    eeac:	4282      	cmp	r2, r0
    eeae:	d101      	bne.n	eeb4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    eeb0:	2001      	movs	r0, #1
    eeb2:	4770      	bx	lr
    eeb4:	2000      	movs	r0, #0
    eeb6:	4770      	bx	lr

0000eeb8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    eeb8:	b510      	push	{r4, lr}
    eeba:	2100      	movs	r1, #0
    eebc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    eec0:	f7f4 fb82 	bl	35c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    eec4:	2800      	cmp	r0, #0
    eec6:	d000      	beq.n	eeca <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    eec8:	2001      	movs	r0, #1
    eeca:	bd10      	pop	{r4, pc}
    eecc:	2800      	cmp	r0, #0
    eece:	db09      	blt.n	eee4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    eed0:	f000 021f 	and.w	r2, r0, #31
    eed4:	2101      	movs	r1, #1
    eed6:	4091      	lsls	r1, r2
    eed8:	0940      	lsrs	r0, r0, #5
    eeda:	0080      	lsls	r0, r0, #2
    eedc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eee0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    eee4:	4770      	bx	lr
    eee6:	2800      	cmp	r0, #0
    eee8:	db0d      	blt.n	ef06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    eeea:	f000 021f 	and.w	r2, r0, #31
    eeee:	2101      	movs	r1, #1
    eef0:	4091      	lsls	r1, r2
    eef2:	0940      	lsrs	r0, r0, #5
    eef4:	0080      	lsls	r0, r0, #2
    eef6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eefa:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    eefe:	f3bf 8f4f 	dsb	sy
    ef02:	f3bf 8f6f 	isb	sy
    ef06:	4770      	bx	lr
    ef08:	00021000 	.word	0x00021000
    ef0c:	000000fa 	.word	0x000000fa
    ef10:	e421772b 	.word	0xe421772b
    ef14:	62501dd0 	.word	0x62501dd0
    ef18:	85856e1f 	.word	0x85856e1f
    ef1c:	a3b3baba 	.word	0xa3b3baba
    ef20:	6e9a3c31 	.word	0x6e9a3c31
    ef24:	2800      	cmp	r0, #0
    ef26:	db09      	blt.n	ef3c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    ef28:	f000 021f 	and.w	r2, r0, #31
    ef2c:	2101      	movs	r1, #1
    ef2e:	4091      	lsls	r1, r2
    ef30:	0940      	lsrs	r0, r0, #5
    ef32:	0080      	lsls	r0, r0, #2
    ef34:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ef38:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ef3c:	4770      	bx	lr

0000ef3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    ef3e:	f3ef 8110 	mrs	r1, PRIMASK
    ef42:	b672      	cpsid	i
    ef44:	7802      	ldrb	r2, [r0, #0]
    ef46:	2a01      	cmp	r2, #1
    ef48:	d001      	beq.n	ef4e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    ef4a:	2201      	movs	r2, #1
    ef4c:	e000      	b.n	ef50 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    ef4e:	2200      	movs	r2, #0
    ef50:	2301      	movs	r3, #1
    ef52:	7003      	strb	r3, [r0, #0]
    ef54:	b901      	cbnz	r1, ef58 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    ef56:	b662      	cpsie	i
    ef58:	b10a      	cbz	r2, ef5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    ef5a:	2000      	movs	r0, #0
    ef5c:	4770      	bx	lr
    ef5e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ef62:	4770      	bx	lr

0000ef64 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    ef64:	2100      	movs	r1, #0
    ef66:	7001      	strb	r1, [r0, #0]
    ef68:	4608      	mov	r0, r1
    ef6a:	4770      	bx	lr

0000ef6c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    ef6c:	f3ef 8110 	mrs	r1, PRIMASK
    ef70:	b672      	cpsid	i
    ef72:	2200      	movs	r2, #0
    ef74:	7002      	strb	r2, [r0, #0]
    ef76:	b901      	cbnz	r1, ef7a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    ef78:	b662      	cpsie	i
    ef7a:	2000      	movs	r0, #0
    ef7c:	4770      	bx	lr

0000ef7e <mpsl_low_priority_process>:
    ef7e:	f7f4 bc51 	b.w	3824 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000ef82 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    ef82:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ef86:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ef8a:	280f      	cmp	r0, #15
    ef8c:	d001      	beq.n	ef92 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    ef8e:	2000      	movs	r0, #0
    ef90:	4770      	bx	lr
    ef92:	2001      	movs	r0, #1
    ef94:	4770      	bx	lr

0000ef96 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    ef96:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ef9a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ef9e:	280a      	cmp	r0, #10
    efa0:	d001      	beq.n	efa6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    efa2:	2000      	movs	r0, #0
    efa4:	4770      	bx	lr
    efa6:	2001      	movs	r0, #1
    efa8:	4770      	bx	lr

0000efaa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    efaa:	b500      	push	{lr}
    efac:	f7ff fff3 	bl	ef96 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    efb0:	b120      	cbz	r0, efbc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    efb2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    efb6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    efba:	b108      	cbz	r0, efc0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    efbc:	2000      	movs	r0, #0
    efbe:	bd00      	pop	{pc}
    efc0:	2001      	movs	r0, #1
    efc2:	bd00      	pop	{pc}

0000efc4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    efc4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    efc8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    efcc:	280e      	cmp	r0, #14
    efce:	d001      	beq.n	efd4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    efd0:	2000      	movs	r0, #0
    efd2:	4770      	bx	lr
    efd4:	2001      	movs	r0, #1
    efd6:	4770      	bx	lr

0000efd8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    efd8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    efdc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    efe0:	2810      	cmp	r0, #16
    efe2:	d001      	beq.n	efe8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    efe4:	2000      	movs	r0, #0
    efe6:	4770      	bx	lr
    efe8:	2001      	movs	r0, #1
    efea:	4770      	bx	lr

0000efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    efec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    eff0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    eff4:	2806      	cmp	r0, #6
    eff6:	d003      	beq.n	f000 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    eff8:	1c40      	adds	r0, r0, #1
    effa:	d001      	beq.n	f000 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    effc:	2000      	movs	r0, #0
    effe:	4770      	bx	lr
    f000:	2001      	movs	r0, #1
    f002:	4770      	bx	lr

0000f004 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    f004:	b500      	push	{lr}
    f006:	f7ff fff1 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f00a:	b148      	cbz	r0, f020 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    f00c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f010:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    f014:	2806      	cmp	r0, #6
    f016:	d303      	bcc.n	f020 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    f018:	1c40      	adds	r0, r0, #1
    f01a:	d001      	beq.n	f020 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    f01c:	2001      	movs	r0, #1
    f01e:	bd00      	pop	{pc}
    f020:	2000      	movs	r0, #0
    f022:	bd00      	pop	{pc}

0000f024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    f024:	b500      	push	{lr}
    f026:	f7ff ffe1 	bl	efec <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f02a:	b138      	cbz	r0, f03c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    f02c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f030:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    f034:	2806      	cmp	r0, #6
    f036:	d303      	bcc.n	f040 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    f038:	1c40      	adds	r0, r0, #1
    f03a:	d001      	beq.n	f040 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    f03c:	2000      	movs	r0, #0
    f03e:	bd00      	pop	{pc}
    f040:	2001      	movs	r0, #1
    f042:	bd00      	pop	{pc}

0000f044 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    f044:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f048:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    f04c:	280d      	cmp	r0, #13
    f04e:	d001      	beq.n	f054 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    f050:	2000      	movs	r0, #0
    f052:	4770      	bx	lr
    f054:	2001      	movs	r0, #1
    f056:	4770      	bx	lr

0000f058 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    f058:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f05c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    f060:	2808      	cmp	r0, #8
    f062:	d001      	beq.n	f068 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    f064:	2000      	movs	r0, #0
    f066:	4770      	bx	lr
    f068:	2001      	movs	r0, #1
    f06a:	4770      	bx	lr

0000f06c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    f06c:	b510      	push	{r4, lr}
    f06e:	b91a      	cbnz	r2, f078 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0xc>
    f070:	2000      	movs	r0, #0
    f072:	bd10      	pop	{r4, pc}
    f074:	1c40      	adds	r0, r0, #1
    f076:	1c49      	adds	r1, r1, #1
    f078:	1e52      	subs	r2, r2, #1
    f07a:	d003      	beq.n	f084 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x18>
    f07c:	7803      	ldrb	r3, [r0, #0]
    f07e:	780c      	ldrb	r4, [r1, #0]
    f080:	42a3      	cmp	r3, r4
    f082:	d0f7      	beq.n	f074 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    f084:	7800      	ldrb	r0, [r0, #0]
    f086:	7809      	ldrb	r1, [r1, #0]
    f088:	1a40      	subs	r0, r0, r1
    f08a:	bd10      	pop	{r4, pc}

0000f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    f08c:	b530      	push	{r4, r5, lr}
    f08e:	4603      	mov	r3, r0
    f090:	b2cc      	uxtb	r4, r1
    f092:	e004      	b.n	f09e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12>
    f094:	2a00      	cmp	r2, #0
    f096:	d014      	beq.n	f0c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x36>
    f098:	f803 4b01 	strb.w	r4, [r3], #1
    f09c:	1e52      	subs	r2, r2, #1
    f09e:	079d      	lsls	r5, r3, #30
    f0a0:	d1f8      	bne.n	f094 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x8>
    f0a2:	b2c9      	uxtb	r1, r1
    f0a4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    f0a8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    f0ac:	e001      	b.n	f0b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x26>
    f0ae:	c302      	stmia	r3!, {r1}
    f0b0:	1f12      	subs	r2, r2, #4
    f0b2:	2a04      	cmp	r2, #4
    f0b4:	d2fb      	bcs.n	f0ae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    f0b6:	e002      	b.n	f0be <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x32>
    f0b8:	f803 4b01 	strb.w	r4, [r3], #1
    f0bc:	1e52      	subs	r2, r2, #1
    f0be:	2a00      	cmp	r2, #0
    f0c0:	d1fa      	bne.n	f0b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x2c>
    f0c2:	bd30      	pop	{r4, r5, pc}
    f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0c6:	4604      	mov	r4, r0
    f0c8:	f100 0003 	add.w	r0, r0, #3
    f0cc:	f020 0003 	bic.w	r0, r0, #3
    f0d0:	9000      	str	r0, [sp, #0]
    f0d2:	460e      	mov	r6, r1
    f0d4:	780b      	ldrb	r3, [r1, #0]
    f0d6:	7849      	ldrb	r1, [r1, #1]
    f0d8:	0015      	movs	r5, r2
    f0da:	d000      	beq.n	f0de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x52>
    f0dc:	2000      	movs	r0, #0
    f0de:	2200      	movs	r2, #0
    f0e0:	f7f4 ffb4 	bl	404c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    f0e4:	9900      	ldr	r1, [sp, #0]
    f0e6:	462a      	mov	r2, r5
    f0e8:	4408      	add	r0, r1
    f0ea:	9000      	str	r0, [sp, #0]
    f0ec:	4631      	mov	r1, r6
    f0ee:	4668      	mov	r0, sp
    f0f0:	f000 f807 	bl	f102 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x76>
    f0f4:	9800      	ldr	r0, [sp, #0]
    f0f6:	1dc0      	adds	r0, r0, #7
    f0f8:	f020 0007 	bic.w	r0, r0, #7
    f0fc:	9000      	str	r0, [sp, #0]
    f0fe:	1b00      	subs	r0, r0, r4
    f100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f106:	4606      	mov	r6, r0
    f108:	460c      	mov	r4, r1
    f10a:	7808      	ldrb	r0, [r1, #0]
    f10c:	7849      	ldrb	r1, [r1, #1]
    f10e:	2700      	movs	r7, #0
    f110:	4408      	add	r0, r1
    f112:	4691      	mov	r9, r2
    f114:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    f118:	463d      	mov	r5, r7
    f11a:	e00e      	b.n	f13a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xae>
    f11c:	7963      	ldrb	r3, [r4, #5]
    f11e:	2b03      	cmp	r3, #3
    f120:	d200      	bcs.n	f124 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x98>
    f122:	2303      	movs	r3, #3
    f124:	7922      	ldrb	r2, [r4, #4]
    f126:	2a03      	cmp	r2, #3
    f128:	d200      	bcs.n	f12c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa0>
    f12a:	2203      	movs	r2, #3
    f12c:	78e1      	ldrb	r1, [r4, #3]
    f12e:	78a0      	ldrb	r0, [r4, #2]
    f130:	f001 f894 	bl	1025c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    f134:	1c6d      	adds	r5, r5, #1
    f136:	4407      	add	r7, r0
    f138:	b2ed      	uxtb	r5, r5
    f13a:	4545      	cmp	r5, r8
    f13c:	d3ee      	bcc.n	f11c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x90>
    f13e:	6830      	ldr	r0, [r6, #0]
    f140:	1cc0      	adds	r0, r0, #3
    f142:	f020 0003 	bic.w	r0, r0, #3
    f146:	6030      	str	r0, [r6, #0]
    f148:	f1b9 0f00 	cmp.w	r9, #0
    f14c:	d000      	beq.n	f150 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc4>
    f14e:	2000      	movs	r0, #0
    f150:	463a      	mov	r2, r7
    f152:	4641      	mov	r1, r8
    f154:	f7f5 f928 	bl	43a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    f158:	6831      	ldr	r1, [r6, #0]
    f15a:	4408      	add	r0, r1
    f15c:	6030      	str	r0, [r6, #0]
    f15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f162 <sdc_RNG_IRQHandler>:
    f162:	f7f5 bb03 	b.w	476c <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>

0000f166 <sdc_soc_rand_vector_get>:
    f166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f16a:	460c      	mov	r4, r1
    f16c:	4605      	mov	r5, r0
    f16e:	f001 f8f7 	bl	10360 <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>
    f172:	4607      	mov	r7, r0
    f174:	e00c      	b.n	f190 <sdc_soc_rand_vector_get+0x2a>
    f176:	42bc      	cmp	r4, r7
    f178:	d201      	bcs.n	f17e <sdc_soc_rand_vector_get+0x18>
    f17a:	4620      	mov	r0, r4
    f17c:	e000      	b.n	f180 <sdc_soc_rand_vector_get+0x1a>
    f17e:	4638      	mov	r0, r7
    f180:	b2c6      	uxtb	r6, r0
    f182:	4631      	mov	r1, r6
    f184:	4628      	mov	r0, r5
    f186:	f7f5 fbb3 	bl	48f0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    f18a:	1ba0      	subs	r0, r4, r6
    f18c:	4435      	add	r5, r6
    f18e:	b284      	uxth	r4, r0
    f190:	2c00      	cmp	r4, #0
    f192:	d1f0      	bne.n	f176 <sdc_soc_rand_vector_get+0x10>
    f194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f198 <sdc_soc_rand_vector_poll>:
    f198:	b570      	push	{r4, r5, r6, lr}
    f19a:	460c      	mov	r4, r1
    f19c:	4605      	mov	r5, r0
    f19e:	f7f5 fb95 	bl	48cc <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>
    f1a2:	42a0      	cmp	r0, r4
    f1a4:	d300      	bcc.n	f1a8 <sdc_soc_rand_vector_poll+0x10>
    f1a6:	4620      	mov	r0, r4
    f1a8:	b2c4      	uxtb	r4, r0
    f1aa:	4621      	mov	r1, r4
    f1ac:	4628      	mov	r0, r5
    f1ae:	f7f5 fb93 	bl	48d8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    f1b2:	2800      	cmp	r0, #0
    f1b4:	d000      	beq.n	f1b8 <sdc_soc_rand_vector_poll+0x20>
    f1b6:	4620      	mov	r0, r4
    f1b8:	bd70      	pop	{r4, r5, r6, pc}

0000f1ba <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    f1ba:	2000      	movs	r0, #0
    f1bc:	4770      	bx	lr

0000f1be <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    f1be:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f1c0:	4604      	mov	r4, r0
    f1c2:	1d01      	adds	r1, r0, #4
    f1c4:	4668      	mov	r0, sp
    f1c6:	f7f7 fdbb 	bl	6d40 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    f1ca:	2800      	cmp	r0, #0
    f1cc:	d004      	beq.n	f1d8 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    f1ce:	4669      	mov	r1, sp
    f1d0:	4620      	mov	r0, r4
    f1d2:	f000 f825 	bl	f220 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    f1d6:	2001      	movs	r0, #1
    f1d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f1da <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    f1da:	b50e      	push	{r1, r2, r3, lr}
    f1dc:	4601      	mov	r1, r0
    f1de:	4668      	mov	r0, sp
    f1e0:	f000 f804 	bl	f1ec <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    f1e4:	4668      	mov	r0, sp
    f1e6:	f7f7 fe5f 	bl	6ea8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    f1ea:	bd0e      	pop	{r1, r2, r3, pc}

0000f1ec <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    f1ec:	880a      	ldrh	r2, [r1, #0]
    f1ee:	f3c2 020b 	ubfx	r2, r2, #0, #12
    f1f2:	8002      	strh	r2, [r0, #0]
    f1f4:	884a      	ldrh	r2, [r1, #2]
    f1f6:	8042      	strh	r2, [r0, #2]
    f1f8:	784a      	ldrb	r2, [r1, #1]
    f1fa:	0993      	lsrs	r3, r2, #6
    f1fc:	2200      	movs	r2, #0
    f1fe:	7142      	strb	r2, [r0, #5]
    f200:	784b      	ldrb	r3, [r1, #1]
    f202:	f3c3 1301 	ubfx	r3, r3, #4, #2
    f206:	b11b      	cbz	r3, f210 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    f208:	2b01      	cmp	r3, #1
    f20a:	d005      	beq.n	f218 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    f20c:	2b02      	cmp	r3, #2
    f20e:	d005      	beq.n	f21c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    f210:	7102      	strb	r2, [r0, #4]
    f212:	1d09      	adds	r1, r1, #4
    f214:	6081      	str	r1, [r0, #8]
    f216:	4770      	bx	lr
    f218:	2201      	movs	r2, #1
    f21a:	e7f9      	b.n	f210 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    f21c:	2202      	movs	r2, #2
    f21e:	e7f7      	b.n	f210 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000f220 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    f220:	b510      	push	{r4, lr}
    f222:	460c      	mov	r4, r1
    f224:	7809      	ldrb	r1, [r1, #0]
    f226:	7001      	strb	r1, [r0, #0]
    f228:	7841      	ldrb	r1, [r0, #1]
    f22a:	f021 010f 	bic.w	r1, r1, #15
    f22e:	7041      	strb	r1, [r0, #1]
    f230:	8822      	ldrh	r2, [r4, #0]
    f232:	f3c2 2203 	ubfx	r2, r2, #8, #4
    f236:	4311      	orrs	r1, r2
    f238:	7041      	strb	r1, [r0, #1]
    f23a:	78a2      	ldrb	r2, [r4, #2]
    f23c:	7082      	strb	r2, [r0, #2]
    f23e:	8862      	ldrh	r2, [r4, #2]
    f240:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    f244:	0a12      	lsrs	r2, r2, #8
    f246:	70c2      	strb	r2, [r0, #3]
    f248:	7041      	strb	r1, [r0, #1]
    f24a:	7922      	ldrb	r2, [r4, #4]
    f24c:	f002 0203 	and.w	r2, r2, #3
    f250:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    f254:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    f258:	7041      	strb	r1, [r0, #1]
    f25a:	7962      	ldrb	r2, [r4, #5]
    f25c:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    f260:	7041      	strb	r1, [r0, #1]
    f262:	68a1      	ldr	r1, [r4, #8]
    f264:	1d02      	adds	r2, r0, #4
    f266:	4291      	cmp	r1, r2
    f268:	d006      	beq.n	f278 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    f26a:	8862      	ldrh	r2, [r4, #2]
    f26c:	2afb      	cmp	r2, #251	; 0xfb
    f26e:	d300      	bcc.n	f272 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    f270:	22fb      	movs	r2, #251	; 0xfb
    f272:	1d00      	adds	r0, r0, #4
    f274:	f7f4 fb40 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f278:	78a0      	ldrb	r0, [r4, #2]
    f27a:	1d00      	adds	r0, r0, #4
    f27c:	b2c0      	uxtb	r0, r0
    f27e:	bd10      	pop	{r4, pc}

0000f280 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    f280:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f284:	4604      	mov	r4, r0
    f286:	f891 c000 	ldrb.w	ip, [r1]
    f28a:	2000      	movs	r0, #0
    f28c:	260c      	movs	r6, #12
    f28e:	223e      	movs	r2, #62	; 0x3e
    f290:	2512      	movs	r5, #18
    f292:	23ff      	movs	r3, #255	; 0xff
    f294:	f04f 0b14 	mov.w	fp, #20
    f298:	f04f 0e13 	mov.w	lr, #19
    f29c:	f04f 0a05 	mov.w	sl, #5
    f2a0:	f104 070d 	add.w	r7, r4, #13
    f2a4:	f04f 0911 	mov.w	r9, #17
    f2a8:	f1bc 0f20 	cmp.w	ip, #32
    f2ac:	d272      	bcs.n	f394 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    f2ae:	e8df f00c 	tbb	[pc, ip]
    f2b2:	1071      	.short	0x1071
    f2b4:	fc2e2927 	.word	0xfc2e2927
    f2b8:	c0aea46d 	.word	0xc0aea46d
    f2bc:	f9fafbda 	.word	0xf9fafbda
    f2c0:	71f6f7f8 	.word	0x71f6f7f8
    f2c4:	f5725071 	.word	0xf5725071
    f2c8:	f1f2f3f4 	.word	0xf1f2f3f4
    f2cc:	edeeeff0 	.word	0xedeeeff0
    f2d0:	ec71      	.short	0xec71
    f2d2:	7026      	strb	r6, [r4, #0]
    f2d4:	7908      	ldrb	r0, [r1, #4]
    f2d6:	70a0      	strb	r0, [r4, #2]
    f2d8:	7948      	ldrb	r0, [r1, #5]
    f2da:	70e0      	strb	r0, [r4, #3]
    f2dc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    f2e0:	0a00      	lsrs	r0, r0, #8
    f2e2:	7120      	strb	r0, [r4, #4]
    f2e4:	79c8      	ldrb	r0, [r1, #7]
    f2e6:	7160      	strb	r0, [r4, #5]
    f2e8:	7a08      	ldrb	r0, [r1, #8]
    f2ea:	71a0      	strb	r0, [r4, #6]
    f2ec:	8908      	ldrh	r0, [r1, #8]
    f2ee:	0a00      	lsrs	r0, r0, #8
    f2f0:	71e0      	strb	r0, [r4, #7]
    f2f2:	7a88      	ldrb	r0, [r1, #10]
    f2f4:	7220      	strb	r0, [r4, #8]
    f2f6:	8948      	ldrh	r0, [r1, #10]
    f2f8:	0a00      	lsrs	r0, r0, #8
    f2fa:	7260      	strb	r0, [r4, #9]
    f2fc:	2008      	movs	r0, #8
    f2fe:	e153      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f300:	2010      	movs	r0, #16
    f302:	e000      	b.n	f306 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    f304:	201a      	movs	r0, #26
    f306:	7020      	strb	r0, [r4, #0]
    f308:	7908      	ldrb	r0, [r1, #4]
    f30a:	70a0      	strb	r0, [r4, #2]
    f30c:	e154      	b.n	f5b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    f30e:	7022      	strb	r2, [r4, #0]
    f310:	2002      	movs	r0, #2
    f312:	70a0      	strb	r0, [r4, #2]
    f314:	7908      	ldrb	r0, [r1, #4]
    f316:	70e0      	strb	r0, [r4, #3]
    f318:	7b88      	ldrb	r0, [r1, #14]
    f31a:	7120      	strb	r0, [r4, #4]
    f31c:	7948      	ldrb	r0, [r1, #5]
    f31e:	7160      	strb	r0, [r4, #5]
    f320:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f324:	f8c4 0006 	str.w	r0, [r4, #6]
    f328:	8948      	ldrh	r0, [r1, #10]
    f32a:	8160      	strh	r0, [r4, #10]
    f32c:	7b08      	ldrb	r0, [r1, #12]
    f32e:	7320      	strb	r0, [r4, #12]
    f330:	7b0e      	ldrb	r6, [r1, #12]
    f332:	1d0d      	adds	r5, r1, #4
    f334:	2e1f      	cmp	r6, #31
    f336:	d300      	bcc.n	f33a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    f338:	261f      	movs	r6, #31
    f33a:	4638      	mov	r0, r7
    f33c:	4632      	mov	r2, r6
    f33e:	f105 010b 	add.w	r1, r5, #11
    f342:	f7f4 fad9 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f346:	360d      	adds	r6, #13
    f348:	7a69      	ldrb	r1, [r5, #9]
    f34a:	55a1      	strb	r1, [r4, r6]
    f34c:	1e76      	subs	r6, r6, #1
    f34e:	b2f0      	uxtb	r0, r6
    f350:	e128      	b.n	f5a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    f352:	7022      	strb	r2, [r4, #0]
    f354:	200b      	movs	r0, #11
    f356:	70a0      	strb	r0, [r4, #2]
    f358:	7908      	ldrb	r0, [r1, #4]
    f35a:	70e0      	strb	r0, [r4, #3]
    f35c:	7948      	ldrb	r0, [r1, #5]
    f35e:	7120      	strb	r0, [r4, #4]
    f360:	7988      	ldrb	r0, [r1, #6]
    f362:	7160      	strb	r0, [r4, #5]
    f364:	f8d1 0007 	ldr.w	r0, [r1, #7]
    f368:	f8c4 0006 	str.w	r0, [r4, #6]
    f36c:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    f370:	8160      	strh	r0, [r4, #10]
    f372:	7b48      	ldrb	r0, [r1, #13]
    f374:	7320      	strb	r0, [r4, #12]
    f376:	f8d1 000e 	ldr.w	r0, [r1, #14]
    f37a:	f8c4 000d 	str.w	r0, [r4, #13]
    f37e:	8a48      	ldrh	r0, [r1, #18]
    f380:	f8a4 0011 	strh.w	r0, [r4, #17]
    f384:	7d08      	ldrb	r0, [r1, #20]
    f386:	74e0      	strb	r0, [r4, #19]
    f388:	4628      	mov	r0, r5
    f38a:	e10d      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f38c:	4620      	mov	r0, r4
    f38e:	f000 f98d 	bl	f6ac <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    f392:	e107      	b.n	f5a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    f394:	e10b      	b.n	f5ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    f396:	7022      	strb	r2, [r4, #0]
    f398:	200a      	movs	r0, #10
    f39a:	70a0      	strb	r0, [r4, #2]
    f39c:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    f3a0:	70e0      	strb	r0, [r4, #3]
    f3a2:	7888      	ldrb	r0, [r1, #2]
    f3a4:	7120      	strb	r0, [r4, #4]
    f3a6:	8848      	ldrh	r0, [r1, #2]
    f3a8:	0a00      	lsrs	r0, r0, #8
    f3aa:	7160      	strb	r0, [r4, #5]
    f3ac:	7908      	ldrb	r0, [r1, #4]
    f3ae:	71a0      	strb	r0, [r4, #6]
    f3b0:	7948      	ldrb	r0, [r1, #5]
    f3b2:	71e0      	strb	r0, [r4, #7]
    f3b4:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f3b8:	60a0      	str	r0, [r4, #8]
    f3ba:	8948      	ldrh	r0, [r1, #10]
    f3bc:	81a0      	strh	r0, [r4, #12]
    f3be:	68c8      	ldr	r0, [r1, #12]
    f3c0:	f8c4 000e 	str.w	r0, [r4, #14]
    f3c4:	8a08      	ldrh	r0, [r1, #16]
    f3c6:	8260      	strh	r0, [r4, #18]
    f3c8:	f8d1 0012 	ldr.w	r0, [r1, #18]
    f3cc:	6160      	str	r0, [r4, #20]
    f3ce:	8ac8      	ldrh	r0, [r1, #22]
    f3d0:	8320      	strh	r0, [r4, #24]
    f3d2:	7e08      	ldrb	r0, [r1, #24]
    f3d4:	76a0      	strb	r0, [r4, #26]
    f3d6:	8b08      	ldrh	r0, [r1, #24]
    f3d8:	0a00      	lsrs	r0, r0, #8
    f3da:	76e0      	strb	r0, [r4, #27]
    f3dc:	7e88      	ldrb	r0, [r1, #26]
    f3de:	7720      	strb	r0, [r4, #28]
    f3e0:	8b48      	ldrh	r0, [r1, #26]
    f3e2:	0a00      	lsrs	r0, r0, #8
    f3e4:	7760      	strb	r0, [r4, #29]
    f3e6:	7f08      	ldrb	r0, [r1, #28]
    f3e8:	77a0      	strb	r0, [r4, #30]
    f3ea:	8b88      	ldrh	r0, [r1, #28]
    f3ec:	0a00      	lsrs	r0, r0, #8
    f3ee:	77e0      	strb	r0, [r4, #31]
    f3f0:	7f88      	ldrb	r0, [r1, #30]
    f3f2:	f884 0020 	strb.w	r0, [r4, #32]
    f3f6:	201f      	movs	r0, #31
    f3f8:	e0d6      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f3fa:	7022      	strb	r2, [r4, #0]
    f3fc:	f884 b002 	strb.w	fp, [r4, #2]
    f400:	7908      	ldrb	r0, [r1, #4]
    f402:	70e0      	strb	r0, [r4, #3]
    f404:	8888      	ldrh	r0, [r1, #4]
    f406:	0a00      	lsrs	r0, r0, #8
    f408:	7120      	strb	r0, [r4, #4]
    f40a:	7988      	ldrb	r0, [r1, #6]
    f40c:	e0ed      	b.n	f5ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    f40e:	7022      	strb	r2, [r4, #0]
    f410:	2004      	movs	r0, #4
    f412:	70a0      	strb	r0, [r4, #2]
    f414:	7908      	ldrb	r0, [r1, #4]
    f416:	70e0      	strb	r0, [r4, #3]
    f418:	7988      	ldrb	r0, [r1, #6]
    f41a:	7120      	strb	r0, [r4, #4]
    f41c:	88c8      	ldrh	r0, [r1, #6]
    f41e:	0a00      	lsrs	r0, r0, #8
    f420:	7160      	strb	r0, [r4, #5]
    f422:	6888      	ldr	r0, [r1, #8]
    f424:	f8c4 0006 	str.w	r0, [r4, #6]
    f428:	68c8      	ldr	r0, [r1, #12]
    f42a:	f8c4 000a 	str.w	r0, [r4, #10]
    f42e:	200c      	movs	r0, #12
    f430:	e0ba      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f432:	7022      	strb	r2, [r4, #0]
    f434:	2003      	movs	r0, #3
    f436:	70a0      	strb	r0, [r4, #2]
    f438:	7908      	ldrb	r0, [r1, #4]
    f43a:	70e0      	strb	r0, [r4, #3]
    f43c:	7988      	ldrb	r0, [r1, #6]
    f43e:	7120      	strb	r0, [r4, #4]
    f440:	88c8      	ldrh	r0, [r1, #6]
    f442:	0a00      	lsrs	r0, r0, #8
    f444:	7160      	strb	r0, [r4, #5]
    f446:	7a08      	ldrb	r0, [r1, #8]
    f448:	71a0      	strb	r0, [r4, #6]
    f44a:	8908      	ldrh	r0, [r1, #8]
    f44c:	0a00      	lsrs	r0, r0, #8
    f44e:	71e0      	strb	r0, [r4, #7]
    f450:	7a88      	ldrb	r0, [r1, #10]
    f452:	7220      	strb	r0, [r4, #8]
    f454:	8948      	ldrh	r0, [r1, #10]
    f456:	0a00      	lsrs	r0, r0, #8
    f458:	7260      	strb	r0, [r4, #9]
    f45a:	7b08      	ldrb	r0, [r1, #12]
    f45c:	72a0      	strb	r0, [r4, #10]
    f45e:	8988      	ldrh	r0, [r1, #12]
    f460:	0a00      	lsrs	r0, r0, #8
    f462:	72e0      	strb	r0, [r4, #11]
    f464:	e120      	b.n	f6a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    f466:	7022      	strb	r2, [r4, #0]
    f468:	f884 a002 	strb.w	sl, [r4, #2]
    f46c:	7908      	ldrb	r0, [r1, #4]
    f46e:	70e0      	strb	r0, [r4, #3]
    f470:	8888      	ldrh	r0, [r1, #4]
    f472:	0a00      	lsrs	r0, r0, #8
    f474:	7120      	strb	r0, [r4, #4]
    f476:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f47a:	f8c4 0005 	str.w	r0, [r4, #5]
    f47e:	f8d1 000a 	ldr.w	r0, [r1, #10]
    f482:	f8c4 0009 	str.w	r0, [r4, #9]
    f486:	89c8      	ldrh	r0, [r1, #14]
    f488:	e010      	b.n	f4ac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    f48a:	e0fa      	b.n	f682 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    f48c:	e0ce      	b.n	f62c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    f48e:	e0af      	b.n	f5f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    f490:	e0da      	b.n	f648 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    f492:	e0e8      	b.n	f666 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    f494:	e0a1      	b.n	f5da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    f496:	e08c      	b.n	f5b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    f498:	e090      	b.n	f5bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    f49a:	e033      	b.n	f504 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    f49c:	e02f      	b.n	f4fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    f49e:	e043      	b.n	f528 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    f4a0:	e03d      	b.n	f51e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    f4a2:	e021      	b.n	f4e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    f4a4:	e015      	b.n	f4d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    f4a6:	e008      	b.n	f4ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    f4a8:	e004      	b.n	f4b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    f4aa:	e046      	b.n	f53a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    f4ac:	f8a4 000d 	strh.w	r0, [r4, #13]
    f4b0:	200d      	movs	r0, #13
    f4b2:	e079      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f4b4:	f884 9000 	strb.w	r9, [r4]
    f4b8:	e038      	b.n	f52c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    f4ba:	f884 a000 	strb.w	sl, [r4]
    f4be:	7908      	ldrb	r0, [r1, #4]
    f4c0:	70a0      	strb	r0, [r4, #2]
    f4c2:	7948      	ldrb	r0, [r1, #5]
    f4c4:	70e0      	strb	r0, [r4, #3]
    f4c6:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    f4ca:	0a00      	lsrs	r0, r0, #8
    f4cc:	7120      	strb	r0, [r4, #4]
    f4ce:	79c8      	ldrb	r0, [r1, #7]
    f4d0:	e08b      	b.n	f5ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    f4d2:	2008      	movs	r0, #8
    f4d4:	7020      	strb	r0, [r4, #0]
    f4d6:	7908      	ldrb	r0, [r1, #4]
    f4d8:	70a0      	strb	r0, [r4, #2]
    f4da:	7988      	ldrb	r0, [r1, #6]
    f4dc:	70e0      	strb	r0, [r4, #3]
    f4de:	88c8      	ldrh	r0, [r1, #6]
    f4e0:	0a00      	lsrs	r0, r0, #8
    f4e2:	7120      	strb	r0, [r4, #4]
    f4e4:	7a08      	ldrb	r0, [r1, #8]
    f4e6:	e080      	b.n	f5ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    f4e8:	2030      	movs	r0, #48	; 0x30
    f4ea:	7020      	strb	r0, [r4, #0]
    f4ec:	7908      	ldrb	r0, [r1, #4]
    f4ee:	70a0      	strb	r0, [r4, #2]
    f4f0:	7988      	ldrb	r0, [r1, #6]
    f4f2:	70e0      	strb	r0, [r4, #3]
    f4f4:	88c8      	ldrh	r0, [r1, #6]
    f4f6:	0a00      	lsrs	r0, r0, #8
    f4f8:	7120      	strb	r0, [r4, #4]
    f4fa:	2003      	movs	r0, #3
    f4fc:	e054      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f4fe:	7022      	strb	r2, [r4, #0]
    f500:	2007      	movs	r0, #7
    f502:	e077      	b.n	f5f4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    f504:	7022      	strb	r2, [r4, #0]
    f506:	70a6      	strb	r6, [r4, #2]
    f508:	7908      	ldrb	r0, [r1, #4]
    f50a:	70e0      	strb	r0, [r4, #3]
    f50c:	7988      	ldrb	r0, [r1, #6]
    f50e:	7120      	strb	r0, [r4, #4]
    f510:	88c8      	ldrh	r0, [r1, #6]
    f512:	0a00      	lsrs	r0, r0, #8
    f514:	7160      	strb	r0, [r4, #5]
    f516:	7a08      	ldrb	r0, [r1, #8]
    f518:	71a0      	strb	r0, [r4, #6]
    f51a:	7a48      	ldrb	r0, [r1, #9]
    f51c:	e05a      	b.n	f5d4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    f51e:	4620      	mov	r0, r4
    f520:	1d09      	adds	r1, r1, #4
    f522:	f7f4 fca7 	bl	3e74 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
    f526:	e03d      	b.n	f5a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    f528:	2057      	movs	r0, #87	; 0x57
    f52a:	7020      	strb	r0, [r4, #0]
    f52c:	7908      	ldrb	r0, [r1, #4]
    f52e:	70a0      	strb	r0, [r4, #2]
    f530:	8888      	ldrh	r0, [r1, #4]
    f532:	0a00      	lsrs	r0, r0, #8
    f534:	70e0      	strb	r0, [r4, #3]
    f536:	2002      	movs	r0, #2
    f538:	e036      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f53a:	7022      	strb	r2, [r4, #0]
    f53c:	220d      	movs	r2, #13
    f53e:	70a2      	strb	r2, [r4, #2]
    f540:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    f544:	70e2      	strb	r2, [r4, #3]
    f546:	894a      	ldrh	r2, [r1, #10]
    f548:	80a2      	strh	r2, [r4, #4]
    f54a:	784a      	ldrb	r2, [r1, #1]
    f54c:	71a2      	strb	r2, [r4, #6]
    f54e:	f8d1 2002 	ldr.w	r2, [r1, #2]
    f552:	f8c4 2007 	str.w	r2, [r4, #7]
    f556:	88ca      	ldrh	r2, [r1, #6]
    f558:	f8a4 200b 	strh.w	r2, [r4, #11]
    f55c:	7b0a      	ldrb	r2, [r1, #12]
    f55e:	4620      	mov	r0, r4
    f560:	7362      	strb	r2, [r4, #13]
    f562:	7b4a      	ldrb	r2, [r1, #13]
    f564:	7382      	strb	r2, [r0, #14]
    f566:	7b8a      	ldrb	r2, [r1, #14]
    f568:	73c2      	strb	r2, [r0, #15]
    f56a:	7eca      	ldrb	r2, [r1, #27]
    f56c:	7402      	strb	r2, [r0, #16]
    f56e:	7a4a      	ldrb	r2, [r1, #9]
    f570:	7442      	strb	r2, [r0, #17]
    f572:	8a4a      	ldrh	r2, [r1, #18]
    f574:	8242      	strh	r2, [r0, #18]
    f576:	7d0a      	ldrb	r2, [r1, #20]
    f578:	7502      	strb	r2, [r0, #20]
    f57a:	f8d1 2015 	ldr.w	r2, [r1, #21]
    f57e:	f8c0 2015 	str.w	r2, [r0, #21]
    f582:	f8b1 2019 	ldrh.w	r2, [r1, #25]
    f586:	f8a0 2019 	strh.w	r2, [r0, #25]
    f58a:	7a0a      	ldrb	r2, [r1, #8]
    f58c:	76c2      	strb	r2, [r0, #27]
    f58e:	7a0d      	ldrb	r5, [r1, #8]
    f590:	2de5      	cmp	r5, #229	; 0xe5
    f592:	d300      	bcc.n	f596 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    f594:	25e5      	movs	r5, #229	; 0xe5
    f596:	462a      	mov	r2, r5
    f598:	301c      	adds	r0, #28
    f59a:	311d      	adds	r1, #29
    f59c:	f7f4 f9ac 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f5a0:	351a      	adds	r5, #26
    f5a2:	b2e8      	uxtb	r0, r5
    f5a4:	2800      	cmp	r0, #0
    f5a6:	d002      	beq.n	f5ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    f5a8:	7060      	strb	r0, [r4, #1]
    f5aa:	1c80      	adds	r0, r0, #2
    f5ac:	b2c0      	uxtb	r0, r0
    f5ae:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    f5b2:	7022      	strb	r2, [r4, #0]
    f5b4:	f884 9002 	strb.w	r9, [r4, #2]
    f5b8:	2001      	movs	r0, #1
    f5ba:	e7f5      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f5bc:	7022      	strb	r2, [r4, #0]
    f5be:	70a5      	strb	r5, [r4, #2]
    f5c0:	7908      	ldrb	r0, [r1, #4]
    f5c2:	70e0      	strb	r0, [r4, #3]
    f5c4:	7948      	ldrb	r0, [r1, #5]
    f5c6:	7120      	strb	r0, [r4, #4]
    f5c8:	7988      	ldrb	r0, [r1, #6]
    f5ca:	7160      	strb	r0, [r4, #5]
    f5cc:	88c8      	ldrh	r0, [r1, #6]
    f5ce:	0a00      	lsrs	r0, r0, #8
    f5d0:	71a0      	strb	r0, [r4, #6]
    f5d2:	7a08      	ldrb	r0, [r1, #8]
    f5d4:	71e0      	strb	r0, [r4, #7]
    f5d6:	2006      	movs	r0, #6
    f5d8:	e7e6      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f5da:	7023      	strb	r3, [r4, #0]
    f5dc:	20a1      	movs	r0, #161	; 0xa1
    f5de:	70a0      	strb	r0, [r4, #2]
    f5e0:	7908      	ldrb	r0, [r1, #4]
    f5e2:	70e0      	strb	r0, [r4, #3]
    f5e4:	7948      	ldrb	r0, [r1, #5]
    f5e6:	7120      	strb	r0, [r4, #4]
    f5e8:	2000      	movs	r0, #0
    f5ea:	7160      	strb	r0, [r4, #5]
    f5ec:	2004      	movs	r0, #4
    f5ee:	e7db      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f5f0:	7023      	strb	r3, [r4, #0]
    f5f2:	20a2      	movs	r0, #162	; 0xa2
    f5f4:	70a0      	strb	r0, [r4, #2]
    f5f6:	7908      	ldrb	r0, [r1, #4]
    f5f8:	70e0      	strb	r0, [r4, #3]
    f5fa:	8888      	ldrh	r0, [r1, #4]
    f5fc:	0a00      	lsrs	r0, r0, #8
    f5fe:	7120      	strb	r0, [r4, #4]
    f600:	7988      	ldrb	r0, [r1, #6]
    f602:	7160      	strb	r0, [r4, #5]
    f604:	88c8      	ldrh	r0, [r1, #6]
    f606:	0a00      	lsrs	r0, r0, #8
    f608:	71a0      	strb	r0, [r4, #6]
    f60a:	7a08      	ldrb	r0, [r1, #8]
    f60c:	71e0      	strb	r0, [r4, #7]
    f60e:	8908      	ldrh	r0, [r1, #8]
    f610:	0a00      	lsrs	r0, r0, #8
    f612:	7220      	strb	r0, [r4, #8]
    f614:	7a88      	ldrb	r0, [r1, #10]
    f616:	7260      	strb	r0, [r4, #9]
    f618:	8948      	ldrh	r0, [r1, #10]
    f61a:	0a00      	lsrs	r0, r0, #8
    f61c:	72a0      	strb	r0, [r4, #10]
    f61e:	7b08      	ldrb	r0, [r1, #12]
    f620:	72e0      	strb	r0, [r4, #11]
    f622:	8988      	ldrh	r0, [r1, #12]
    f624:	0a00      	lsrs	r0, r0, #8
    f626:	7320      	strb	r0, [r4, #12]
    f628:	200b      	movs	r0, #11
    f62a:	e7bd      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f62c:	7023      	strb	r3, [r4, #0]
    f62e:	20a3      	movs	r0, #163	; 0xa3
    f630:	70a0      	strb	r0, [r4, #2]
    f632:	7908      	ldrb	r0, [r1, #4]
    f634:	70e0      	strb	r0, [r4, #3]
    f636:	8888      	ldrh	r0, [r1, #4]
    f638:	0a00      	lsrs	r0, r0, #8
    f63a:	7120      	strb	r0, [r4, #4]
    f63c:	7988      	ldrb	r0, [r1, #6]
    f63e:	7160      	strb	r0, [r4, #5]
    f640:	79c8      	ldrb	r0, [r1, #7]
    f642:	71a0      	strb	r0, [r4, #6]
    f644:	2005      	movs	r0, #5
    f646:	e7af      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f648:	7022      	strb	r2, [r4, #0]
    f64a:	f884 e002 	strb.w	lr, [r4, #2]
    f64e:	7908      	ldrb	r0, [r1, #4]
    f650:	70e0      	strb	r0, [r4, #3]
    f652:	7948      	ldrb	r0, [r1, #5]
    f654:	7120      	strb	r0, [r4, #4]
    f656:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f65a:	f8c4 0005 	str.w	r0, [r4, #5]
    f65e:	8948      	ldrh	r0, [r1, #10]
    f660:	f8a4 0009 	strh.w	r0, [r4, #9]
    f664:	e020      	b.n	f6a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    f666:	7023      	strb	r3, [r4, #0]
    f668:	20a4      	movs	r0, #164	; 0xa4
    f66a:	70a0      	strb	r0, [r4, #2]
    f66c:	7908      	ldrb	r0, [r1, #4]
    f66e:	70e0      	strb	r0, [r4, #3]
    f670:	8888      	ldrh	r0, [r1, #4]
    f672:	0a00      	lsrs	r0, r0, #8
    f674:	7120      	strb	r0, [r4, #4]
    f676:	7988      	ldrb	r0, [r1, #6]
    f678:	7160      	strb	r0, [r4, #5]
    f67a:	79c8      	ldrb	r0, [r1, #7]
    f67c:	71a0      	strb	r0, [r4, #6]
    f67e:	2007      	movs	r0, #7
    f680:	e792      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f682:	7023      	strb	r3, [r4, #0]
    f684:	2080      	movs	r0, #128	; 0x80
    f686:	70a0      	strb	r0, [r4, #2]
    f688:	888a      	ldrh	r2, [r1, #4]
    f68a:	f8a4 2003 	strh.w	r2, [r4, #3]
    f68e:	88ca      	ldrh	r2, [r1, #6]
    f690:	f8a4 2005 	strh.w	r2, [r4, #5]
    f694:	7a0a      	ldrb	r2, [r1, #8]
    f696:	71e2      	strb	r2, [r4, #7]
    f698:	7a4a      	ldrb	r2, [r1, #9]
    f69a:	8122      	strh	r2, [r4, #8]
    f69c:	7a8a      	ldrb	r2, [r1, #10]
    f69e:	72a2      	strb	r2, [r4, #10]
    f6a0:	7ac9      	ldrb	r1, [r1, #11]
    f6a2:	f001 0101 	and.w	r1, r1, #1
    f6a6:	72e1      	strb	r1, [r4, #11]
    f6a8:	200a      	movs	r0, #10
    f6aa:	e77d      	b.n	f5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>

0000f6ac <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    f6ac:	223e      	movs	r2, #62	; 0x3e
    f6ae:	7002      	strb	r2, [r0, #0]
    f6b0:	2201      	movs	r2, #1
    f6b2:	7082      	strb	r2, [r0, #2]
    f6b4:	790a      	ldrb	r2, [r1, #4]
    f6b6:	70c2      	strb	r2, [r0, #3]
    f6b8:	798a      	ldrb	r2, [r1, #6]
    f6ba:	7102      	strb	r2, [r0, #4]
    f6bc:	88ca      	ldrh	r2, [r1, #6]
    f6be:	0a12      	lsrs	r2, r2, #8
    f6c0:	7142      	strb	r2, [r0, #5]
    f6c2:	7a0a      	ldrb	r2, [r1, #8]
    f6c4:	7182      	strb	r2, [r0, #6]
    f6c6:	7a4a      	ldrb	r2, [r1, #9]
    f6c8:	71c2      	strb	r2, [r0, #7]
    f6ca:	f8d1 200a 	ldr.w	r2, [r1, #10]
    f6ce:	6082      	str	r2, [r0, #8]
    f6d0:	89ca      	ldrh	r2, [r1, #14]
    f6d2:	8182      	strh	r2, [r0, #12]
    f6d4:	7c0a      	ldrb	r2, [r1, #16]
    f6d6:	7382      	strb	r2, [r0, #14]
    f6d8:	8a0a      	ldrh	r2, [r1, #16]
    f6da:	0a12      	lsrs	r2, r2, #8
    f6dc:	73c2      	strb	r2, [r0, #15]
    f6de:	7c8a      	ldrb	r2, [r1, #18]
    f6e0:	7402      	strb	r2, [r0, #16]
    f6e2:	8a4a      	ldrh	r2, [r1, #18]
    f6e4:	0a12      	lsrs	r2, r2, #8
    f6e6:	7442      	strb	r2, [r0, #17]
    f6e8:	7d0a      	ldrb	r2, [r1, #20]
    f6ea:	7482      	strb	r2, [r0, #18]
    f6ec:	8a8a      	ldrh	r2, [r1, #20]
    f6ee:	0a12      	lsrs	r2, r2, #8
    f6f0:	74c2      	strb	r2, [r0, #19]
    f6f2:	7d89      	ldrb	r1, [r1, #22]
    f6f4:	7501      	strb	r1, [r0, #20]
    f6f6:	2013      	movs	r0, #19
    f6f8:	4770      	bx	lr

0000f6fa <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    f6fa:	223e      	movs	r2, #62	; 0x3e
    f6fc:	7002      	strb	r2, [r0, #0]
    f6fe:	2201      	movs	r2, #1
    f700:	7082      	strb	r2, [r0, #2]
    f702:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    f706:	70c2      	strb	r2, [r0, #3]
    f708:	788a      	ldrb	r2, [r1, #2]
    f70a:	7102      	strb	r2, [r0, #4]
    f70c:	884a      	ldrh	r2, [r1, #2]
    f70e:	0a12      	lsrs	r2, r2, #8
    f710:	7142      	strb	r2, [r0, #5]
    f712:	790a      	ldrb	r2, [r1, #4]
    f714:	7182      	strb	r2, [r0, #6]
    f716:	794a      	ldrb	r2, [r1, #5]
    f718:	71c2      	strb	r2, [r0, #7]
    f71a:	f8d1 2006 	ldr.w	r2, [r1, #6]
    f71e:	6082      	str	r2, [r0, #8]
    f720:	894a      	ldrh	r2, [r1, #10]
    f722:	8182      	strh	r2, [r0, #12]
    f724:	7e0a      	ldrb	r2, [r1, #24]
    f726:	7382      	strb	r2, [r0, #14]
    f728:	8b0a      	ldrh	r2, [r1, #24]
    f72a:	0a12      	lsrs	r2, r2, #8
    f72c:	73c2      	strb	r2, [r0, #15]
    f72e:	7e8a      	ldrb	r2, [r1, #26]
    f730:	7402      	strb	r2, [r0, #16]
    f732:	8b4a      	ldrh	r2, [r1, #26]
    f734:	0a12      	lsrs	r2, r2, #8
    f736:	7442      	strb	r2, [r0, #17]
    f738:	7f0a      	ldrb	r2, [r1, #28]
    f73a:	7482      	strb	r2, [r0, #18]
    f73c:	8b8a      	ldrh	r2, [r1, #28]
    f73e:	0a12      	lsrs	r2, r2, #8
    f740:	74c2      	strb	r2, [r0, #19]
    f742:	7f89      	ldrb	r1, [r1, #30]
    f744:	7501      	strb	r1, [r0, #20]
    f746:	2113      	movs	r1, #19
    f748:	7041      	strb	r1, [r0, #1]
    f74a:	4608      	mov	r0, r1
    f74c:	4770      	bx	lr

0000f74e <sdc_hci_data_get>:
    f74e:	b510      	push	{r4, lr}
    f750:	b120      	cbz	r0, f75c <sdc_hci_data_get+0xe>
    f752:	f7ff fd34 	bl	f1be <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    f756:	b120      	cbz	r0, f762 <sdc_hci_data_get+0x14>
    f758:	2000      	movs	r0, #0
    f75a:	bd10      	pop	{r4, pc}
    f75c:	f06f 0015 	mvn.w	r0, #21
    f760:	bd10      	pop	{r4, pc}
    f762:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f766:	bd10      	pop	{r4, pc}

0000f768 <sdc_hci_data_put>:
    f768:	b510      	push	{r4, lr}
    f76a:	f06f 0415 	mvn.w	r4, #21
    f76e:	b120      	cbz	r0, f77a <sdc_hci_data_put+0x12>
    f770:	f7ff fd33 	bl	f1da <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    f774:	b108      	cbz	r0, f77a <sdc_hci_data_put+0x12>
    f776:	2000      	movs	r0, #0
    f778:	bd10      	pop	{r4, pc}
    f77a:	4620      	mov	r0, r4
    f77c:	bd10      	pop	{r4, pc}

0000f77e <sdc_hci_evt_get>:
    f77e:	b510      	push	{r4, lr}
    f780:	b120      	cbz	r0, f78c <sdc_hci_evt_get+0xe>
    f782:	f7f4 fb0b 	bl	3d9c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    f786:	b120      	cbz	r0, f792 <sdc_hci_evt_get+0x14>
    f788:	2000      	movs	r0, #0
    f78a:	bd10      	pop	{r4, pc}
    f78c:	f06f 0015 	mvn.w	r0, #21
    f790:	bd10      	pop	{r4, pc}
    f792:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f796:	bd10      	pop	{r4, pc}

0000f798 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    f798:	f002 bb72 	b.w	11e80 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000f79c <sdc_hci_cmd_cb_read_transmit_power_level>:
    f79c:	f002 bbc5 	b.w	11f2a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000f7a0 <sdc_hci_cmd_cb_set_event_mask>:
    f7a0:	b510      	push	{r4, lr}
    f7a2:	f7f4 fbc5 	bl	3f30 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    f7a6:	2000      	movs	r0, #0
    f7a8:	bd10      	pop	{r4, pc}

0000f7aa <sdc_hci_cmd_cb_set_event_mask_page_2>:
    f7aa:	b510      	push	{r4, lr}
    f7ac:	f7f4 fbce 	bl	3f4c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    f7b0:	2000      	movs	r0, #0
    f7b2:	bd10      	pop	{r4, pc}

0000f7b4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    f7b4:	f002 bbd4 	b.w	11f60 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000f7b8 <sdc_hci_cmd_vs_conn_event_extend>:
    f7b8:	b508      	push	{r3, lr}
    f7ba:	7800      	ldrb	r0, [r0, #0]
    f7bc:	f88d 0000 	strb.w	r0, [sp]
    f7c0:	4668      	mov	r0, sp
    f7c2:	f002 faee 	bl	11da2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    f7c6:	bd08      	pop	{r3, pc}

0000f7c8 <sdc_hci_cmd_vs_conn_update>:
    f7c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f7ca:	2100      	movs	r1, #0
    f7cc:	9100      	str	r1, [sp, #0]
    f7ce:	9101      	str	r1, [sp, #4]
    f7d0:	9102      	str	r1, [sp, #8]
    f7d2:	9103      	str	r1, [sp, #12]
    f7d4:	f8d0 1002 	ldr.w	r1, [r0, #2]
    f7d8:	f641 524c 	movw	r2, #7500	; 0x1d4c
    f7dc:	4291      	cmp	r1, r2
    f7de:	d304      	bcc.n	f7ea <sdc_hci_cmd_vs_conn_update+0x22>
    f7e0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f7e4:	fbb1 f1f2 	udiv	r1, r1, r2
    f7e8:	e005      	b.n	f7f6 <sdc_hci_cmd_vs_conn_update+0x2e>
    f7ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f7ee:	fbb1 f1f2 	udiv	r1, r1, r2
    f7f2:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    f7f6:	8802      	ldrh	r2, [r0, #0]
    f7f8:	b289      	uxth	r1, r1
    f7fa:	f8ad 2000 	strh.w	r2, [sp]
    f7fe:	f8ad 1002 	strh.w	r1, [sp, #2]
    f802:	f8ad 1004 	strh.w	r1, [sp, #4]
    f806:	88c1      	ldrh	r1, [r0, #6]
    f808:	f8ad 1006 	strh.w	r1, [sp, #6]
    f80c:	8900      	ldrh	r0, [r0, #8]
    f80e:	f8ad 0008 	strh.w	r0, [sp, #8]
    f812:	4668      	mov	r0, sp
    f814:	f002 f888 	bl	11928 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    f818:	b004      	add	sp, #16
    f81a:	bd10      	pop	{r4, pc}

0000f81c <sdc_hci_cmd_vs_event_length_set>:
    f81c:	f7fd b86e 	b.w	c8fc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000f820 <sdc_hci_cmd_vs_llpm_mode_set>:
    f820:	b508      	push	{r3, lr}
    f822:	7800      	ldrb	r0, [r0, #0]
    f824:	f88d 0000 	strb.w	r0, [sp]
    f828:	4668      	mov	r0, sp
    f82a:	f7fd f8c7 	bl	c9bc <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
    f82e:	bd08      	pop	{r3, pc}

0000f830 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    f830:	7800      	ldrb	r0, [r0, #0]
    f832:	b100      	cbz	r0, f836 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    f834:	2001      	movs	r0, #1
    f836:	f002 ba17 	b.w	11c68 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000f83a <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    f83a:	b510      	push	{r4, lr}
    f83c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    f840:	4604      	mov	r4, r0
    f842:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f846:	1c40      	adds	r0, r0, #1
    f848:	d105      	bne.n	f856 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    f84a:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f84e:	43c0      	mvns	r0, r0
    f850:	0400      	lsls	r0, r0, #16
    f852:	0c00      	lsrs	r0, r0, #16
    f854:	d036      	beq.n	f8c4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f856:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
    f85a:	07c0      	lsls	r0, r0, #31
    f85c:	d032      	beq.n	f8c4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f85e:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f862:	f8c4 0001 	str.w	r0, [r4, #1]
    f866:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f86a:	f8a4 0005 	strh.w	r0, [r4, #5]
    f86e:	79a0      	ldrb	r0, [r4, #6]
    f870:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    f874:	71a0      	strb	r0, [r4, #6]
    f876:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    f87a:	1c40      	adds	r0, r0, #1
    f87c:	d019      	beq.n	f8b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f87e:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    f882:	1c40      	adds	r0, r0, #1
    f884:	d015      	beq.n	f8b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f886:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
    f88a:	1c40      	adds	r0, r0, #1
    f88c:	d011      	beq.n	f8b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f88e:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    f892:	1c40      	adds	r0, r0, #1
    f894:	d00d      	beq.n	f8b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f896:	f851 0f90 	ldr.w	r0, [r1, #144]!
    f89a:	f8c4 0007 	str.w	r0, [r4, #7]
    f89e:	6848      	ldr	r0, [r1, #4]
    f8a0:	f8c4 000b 	str.w	r0, [r4, #11]
    f8a4:	6888      	ldr	r0, [r1, #8]
    f8a6:	f8c4 000f 	str.w	r0, [r4, #15]
    f8aa:	68c8      	ldr	r0, [r1, #12]
    f8ac:	f8c4 0013 	str.w	r0, [r4, #19]
    f8b0:	e004      	b.n	f8bc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x82>
    f8b2:	2210      	movs	r2, #16
    f8b4:	2100      	movs	r1, #0
    f8b6:	1de0      	adds	r0, r4, #7
    f8b8:	f7ff fbe8 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f8bc:	2001      	movs	r0, #1
    f8be:	7020      	strb	r0, [r4, #0]
    f8c0:	2000      	movs	r0, #0
    f8c2:	bd10      	pop	{r4, pc}
    f8c4:	2000      	movs	r0, #0
    f8c6:	e7fa      	b.n	f8be <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x84>

0000f8c8 <sdc_hci_cmd_vs_zephyr_read_tx_power>:
    f8c8:	7802      	ldrb	r2, [r0, #0]
    f8ca:	700a      	strb	r2, [r1, #0]
    f8cc:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    f8d0:	f8a1 2001 	strh.w	r2, [r1, #1]
    f8d4:	f8b0 3001 	ldrh.w	r3, [r0, #1]
    f8d8:	1cca      	adds	r2, r1, #3
    f8da:	7800      	ldrb	r0, [r0, #0]
    f8dc:	4619      	mov	r1, r3
    f8de:	f002 b9c8 	b.w	11c72 <sym_FQEZF5Z2WD64Y6SH4N3MMG6DKWGYWZ62AUIJVGY>

0000f8e2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    f8e2:	f002 ba3e 	b.w	11d62 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000f8e6 <sdc_hci_cmd_vs_zephyr_write_tx_power>:
    f8e6:	f990 2003 	ldrsb.w	r2, [r0, #3]
    f8ea:	2a7f      	cmp	r2, #127	; 0x7f
    f8ec:	d100      	bne.n	f8f0 <sdc_hci_cmd_vs_zephyr_write_tx_power+0xa>
    f8ee:	2200      	movs	r2, #0
    f8f0:	7803      	ldrb	r3, [r0, #0]
    f8f2:	700b      	strb	r3, [r1, #0]
    f8f4:	f8b0 3001 	ldrh.w	r3, [r0, #1]
    f8f8:	f8a1 3001 	strh.w	r3, [r1, #1]
    f8fc:	70ca      	strb	r2, [r1, #3]
    f8fe:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f902:	7800      	ldrb	r0, [r0, #0]
    f904:	f002 ba81 	b.w	11e0a <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA>

0000f908 <sdc_hci_cmd_ip_read_bd_addr>:
    f908:	f002 bacb 	b.w	11ea2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000f90c <sdc_hci_cmd_ip_read_local_version_information>:
    f90c:	f7fd b86a 	b.w	c9e4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000f910 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    f910:	f001 bfbb 	b.w	1188a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000f914 <sdc_hci_cmd_le_add_device_to_white_list>:
    f914:	f001 bfd4 	b.w	118c0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000f918 <sdc_hci_cmd_le_clear_resolving_list>:
    f918:	f001 bfef 	b.w	118fa <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000f91c <sdc_hci_cmd_le_clear_white_list>:
    f91c:	f001 bffa 	b.w	11914 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000f920 <sdc_hci_cmd_le_encrypt>:
    f920:	f002 b84b 	b.w	119ba <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000f924 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    f924:	8802      	ldrh	r2, [r0, #0]
    f926:	800a      	strh	r2, [r1, #0]
    f928:	f002 b850 	b.w	119cc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000f92c <sdc_hci_cmd_le_long_term_key_request_reply>:
    f92c:	8802      	ldrh	r2, [r0, #0]
    f92e:	800a      	strh	r2, [r1, #0]
    f930:	f002 b865 	b.w	119fe <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000f934 <sdc_hci_cmd_le_rand>:
    f934:	f002 b887 	b.w	11a46 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000f938 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    f938:	f7fc be22 	b.w	c580 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000f93c <sdc_hci_cmd_le_read_buffer_size>:
    f93c:	f7fc be2e 	b.w	c59c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000f940 <sdc_hci_cmd_le_read_channel_map>:
    f940:	f002 b887 	b.w	11a52 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000f944 <sdc_hci_cmd_le_read_max_data_length>:
    f944:	f002 b8a6 	b.w	11a94 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000f948 <sdc_hci_cmd_le_read_phy>:
    f948:	f7fc be34 	b.w	c5b4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000f94c <sdc_hci_cmd_le_read_remote_features>:
    f94c:	f7fc be58 	b.w	c600 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000f950 <sdc_hci_cmd_le_read_resolving_list_size>:
    f950:	f002 b8b0 	b.w	11ab4 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000f954 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    f954:	f7fc be84 	b.w	c660 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000f958 <sdc_hci_cmd_le_read_transmit_power>:
    f958:	f002 b8b0 	b.w	11abc <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000f95c <sdc_hci_cmd_le_read_white_list_size>:
    f95c:	f002 b8b4 	b.w	11ac8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000f960 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    f960:	f002 b8b6 	b.w	11ad0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000f964 <sdc_hci_cmd_le_remove_device_from_white_list>:
    f964:	f002 b8cd 	b.w	11b02 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000f968 <sdc_hci_cmd_le_set_address_resolution_enable>:
    f968:	f002 b8e7 	b.w	11b3a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000f96c <sdc_hci_cmd_le_set_adv_data>:
    f96c:	f7fc be88 	b.w	c680 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000f970 <sdc_hci_cmd_le_set_adv_enable>:
    f970:	f7fc beb6 	b.w	c6e0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000f974 <sdc_hci_cmd_le_set_adv_params>:
    f974:	f7fc bed2 	b.w	c71c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000f978 <sdc_hci_cmd_le_set_data_length>:
    f978:	f002 b8ed 	b.w	11b56 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000f97c <sdc_hci_cmd_le_set_default_phy>:
    f97c:	f7fc bf44 	b.w	c808 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000f980 <sdc_hci_cmd_le_set_event_mask>:
    f980:	b510      	push	{r4, lr}
    f982:	f7f4 facf 	bl	3f24 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    f986:	2000      	movs	r0, #0
    f988:	bd10      	pop	{r4, pc}

0000f98a <sdc_hci_cmd_le_set_phy>:
    f98a:	f002 b90b 	b.w	11ba4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000f98e <sdc_hci_cmd_le_set_privacy_mode>:
    f98e:	f002 b927 	b.w	11be0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000f992 <sdc_hci_cmd_le_set_random_address>:
    f992:	f002 b93b 	b.w	11c0c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000f996 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    f996:	f002 b947 	b.w	11c28 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000f99a <sdc_hci_cmd_le_set_scan_response_data>:
    f99a:	f7fc bf65 	b.w	c868 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000f99e <sdc_hci_cmd_le_write_suggested_default_data_length>:
    f99e:	f002 b94c 	b.w	11c3a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000f9a2 <sdc_hci_cmd_lc_disconnect>:
    f9a2:	f001 bf12 	b.w	117ca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000f9a6 <sdc_hci_cmd_lc_read_remote_version_information>:
    f9a6:	f002 ba88 	b.w	11eba <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>

0000f9aa <sdc_hci_cmd_sp_read_rssi>:
    f9aa:	b513      	push	{r0, r1, r4, lr}
    f9ac:	a901      	add	r1, sp, #4
    f9ae:	f002 fab3 	bl	11f18 <sym_GNNWZJX3662WRFIX5OCHLN4MOMAPIGACZWUKXCI>
    f9b2:	bd1c      	pop	{r2, r3, r4, pc}
    f9b4:	b530      	push	{r4, r5, lr}
    f9b6:	8804      	ldrh	r4, [r0, #0]
    f9b8:	f424 4500 	bic.w	r5, r4, #32768	; 0x8000
    f9bc:	4429      	add	r1, r5
    f9be:	b289      	uxth	r1, r1
    f9c0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f9c4:	4291      	cmp	r1, r2
    f9c6:	d20b      	bcs.n	f9e0 <sdc_hci_cmd_sp_read_rssi+0x36>
    f9c8:	1a52      	subs	r2, r2, r1
    f9ca:	b292      	uxth	r2, r2
    f9cc:	331b      	adds	r3, #27
    f9ce:	429a      	cmp	r2, r3
    f9d0:	d201      	bcs.n	f9d6 <sdc_hci_cmd_sp_read_rssi+0x2c>
    f9d2:	43a5      	bics	r5, r4
    f9d4:	e002      	b.n	f9dc <sdc_hci_cmd_sp_read_rssi+0x32>
    f9d6:	f404 4500 	and.w	r5, r4, #32768	; 0x8000
    f9da:	430d      	orrs	r5, r1
    f9dc:	8005      	strh	r5, [r0, #0]
    f9de:	bd30      	pop	{r4, r5, pc}
    f9e0:	1a89      	subs	r1, r1, r2
    f9e2:	b289      	uxth	r1, r1
    f9e4:	43a5      	bics	r5, r4
    f9e6:	e7f8      	b.n	f9da <sdc_hci_cmd_sp_read_rssi+0x30>
    f9e8:	b510      	push	{r4, lr}
    f9ea:	8802      	ldrh	r2, [r0, #0]
    f9ec:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    f9f0:	428b      	cmp	r3, r1
    f9f2:	d203      	bcs.n	f9fc <sdc_hci_cmd_sp_read_rssi+0x52>
    f9f4:	21b6      	movs	r1, #182	; 0xb6
    f9f6:	2014      	movs	r0, #20
    f9f8:	f7f4 f90a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    fa00:	4393      	bics	r3, r2
    fa02:	430b      	orrs	r3, r1
    fa04:	8003      	strh	r3, [r0, #0]
    fa06:	bd10      	pop	{r4, pc}
    fa08:	4288      	cmp	r0, r1
    fa0a:	d101      	bne.n	fa10 <sdc_hci_cmd_sp_read_rssi+0x66>
    fa0c:	2001      	movs	r0, #1
    fa0e:	4770      	bx	lr
    fa10:	2000      	movs	r0, #0
    fa12:	4770      	bx	lr
    fa14:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    fa18:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    fa1c:	429a      	cmp	r2, r3
    fa1e:	d107      	bne.n	fa30 <sdc_hci_cmd_sp_read_rssi+0x86>
    fa20:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    fa24:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    fa28:	4288      	cmp	r0, r1
    fa2a:	d001      	beq.n	fa30 <sdc_hci_cmd_sp_read_rssi+0x86>
    fa2c:	2001      	movs	r0, #1
    fa2e:	4770      	bx	lr
    fa30:	2000      	movs	r0, #0
    fa32:	4770      	bx	lr

0000fa34 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    fa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa38:	f100 0628 	add.w	r6, r0, #40	; 0x28
    fa3c:	7f40      	ldrb	r0, [r0, #29]
    fa3e:	461d      	mov	r5, r3
    fa40:	3008      	adds	r0, #8
    fa42:	4690      	mov	r8, r2
    fa44:	1843      	adds	r3, r0, r1
    fa46:	2400      	movs	r4, #0
    fa48:	8808      	ldrh	r0, [r1, #0]
    fa4a:	884f      	ldrh	r7, [r1, #2]
    fa4c:	9a06      	ldr	r2, [sp, #24]
    fa4e:	1edb      	subs	r3, r3, #3
    fa50:	b190      	cbz	r0, fa78 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x44>
    fa52:	1cc0      	adds	r0, r0, #3
    fa54:	b280      	uxth	r0, r0
    fa56:	4290      	cmp	r0, r2
    fa58:	d912      	bls.n	fa80 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x4c>
    fa5a:	1a80      	subs	r0, r0, r2
    fa5c:	42a8      	cmp	r0, r5
    fa5e:	db00      	blt.n	fa62 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2e>
    fa60:	4628      	mov	r0, r5
    fa62:	b284      	uxth	r4, r0
    fa64:	1899      	adds	r1, r3, r2
    fa66:	4622      	mov	r2, r4
    fa68:	4640      	mov	r0, r8
    fa6a:	f7f3 ff45 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fa6e:	1b28      	subs	r0, r5, r4
    fa70:	b285      	uxth	r5, r0
    fa72:	44a0      	add	r8, r4
    fa74:	2000      	movs	r0, #0
    fa76:	e005      	b.n	fa84 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x50>
    fa78:	1cff      	adds	r7, r7, #3
    fa7a:	b2bf      	uxth	r7, r7
    fa7c:	1ef6      	subs	r6, r6, #3
    fa7e:	e7ea      	b.n	fa56 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x22>
    fa80:	1a10      	subs	r0, r2, r0
    fa82:	b280      	uxth	r0, r0
    fa84:	1941      	adds	r1, r0, r5
    fa86:	42b9      	cmp	r1, r7
    fa88:	d806      	bhi.n	fa98 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x64>
    fa8a:	1831      	adds	r1, r6, r0
    fa8c:	462a      	mov	r2, r5
    fa8e:	4640      	mov	r0, r8
    fa90:	f7f3 ff32 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fa94:	1960      	adds	r0, r4, r5
    fa96:	b284      	uxth	r4, r0
    fa98:	4620      	mov	r0, r4
    fa9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fa9e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    fa9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    faa2:	f100 0628 	add.w	r6, r0, #40	; 0x28
    faa6:	7f40      	ldrb	r0, [r0, #29]
    faa8:	461d      	mov	r5, r3
    faaa:	3008      	adds	r0, #8
    faac:	4690      	mov	r8, r2
    faae:	1843      	adds	r3, r0, r1
    fab0:	2400      	movs	r4, #0
    fab2:	8808      	ldrh	r0, [r1, #0]
    fab4:	884f      	ldrh	r7, [r1, #2]
    fab6:	9a06      	ldr	r2, [sp, #24]
    fab8:	1edb      	subs	r3, r3, #3
    faba:	b190      	cbz	r0, fae2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x44>
    fabc:	1cc0      	adds	r0, r0, #3
    fabe:	b280      	uxth	r0, r0
    fac0:	4290      	cmp	r0, r2
    fac2:	d912      	bls.n	faea <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x4c>
    fac4:	1a80      	subs	r0, r0, r2
    fac6:	42a8      	cmp	r0, r5
    fac8:	db00      	blt.n	facc <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2e>
    faca:	4628      	mov	r0, r5
    facc:	b284      	uxth	r4, r0
    face:	1898      	adds	r0, r3, r2
    fad0:	4622      	mov	r2, r4
    fad2:	4641      	mov	r1, r8
    fad4:	f7f3 ff10 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fad8:	1b28      	subs	r0, r5, r4
    fada:	b285      	uxth	r5, r0
    fadc:	44a0      	add	r8, r4
    fade:	2000      	movs	r0, #0
    fae0:	e005      	b.n	faee <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x50>
    fae2:	1cff      	adds	r7, r7, #3
    fae4:	b2bf      	uxth	r7, r7
    fae6:	1ef6      	subs	r6, r6, #3
    fae8:	e7ea      	b.n	fac0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x22>
    faea:	1a10      	subs	r0, r2, r0
    faec:	b280      	uxth	r0, r0
    faee:	1941      	adds	r1, r0, r5
    faf0:	42b9      	cmp	r1, r7
    faf2:	d806      	bhi.n	fb02 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x64>
    faf4:	4430      	add	r0, r6
    faf6:	462a      	mov	r2, r5
    faf8:	4641      	mov	r1, r8
    fafa:	f7f3 fefd 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fafe:	1960      	adds	r0, r4, r5
    fb00:	b284      	uxth	r4, r0
    fb02:	4620      	mov	r0, r4
    fb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fb08 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    fb08:	88c1      	ldrh	r1, [r0, #6]
    fb0a:	8880      	ldrh	r0, [r0, #4]
    fb0c:	f7ff bf7c 	b.w	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>

0000fb10 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    fb10:	8881      	ldrh	r1, [r0, #4]
    fb12:	8900      	ldrh	r0, [r0, #8]
    fb14:	f7ff bf78 	b.w	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>

0000fb18 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    fb18:	b570      	push	{r4, r5, r6, lr}
    fb1a:	4604      	mov	r4, r0
    fb1c:	f100 0128 	add.w	r1, r0, #40	; 0x28
    fb20:	8880      	ldrh	r0, [r0, #4]
    fb22:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    fb26:	1842      	adds	r2, r0, r1
    fb28:	8a20      	ldrh	r0, [r4, #16]
    fb2a:	2800      	cmp	r0, #0
    fb2c:	d027      	beq.n	fb7e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x66>
    fb2e:	89a1      	ldrh	r1, [r4, #12]
    fb30:	2500      	movs	r5, #0
    fb32:	4408      	add	r0, r1
    fb34:	b280      	uxth	r0, r0
    fb36:	81a0      	strh	r0, [r4, #12]
    fb38:	8811      	ldrh	r1, [r2, #0]
    fb3a:	8853      	ldrh	r3, [r2, #2]
    fb3c:	4419      	add	r1, r3
    fb3e:	4281      	cmp	r1, r0
    fb40:	d205      	bcs.n	fb4e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
    fb42:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    fb46:	f04f 0014 	mov.w	r0, #20
    fb4a:	f7f4 f861 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb4e:	d114      	bne.n	fb7a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x62>
    fb50:	69a0      	ldr	r0, [r4, #24]
    fb52:	b108      	cbz	r0, fb58 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
    fb54:	7f80      	ldrb	r0, [r0, #30]
    fb56:	7110      	strb	r0, [r2, #4]
    fb58:	8851      	ldrh	r1, [r2, #2]
    fb5a:	b121      	cbz	r1, fb66 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4e>
    fb5c:	f104 0004 	add.w	r0, r4, #4
    fb60:	f7ff ff42 	bl	f9e8 <sdc_hci_cmd_sp_read_rssi+0x3e>
    fb64:	e008      	b.n	fb78 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x60>
    fb66:	7f63      	ldrb	r3, [r4, #29]
    fb68:	8810      	ldrh	r0, [r2, #0]
    fb6a:	3308      	adds	r3, #8
    fb6c:	4418      	add	r0, r3
    fb6e:	b281      	uxth	r1, r0
    fb70:	8862      	ldrh	r2, [r4, #2]
    fb72:	1d20      	adds	r0, r4, #4
    fb74:	f7ff ff1e 	bl	f9b4 <sdc_hci_cmd_sp_read_rssi+0xa>
    fb78:	81a5      	strh	r5, [r4, #12]
    fb7a:	8225      	strh	r5, [r4, #16]
    fb7c:	2001      	movs	r0, #1
    fb7e:	bd70      	pop	{r4, r5, r6, pc}

0000fb80 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    fb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb84:	4604      	mov	r4, r0
    fb86:	f100 0328 	add.w	r3, r0, #40	; 0x28
    fb8a:	88c0      	ldrh	r0, [r0, #6]
    fb8c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fb90:	8a60      	ldrh	r0, [r4, #18]
    fb92:	19dd      	adds	r5, r3, r7
    fb94:	b108      	cbz	r0, fb9a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    fb96:	4288      	cmp	r0, r1
    fb98:	d202      	bcs.n	fba0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x20>
    fb9a:	2000      	movs	r0, #0
    fb9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fba0:	89e6      	ldrh	r6, [r4, #14]
    fba2:	b15e      	cbz	r6, fbbc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3c>
    fba4:	8828      	ldrh	r0, [r5, #0]
    fba6:	f8b5 c002 	ldrh.w	ip, [r5, #2]
    fbaa:	eb00 080c 	add.w	r8, r0, ip
    fbae:	4546      	cmp	r6, r8
    fbb0:	d008      	beq.n	fbc4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x44>
    fbb2:	f240 3112 	movw	r1, #786	; 0x312
    fbb6:	2014      	movs	r0, #20
    fbb8:	f7f4 f82a 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbbc:	2000      	movs	r0, #0
    fbbe:	7fa6      	ldrb	r6, [r4, #30]
    fbc0:	4684      	mov	ip, r0
    fbc2:	712e      	strb	r6, [r5, #4]
    fbc4:	f894 801c 	ldrb.w	r8, [r4, #28]
    fbc8:	f04f 0600 	mov.w	r6, #0
    fbcc:	46c1      	mov	r9, r8
    fbce:	ea58 080c 	orrs.w	r8, r8, ip
    fbd2:	d003      	beq.n	fbdc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    fbd4:	ea5f 0709 	movs.w	r7, r9
    fbd8:	d02d      	beq.n	fc36 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xb6>
    fbda:	e037      	b.n	fc4c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xcc>
    fbdc:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    fbe0:	f1bc 0f00 	cmp.w	ip, #0
    fbe4:	d00e      	beq.n	fc04 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x84>
    fbe6:	f894 801d 	ldrb.w	r8, [r4, #29]
    fbea:	449c      	add	ip, r3
    fbec:	f108 0808 	add.w	r8, r8, #8
    fbf0:	44b8      	add	r8, r7
    fbf2:	44c4      	add	ip, r8
    fbf4:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    fbf8:	f82c 8c03 	strh.w	r8, [ip, #-3]
    fbfc:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    fc00:	f80c 8c01 	strb.w	r8, [ip, #-1]
    fc04:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    fc08:	4408      	add	r0, r1
    fc0a:	4461      	add	r1, ip
    fc0c:	81e1      	strh	r1, [r4, #14]
    fc0e:	8028      	strh	r0, [r5, #0]
    fc10:	806e      	strh	r6, [r5, #2]
    fc12:	b14a      	cbz	r2, fc28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa8>
    fc14:	7f63      	ldrb	r3, [r4, #29]
    fc16:	8828      	ldrh	r0, [r5, #0]
    fc18:	3308      	adds	r3, #8
    fc1a:	4418      	add	r0, r3
    fc1c:	b281      	uxth	r1, r0
    fc1e:	8862      	ldrh	r2, [r4, #2]
    fc20:	1da0      	adds	r0, r4, #6
    fc22:	f7ff fec7 	bl	f9b4 <sdc_hci_cmd_sp_read_rssi+0xa>
    fc26:	e01f      	b.n	fc68 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xe8>
    fc28:	7f60      	ldrb	r0, [r4, #29]
    fc2a:	89e1      	ldrh	r1, [r4, #14]
    fc2c:	3008      	adds	r0, #8
    fc2e:	4438      	add	r0, r7
    fc30:	4419      	add	r1, r3
    fc32:	4408      	add	r0, r1
    fc34:	e028      	b.n	fc88 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x108>
    fc36:	89e7      	ldrh	r7, [r4, #14]
    fc38:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    fc3c:	441f      	add	r7, r3
    fc3e:	1a3f      	subs	r7, r7, r0
    fc40:	f827 8c03 	strh.w	r8, [r7, #-3]
    fc44:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    fc48:	f807 8c01 	strb.w	r8, [r7, #-1]
    fc4c:	eb0c 0701 	add.w	r7, ip, r1
    fc50:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    fc54:	b2bf      	uxth	r7, r7
    fc56:	4461      	add	r1, ip
    fc58:	81e1      	strh	r1, [r4, #14]
    fc5a:	8028      	strh	r0, [r5, #0]
    fc5c:	806f      	strh	r7, [r5, #2]
    fc5e:	b182      	cbz	r2, fc82 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x102>
    fc60:	4639      	mov	r1, r7
    fc62:	1da0      	adds	r0, r4, #6
    fc64:	f7ff fec0 	bl	f9e8 <sdc_hci_cmd_sp_read_rssi+0x3e>
    fc68:	81e6      	strh	r6, [r4, #14]
    fc6a:	7fa0      	ldrb	r0, [r4, #30]
    fc6c:	1c40      	adds	r0, r0, #1
    fc6e:	77a0      	strb	r0, [r4, #30]
    fc70:	7da0      	ldrb	r0, [r4, #22]
    fc72:	b108      	cbz	r0, fc78 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xf8>
    fc74:	88e0      	ldrh	r0, [r4, #6]
    fc76:	82a0      	strh	r0, [r4, #20]
    fc78:	75a6      	strb	r6, [r4, #22]
    fc7a:	8266      	strh	r6, [r4, #18]
    fc7c:	75e6      	strb	r6, [r4, #23]
    fc7e:	2001      	movs	r0, #1
    fc80:	e78c      	b.n	fb9c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    fc82:	89e1      	ldrh	r1, [r4, #14]
    fc84:	4419      	add	r1, r3
    fc86:	1a08      	subs	r0, r1, r0
    fc88:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    fc8c:	f8a4 101f 	strh.w	r1, [r4, #31]
    fc90:	7880      	ldrb	r0, [r0, #2]
    fc92:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    fc96:	e7f0      	b.n	fc7a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xfa>

0000fc98 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    fc98:	b570      	push	{r4, r5, r6, lr}
    fc9a:	4604      	mov	r4, r0
    fc9c:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fca0:	88c1      	ldrh	r1, [r0, #6]
    fca2:	8880      	ldrh	r0, [r0, #4]
    fca4:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    fca8:	18d5      	adds	r5, r2, r3
    fcaa:	f7ff fead 	bl	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>
    fcae:	b938      	cbnz	r0, fcc0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    fcb0:	89a0      	ldrh	r0, [r4, #12]
    fcb2:	b928      	cbnz	r0, fcc0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    fcb4:	8a20      	ldrh	r0, [r4, #16]
    fcb6:	b918      	cbnz	r0, fcc0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    fcb8:	88a0      	ldrh	r0, [r4, #4]
    fcba:	8aa1      	ldrh	r1, [r4, #20]
    fcbc:	4288      	cmp	r0, r1
    fcbe:	d101      	bne.n	fcc4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x2c>
    fcc0:	2000      	movs	r0, #0
    fcc2:	bd70      	pop	{r4, r5, r6, pc}
    fcc4:	8828      	ldrh	r0, [r5, #0]
    fcc6:	8869      	ldrh	r1, [r5, #2]
    fcc8:	b131      	cbz	r1, fcd8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x40>
    fcca:	1d20      	adds	r0, r4, #4
    fccc:	f7ff fe8c 	bl	f9e8 <sdc_hci_cmd_sp_read_rssi+0x3e>
    fcd0:	2000      	movs	r0, #0
    fcd2:	8220      	strh	r0, [r4, #16]
    fcd4:	2001      	movs	r0, #1
    fcd6:	bd70      	pop	{r4, r5, r6, pc}
    fcd8:	7f63      	ldrb	r3, [r4, #29]
    fcda:	8862      	ldrh	r2, [r4, #2]
    fcdc:	3308      	adds	r3, #8
    fcde:	4418      	add	r0, r3
    fce0:	b281      	uxth	r1, r0
    fce2:	1d20      	adds	r0, r4, #4
    fce4:	f7ff fe66 	bl	f9b4 <sdc_hci_cmd_sp_read_rssi+0xa>
    fce8:	e7f2      	b.n	fcd0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x38>

0000fcea <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    fcea:	b570      	push	{r4, r5, r6, lr}
    fcec:	4604      	mov	r4, r0
    fcee:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fcf2:	88c0      	ldrh	r0, [r0, #6]
    fcf4:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    fcf8:	7de0      	ldrb	r0, [r4, #23]
    fcfa:	2800      	cmp	r0, #0
    fcfc:	d006      	beq.n	fd0c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x22>
    fcfe:	18d0      	adds	r0, r2, r3
    fd00:	8802      	ldrh	r2, [r0, #0]
    fd02:	8843      	ldrh	r3, [r0, #2]
    fd04:	4413      	add	r3, r2
    fd06:	428b      	cmp	r3, r1
    fd08:	d201      	bcs.n	fd0e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x24>
    fd0a:	2000      	movs	r0, #0
    fd0c:	bd70      	pop	{r4, r5, r6, pc}
    fd0e:	2500      	movs	r5, #0
    fd10:	428a      	cmp	r2, r1
    fd12:	d302      	bcc.n	fd1a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x30>
    fd14:	8001      	strh	r1, [r0, #0]
    fd16:	8045      	strh	r5, [r0, #2]
    fd18:	e008      	b.n	fd2c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    fd1a:	1a89      	subs	r1, r1, r2
    fd1c:	0409      	lsls	r1, r1, #16
    fd1e:	0c09      	lsrs	r1, r1, #16
    fd20:	8041      	strh	r1, [r0, #2]
    fd22:	d003      	beq.n	fd2c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    fd24:	1da0      	adds	r0, r4, #6
    fd26:	f7ff fe5f 	bl	f9e8 <sdc_hci_cmd_sp_read_rssi+0x3e>
    fd2a:	e008      	b.n	fd3e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x54>
    fd2c:	7f63      	ldrb	r3, [r4, #29]
    fd2e:	8800      	ldrh	r0, [r0, #0]
    fd30:	3308      	adds	r3, #8
    fd32:	4418      	add	r0, r3
    fd34:	b281      	uxth	r1, r0
    fd36:	8862      	ldrh	r2, [r4, #2]
    fd38:	1da0      	adds	r0, r4, #6
    fd3a:	f7ff fe3b 	bl	f9b4 <sdc_hci_cmd_sp_read_rssi+0xa>
    fd3e:	75e5      	strb	r5, [r4, #23]
    fd40:	2001      	movs	r0, #1
    fd42:	bd70      	pop	{r4, r5, r6, pc}

0000fd44 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    fd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd48:	4604      	mov	r4, r0
    fd4a:	f100 0628 	add.w	r6, r0, #40	; 0x28
    fd4e:	8947      	ldrh	r7, [r0, #10]
    fd50:	8880      	ldrh	r0, [r0, #4]
    fd52:	2500      	movs	r5, #0
    fd54:	4681      	mov	r9, r0
    fd56:	4601      	mov	r1, r0
    fd58:	4638      	mov	r0, r7
    fd5a:	f7ff fe55 	bl	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>
    fd5e:	b9e0      	cbnz	r0, fd9a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x56>
    fd60:	f104 080a 	add.w	r8, r4, #10
    fd64:	f427 4000 	bic.w	r0, r7, #32768	; 0x8000
    fd68:	4430      	add	r0, r6
    fd6a:	8841      	ldrh	r1, [r0, #2]
    fd6c:	b119      	cbz	r1, fd76 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x32>
    fd6e:	4640      	mov	r0, r8
    fd70:	f7ff fe3a 	bl	f9e8 <sdc_hci_cmd_sp_read_rssi+0x3e>
    fd74:	e008      	b.n	fd88 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x44>
    fd76:	7f63      	ldrb	r3, [r4, #29]
    fd78:	8800      	ldrh	r0, [r0, #0]
    fd7a:	3308      	adds	r3, #8
    fd7c:	4418      	add	r0, r3
    fd7e:	b281      	uxth	r1, r0
    fd80:	8862      	ldrh	r2, [r4, #2]
    fd82:	4640      	mov	r0, r8
    fd84:	f7ff fe16 	bl	f9b4 <sdc_hci_cmd_sp_read_rssi+0xa>
    fd88:	8967      	ldrh	r7, [r4, #10]
    fd8a:	1c6d      	adds	r5, r5, #1
    fd8c:	b2ad      	uxth	r5, r5
    fd8e:	4649      	mov	r1, r9
    fd90:	4638      	mov	r0, r7
    fd92:	f7ff fe39 	bl	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>
    fd96:	2800      	cmp	r0, #0
    fd98:	d0e4      	beq.n	fd64 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    fd9a:	4628      	mov	r0, r5
    fd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000fda0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    fda0:	b570      	push	{r4, r5, r6, lr}
    fda2:	4604      	mov	r4, r0
    fda4:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fda8:	88c1      	ldrh	r1, [r0, #6]
    fdaa:	8880      	ldrh	r0, [r0, #4]
    fdac:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    fdb0:	18d5      	adds	r5, r2, r3
    fdb2:	88a2      	ldrh	r2, [r4, #4]
    fdb4:	8aa3      	ldrh	r3, [r4, #20]
    fdb6:	429a      	cmp	r2, r3
    fdb8:	d013      	beq.n	fde2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    fdba:	f7ff fe25 	bl	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>
    fdbe:	b980      	cbnz	r0, fde2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    fdc0:	89a0      	ldrh	r0, [r4, #12]
    fdc2:	b970      	cbnz	r0, fde2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    fdc4:	69a4      	ldr	r4, [r4, #24]
    fdc6:	b174      	cbz	r4, fde6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    fdc8:	4620      	mov	r0, r4
    fdca:	f7ff fea1 	bl	fb10 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    fdce:	b950      	cbnz	r0, fde6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    fdd0:	8920      	ldrh	r0, [r4, #8]
    fdd2:	3428      	adds	r4, #40	; 0x28
    fdd4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    fdd8:	4420      	add	r0, r4
    fdda:	7929      	ldrb	r1, [r5, #4]
    fddc:	7900      	ldrb	r0, [r0, #4]
    fdde:	4288      	cmp	r0, r1
    fde0:	d101      	bne.n	fde6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    fde2:	2000      	movs	r0, #0
    fde4:	bd70      	pop	{r4, r5, r6, pc}
    fde6:	4628      	mov	r0, r5
    fde8:	bd70      	pop	{r4, r5, r6, pc}

0000fdea <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    fdea:	f100 0328 	add.w	r3, r0, #40	; 0x28
    fdee:	7f40      	ldrb	r0, [r0, #29]
    fdf0:	3008      	adds	r0, #8
    fdf2:	4408      	add	r0, r1
    fdf4:	1ec0      	subs	r0, r0, #3
    fdf6:	6010      	str	r0, [r2, #0]
    fdf8:	8808      	ldrh	r0, [r1, #0]
    fdfa:	b908      	cbnz	r0, fe00 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY+0x16>
    fdfc:	1edb      	subs	r3, r3, #3
    fdfe:	6013      	str	r3, [r2, #0]
    fe00:	8808      	ldrh	r0, [r1, #0]
    fe02:	8849      	ldrh	r1, [r1, #2]
    fe04:	4408      	add	r0, r1
    fe06:	b280      	uxth	r0, r0
    fe08:	4770      	bx	lr

0000fe0a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    fe0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe0e:	460e      	mov	r6, r1
    fe10:	88c1      	ldrh	r1, [r0, #6]
    fe12:	4604      	mov	r4, r0
    fe14:	f100 0828 	add.w	r8, r0, #40	; 0x28
    fe18:	8900      	ldrh	r0, [r0, #8]
    fe1a:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    fe1e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fe22:	f7ff fdf7 	bl	fa14 <sdc_hci_cmd_sp_read_rssi+0x6a>
    fe26:	b110      	cbz	r0, fe2e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x24>
    fe28:	2000      	movs	r0, #0
    fe2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe2e:	2200      	movs	r2, #0
    fe30:	2301      	movs	r3, #1
    fe32:	7f60      	ldrb	r0, [r4, #29]
    fe34:	42af      	cmp	r7, r5
    fe36:	d90b      	bls.n	fe50 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x46>
    fe38:	1b79      	subs	r1, r7, r5
    fe3a:	3008      	adds	r0, #8
    fe3c:	1a08      	subs	r0, r1, r0
    fe3e:	4286      	cmp	r6, r0
    fe40:	dc1d      	bgt.n	fe7e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    fe42:	eb08 0005 	add.w	r0, r8, r5
    fe46:	2100      	movs	r1, #0
    fe48:	8006      	strh	r6, [r0, #0]
    fe4a:	8041      	strh	r1, [r0, #2]
    fe4c:	75e3      	strb	r3, [r4, #23]
    fe4e:	e7ec      	b.n	fe2a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    fe50:	8861      	ldrh	r1, [r4, #2]
    fe52:	3008      	adds	r0, #8
    fe54:	1b49      	subs	r1, r1, r5
    fe56:	1a08      	subs	r0, r1, r0
    fe58:	d411      	bmi.n	fe7e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    fe5a:	281b      	cmp	r0, #27
    fe5c:	da04      	bge.n	fe68 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x5e>
    fe5e:	f240 111d 	movw	r1, #285	; 0x11d
    fe62:	2014      	movs	r0, #20
    fe64:	f7f3 fed4 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe68:	4286      	cmp	r6, r0
    fe6a:	dc01      	bgt.n	fe70 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x66>
    fe6c:	4630      	mov	r0, r6
    fe6e:	e000      	b.n	fe72 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x68>
    fe70:	b280      	uxth	r0, r0
    fe72:	1a31      	subs	r1, r6, r0
    fe74:	0409      	lsls	r1, r1, #16
    fe76:	0c09      	lsrs	r1, r1, #16
    fe78:	d003      	beq.n	fe82 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    fe7a:	42b9      	cmp	r1, r7
    fe7c:	dd01      	ble.n	fe82 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    fe7e:	75e2      	strb	r2, [r4, #23]
    fe80:	e7d2      	b.n	fe28 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x1e>
    fe82:	eb08 0205 	add.w	r2, r8, r5
    fe86:	8010      	strh	r0, [r2, #0]
    fe88:	8051      	strh	r1, [r2, #2]
    fe8a:	75e3      	strb	r3, [r4, #23]
    fe8c:	4610      	mov	r0, r2
    fe8e:	e7cc      	b.n	fe2a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>

0000fe90 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    fe90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe94:	4604      	mov	r4, r0
    fe96:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fe9a:	88c1      	ldrh	r1, [r0, #6]
    fe9c:	8880      	ldrh	r0, [r0, #4]
    fe9e:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    fea2:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fea6:	19d6      	adds	r6, r2, r7
    fea8:	f7ff fdae 	bl	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>
    feac:	b9e8      	cbnz	r0, feea <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    feae:	89a0      	ldrh	r0, [r4, #12]
    feb0:	8a21      	ldrh	r1, [r4, #16]
    feb2:	8832      	ldrh	r2, [r6, #0]
    feb4:	4401      	add	r1, r0
    feb6:	8870      	ldrh	r0, [r6, #2]
    feb8:	1813      	adds	r3, r2, r0
    feba:	4299      	cmp	r1, r3
    febc:	d312      	bcc.n	fee4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    febe:	b110      	cbz	r0, fec6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    fec0:	42a8      	cmp	r0, r5
    fec2:	d30f      	bcc.n	fee4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    fec4:	e011      	b.n	feea <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fec6:	7f61      	ldrb	r1, [r4, #29]
    fec8:	3108      	adds	r1, #8
    feca:	19c8      	adds	r0, r1, r7
    fecc:	4410      	add	r0, r2
    fece:	8862      	ldrh	r2, [r4, #2]
    fed0:	b280      	uxth	r0, r0
    fed2:	1a12      	subs	r2, r2, r0
    fed4:	b292      	uxth	r2, r2
    fed6:	311b      	adds	r1, #27
    fed8:	4291      	cmp	r1, r2
    feda:	d901      	bls.n	fee0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x50>
    fedc:	b915      	cbnz	r5, fee4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    fede:	e004      	b.n	feea <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fee0:	42a8      	cmp	r0, r5
    fee2:	d002      	beq.n	feea <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fee4:	2001      	movs	r0, #1
    fee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    feea:	2000      	movs	r0, #0
    feec:	e7fb      	b.n	fee6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x56>

0000feee <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    feee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fef2:	460f      	mov	r7, r1
    fef4:	4604      	mov	r4, r0
    fef6:	f100 0528 	add.w	r5, r0, #40	; 0x28
    fefa:	88c1      	ldrh	r1, [r0, #6]
    fefc:	8880      	ldrh	r0, [r0, #4]
    fefe:	4690      	mov	r8, r2
    ff00:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    ff04:	18ae      	adds	r6, r5, r2
    ff06:	f7ff fd7f 	bl	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>
    ff0a:	b118      	cbz	r0, ff14 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x26>
    ff0c:	2000      	movs	r0, #0
    ff0e:	8220      	strh	r0, [r4, #16]
    ff10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff14:	89a0      	ldrh	r0, [r4, #12]
    ff16:	8831      	ldrh	r1, [r6, #0]
    ff18:	4288      	cmp	r0, r1
    ff1a:	d306      	bcc.n	ff2a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3c>
    ff1c:	1a40      	subs	r0, r0, r1
    ff1e:	8871      	ldrh	r1, [r6, #2]
    ff20:	1a09      	subs	r1, r1, r0
    ff22:	4428      	add	r0, r5
    ff24:	b289      	uxth	r1, r1
    ff26:	1ec0      	subs	r0, r0, #3
    ff28:	e005      	b.n	ff36 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x48>
    ff2a:	1a09      	subs	r1, r1, r0
    ff2c:	7f62      	ldrb	r2, [r4, #29]
    ff2e:	b289      	uxth	r1, r1
    ff30:	4410      	add	r0, r2
    ff32:	4430      	add	r0, r6
    ff34:	1d40      	adds	r0, r0, #5
    ff36:	883a      	ldrh	r2, [r7, #0]
    ff38:	428a      	cmp	r2, r1
    ff3a:	d900      	bls.n	ff3e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
    ff3c:	8039      	strh	r1, [r7, #0]
    ff3e:	89a1      	ldrh	r1, [r4, #12]
    ff40:	b129      	cbz	r1, ff4e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x60>
    ff42:	2100      	movs	r1, #0
    ff44:	f888 1000 	strb.w	r1, [r8]
    ff48:	8839      	ldrh	r1, [r7, #0]
    ff4a:	8221      	strh	r1, [r4, #16]
    ff4c:	e7e0      	b.n	ff10 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x22>
    ff4e:	2101      	movs	r1, #1
    ff50:	e7f8      	b.n	ff44 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x56>

0000ff52 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    ff52:	b510      	push	{r4, lr}
    ff54:	8a81      	ldrh	r1, [r0, #20]
    ff56:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    ff5a:	3aff      	subs	r2, #255	; 0xff
    ff5c:	d002      	beq.n	ff64 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    ff5e:	7d82      	ldrb	r2, [r0, #22]
    ff60:	b95a      	cbnz	r2, ff7a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    ff62:	e004      	b.n	ff6e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    ff64:	f240 41ea 	movw	r1, #1258	; 0x4ea
    ff68:	2014      	movs	r0, #20
    ff6a:	f7f3 fe51 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff6e:	8880      	ldrh	r0, [r0, #4]
    ff70:	f7ff fd4a 	bl	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>
    ff74:	b108      	cbz	r0, ff7a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    ff76:	2000      	movs	r0, #0
    ff78:	bd10      	pop	{r4, pc}
    ff7a:	2001      	movs	r0, #1
    ff7c:	bd10      	pop	{r4, pc}

0000ff7e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    ff7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ff82:	8281      	strh	r1, [r0, #20]
    ff84:	2100      	movs	r1, #0
    ff86:	7581      	strb	r1, [r0, #22]
    ff88:	4770      	bx	lr

0000ff8a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    ff8a:	b510      	push	{r4, lr}
    ff8c:	8a81      	ldrh	r1, [r0, #20]
    ff8e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    ff92:	3aff      	subs	r2, #255	; 0xff
    ff94:	d004      	beq.n	ffa0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    ff96:	f240 41cd 	movw	r1, #1229	; 0x4cd
    ff9a:	2014      	movs	r0, #20
    ff9c:	f7f3 fe38 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffa0:	88c1      	ldrh	r1, [r0, #6]
    ffa2:	8281      	strh	r1, [r0, #20]
    ffa4:	89c1      	ldrh	r1, [r0, #14]
    ffa6:	b101      	cbz	r1, ffaa <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    ffa8:	2101      	movs	r1, #1
    ffaa:	7581      	strb	r1, [r0, #22]
    ffac:	bd10      	pop	{r4, pc}

0000ffae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    ffae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffb2:	461e      	mov	r6, r3
    ffb4:	4613      	mov	r3, r2
    ffb6:	460f      	mov	r7, r1
    ffb8:	4604      	mov	r4, r0
    ffba:	4631      	mov	r1, r6
    ffbc:	4618      	mov	r0, r3
    ffbe:	9a06      	ldr	r2, [sp, #24]
    ffc0:	f000 f864 	bl	1008c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ffc4:	4605      	mov	r5, r0
    ffc6:	42af      	cmp	r7, r5
    ffc8:	d201      	bcs.n	ffce <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    ffca:	21ca      	movs	r1, #202	; 0xca
    ffcc:	e016      	b.n	fffc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    ffce:	2228      	movs	r2, #40	; 0x28
    ffd0:	2100      	movs	r1, #0
    ffd2:	4620      	mov	r0, r4
    ffd4:	f7ff f85a 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ffd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ffdc:	82a0      	strh	r0, [r4, #20]
    ffde:	3d28      	subs	r5, #40	; 0x28
    ffe0:	b2a8      	uxth	r0, r5
    ffe2:	7766      	strb	r6, [r4, #29]
    ffe4:	8060      	strh	r0, [r4, #2]
    ffe6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    ffea:	d901      	bls.n	fff0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x42>
    ffec:	21d0      	movs	r1, #208	; 0xd0
    ffee:	e005      	b.n	fffc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    fff0:	f106 013c 	add.w	r1, r6, #60	; 0x3c
    fff4:	3608      	adds	r6, #8
    fff6:	4281      	cmp	r1, r0
    fff8:	d903      	bls.n	10002 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x54>
    fffa:	21d2      	movs	r1, #210	; 0xd2
    fffc:	2014      	movs	r0, #20
    fffe:	f7f3 fe07 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10002:	1b80      	subs	r0, r0, r6
   10004:	3834      	subs	r0, #52	; 0x34
   10006:	b280      	uxth	r0, r0
   10008:	8020      	strh	r0, [r4, #0]
   1000a:	281b      	cmp	r0, #27
   1000c:	d200      	bcs.n	10010 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x62>
   1000e:	201b      	movs	r0, #27
   10010:	8020      	strh	r0, [r4, #0]
   10012:	2000      	movs	r0, #0
   10014:	77a0      	strb	r0, [r4, #30]
   10016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001001a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
   1001a:	6181      	str	r1, [r0, #24]
   1001c:	6188      	str	r0, [r1, #24]
   1001e:	4770      	bx	lr

00010020 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   10020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10024:	4604      	mov	r4, r0
   10026:	4689      	mov	r9, r1
   10028:	8927      	ldrh	r7, [r4, #8]
   1002a:	f8b4 800a 	ldrh.w	r8, [r4, #10]
   1002e:	88a1      	ldrh	r1, [r4, #4]
   10030:	4616      	mov	r6, r2
   10032:	3028      	adds	r0, #40	; 0x28
   10034:	f427 4200 	bic.w	r2, r7, #32768	; 0x8000
   10038:	1885      	adds	r5, r0, r2
   1003a:	4638      	mov	r0, r7
   1003c:	f7ff fce4 	bl	fa08 <sdc_hci_cmd_sp_read_rssi+0x5e>
   10040:	b110      	cbz	r0, 10048 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
   10042:	2000      	movs	r0, #0
   10044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10048:	b10e      	cbz	r6, 1004e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2e>
   1004a:	1d68      	adds	r0, r5, #5
   1004c:	6030      	str	r0, [r6, #0]
   1004e:	f1b9 0f00 	cmp.w	r9, #0
   10052:	d004      	beq.n	1005e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x3e>
   10054:	7f62      	ldrb	r2, [r4, #29]
   10056:	1d69      	adds	r1, r5, #5
   10058:	4648      	mov	r0, r9
   1005a:	f7f3 fc4d 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1005e:	882e      	ldrh	r6, [r5, #0]
   10060:	8869      	ldrh	r1, [r5, #2]
   10062:	f104 0008 	add.w	r0, r4, #8
   10066:	b121      	cbz	r1, 10072 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x52>
   10068:	198a      	adds	r2, r1, r6
   1006a:	b296      	uxth	r6, r2
   1006c:	f7ff fcbc 	bl	f9e8 <sdc_hci_cmd_sp_read_rssi+0x3e>
   10070:	e006      	b.n	10080 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x60>
   10072:	7f63      	ldrb	r3, [r4, #29]
   10074:	8862      	ldrh	r2, [r4, #2]
   10076:	3308      	adds	r3, #8
   10078:	1999      	adds	r1, r3, r6
   1007a:	b289      	uxth	r1, r1
   1007c:	f7ff fc9a 	bl	f9b4 <sdc_hci_cmd_sp_read_rssi+0xa>
   10080:	4547      	cmp	r7, r8
   10082:	d101      	bne.n	10088 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x68>
   10084:	8920      	ldrh	r0, [r4, #8]
   10086:	8160      	strh	r0, [r4, #10]
   10088:	4630      	mov	r0, r6
   1008a:	e7db      	b.n	10044 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>

0001008c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   1008c:	f101 0308 	add.w	r3, r1, #8
   10090:	4418      	add	r0, r3
   10092:	4350      	muls	r0, r2
   10094:	314a      	adds	r1, #74	; 0x4a
   10096:	4408      	add	r0, r1
   10098:	b280      	uxth	r0, r0
   1009a:	4770      	bx	lr

0001009c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   1009c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100a0:	4688      	mov	r8, r1
   100a2:	88c1      	ldrh	r1, [r0, #6]
   100a4:	4604      	mov	r4, r0
   100a6:	8900      	ldrh	r0, [r0, #8]
   100a8:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
   100ac:	f104 0628 	add.w	r6, r4, #40	; 0x28
   100b0:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
   100b4:	eb06 0905 	add.w	r9, r6, r5
   100b8:	f7ff fcac 	bl	fa14 <sdc_hci_cmd_sp_read_rssi+0x6a>
   100bc:	2300      	movs	r3, #0
   100be:	bb80      	cbnz	r0, 10122 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x86>
   100c0:	7f60      	ldrb	r0, [r4, #29]
   100c2:	42af      	cmp	r7, r5
   100c4:	d904      	bls.n	100d0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x34>
   100c6:	1b79      	subs	r1, r7, r5
   100c8:	3008      	adds	r0, #8
   100ca:	1a09      	subs	r1, r1, r0
   100cc:	2700      	movs	r7, #0
   100ce:	e003      	b.n	100d8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3c>
   100d0:	8861      	ldrh	r1, [r4, #2]
   100d2:	3008      	adds	r0, #8
   100d4:	1b49      	subs	r1, r1, r5
   100d6:	1a09      	subs	r1, r1, r0
   100d8:	2900      	cmp	r1, #0
   100da:	db23      	blt.n	10124 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
   100dc:	89e0      	ldrh	r0, [r4, #14]
   100de:	b160      	cbz	r0, 100fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
   100e0:	f8b9 0000 	ldrh.w	r0, [r9]
   100e4:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   100e8:	b13a      	cbz	r2, 100fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
   100ea:	1ab9      	subs	r1, r7, r2
   100ec:	7723      	strb	r3, [r4, #28]
   100ee:	4541      	cmp	r1, r8
   100f0:	db18      	blt.n	10124 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
   100f2:	89e1      	ldrh	r1, [r4, #14]
   100f4:	4431      	add	r1, r6
   100f6:	1a08      	subs	r0, r1, r0
   100f8:	e009      	b.n	1010e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x72>
   100fa:	1a09      	subs	r1, r1, r0
   100fc:	7723      	strb	r3, [r4, #28]
   100fe:	4541      	cmp	r1, r8
   10100:	db0a      	blt.n	10118 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x7c>
   10102:	7f60      	ldrb	r0, [r4, #29]
   10104:	89e1      	ldrh	r1, [r4, #14]
   10106:	3008      	adds	r0, #8
   10108:	4428      	add	r0, r5
   1010a:	4431      	add	r1, r6
   1010c:	4408      	add	r0, r1
   1010e:	1ec0      	subs	r0, r0, #3
   10110:	f8a4 8012 	strh.w	r8, [r4, #18]
   10114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10118:	4547      	cmp	r7, r8
   1011a:	db03      	blt.n	10124 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
   1011c:	2101      	movs	r1, #1
   1011e:	7721      	strb	r1, [r4, #28]
   10120:	e7e7      	b.n	100f2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x56>
   10122:	e7ff      	b.n	10124 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
   10124:	8263      	strh	r3, [r4, #18]
   10126:	2000      	movs	r0, #0
   10128:	e7f4      	b.n	10114 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x78>

0001012a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
   1012a:	2100      	movs	r1, #0
   1012c:	81c1      	strh	r1, [r0, #14]
   1012e:	7701      	strb	r1, [r0, #28]
   10130:	8241      	strh	r1, [r0, #18]
   10132:	75c1      	strb	r1, [r0, #23]
   10134:	7581      	strb	r1, [r0, #22]
   10136:	4770      	bx	lr

00010138 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   10138:	b570      	push	{r4, r5, r6, lr}
   1013a:	2300      	movs	r3, #0
   1013c:	2908      	cmp	r1, #8
   1013e:	d204      	bcs.n	1014a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
   10140:	f240 11cb 	movw	r1, #459	; 0x1cb
   10144:	2015      	movs	r0, #21
   10146:	f7f3 fd63 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1014a:	6802      	ldr	r2, [r0, #0]
   1014c:	b90a      	cbnz	r2, 10152 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   1014e:	e01e      	b.n	1018e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   10150:	4610      	mov	r0, r2
   10152:	6802      	ldr	r2, [r0, #0]
   10154:	8893      	ldrh	r3, [r2, #4]
   10156:	428b      	cmp	r3, r1
   10158:	d002      	beq.n	10160 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
   1015a:	6813      	ldr	r3, [r2, #0]
   1015c:	2b00      	cmp	r3, #0
   1015e:	d1f7      	bne.n	10150 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
   10160:	8894      	ldrh	r4, [r2, #4]
   10162:	4613      	mov	r3, r2
   10164:	428c      	cmp	r4, r1
   10166:	d101      	bne.n	1016c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
   10168:	6811      	ldr	r1, [r2, #0]
   1016a:	e00d      	b.n	10188 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
   1016c:	f101 0508 	add.w	r5, r1, #8
   10170:	b2ad      	uxth	r5, r5
   10172:	42ac      	cmp	r4, r5
   10174:	d30a      	bcc.n	1018c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
   10176:	1a64      	subs	r4, r4, r1
   10178:	4411      	add	r1, r2
   1017a:	2200      	movs	r2, #0
   1017c:	600a      	str	r2, [r1, #0]
   1017e:	808c      	strh	r4, [r1, #4]
   10180:	6802      	ldr	r2, [r0, #0]
   10182:	6812      	ldr	r2, [r2, #0]
   10184:	6002      	str	r2, [r0, #0]
   10186:	600a      	str	r2, [r1, #0]
   10188:	6001      	str	r1, [r0, #0]
   1018a:	e000      	b.n	1018e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   1018c:	2300      	movs	r3, #0
   1018e:	4618      	mov	r0, r3
   10190:	bd70      	pop	{r4, r5, r6, pc}

00010192 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   10192:	b510      	push	{r4, lr}
   10194:	000c      	movs	r4, r1
   10196:	d006      	beq.n	101a6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
   10198:	2c08      	cmp	r4, #8
   1019a:	d209      	bcs.n	101b0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
   1019c:	f240 1195 	movw	r1, #405	; 0x195
   101a0:	2015      	movs	r0, #21
   101a2:	f7f3 fd35 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101a6:	b108      	cbz	r0, 101ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   101a8:	2100      	movs	r1, #0
   101aa:	6001      	str	r1, [r0, #0]
   101ac:	2000      	movs	r0, #0
   101ae:	bd10      	pop	{r4, pc}
   101b0:	b118      	cbz	r0, 101ba <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
   101b2:	b2a1      	uxth	r1, r4
   101b4:	6800      	ldr	r0, [r0, #0]
   101b6:	f000 f814 	bl	101e2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   101ba:	1d20      	adds	r0, r4, #4
   101bc:	bd10      	pop	{r4, pc}

000101be <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   101be:	2100      	movs	r1, #0
   101c0:	6802      	ldr	r2, [r0, #0]
   101c2:	e003      	b.n	101cc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   101c4:	8893      	ldrh	r3, [r2, #4]
   101c6:	6812      	ldr	r2, [r2, #0]
   101c8:	4419      	add	r1, r3
   101ca:	b289      	uxth	r1, r1
   101cc:	2a00      	cmp	r2, #0
   101ce:	d1f9      	bne.n	101c4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   101d0:	f000 b807 	b.w	101e2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

000101d4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   101d4:	2300      	movs	r3, #0
   101d6:	600b      	str	r3, [r1, #0]
   101d8:	808a      	strh	r2, [r1, #4]
   101da:	6802      	ldr	r2, [r0, #0]
   101dc:	600a      	str	r2, [r1, #0]
   101de:	6001      	str	r1, [r0, #0]
   101e0:	4770      	bx	lr
   101e2:	2300      	movs	r3, #0
   101e4:	6043      	str	r3, [r0, #4]
   101e6:	1d02      	adds	r2, r0, #4
   101e8:	8101      	strh	r1, [r0, #8]
   101ea:	6002      	str	r2, [r0, #0]
   101ec:	4770      	bx	lr

000101ee <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
   101ee:	b50e      	push	{r1, r2, r3, lr}
   101f0:	4669      	mov	r1, sp
   101f2:	f000 f818 	bl	10226 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   101f6:	b120      	cbz	r0, 10202 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
   101f8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   101fc:	2017      	movs	r0, #23
   101fe:	f7f3 fd07 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10202:	4668      	mov	r0, sp
   10204:	f7f3 ff66 	bl	40d4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10208:	b108      	cbz	r0, 1020e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
   1020a:	2000      	movs	r0, #0
   1020c:	bd0e      	pop	{r1, r2, r3, pc}
   1020e:	2001      	movs	r0, #1
   10210:	bd0e      	pop	{r1, r2, r3, pc}

00010212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   10212:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   10216:	3aff      	subs	r2, #255	; 0xff
   10218:	d001      	beq.n	1021e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   1021a:	2902      	cmp	r1, #2
   1021c:	d301      	bcc.n	10222 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   1021e:	2000      	movs	r0, #0
   10220:	4770      	bx	lr
   10222:	f7f3 bfed 	b.w	4200 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>

00010226 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
   10226:	b570      	push	{r4, r5, r6, lr}
   10228:	4605      	mov	r5, r0
   1022a:	460c      	mov	r4, r1
   1022c:	4608      	mov	r0, r1
   1022e:	f000 f899 	bl	10364 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   10232:	b108      	cbz	r0, 10238 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
   10234:	2010      	movs	r0, #16
   10236:	bd70      	pop	{r4, r5, r6, pc}
   10238:	2d02      	cmp	r5, #2
   1023a:	d301      	bcc.n	10240 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
   1023c:	2007      	movs	r0, #7
   1023e:	bd70      	pop	{r4, r5, r6, pc}
   10240:	7025      	strb	r5, [r4, #0]
   10242:	2000      	movs	r0, #0
   10244:	8060      	strh	r0, [r4, #2]
   10246:	bd70      	pop	{r4, r5, r6, pc}
   10248:	b510      	push	{r4, lr}
   1024a:	4604      	mov	r4, r0
   1024c:	f7f3 ff9a 	bl	4184 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
   10250:	42a0      	cmp	r0, r4
   10252:	d901      	bls.n	10258 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
   10254:	2001      	movs	r0, #1
   10256:	bd10      	pop	{r4, pc}
   10258:	2000      	movs	r0, #0
   1025a:	bd10      	pop	{r4, pc}

0001025c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   1025c:	b570      	push	{r4, r5, r6, lr}
   1025e:	460e      	mov	r6, r1
   10260:	461d      	mov	r5, r3
   10262:	4611      	mov	r1, r2
   10264:	f000 f811 	bl	1028a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   10268:	4604      	mov	r4, r0
   1026a:	4629      	mov	r1, r5
   1026c:	4630      	mov	r0, r6
   1026e:	f000 f803 	bl	10278 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   10272:	4420      	add	r0, r4
   10274:	1d00      	adds	r0, r0, #4
   10276:	bd70      	pop	{r4, r5, r6, pc}
   10278:	b510      	push	{r4, lr}
   1027a:	460a      	mov	r2, r1
   1027c:	2101      	movs	r1, #1
   1027e:	f7ff ff05 	bl	1008c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   10282:	1cc0      	adds	r0, r0, #3
   10284:	f020 0003 	bic.w	r0, r0, #3
   10288:	bd10      	pop	{r4, pc}
   1028a:	b510      	push	{r4, lr}
   1028c:	460a      	mov	r2, r1
   1028e:	2101      	movs	r1, #1
   10290:	f7ff fefc 	bl	1008c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   10294:	1cc0      	adds	r0, r0, #3
   10296:	f020 0003 	bic.w	r0, r0, #3
   1029a:	bd10      	pop	{r4, pc}
   1029c:	2800      	cmp	r0, #0
   1029e:	db09      	blt.n	102b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
   102a0:	f000 021f 	and.w	r2, r0, #31
   102a4:	2101      	movs	r1, #1
   102a6:	4091      	lsls	r1, r2
   102a8:	0940      	lsrs	r0, r0, #5
   102aa:	0080      	lsls	r0, r0, #2
   102ac:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102b0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   102b4:	4770      	bx	lr

000102b6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   102b6:	f7f4 b993 	b.w	45e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
   102ba:	2800      	cmp	r0, #0
   102bc:	db09      	blt.n	102d2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1c>
   102be:	f000 021f 	and.w	r2, r0, #31
   102c2:	2101      	movs	r1, #1
   102c4:	4091      	lsls	r1, r2
   102c6:	0940      	lsrs	r0, r0, #5
   102c8:	0080      	lsls	r0, r0, #2
   102ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102ce:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   102d2:	4770      	bx	lr
   102d4:	2800      	cmp	r0, #0
   102d6:	db0d      	blt.n	102f4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x3e>
   102d8:	f000 021f 	and.w	r2, r0, #31
   102dc:	2101      	movs	r1, #1
   102de:	4091      	lsls	r1, r2
   102e0:	0940      	lsrs	r0, r0, #5
   102e2:	0080      	lsls	r0, r0, #2
   102e4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102e8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   102ec:	f3bf 8f4f 	dsb	sy
   102f0:	f3bf 8f6f 	isb	sy
   102f4:	4770      	bx	lr

000102f6 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
   102f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   102fa:	2000      	movs	r0, #0
   102fc:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   10300:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10304:	2001      	movs	r0, #1
   10306:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   1030a:	4770      	bx	lr
   1030c:	2800      	cmp	r0, #0
   1030e:	db04      	blt.n	1031a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x24>
   10310:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10314:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
   10318:	e005      	b.n	10326 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x30>
   1031a:	f000 000f 	and.w	r0, r0, #15
   1031e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10322:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
   10326:	0940      	lsrs	r0, r0, #5
   10328:	4770      	bx	lr
   1032a:	f810 1f41 	ldrb.w	r1, [r0, #65]!
   1032e:	7840      	ldrb	r0, [r0, #1]
   10330:	4281      	cmp	r1, r0
   10332:	d301      	bcc.n	10338 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x42>
   10334:	1a08      	subs	r0, r1, r0
   10336:	e002      	b.n	1033e <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x48>
   10338:	f1c0 0041 	rsb	r0, r0, #65	; 0x41
   1033c:	4408      	add	r0, r1
   1033e:	b2c0      	uxtb	r0, r0
   10340:	4770      	bx	lr
   10342:	f810 1f41 	ldrb.w	r1, [r0, #65]!
   10346:	2241      	movs	r2, #65	; 0x41
   10348:	1c49      	adds	r1, r1, #1
   1034a:	fbb1 f3f2 	udiv	r3, r1, r2
   1034e:	fb02 1113 	mls	r1, r2, r3, r1
   10352:	7840      	ldrb	r0, [r0, #1]
   10354:	4281      	cmp	r1, r0
   10356:	d101      	bne.n	1035c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x66>
   10358:	2001      	movs	r0, #1
   1035a:	4770      	bx	lr
   1035c:	2000      	movs	r0, #0
   1035e:	4770      	bx	lr

00010360 <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>:
   10360:	2040      	movs	r0, #64	; 0x40
   10362:	4770      	bx	lr

00010364 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
   10364:	b108      	cbz	r0, 1036a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
   10366:	2000      	movs	r0, #0
   10368:	4770      	bx	lr
   1036a:	2001      	movs	r0, #1
   1036c:	4770      	bx	lr

0001036e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   1036e:	b510      	push	{r4, lr}
   10370:	2900      	cmp	r1, #0
   10372:	4604      	mov	r4, r0
   10374:	f04f 0106 	mov.w	r1, #6
   10378:	d002      	beq.n	10380 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   1037a:	f7f4 fa9f 	bl	48bc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
   1037e:	e001      	b.n	10384 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   10380:	f7f4 fab6 	bl	48f0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   10384:	7960      	ldrb	r0, [r4, #5]
   10386:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   1038a:	7160      	strb	r0, [r4, #5]
   1038c:	bd10      	pop	{r4, pc}

0001038e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   1038e:	b530      	push	{r4, r5, lr}
   10390:	460c      	mov	r4, r1
   10392:	4605      	mov	r5, r0
   10394:	b08d      	sub	sp, #52	; 0x34
   10396:	f04f 0103 	mov.w	r1, #3
   1039a:	f104 0003 	add.w	r0, r4, #3
   1039e:	b112      	cbz	r2, 103a6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   103a0:	f7f4 fa8c 	bl	48bc <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
   103a4:	e001      	b.n	103aa <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   103a6:	f7f4 faa3 	bl	48f0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   103aa:	7960      	ldrb	r0, [r4, #5]
   103ac:	220d      	movs	r2, #13
   103ae:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   103b2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   103b6:	7160      	strb	r0, [r4, #5]
   103b8:	2100      	movs	r1, #0
   103ba:	a804      	add	r0, sp, #16
   103bc:	f7fe fe66 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   103c0:	78e0      	ldrb	r0, [r4, #3]
   103c2:	f88d 001f 	strb.w	r0, [sp, #31]
   103c6:	7920      	ldrb	r0, [r4, #4]
   103c8:	f88d 001e 	strb.w	r0, [sp, #30]
   103cc:	7960      	ldrb	r0, [r4, #5]
   103ce:	f88d 001d 	strb.w	r0, [sp, #29]
   103d2:	6828      	ldr	r0, [r5, #0]
   103d4:	9000      	str	r0, [sp, #0]
   103d6:	6868      	ldr	r0, [r5, #4]
   103d8:	9001      	str	r0, [sp, #4]
   103da:	68a8      	ldr	r0, [r5, #8]
   103dc:	9002      	str	r0, [sp, #8]
   103de:	68e8      	ldr	r0, [r5, #12]
   103e0:	9003      	str	r0, [sp, #12]
   103e2:	4668      	mov	r0, sp
   103e4:	f7ff ff67 	bl	102b6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   103e8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   103ec:	7020      	strb	r0, [r4, #0]
   103ee:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   103f2:	7060      	strb	r0, [r4, #1]
   103f4:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   103f8:	70a0      	strb	r0, [r4, #2]
   103fa:	b00d      	add	sp, #52	; 0x34
   103fc:	bd30      	pop	{r4, r5, pc}

000103fe <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   103fe:	b510      	push	{r4, lr}
   10400:	f7fc ff22 	bl	d248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   10404:	2800      	cmp	r0, #0
   10406:	bf04      	itt	eq
   10408:	20ff      	moveq	r0, #255	; 0xff
   1040a:	bd10      	popeq	{r4, pc}
   1040c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10410:	f7fc bed8 	b.w	d1c4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

00010414 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   10414:	b510      	push	{r4, lr}
   10416:	f7f5 fe19 	bl	604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   1041a:	2810      	cmp	r0, #16
   1041c:	bf04      	itt	eq
   1041e:	2000      	moveq	r0, #0
   10420:	bd10      	popeq	{r4, pc}
   10422:	f7f5 fecd 	bl	61c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x218>
   10426:	2001      	movs	r0, #1
   10428:	bd10      	pop	{r4, pc}

0001042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   1042a:	b570      	push	{r4, r5, r6, lr}
   1042c:	460c      	mov	r4, r1
   1042e:	4605      	mov	r5, r0
   10430:	2100      	movs	r1, #0
   10432:	f7ff feee 	bl	10212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10436:	6060      	str	r0, [r4, #4]
   10438:	b110      	cbz	r0, 10440 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   1043a:	2000      	movs	r0, #0
   1043c:	7020      	strb	r0, [r4, #0]
   1043e:	bd70      	pop	{r4, r5, r6, pc}
   10440:	2101      	movs	r1, #1
   10442:	4628      	mov	r0, r5
   10444:	f7ff fee5 	bl	10212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10448:	6060      	str	r0, [r4, #4]
   1044a:	2800      	cmp	r0, #0
   1044c:	bf04      	itt	eq
   1044e:	2002      	moveq	r0, #2
   10450:	bd70      	popeq	{r4, r5, r6, pc}
   10452:	2001      	movs	r0, #1
   10454:	7020      	strb	r0, [r4, #0]
   10456:	2000      	movs	r0, #0
   10458:	bd70      	pop	{r4, r5, r6, pc}

0001045a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   1045a:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
   1045e:	2906      	cmp	r1, #6
   10460:	bf9a      	itte	ls
   10462:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   10466:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
   1046a:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   1046e:	4348      	muls	r0, r1
   10470:	4770      	bx	lr

00010472 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   10472:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
   10476:	f241 7270 	movw	r2, #6000	; 0x1770
   1047a:	4291      	cmp	r1, r2
   1047c:	bf94      	ite	ls
   1047e:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   10482:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   10486:	fbb0 f0f1 	udiv	r0, r0, r1
   1048a:	bf98      	it	ls
   1048c:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
   10490:	b280      	uxth	r0, r0
   10492:	4770      	bx	lr

00010494 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   10494:	b570      	push	{r4, r5, r6, lr}
   10496:	4604      	mov	r4, r0
   10498:	4290      	cmp	r0, r2
   1049a:	bf28      	it	cs
   1049c:	bd70      	popcs	{r4, r5, r6, pc}
   1049e:	1b10      	subs	r0, r2, r4
   104a0:	2864      	cmp	r0, #100	; 0x64
   104a2:	d30b      	bcc.n	104bc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
   104a4:	1825      	adds	r5, r4, r0
   104a6:	428d      	cmp	r5, r1
   104a8:	d806      	bhi.n	104b8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
   104aa:	2104      	movs	r1, #4
   104ac:	f7f0 fea2 	bl	11f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   104b0:	2800      	cmp	r0, #0
   104b2:	bf04      	itt	eq
   104b4:	4628      	moveq	r0, r5
   104b6:	bd70      	popeq	{r4, r5, r6, pc}
   104b8:	4620      	mov	r0, r4
   104ba:	bd70      	pop	{r4, r5, r6, pc}
   104bc:	2064      	movs	r0, #100	; 0x64
   104be:	e7f1      	b.n	104a4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

000104c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   104c0:	290c      	cmp	r1, #12
   104c2:	d265      	bcs.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   104c4:	e8df f001 	tbb	[pc, r1]
   104c8:	130e0906 	.word	0x130e0906
   104cc:	3c321b16 	.word	0x3c321b16
   104d0:	504a5e43 	.word	0x504a5e43
   104d4:	2a00      	cmp	r2, #0
   104d6:	d05d      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   104d8:	e05a      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   104da:	2a07      	cmp	r2, #7
   104dc:	bf18      	it	ne
   104de:	2a08      	cmpne	r2, #8
   104e0:	d058      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   104e2:	e055      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   104e4:	2a0c      	cmp	r2, #12
   104e6:	bf18      	it	ne
   104e8:	2a0b      	cmpne	r2, #11
   104ea:	d053      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   104ec:	e050      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   104ee:	2a0d      	cmp	r2, #13
   104f0:	d050      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   104f2:	e04d      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   104f4:	f1a2 000f 	sub.w	r0, r2, #15
   104f8:	280c      	cmp	r0, #12
   104fa:	d94b      	bls.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   104fc:	e048      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   104fe:	b123      	cbz	r3, 1050a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x4a>
   10500:	f1a2 0010 	sub.w	r0, r2, #16
   10504:	280b      	cmp	r0, #11
   10506:	d945      	bls.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10508:	e042      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1050a:	2a12      	cmp	r2, #18
   1050c:	bf18      	it	ne
   1050e:	2a11      	cmpne	r2, #17
   10510:	d040      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10512:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
   10516:	b120      	cbz	r0, 10522 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x62>
   10518:	2a12      	cmp	r2, #18
   1051a:	d339      	bcc.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1051c:	2a1a      	cmp	r2, #26
   1051e:	d939      	bls.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10520:	e036      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10522:	2a16      	cmp	r2, #22
   10524:	d334      	bcc.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10526:	2a1a      	cmp	r2, #26
   10528:	d934      	bls.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1052a:	e031      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1052c:	f1a2 010f 	sub.w	r1, r2, #15
   10530:	2903      	cmp	r1, #3
   10532:	d92f      	bls.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10534:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
   10538:	b318      	cbz	r0, 10582 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   1053a:	2a1b      	cmp	r2, #27
   1053c:	d92a      	bls.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1053e:	e027      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10540:	b113      	cbz	r3, 10548 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x88>
   10542:	2a04      	cmp	r2, #4
   10544:	d026      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10546:	e023      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10548:	2a04      	cmp	r2, #4
   1054a:	d121      	bne.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1054c:	e022      	b.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1054e:	b113      	cbz	r3, 10556 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x96>
   10550:	2a06      	cmp	r2, #6
   10552:	d01f      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10554:	e01c      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10556:	2a01      	cmp	r2, #1
   10558:	d11a      	bne.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1055a:	e01b      	b.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1055c:	2a1c      	cmp	r2, #28
   1055e:	bf1c      	itt	ne
   10560:	2a1d      	cmpne	r2, #29
   10562:	2a1e      	cmpne	r2, #30
   10564:	d016      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10566:	e013      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10568:	2a1f      	cmp	r2, #31
   1056a:	bf18      	it	ne
   1056c:	2a20      	cmpne	r2, #32
   1056e:	d011      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10570:	2a21      	cmp	r2, #33	; 0x21
   10572:	bf18      	it	ne
   10574:	2a22      	cmpne	r2, #34	; 0x22
   10576:	d00d      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10578:	2a23      	cmp	r2, #35	; 0x23
   1057a:	bf1c      	itt	ne
   1057c:	2a24      	cmpne	r2, #36	; 0x24
   1057e:	2a26      	cmpne	r2, #38	; 0x26
   10580:	d008      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10582:	e005      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10584:	b113      	cbz	r3, 1058c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xcc>
   10586:	2a0e      	cmp	r2, #14
   10588:	d004      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1058a:	e001      	b.n	10590 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1058c:	2a05      	cmp	r2, #5
   1058e:	d001      	beq.n	10594 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10590:	2000      	movs	r0, #0
   10592:	4770      	bx	lr
   10594:	2001      	movs	r0, #1
   10596:	4770      	bx	lr

00010598 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   10598:	280c      	cmp	r0, #12
   1059a:	bf18      	it	ne
   1059c:	280b      	cmpne	r0, #11
   1059e:	d010      	beq.n	105c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   105a0:	280d      	cmp	r0, #13
   105a2:	bf18      	it	ne
   105a4:	281f      	cmpne	r0, #31
   105a6:	d00c      	beq.n	105c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   105a8:	2820      	cmp	r0, #32
   105aa:	bf18      	it	ne
   105ac:	2821      	cmpne	r0, #33	; 0x21
   105ae:	d008      	beq.n	105c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   105b0:	2822      	cmp	r0, #34	; 0x22
   105b2:	bf18      	it	ne
   105b4:	2823      	cmpne	r0, #35	; 0x23
   105b6:	d004      	beq.n	105c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   105b8:	2824      	cmp	r0, #36	; 0x24
   105ba:	bf1e      	ittt	ne
   105bc:	2826      	cmpne	r0, #38	; 0x26
   105be:	2000      	movne	r0, #0
   105c0:	4770      	bxne	lr
   105c2:	f04f 0001 	mov.w	r0, #1
   105c6:	4770      	bx	lr

000105c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   105c8:	f011 0f0c 	tst.w	r1, #12
   105cc:	d013      	beq.n	105f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2e>
   105ce:	f001 0104 	and.w	r1, r1, #4
   105d2:	2900      	cmp	r1, #0
   105d4:	bf0d      	iteet	eq
   105d6:	2240      	moveq	r2, #64	; 0x40
   105d8:	2210      	movne	r2, #16
   105da:	2196      	movne	r1, #150	; 0x96
   105dc:	f44f 7116 	moveq.w	r1, #600	; 0x258
   105e0:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   105e4:	eba0 0301 	sub.w	r3, r0, r1
   105e8:	4288      	cmp	r0, r1
   105ea:	bf88      	it	hi
   105ec:	fb93 f0f2 	sdivhi	r0, r3, r2
   105f0:	d90e      	bls.n	10610 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   105f2:	b280      	uxth	r0, r0
   105f4:	4770      	bx	lr
   105f6:	2902      	cmp	r1, #2
   105f8:	d002      	beq.n	10600 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
   105fa:	2870      	cmp	r0, #112	; 0x70
   105fc:	d908      	bls.n	10610 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   105fe:	e009      	b.n	10614 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4c>
   10600:	283c      	cmp	r0, #60	; 0x3c
   10602:	d905      	bls.n	10610 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   10604:	383c      	subs	r0, #60	; 0x3c
   10606:	17c1      	asrs	r1, r0, #31
   10608:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   1060c:	1080      	asrs	r0, r0, #2
   1060e:	e7f0      	b.n	105f2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   10610:	2000      	movs	r0, #0
   10612:	e7ee      	b.n	105f2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   10614:	3870      	subs	r0, #112	; 0x70
   10616:	17c1      	asrs	r1, r0, #31
   10618:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   1061c:	10c0      	asrs	r0, r0, #3
   1061e:	e7e8      	b.n	105f2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>

00010620 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   10620:	6809      	ldr	r1, [r1, #0]
   10622:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
   10626:	4770      	bx	lr

00010628 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   10628:	f010 0f01 	tst.w	r0, #1
   1062c:	bf1c      	itt	ne
   1062e:	2001      	movne	r0, #1
   10630:	4770      	bxne	lr
   10632:	f010 0f02 	tst.w	r0, #2
   10636:	bf1c      	itt	ne
   10638:	2002      	movne	r0, #2
   1063a:	4770      	bxne	lr
   1063c:	f010 0004 	ands.w	r0, r0, #4
   10640:	bf18      	it	ne
   10642:	2008      	movne	r0, #8
   10644:	4770      	bx	lr

00010646 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   10646:	2901      	cmp	r1, #1
   10648:	d008      	beq.n	1065c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x16>
   1064a:	2902      	cmp	r1, #2
   1064c:	d00b      	beq.n	10666 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x20>
   1064e:	2904      	cmp	r1, #4
   10650:	bf12      	itee	ne
   10652:	2908      	cmpne	r1, #8
   10654:	f640 60a6 	movweq	r0, #3750	; 0xea6
   10658:	4770      	bxeq	lr
   1065a:	e007      	b.n	1066c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x26>
   1065c:	2800      	cmp	r0, #0
   1065e:	bf04      	itt	eq
   10660:	f240 40e2 	movweq	r0, #1250	; 0x4e2
   10664:	4770      	bxeq	lr
   10666:	f640 10c4 	movw	r0, #2500	; 0x9c4
   1066a:	4770      	bx	lr
   1066c:	b510      	push	{r4, lr}
   1066e:	f240 514b 	movw	r1, #1355	; 0x54b
   10672:	2029      	movs	r0, #41	; 0x29
   10674:	f7f3 facc 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010678 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
   10678:	2a16      	cmp	r2, #22
   1067a:	d110      	bne.n	1069e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   1067c:	222a      	movs	r2, #42	; 0x2a
   1067e:	280c      	cmp	r0, #12
   10680:	bf18      	it	ne
   10682:	280d      	cmpne	r0, #13
   10684:	d00f      	beq.n	106a6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   10686:	f04f 0c23 	mov.w	ip, #35	; 0x23
   1068a:	281f      	cmp	r0, #31
   1068c:	d00d      	beq.n	106aa <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   1068e:	b131      	cbz	r1, 1069e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   10690:	7808      	ldrb	r0, [r1, #0]
   10692:	2801      	cmp	r0, #1
   10694:	bf18      	it	ne
   10696:	2800      	cmpne	r0, #0
   10698:	d005      	beq.n	106a6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   1069a:	2816      	cmp	r0, #22
   1069c:	d005      	beq.n	106aa <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   1069e:	2000      	movs	r0, #0
   106a0:	4770      	bx	lr
   106a2:	2001      	movs	r0, #1
   106a4:	4770      	bx	lr
   106a6:	701a      	strb	r2, [r3, #0]
   106a8:	e7fb      	b.n	106a2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
   106aa:	f883 c000 	strb.w	ip, [r3]
   106ae:	e7f8      	b.n	106a2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>

000106b0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
   106b0:	b438      	push	{r3, r4, r5}
   106b2:	b2cb      	uxtb	r3, r1
   106b4:	f3c1 2c07 	ubfx	ip, r1, #8, #8
   106b8:	b2c1      	uxtb	r1, r0
   106ba:	f3c0 2407 	ubfx	r4, r0, #8, #8
   106be:	2b01      	cmp	r3, #1
   106c0:	d007      	beq.n	106d2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x22>
   106c2:	2b02      	cmp	r3, #2
   106c4:	d009      	beq.n	106da <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x2a>
   106c6:	2b04      	cmp	r3, #4
   106c8:	bf08      	it	eq
   106ca:	f1bc 0f04 	cmpeq.w	ip, #4
   106ce:	d02d      	beq.n	1072c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   106d0:	e006      	b.n	106e0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
   106d2:	f1bc 0f01 	cmp.w	ip, #1
   106d6:	d103      	bne.n	106e0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x30>
   106d8:	e028      	b.n	1072c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   106da:	f1bc 0f02 	cmp.w	ip, #2
   106de:	d025      	beq.n	1072c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   106e0:	2901      	cmp	r1, #1
   106e2:	d006      	beq.n	106f2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x42>
   106e4:	2902      	cmp	r1, #2
   106e6:	d007      	beq.n	106f8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x48>
   106e8:	2904      	cmp	r1, #4
   106ea:	bf08      	it	eq
   106ec:	2c04      	cmpeq	r4, #4
   106ee:	d01d      	beq.n	1072c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   106f0:	e004      	b.n	106fc <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
   106f2:	2c01      	cmp	r4, #1
   106f4:	d102      	bne.n	106fc <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x4c>
   106f6:	e019      	b.n	1072c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   106f8:	2c02      	cmp	r4, #2
   106fa:	d017      	beq.n	1072c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x7c>
   106fc:	ea01 010c 	and.w	r1, r1, ip
   10700:	f361 0207 	bfi	r2, r1, #0, #8
   10704:	ea04 0103 	and.w	r1, r4, r3
   10708:	f361 220f 	bfi	r2, r1, #8, #8
   1070c:	b2d1      	uxtb	r1, r2
   1070e:	f011 0f02 	tst.w	r1, #2
   10712:	bf18      	it	ne
   10714:	2302      	movne	r3, #2
   10716:	d010      	beq.n	1073a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x8a>
   10718:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1071c:	f88d 3000 	strb.w	r3, [sp]
   10720:	f011 0f02 	tst.w	r1, #2
   10724:	bf18      	it	ne
   10726:	2102      	movne	r1, #2
   10728:	d11b      	bne.n	10762 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
   1072a:	e011      	b.n	10750 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xa0>
   1072c:	4021      	ands	r1, r4
   1072e:	ea03 030c 	and.w	r3, r3, ip
   10732:	4019      	ands	r1, r3
   10734:	f361 0207 	bfi	r2, r1, #0, #8
   10738:	e7e6      	b.n	10708 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x58>
   1073a:	f011 0f01 	tst.w	r1, #1
   1073e:	bf18      	it	ne
   10740:	2301      	movne	r3, #1
   10742:	d1e9      	bne.n	10718 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   10744:	f011 0f04 	tst.w	r1, #4
   10748:	bf14      	ite	ne
   1074a:	2308      	movne	r3, #8
   1074c:	2300      	moveq	r3, #0
   1074e:	e7e3      	b.n	10718 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   10750:	f011 0f01 	tst.w	r1, #1
   10754:	bf18      	it	ne
   10756:	2101      	movne	r1, #1
   10758:	d103      	bne.n	10762 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0xb2>
   1075a:	f011 0104 	ands.w	r1, r1, #4
   1075e:	bf18      	it	ne
   10760:	2108      	movne	r1, #8
   10762:	f88d 1001 	strb.w	r1, [sp, #1]
   10766:	2b08      	cmp	r3, #8
   10768:	bf01      	itttt	eq
   1076a:	0c00      	lsreq	r0, r0, #16
   1076c:	2801      	cmpeq	r0, #1
   1076e:	2004      	moveq	r0, #4
   10770:	f88d 0000 	strbeq.w	r0, [sp]
   10774:	f8bd 0000 	ldrh.w	r0, [sp]
   10778:	bc38      	pop	{r3, r4, r5}
   1077a:	4770      	bx	lr

0001077c <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>:
   1077c:	f04f 0c00 	mov.w	ip, #0
   10780:	2908      	cmp	r1, #8
   10782:	d002      	beq.n	1078a <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0xe>
   10784:	2904      	cmp	r1, #4
   10786:	d009      	beq.n	1079c <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x20>
   10788:	e011      	b.n	107ae <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   1078a:	2801      	cmp	r0, #1
   1078c:	d10f      	bne.n	107ae <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   1078e:	2004      	movs	r0, #4
   10790:	7090      	strb	r0, [r2, #2]
   10792:	f882 c003 	strb.w	ip, [r2, #3]
   10796:	8013      	strh	r3, [r2, #0]
   10798:	2001      	movs	r0, #1
   1079a:	4770      	bx	lr
   1079c:	2801      	cmp	r0, #1
   1079e:	d006      	beq.n	107ae <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   107a0:	2008      	movs	r0, #8
   107a2:	7090      	strb	r0, [r2, #2]
   107a4:	f882 c003 	strb.w	ip, [r2, #3]
   107a8:	8013      	strh	r3, [r2, #0]
   107aa:	2001      	movs	r0, #1
   107ac:	4770      	bx	lr
   107ae:	2000      	movs	r0, #0
   107b0:	4770      	bx	lr

000107b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   107b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107b6:	460c      	mov	r4, r1
   107b8:	4605      	mov	r5, r0
   107ba:	68c7      	ldr	r7, [r0, #12]
   107bc:	f7f1 f990 	bl	1ae0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   107c0:	b198      	cbz	r0, 107ea <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   107c2:	b1bc      	cbz	r4, 107f4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   107c4:	4638      	mov	r0, r7
   107c6:	68e9      	ldr	r1, [r5, #12]
   107c8:	f7f0 fe3c 	bl	1444 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   107cc:	2800      	cmp	r0, #0
   107ce:	dd11      	ble.n	107f4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   107d0:	4420      	add	r0, r4
   107d2:	1e40      	subs	r0, r0, #1
   107d4:	fbb0 f6f4 	udiv	r6, r0, r4
   107d8:	fb06 f104 	mul.w	r1, r6, r4
   107dc:	4638      	mov	r0, r7
   107de:	f7f0 fdfb 	bl	13d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   107e2:	60e8      	str	r0, [r5, #12]
   107e4:	4630      	mov	r0, r6
   107e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   107ea:	f44f 7174 	mov.w	r1, #976	; 0x3d0
   107ee:	2029      	movs	r0, #41	; 0x29
   107f0:	f7f3 fa0e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107f4:	2000      	movs	r0, #0
   107f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000107fa <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   107fa:	b538      	push	{r3, r4, r5, lr}
   107fc:	4605      	mov	r5, r0
   107fe:	460c      	mov	r4, r1
   10800:	4668      	mov	r0, sp
   10802:	f7fd fd91 	bl	e328 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   10806:	2800      	cmp	r0, #0
   10808:	bf08      	it	eq
   1080a:	bd38      	popeq	{r3, r4, r5, pc}
   1080c:	f99d 2000 	ldrsb.w	r2, [sp]
   10810:	7222      	strb	r2, [r4, #8]
   10812:	7ee0      	ldrb	r0, [r4, #27]
   10814:	7260      	strb	r0, [r4, #9]
   10816:	f994 100a 	ldrsb.w	r1, [r4, #10]
   1081a:	2000      	movs	r0, #0
   1081c:	1a51      	subs	r1, r2, r1
   1081e:	bf48      	it	mi
   10820:	4249      	negmi	r1, r1
   10822:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   10826:	428b      	cmp	r3, r1
   10828:	bfc8      	it	gt
   1082a:	bd38      	popgt	{r3, r4, r5, pc}
   1082c:	2bff      	cmp	r3, #255	; 0xff
   1082e:	bf08      	it	eq
   10830:	bd38      	popeq	{r3, r4, r5, pc}
   10832:	7ae1      	ldrb	r1, [r4, #11]
   10834:	1c49      	adds	r1, r1, #1
   10836:	b2c9      	uxtb	r1, r1
   10838:	72e1      	strb	r1, [r4, #11]
   1083a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1083e:	4299      	cmp	r1, r3
   10840:	d803      	bhi.n	1084a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   10842:	7aa1      	ldrb	r1, [r4, #10]
   10844:	297f      	cmp	r1, #127	; 0x7f
   10846:	bf18      	it	ne
   10848:	bd38      	popne	{r3, r4, r5, pc}
   1084a:	72a2      	strb	r2, [r4, #10]
   1084c:	2000      	movs	r0, #0
   1084e:	72e0      	strb	r0, [r4, #11]
   10850:	2001      	movs	r0, #1
   10852:	bd38      	pop	{r3, r4, r5, pc}

00010854 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   10854:	2300      	movs	r3, #0
   10856:	6203      	str	r3, [r0, #32]
   10858:	8502      	strh	r2, [r0, #40]	; 0x28
   1085a:	f240 2371 	movw	r3, #625	; 0x271
   1085e:	435a      	muls	r2, r3
   10860:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   10864:	1e52      	subs	r2, r2, #1
   10866:	fbb2 f1f1 	udiv	r1, r2, r1
   1086a:	6241      	str	r1, [r0, #36]	; 0x24
   1086c:	4770      	bx	lr

0001086e <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>:
   1086e:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
   10872:	4281      	cmp	r1, r0
   10874:	bf38      	it	cc
   10876:	4608      	movcc	r0, r1
   10878:	1a08      	subs	r0, r1, r0
   1087a:	6819      	ldr	r1, [r3, #0]
   1087c:	0840      	lsrs	r0, r0, #1
   1087e:	4401      	add	r1, r0
   10880:	6019      	str	r1, [r3, #0]
   10882:	6811      	ldr	r1, [r2, #0]
   10884:	eba1 0100 	sub.w	r1, r1, r0
   10888:	6011      	str	r1, [r2, #0]
   1088a:	bf18      	it	ne
   1088c:	2001      	movne	r0, #1
   1088e:	4770      	bx	lr

00010890 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   10890:	f641 524c 	movw	r2, #7500	; 0x1d4c
   10894:	4291      	cmp	r1, r2
   10896:	bf34      	ite	cc
   10898:	2164      	movcc	r1, #100	; 0x64
   1089a:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   1089e:	4348      	muls	r0, r1
   108a0:	4770      	bx	lr

000108a2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   108a2:	f641 524c 	movw	r2, #7500	; 0x1d4c
   108a6:	4291      	cmp	r1, r2
   108a8:	bf34      	ite	cc
   108aa:	2164      	movcc	r1, #100	; 0x64
   108ac:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   108b0:	fb10 f001 	smulbb	r0, r0, r1
   108b4:	4770      	bx	lr
   108b6:	b510      	push	{r4, lr}
   108b8:	7c0a      	ldrb	r2, [r1, #16]
   108ba:	f002 021f 	and.w	r2, r2, #31
   108be:	740a      	strb	r2, [r1, #16]
   108c0:	2200      	movs	r2, #0
   108c2:	7642      	strb	r2, [r0, #25]
   108c4:	188b      	adds	r3, r1, r2
   108c6:	f893 c00c 	ldrb.w	ip, [r3, #12]
   108ca:	f00c 0301 	and.w	r3, ip, #1
   108ce:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   108d2:	f00c 0401 	and.w	r4, ip, #1
   108d6:	4423      	add	r3, r4
   108d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   108dc:	f00c 0401 	and.w	r4, ip, #1
   108e0:	4423      	add	r3, r4
   108e2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   108e6:	f00c 0401 	and.w	r4, ip, #1
   108ea:	4423      	add	r3, r4
   108ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   108f0:	f00c 0401 	and.w	r4, ip, #1
   108f4:	4423      	add	r3, r4
   108f6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   108fa:	f00c 0401 	and.w	r4, ip, #1
   108fe:	4423      	add	r3, r4
   10900:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10904:	f00c 0401 	and.w	r4, ip, #1
   10908:	4423      	add	r3, r4
   1090a:	eb03 035c 	add.w	r3, r3, ip, lsr #1
   1090e:	eb00 0c02 	add.w	ip, r0, r2
   10912:	1c52      	adds	r2, r2, #1
   10914:	f88c 3014 	strb.w	r3, [ip, #20]
   10918:	f890 c019 	ldrb.w	ip, [r0, #25]
   1091c:	2a05      	cmp	r2, #5
   1091e:	4463      	add	r3, ip
   10920:	7643      	strb	r3, [r0, #25]
   10922:	dbcf      	blt.n	108c4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
   10924:	b2d8      	uxtb	r0, r3
   10926:	2825      	cmp	r0, #37	; 0x25
   10928:	bf98      	it	ls
   1092a:	bd10      	popls	{r4, pc}
   1092c:	21d8      	movs	r1, #216	; 0xd8
   1092e:	2029      	movs	r0, #41	; 0x29
   10930:	f7f3 f96e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010934 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
   10934:	b430      	push	{r4, r5}
   10936:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   1093a:	f8b0 4009 	ldrh.w	r4, [r0, #9]
   1093e:	f8b0 c005 	ldrh.w	ip, [r0, #5]
   10942:	7903      	ldrb	r3, [r0, #4]
   10944:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   10948:	2900      	cmp	r1, #0
   1094a:	bf18      	it	ne
   1094c:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   10950:	d903      	bls.n	1095a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x26>
   10952:	f640 5107 	movw	r1, #3335	; 0xd07
   10956:	428a      	cmp	r2, r1
   10958:	d90b      	bls.n	10972 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3e>
   1095a:	1f91      	subs	r1, r2, #6
   1095c:	f640 457a 	movw	r5, #3194	; 0xc7a
   10960:	42a9      	cmp	r1, r5
   10962:	d80f      	bhi.n	10984 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10964:	b173      	cbz	r3, 10984 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10966:	2b08      	cmp	r3, #8
   10968:	bf98      	it	ls
   1096a:	4293      	cmpls	r3, r2
   1096c:	d20a      	bcs.n	10984 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   1096e:	4562      	cmp	r2, ip
   10970:	d308      	bcc.n	10984 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10972:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   10976:	d205      	bcs.n	10984 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10978:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1097c:	bf9e      	ittt	ls
   1097e:	2001      	movls	r0, #1
   10980:	bc30      	popls	{r4, r5}
   10982:	4770      	bxls	lr
   10984:	2000      	movs	r0, #0
   10986:	bc30      	pop	{r4, r5}
   10988:	4770      	bx	lr

0001098a <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
   1098a:	1d02      	adds	r2, r0, #4
   1098c:	4608      	mov	r0, r1
   1098e:	4611      	mov	r1, r2
   10990:	f001 bfaf 	b.w	128f2 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

00010994 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
   10994:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   10998:	4770      	bx	lr

0001099a <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
   1099a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   1099e:	4770      	bx	lr

000109a0 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
   109a0:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   109a4:	4770      	bx	lr

000109a6 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
   109a6:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   109aa:	4770      	bx	lr

000109ac <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
   109ac:	8980      	ldrh	r0, [r0, #12]
   109ae:	8008      	strh	r0, [r1, #0]
   109b0:	4770      	bx	lr

000109b2 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
   109b2:	f8d0 0016 	ldr.w	r0, [r0, #22]
   109b6:	6008      	str	r0, [r1, #0]
   109b8:	4770      	bx	lr

000109ba <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
   109ba:	6842      	ldr	r2, [r0, #4]
   109bc:	600a      	str	r2, [r1, #0]
   109be:	6880      	ldr	r0, [r0, #8]
   109c0:	6048      	str	r0, [r1, #4]
   109c2:	4770      	bx	lr

000109c4 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
   109c4:	f8d0 200e 	ldr.w	r2, [r0, #14]
   109c8:	600a      	str	r2, [r1, #0]
   109ca:	f8d0 0012 	ldr.w	r0, [r0, #18]
   109ce:	6048      	str	r0, [r1, #4]
   109d0:	4770      	bx	lr

000109d2 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
   109d2:	6842      	ldr	r2, [r0, #4]
   109d4:	600a      	str	r2, [r1, #0]
   109d6:	6880      	ldr	r0, [r0, #8]
   109d8:	6048      	str	r0, [r1, #4]
   109da:	4770      	bx	lr

000109dc <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>:
   109dc:	7840      	ldrb	r0, [r0, #1]
   109de:	4770      	bx	lr

000109e0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   109e0:	7800      	ldrb	r0, [r0, #0]
   109e2:	f000 0003 	and.w	r0, r0, #3
   109e6:	4770      	bx	lr

000109e8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
   109e8:	7900      	ldrb	r0, [r0, #4]
   109ea:	4770      	bx	lr

000109ec <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   109ec:	8880      	ldrh	r0, [r0, #4]
   109ee:	4770      	bx	lr

000109f0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   109f0:	88c0      	ldrh	r0, [r0, #6]
   109f2:	4770      	bx	lr

000109f4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   109f4:	8900      	ldrh	r0, [r0, #8]
   109f6:	4770      	bx	lr

000109f8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   109f8:	8940      	ldrh	r0, [r0, #10]
   109fa:	4770      	bx	lr

000109fc <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
   109fc:	88c0      	ldrh	r0, [r0, #6]
   109fe:	4770      	bx	lr

00010a00 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
   10a00:	7940      	ldrb	r0, [r0, #5]
   10a02:	4770      	bx	lr

00010a04 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   10a04:	7900      	ldrb	r0, [r0, #4]
   10a06:	4770      	bx	lr

00010a08 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   10a08:	7900      	ldrb	r0, [r0, #4]
   10a0a:	4770      	bx	lr

00010a0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   10a0c:	8901      	ldrh	r1, [r0, #8]
   10a0e:	291b      	cmp	r1, #27
   10a10:	bf24      	itt	cs
   10a12:	8941      	ldrhcs	r1, [r0, #10]
   10a14:	f5b1 7fa4 	cmpcs.w	r1, #328	; 0x148
   10a18:	d307      	bcc.n	10a2a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x1e>
   10a1a:	8881      	ldrh	r1, [r0, #4]
   10a1c:	291b      	cmp	r1, #27
   10a1e:	bf21      	itttt	cs
   10a20:	88c0      	ldrhcs	r0, [r0, #6]
   10a22:	f5b0 7fa4 	cmpcs.w	r0, #328	; 0x148
   10a26:	2001      	movcs	r0, #1
   10a28:	4770      	bxcs	lr
   10a2a:	2000      	movs	r0, #0
   10a2c:	4770      	bx	lr

00010a2e <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   10a2e:	b510      	push	{r4, lr}
   10a30:	29fb      	cmp	r1, #251	; 0xfb
   10a32:	bf9c      	itt	ls
   10a34:	7041      	strbls	r1, [r0, #1]
   10a36:	bd10      	popls	{r4, pc}
   10a38:	f240 5156 	movw	r1, #1366	; 0x556
   10a3c:	202a      	movs	r0, #42	; 0x2a
   10a3e:	f7f3 f8e7 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010a42 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   10a42:	7901      	ldrb	r1, [r0, #4]
   10a44:	f011 0f07 	tst.w	r1, #7
   10a48:	bf1b      	ittet	ne
   10a4a:	7940      	ldrbne	r0, [r0, #5]
   10a4c:	f010 0f07 	tstne.w	r0, #7
   10a50:	2000      	moveq	r0, #0
   10a52:	2001      	movne	r0, #1
   10a54:	4770      	bx	lr

00010a56 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
   10a56:	7901      	ldrb	r1, [r0, #4]
   10a58:	f011 0f07 	tst.w	r1, #7
   10a5c:	bf1b      	ittet	ne
   10a5e:	7940      	ldrbne	r0, [r0, #5]
   10a60:	f010 0f07 	tstne.w	r0, #7
   10a64:	2000      	moveq	r0, #0
   10a66:	2001      	movne	r0, #1
   10a68:	4770      	bx	lr

00010a6a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   10a6a:	7900      	ldrb	r0, [r0, #4]
   10a6c:	4770      	bx	lr

00010a6e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   10a6e:	7940      	ldrb	r0, [r0, #5]
   10a70:	4770      	bx	lr

00010a72 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   10a72:	7101      	strb	r1, [r0, #4]
   10a74:	4770      	bx	lr

00010a76 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   10a76:	7141      	strb	r1, [r0, #5]
   10a78:	4770      	bx	lr

00010a7a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
   10a7a:	b510      	push	{r4, lr}
   10a7c:	2a1b      	cmp	r2, #27
   10a7e:	d904      	bls.n	10a8a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
   10a80:	f240 31bd 	movw	r1, #957	; 0x3bd
   10a84:	202a      	movs	r0, #42	; 0x2a
   10a86:	f7f3 f8c3 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a8a:	7042      	strb	r2, [r0, #1]
   10a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a90:	1cc0      	adds	r0, r0, #3
   10a92:	f7f2 bf31 	b.w	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

00010a96 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
   10a96:	6809      	ldr	r1, [r1, #0]
   10a98:	60c1      	str	r1, [r0, #12]
   10a9a:	4770      	bx	lr

00010a9c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
   10a9c:	680a      	ldr	r2, [r1, #0]
   10a9e:	6042      	str	r2, [r0, #4]
   10aa0:	6849      	ldr	r1, [r1, #4]
   10aa2:	6081      	str	r1, [r0, #8]
   10aa4:	4770      	bx	lr

00010aa6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   10aa6:	680a      	ldr	r2, [r1, #0]
   10aa8:	6042      	str	r2, [r0, #4]
   10aaa:	6849      	ldr	r1, [r1, #4]
   10aac:	6081      	str	r1, [r0, #8]
   10aae:	4770      	bx	lr

00010ab0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
   10ab0:	680a      	ldr	r2, [r1, #0]
   10ab2:	6042      	str	r2, [r0, #4]
   10ab4:	6849      	ldr	r1, [r1, #4]
   10ab6:	6081      	str	r1, [r0, #8]
   10ab8:	4770      	bx	lr

00010aba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   10aba:	7802      	ldrb	r2, [r0, #0]
   10abc:	f001 0103 	and.w	r1, r1, #3
   10ac0:	f022 0203 	bic.w	r2, r2, #3
   10ac4:	4311      	orrs	r1, r2
   10ac6:	7001      	strb	r1, [r0, #0]
   10ac8:	4770      	bx	lr

00010aca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   10aca:	7101      	strb	r1, [r0, #4]
   10acc:	0a09      	lsrs	r1, r1, #8
   10ace:	7141      	strb	r1, [r0, #5]
   10ad0:	4770      	bx	lr

00010ad2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   10ad2:	7181      	strb	r1, [r0, #6]
   10ad4:	0a09      	lsrs	r1, r1, #8
   10ad6:	71c1      	strb	r1, [r0, #7]
   10ad8:	4770      	bx	lr

00010ada <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   10ada:	7201      	strb	r1, [r0, #8]
   10adc:	0a09      	lsrs	r1, r1, #8
   10ade:	7241      	strb	r1, [r0, #9]
   10ae0:	4770      	bx	lr

00010ae2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   10ae2:	7281      	strb	r1, [r0, #10]
   10ae4:	0a09      	lsrs	r1, r1, #8
   10ae6:	72c1      	strb	r1, [r0, #11]
   10ae8:	4770      	bx	lr

00010aea <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>:
   10aea:	7800      	ldrb	r0, [r0, #0]
   10aec:	f000 000f 	and.w	r0, r0, #15
   10af0:	4770      	bx	lr

00010af2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   10af2:	b430      	push	{r4, r5}
   10af4:	7802      	ldrb	r2, [r0, #0]
   10af6:	f002 020f 	and.w	r2, r2, #15
   10afa:	2a03      	cmp	r2, #3
   10afc:	d02d      	beq.n	10b5a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x68>
   10afe:	2a05      	cmp	r2, #5
   10b00:	d12e      	bne.n	10b60 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10b02:	f8b0 2019 	ldrh.w	r2, [r0, #25]
   10b06:	f8b0 401b 	ldrh.w	r4, [r0, #27]
   10b0a:	f8b0 c017 	ldrh.w	ip, [r0, #23]
   10b0e:	7d83      	ldrb	r3, [r0, #22]
   10b10:	2900      	cmp	r1, #0
   10b12:	bf18      	it	ne
   10b14:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   10b18:	d907      	bls.n	10b2a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   10b1a:	f640 5107 	movw	r1, #3335	; 0xd07
   10b1e:	428a      	cmp	r2, r1
   10b20:	d803      	bhi.n	10b2a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   10b22:	7841      	ldrb	r1, [r0, #1]
   10b24:	2922      	cmp	r1, #34	; 0x22
   10b26:	d11b      	bne.n	10b60 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10b28:	e00e      	b.n	10b48 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x56>
   10b2a:	7841      	ldrb	r1, [r0, #1]
   10b2c:	2922      	cmp	r1, #34	; 0x22
   10b2e:	d117      	bne.n	10b60 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10b30:	1f91      	subs	r1, r2, #6
   10b32:	f640 457a 	movw	r5, #3194	; 0xc7a
   10b36:	42a9      	cmp	r1, r5
   10b38:	d812      	bhi.n	10b60 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10b3a:	b18b      	cbz	r3, 10b60 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10b3c:	2b08      	cmp	r3, #8
   10b3e:	bf98      	it	ls
   10b40:	4293      	cmpls	r3, r2
   10b42:	d20d      	bcs.n	10b60 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10b44:	4562      	cmp	r2, ip
   10b46:	d30b      	bcc.n	10b60 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10b48:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   10b4c:	d208      	bcs.n	10b60 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10b4e:	f8b0 001d 	ldrh.w	r0, [r0, #29]
   10b52:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   10b56:	d803      	bhi.n	10b60 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10b58:	e005      	b.n	10b66 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   10b5a:	7840      	ldrb	r0, [r0, #1]
   10b5c:	280c      	cmp	r0, #12
   10b5e:	d002      	beq.n	10b66 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   10b60:	bc30      	pop	{r4, r5}
   10b62:	2000      	movs	r0, #0
   10b64:	4770      	bx	lr
   10b66:	bc30      	pop	{r4, r5}
   10b68:	2001      	movs	r0, #1
   10b6a:	4770      	bx	lr

00010b6c <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>:
   10b6c:	22c0      	movs	r2, #192	; 0xc0
   10b6e:	ea02 1181 	and.w	r1, r2, r1, lsl #6
   10b72:	78c2      	ldrb	r2, [r0, #3]
   10b74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   10b78:	4311      	orrs	r1, r2
   10b7a:	70c1      	strb	r1, [r0, #3]
   10b7c:	4770      	bx	lr

00010b7e <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   10b7e:	b570      	push	{r4, r5, r6, lr}
   10b80:	4614      	mov	r4, r2
   10b82:	4605      	mov	r5, r0
   10b84:	2a1f      	cmp	r2, #31
   10b86:	d903      	bls.n	10b90 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   10b88:	21b0      	movs	r1, #176	; 0xb0
   10b8a:	202a      	movs	r0, #42	; 0x2a
   10b8c:	f7f3 f840 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b90:	f105 0009 	add.w	r0, r5, #9
   10b94:	f7f2 feb0 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10b98:	1da0      	adds	r0, r4, #6
   10b9a:	7068      	strb	r0, [r5, #1]
   10b9c:	bd70      	pop	{r4, r5, r6, pc}

00010b9e <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>:
   10b9e:	b570      	push	{r4, r5, r6, lr}
   10ba0:	461e      	mov	r6, r3
   10ba2:	000c      	movs	r4, r1
   10ba4:	4605      	mov	r5, r0
   10ba6:	d00a      	beq.n	10bbe <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x20>
   10ba8:	4611      	mov	r1, r2
   10baa:	f7f5 fe8b 	bl	68c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
   10bae:	b158      	cbz	r0, 10bc8 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x2a>
   10bb0:	4428      	add	r0, r5
   10bb2:	4632      	mov	r2, r6
   10bb4:	4621      	mov	r1, r4
   10bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10bba:	f7f2 be9d 	b.w	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10bbe:	f240 21be 	movw	r1, #702	; 0x2be
   10bc2:	202a      	movs	r0, #42	; 0x2a
   10bc4:	f7f3 f824 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10bc8:	f240 21bf 	movw	r1, #703	; 0x2bf
   10bcc:	202a      	movs	r0, #42	; 0x2a
   10bce:	f7f3 f81f 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010bd2 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>:
   10bd2:	b2c9      	uxtb	r1, r1
   10bd4:	f001 0201 	and.w	r2, r1, #1
   10bd8:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10bdc:	441a      	add	r2, r3
   10bde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10be2:	f3c1 0380 	ubfx	r3, r1, #2, #1
   10be6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   10bea:	f3c1 03c0 	ubfx	r3, r1, #3, #1
   10bee:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   10bf2:	f3c1 1300 	ubfx	r3, r1, #4, #1
   10bf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10bfa:	441a      	add	r2, r3
   10bfc:	f3c1 1340 	ubfx	r3, r1, #5, #1
   10c00:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10c04:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   10c08:	f3c1 1380 	ubfx	r3, r1, #6, #1
   10c0c:	441a      	add	r2, r3
   10c0e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10c12:	d002      	beq.n	10c1a <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ+0x48>
   10c14:	1c52      	adds	r2, r2, #1
   10c16:	b2d2      	uxtb	r2, r2
   10c18:	7101      	strb	r1, [r0, #4]
   10c1a:	78c3      	ldrb	r3, [r0, #3]
   10c1c:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   10c20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10c24:	4319      	orrs	r1, r3
   10c26:	70c1      	strb	r1, [r0, #3]
   10c28:	1c51      	adds	r1, r2, #1
   10c2a:	7041      	strb	r1, [r0, #1]
   10c2c:	4770      	bx	lr

00010c2e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   10c2e:	b510      	push	{r4, lr}
   10c30:	7802      	ldrb	r2, [r0, #0]
   10c32:	f001 030f 	and.w	r3, r1, #15
   10c36:	f022 020f 	bic.w	r2, r2, #15
   10c3a:	431a      	orrs	r2, r3
   10c3c:	7002      	strb	r2, [r0, #0]
   10c3e:	2909      	cmp	r1, #9
   10c40:	d213      	bcs.n	10c6a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
   10c42:	e8df f001 	tbb	[pc, r1]
   10c46:	0705      	.short	0x0705
   10c48:	09050705 	.word	0x09050705
   10c4c:	000f0b05 	.word	0x000f0b05
   10c50:	2106      	movs	r1, #6
   10c52:	e008      	b.n	10c66 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10c54:	210c      	movs	r1, #12
   10c56:	e006      	b.n	10c66 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10c58:	2122      	movs	r1, #34	; 0x22
   10c5a:	e004      	b.n	10c66 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10c5c:	2101      	movs	r1, #1
   10c5e:	2200      	movs	r2, #0
   10c60:	70c2      	strb	r2, [r0, #3]
   10c62:	e000      	b.n	10c66 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10c64:	210e      	movs	r1, #14
   10c66:	7041      	strb	r1, [r0, #1]
   10c68:	bd10      	pop	{r4, pc}
   10c6a:	216e      	movs	r1, #110	; 0x6e
   10c6c:	202a      	movs	r0, #42	; 0x2a
   10c6e:	f7f2 ffcf 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010c72 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   10c72:	680a      	ldr	r2, [r1, #0]
   10c74:	f8c0 2009 	str.w	r2, [r0, #9]
   10c78:	8889      	ldrh	r1, [r1, #4]
   10c7a:	f8a0 100d 	strh.w	r1, [r0, #13]
   10c7e:	4770      	bx	lr

00010c80 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   10c80:	7802      	ldrb	r2, [r0, #0]
   10c82:	2380      	movs	r3, #128	; 0x80
   10c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   10c88:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   10c8c:	4311      	orrs	r1, r2
   10c8e:	7001      	strb	r1, [r0, #0]
   10c90:	4770      	bx	lr

00010c92 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   10c92:	680a      	ldr	r2, [r1, #0]
   10c94:	f8c0 2003 	str.w	r2, [r0, #3]
   10c98:	8889      	ldrh	r1, [r1, #4]
   10c9a:	f8a0 1007 	strh.w	r1, [r0, #7]
   10c9e:	4770      	bx	lr

00010ca0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   10ca0:	7802      	ldrb	r2, [r0, #0]
   10ca2:	2340      	movs	r3, #64	; 0x40
   10ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10ca8:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   10cac:	4311      	orrs	r1, r2
   10cae:	7001      	strb	r1, [r0, #0]
   10cb0:	4770      	bx	lr

00010cb2 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   10cb2:	b570      	push	{r4, r5, r6, lr}
   10cb4:	4614      	mov	r4, r2
   10cb6:	4605      	mov	r5, r0
   10cb8:	2a1f      	cmp	r2, #31
   10cba:	d903      	bls.n	10cc4 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   10cbc:	21d2      	movs	r1, #210	; 0xd2
   10cbe:	202a      	movs	r0, #42	; 0x2a
   10cc0:	f7f2 ffa6 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10cc4:	f105 0009 	add.w	r0, r5, #9
   10cc8:	f7f2 fe16 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10ccc:	1da0      	adds	r0, r4, #6
   10cce:	7068      	strb	r0, [r5, #1]
   10cd0:	bd70      	pop	{r4, r5, r6, pc}

00010cd2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
   10cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cd6:	4604      	mov	r4, r0
   10cd8:	b082      	sub	sp, #8
   10cda:	4688      	mov	r8, r1
   10cdc:	2000      	movs	r0, #0
   10cde:	f7f3 f9a7 	bl	4030 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   10ce2:	4605      	mov	r5, r0
   10ce4:	2001      	movs	r0, #1
   10ce6:	f7f3 f9a3 	bl	4030 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   10cea:	4428      	add	r0, r5
   10cec:	b2c7      	uxtb	r7, r0
   10cee:	2600      	movs	r6, #0
   10cf0:	eb17 0508 	adds.w	r5, r7, r8
   10cf4:	bf18      	it	ne
   10cf6:	f04f 0800 	movne.w	r8, #0
   10cfa:	d01c      	beq.n	10d36 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x64>
   10cfc:	8820      	ldrh	r0, [r4, #0]
   10cfe:	1c40      	adds	r0, r0, #1
   10d00:	b280      	uxth	r0, r0
   10d02:	8020      	strh	r0, [r4, #0]
   10d04:	42a8      	cmp	r0, r5
   10d06:	bf28      	it	cs
   10d08:	f8a4 8000 	strhcs.w	r8, [r4]
   10d0c:	8820      	ldrh	r0, [r4, #0]
   10d0e:	42b8      	cmp	r0, r7
   10d10:	bf28      	it	cs
   10d12:	4285      	cmpcs	r5, r0
   10d14:	d903      	bls.n	10d1e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4c>
   10d16:	b002      	add	sp, #8
   10d18:	2000      	movs	r0, #0
   10d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d1e:	4669      	mov	r1, sp
   10d20:	f7ff fb83 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10d24:	2800      	cmp	r0, #0
   10d26:	bf04      	itt	eq
   10d28:	b002      	addeq	sp, #8
   10d2a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d2e:	1c70      	adds	r0, r6, #1
   10d30:	b2c6      	uxtb	r6, r0
   10d32:	42b5      	cmp	r5, r6
   10d34:	d8e2      	bhi.n	10cfc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x2a>
   10d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
   10d3a:	8020      	strh	r0, [r4, #0]
   10d3c:	b002      	add	sp, #8
   10d3e:	2012      	movs	r0, #18
   10d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010d44 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   10d44:	7801      	ldrb	r1, [r0, #0]
   10d46:	2900      	cmp	r1, #0
   10d48:	bf08      	it	eq
   10d4a:	4770      	bxeq	lr
   10d4c:	6841      	ldr	r1, [r0, #4]
   10d4e:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
   10d52:	2a00      	cmp	r2, #0
   10d54:	bf08      	it	eq
   10d56:	4770      	bxeq	lr
   10d58:	2200      	movs	r2, #0
   10d5a:	f881 210d 	strb.w	r2, [r1, #269]	; 0x10d
   10d5e:	6840      	ldr	r0, [r0, #4]
   10d60:	f000 bb7f 	b.w	11462 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>

00010d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   10d64:	b430      	push	{r4, r5}
   10d66:	8050      	strh	r0, [r2, #2]
   10d68:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   10d6c:	f8a2 c004 	strh.w	ip, [r2, #4]
   10d70:	898b      	ldrh	r3, [r1, #12]
   10d72:	80d3      	strh	r3, [r2, #6]
   10d74:	8948      	ldrh	r0, [r1, #10]
   10d76:	8110      	strh	r0, [r2, #8]
   10d78:	89cc      	ldrh	r4, [r1, #14]
   10d7a:	8154      	strh	r4, [r2, #10]
   10d7c:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
   10d7e:	42a5      	cmp	r5, r4
   10d80:	bf04      	itt	eq
   10d82:	8d4c      	ldrheq	r4, [r1, #42]	; 0x2a
   10d84:	4284      	cmpeq	r4, r0
   10d86:	d106      	bne.n	10d96 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   10d88:	8e0c      	ldrh	r4, [r1, #48]	; 0x30
   10d8a:	429c      	cmp	r4, r3
   10d8c:	bf02      	ittt	eq
   10d8e:	8d8b      	ldrheq	r3, [r1, #44]	; 0x2c
   10d90:	4563      	cmpeq	r3, ip
   10d92:	2300      	moveq	r3, #0
   10d94:	d001      	beq.n	10d9a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x36>
   10d96:	f04f 0301 	mov.w	r3, #1
   10d9a:	7313      	strb	r3, [r2, #12]
   10d9c:	8548      	strh	r0, [r1, #42]	; 0x2a
   10d9e:	8950      	ldrh	r0, [r2, #10]
   10da0:	85c8      	strh	r0, [r1, #46]	; 0x2e
   10da2:	8890      	ldrh	r0, [r2, #4]
   10da4:	8588      	strh	r0, [r1, #44]	; 0x2c
   10da6:	88d0      	ldrh	r0, [r2, #6]
   10da8:	8608      	strh	r0, [r1, #48]	; 0x30
   10daa:	f04f 0001 	mov.w	r0, #1
   10dae:	7010      	strb	r0, [r2, #0]
   10db0:	bc30      	pop	{r4, r5}
   10db2:	4770      	bx	lr

00010db4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   10db4:	b570      	push	{r4, r5, r6, lr}
   10db6:	460c      	mov	r4, r1
   10db8:	4616      	mov	r6, r2
   10dba:	6841      	ldr	r1, [r0, #4]
   10dbc:	2596      	movs	r5, #150	; 0x96
   10dbe:	f641 524c 	movw	r2, #7500	; 0x1d4c
   10dc2:	4291      	cmp	r1, r2
   10dc4:	bf38      	it	cc
   10dc6:	254d      	movcc	r5, #77	; 0x4d
   10dc8:	f7f6 f98e 	bl	70e8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x68>
   10dcc:	4428      	add	r0, r5
   10dce:	4430      	add	r0, r6
   10dd0:	42a0      	cmp	r0, r4
   10dd2:	bf94      	ite	ls
   10dd4:	1a20      	subls	r0, r4, r0
   10dd6:	2000      	movhi	r0, #0
   10dd8:	bd70      	pop	{r4, r5, r6, pc}

00010dda <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   10dda:	b4f0      	push	{r4, r5, r6, r7}
   10ddc:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   10de0:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
   10de2:	8e46      	ldrh	r6, [r0, #50]	; 0x32
   10de4:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
   10de6:	428a      	cmp	r2, r1
   10de8:	bf28      	it	cs
   10dea:	460a      	movcs	r2, r1
   10dec:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
   10df0:	f04f 0c00 	mov.w	ip, #0
   10df4:	f011 0f0c 	tst.w	r1, #12
   10df8:	bf18      	it	ne
   10dfa:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   10dfe:	d106      	bne.n	10e0e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x34>
   10e00:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   10e04:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
   10e08:	428b      	cmp	r3, r1
   10e0a:	bf38      	it	cc
   10e0c:	4619      	movcc	r1, r3
   10e0e:	8642      	strh	r2, [r0, #50]	; 0x32
   10e10:	86c1      	strh	r1, [r0, #54]	; 0x36
   10e12:	8f04      	ldrh	r4, [r0, #56]	; 0x38
   10e14:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   10e16:	4294      	cmp	r4, r2
   10e18:	bf38      	it	cc
   10e1a:	4614      	movcc	r4, r2
   10e1c:	428b      	cmp	r3, r1
   10e1e:	bf38      	it	cc
   10e20:	460b      	movcc	r3, r1
   10e22:	8704      	strh	r4, [r0, #56]	; 0x38
   10e24:	8743      	strh	r3, [r0, #58]	; 0x3a
   10e26:	42b2      	cmp	r2, r6
   10e28:	bf0a      	itet	eq
   10e2a:	42a9      	cmpeq	r1, r5
   10e2c:	2301      	movne	r3, #1
   10e2e:	2300      	moveq	r3, #0
   10e30:	8e05      	ldrh	r5, [r0, #48]	; 0x30
   10e32:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   10e36:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   10e38:	8e84      	ldrh	r4, [r0, #52]	; 0x34
   10e3a:	428a      	cmp	r2, r1
   10e3c:	bf28      	it	cs
   10e3e:	460a      	movcs	r2, r1
   10e40:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
   10e44:	f011 0f0c 	tst.w	r1, #12
   10e48:	bf18      	it	ne
   10e4a:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   10e4e:	d106      	bne.n	10e5e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
   10e50:	f8b0 6046 	ldrh.w	r6, [r0, #70]	; 0x46
   10e54:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
   10e58:	428e      	cmp	r6, r1
   10e5a:	bf38      	it	cc
   10e5c:	4631      	movcc	r1, r6
   10e5e:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
   10e62:	2e02      	cmp	r6, #2
   10e64:	d00a      	beq.n	10e7c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
   10e66:	8602      	strh	r2, [r0, #48]	; 0x30
   10e68:	8681      	strh	r1, [r0, #52]	; 0x34
   10e6a:	42aa      	cmp	r2, r5
   10e6c:	bf0a      	itet	eq
   10e6e:	42a1      	cmpeq	r1, r4
   10e70:	2001      	movne	r0, #1
   10e72:	2000      	moveq	r0, #0
   10e74:	ea40 0003 	orr.w	r0, r0, r3
   10e78:	bcf0      	pop	{r4, r5, r6, r7}
   10e7a:	4770      	bx	lr
   10e7c:	4295      	cmp	r5, r2
   10e7e:	bf38      	it	cc
   10e80:	462a      	movcc	r2, r5
   10e82:	428c      	cmp	r4, r1
   10e84:	bf38      	it	cc
   10e86:	4621      	movcc	r1, r4
   10e88:	f880 c05c 	strb.w	ip, [r0, #92]	; 0x5c
   10e8c:	e7eb      	b.n	10e66 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8c>

00010e8e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   10e8e:	b570      	push	{r4, r5, r6, lr}
   10e90:	4615      	mov	r5, r2
   10e92:	460e      	mov	r6, r1
   10e94:	4604      	mov	r4, r0
   10e96:	f7f6 f927 	bl	70e8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x68>
   10e9a:	6863      	ldr	r3, [r4, #4]
   10e9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10e9e:	4299      	cmp	r1, r3
   10ea0:	bf38      	it	cc
   10ea2:	460b      	movcc	r3, r1
   10ea4:	1b99      	subs	r1, r3, r6
   10ea6:	4428      	add	r0, r5
   10ea8:	4288      	cmp	r0, r1
   10eaa:	bf38      	it	cc
   10eac:	4608      	movcc	r0, r1
   10eae:	62e0      	str	r0, [r4, #44]	; 0x2c
   10eb0:	bd70      	pop	{r4, r5, r6, pc}

00010eb2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   10eb2:	221b      	movs	r2, #27
   10eb4:	8402      	strh	r2, [r0, #32]
   10eb6:	8382      	strh	r2, [r0, #28]
   10eb8:	82c2      	strh	r2, [r0, #22]
   10eba:	8282      	strh	r2, [r0, #20]
   10ebc:	8142      	strh	r2, [r0, #10]
   10ebe:	8202      	strh	r2, [r0, #16]
   10ec0:	8102      	strh	r2, [r0, #8]
   10ec2:	8542      	strh	r2, [r0, #42]	; 0x2a
   10ec4:	8582      	strh	r2, [r0, #44]	; 0x2c
   10ec6:	8482      	strh	r2, [r0, #36]	; 0x24
   10ec8:	b159      	cbz	r1, 10ee2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   10eca:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   10ece:	8441      	strh	r1, [r0, #34]	; 0x22
   10ed0:	83c1      	strh	r1, [r0, #30]
   10ed2:	8341      	strh	r1, [r0, #26]
   10ed4:	8301      	strh	r1, [r0, #24]
   10ed6:	81c1      	strh	r1, [r0, #14]
   10ed8:	8241      	strh	r1, [r0, #18]
   10eda:	8181      	strh	r1, [r0, #12]
   10edc:	85c1      	strh	r1, [r0, #46]	; 0x2e
   10ede:	8601      	strh	r1, [r0, #48]	; 0x30
   10ee0:	4770      	bx	lr
   10ee2:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10ee6:	8441      	strh	r1, [r0, #34]	; 0x22
   10ee8:	83c1      	strh	r1, [r0, #30]
   10eea:	8341      	strh	r1, [r0, #26]
   10eec:	8301      	strh	r1, [r0, #24]
   10eee:	81c1      	strh	r1, [r0, #14]
   10ef0:	8241      	strh	r1, [r0, #18]
   10ef2:	8181      	strh	r1, [r0, #12]
   10ef4:	85c1      	strh	r1, [r0, #46]	; 0x2e
   10ef6:	8601      	strh	r1, [r0, #48]	; 0x30
   10ef8:	4770      	bx	lr

00010efa <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   10efa:	6800      	ldr	r0, [r0, #0]
   10efc:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   10f00:	4290      	cmp	r0, r2
   10f02:	bf9c      	itt	ls
   10f04:	2000      	movls	r0, #0
   10f06:	4770      	bxls	lr
   10f08:	1a40      	subs	r0, r0, r1
   10f0a:	389c      	subs	r0, #156	; 0x9c
   10f0c:	0840      	lsrs	r0, r0, #1
   10f0e:	4770      	bx	lr

00010f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   10f10:	f8dd c000 	ldr.w	ip, [sp]
   10f14:	8281      	strh	r1, [r0, #20]
   10f16:	82c2      	strh	r2, [r0, #22]
   10f18:	8303      	strh	r3, [r0, #24]
   10f1a:	f8a0 c01a 	strh.w	ip, [r0, #26]
   10f1e:	4770      	bx	lr

00010f20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   10f20:	8050      	strh	r0, [r2, #2]
   10f22:	8a88      	ldrh	r0, [r1, #20]
   10f24:	8090      	strh	r0, [r2, #4]
   10f26:	8ac8      	ldrh	r0, [r1, #22]
   10f28:	80d0      	strh	r0, [r2, #6]
   10f2a:	8b08      	ldrh	r0, [r1, #24]
   10f2c:	8110      	strh	r0, [r2, #8]
   10f2e:	8b48      	ldrh	r0, [r1, #26]
   10f30:	8150      	strh	r0, [r2, #10]
   10f32:	2001      	movs	r0, #1
   10f34:	7010      	strb	r0, [r2, #0]
   10f36:	4770      	bx	lr
   10f38:	2001      	movs	r0, #1
   10f3a:	f7f6 bdd5 	b.w	7ae8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10f3e:	2001      	movs	r0, #1
   10f40:	f7f6 bdd2 	b.w	7ae8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10f44:	b510      	push	{r4, lr}
   10f46:	f7f7 f845 	bl	7fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   10f4a:	2800      	cmp	r0, #0
   10f4c:	bf18      	it	ne
   10f4e:	bd10      	popne	{r4, pc}
   10f50:	2000      	movs	r0, #0
   10f52:	f7f6 fdc9 	bl	7ae8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10f56:	2000      	movs	r0, #0
   10f58:	bd10      	pop	{r4, pc}
   10f5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f5e:	f244 2455 	movw	r4, #16981	; 0x4255
   10f62:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   10f66:	f04f 0910 	mov.w	r9, #16
   10f6a:	f00c 0801 	and.w	r8, ip, #1
   10f6e:	f3cc 0a40 	ubfx	sl, ip, #1, #1
   10f72:	f100 0c0b 	add.w	ip, r0, #11
   10f76:	fb0c fc04 	mul.w	ip, ip, r4
   10f7a:	ea4f 579c 	mov.w	r7, ip, lsr #22
   10f7e:	ea58 0b0a 	orrs.w	fp, r8, sl
   10f82:	f44f 75c8 	mov.w	r5, #400	; 0x190
   10f86:	f44f 76bf 	mov.w	r6, #382	; 0x17e
   10f8a:	f04f 0400 	mov.w	r4, #0
   10f8e:	f04f 0c40 	mov.w	ip, #64	; 0x40
   10f92:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
   10f96:	f000 810b 	beq.w	111b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x290>
   10f9a:	f1ba 0f00 	cmp.w	sl, #0
   10f9e:	d01c      	beq.n	10fda <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
   10fa0:	2a08      	cmp	r2, #8
   10fa2:	bf04      	itt	eq
   10fa4:	46ab      	moveq	fp, r5
   10fa6:	f04f 0a40 	moveq.w	sl, #64	; 0x40
   10faa:	d00f      	beq.n	10fcc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xac>
   10fac:	2a04      	cmp	r2, #4
   10fae:	bf04      	itt	eq
   10fb0:	46b3      	moveq	fp, r6
   10fb2:	f04f 0a10 	moveq.w	sl, #16
   10fb6:	d009      	beq.n	10fcc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xac>
   10fb8:	2a02      	cmp	r2, #2
   10fba:	bf07      	ittee	eq
   10fbc:	f104 0b18 	addeq.w	fp, r4, #24
   10fc0:	f04f 0a04 	moveq.w	sl, #4
   10fc4:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
   10fc8:	f04f 0a08 	movne.w	sl, #8
   10fcc:	eb0a 0e8a 	add.w	lr, sl, sl, lsl #2
   10fd0:	eb0e 1a8a 	add.w	sl, lr, sl, lsl #6
   10fd4:	44da      	add	sl, fp
   10fd6:	4451      	add	r1, sl
   10fd8:	e03b      	b.n	11052 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x132>
   10fda:	b1d3      	cbz	r3, 11012 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
   10fdc:	2a08      	cmp	r2, #8
   10fde:	bf04      	itt	eq
   10fe0:	46aa      	moveq	sl, r5
   10fe2:	f04f 0b40 	moveq.w	fp, #64	; 0x40
   10fe6:	d00f      	beq.n	11008 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe8>
   10fe8:	2a04      	cmp	r2, #4
   10fea:	bf04      	itt	eq
   10fec:	46b2      	moveq	sl, r6
   10fee:	f04f 0b10 	moveq.w	fp, #16
   10ff2:	d009      	beq.n	11008 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe8>
   10ff4:	2a02      	cmp	r2, #2
   10ff6:	bf07      	ittee	eq
   10ff8:	f104 0a18 	addeq.w	sl, r4, #24
   10ffc:	f04f 0b04 	moveq.w	fp, #4
   11000:	f104 0a28 	addne.w	sl, r4, #40	; 0x28
   11004:	f04f 0b08 	movne.w	fp, #8
   11008:	eb0b 1b8b 	add.w	fp, fp, fp, lsl #6
   1100c:	eb0a 0a8b 	add.w	sl, sl, fp, lsl #2
   11010:	e01e      	b.n	11050 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x130>
   11012:	28ff      	cmp	r0, #255	; 0xff
   11014:	bf34      	ite	cc
   11016:	4682      	movcc	sl, r0
   11018:	f04f 0aff 	movcs.w	sl, #255	; 0xff
   1101c:	f10a 0a05 	add.w	sl, sl, #5
   11020:	2a08      	cmp	r2, #8
   11022:	d024      	beq.n	1106e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x14e>
   11024:	2a04      	cmp	r2, #4
   11026:	bf04      	itt	eq
   11028:	fb0a 1a09 	mlaeq	sl, sl, r9, r1
   1102c:	212e      	moveq	r1, #46	; 0x2e
   1102e:	d021      	beq.n	11074 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x154>
   11030:	2a02      	cmp	r2, #2
   11032:	bf0c      	ite	eq
   11034:	f04f 0b04 	moveq.w	fp, #4
   11038:	f04f 0b08 	movne.w	fp, #8
   1103c:	fb0a 1a0b 	mla	sl, sl, fp, r1
   11040:	bf07      	ittee	eq
   11042:	4621      	moveq	r1, r4
   11044:	f04f 0b18 	moveq.w	fp, #24
   11048:	2100      	movne	r1, #0
   1104a:	f04f 0b28 	movne.w	fp, #40	; 0x28
   1104e:	4459      	add	r1, fp
   11050:	4451      	add	r1, sl
   11052:	319c      	adds	r1, #156	; 0x9c
   11054:	f002 0a0c 	and.w	sl, r2, #12
   11058:	f1ba 0f00 	cmp.w	sl, #0
   1105c:	bf18      	it	ne
   1105e:	f04f 0a28 	movne.w	sl, #40	; 0x28
   11062:	4451      	add	r1, sl
   11064:	bf18      	it	ne
   11066:	f501 6141 	addne.w	r1, r1, #3088	; 0xc10
   1106a:	d123      	bne.n	110b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x194>
   1106c:	e005      	b.n	1107a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x15a>
   1106e:	fb0a 1a0c 	mla	sl, sl, ip, r1
   11072:	4661      	mov	r1, ip
   11074:	f44f 7ba8 	mov.w	fp, #336	; 0x150
   11078:	e7e9      	b.n	1104e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x12e>
   1107a:	2a08      	cmp	r2, #8
   1107c:	bf04      	itt	eq
   1107e:	46ab      	moveq	fp, r5
   11080:	f04f 0a40 	moveq.w	sl, #64	; 0x40
   11084:	d00f      	beq.n	110a6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x186>
   11086:	2a04      	cmp	r2, #4
   11088:	bf04      	itt	eq
   1108a:	46b3      	moveq	fp, r6
   1108c:	f04f 0a10 	moveq.w	sl, #16
   11090:	d009      	beq.n	110a6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x186>
   11092:	2a02      	cmp	r2, #2
   11094:	bf07      	ittee	eq
   11096:	f104 0b18 	addeq.w	fp, r4, #24
   1109a:	f04f 0a04 	moveq.w	sl, #4
   1109e:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
   110a2:	f04f 0a08 	movne.w	sl, #8
   110a6:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   110aa:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   110ae:	eb0b 0a4a 	add.w	sl, fp, sl, lsl #1
   110b2:	4451      	add	r1, sl
   110b4:	3198      	adds	r1, #152	; 0x98
   110b6:	f1b8 0f00 	cmp.w	r8, #0
   110ba:	d017      	beq.n	110ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1cc>
   110bc:	2a08      	cmp	r2, #8
   110be:	bf08      	it	eq
   110c0:	2040      	moveq	r0, #64	; 0x40
   110c2:	d00c      	beq.n	110de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1be>
   110c4:	2a04      	cmp	r2, #4
   110c6:	bf04      	itt	eq
   110c8:	4635      	moveq	r5, r6
   110ca:	2010      	moveq	r0, #16
   110cc:	d007      	beq.n	110de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1be>
   110ce:	2a02      	cmp	r2, #2
   110d0:	bf07      	ittee	eq
   110d2:	f104 0518 	addeq.w	r5, r4, #24
   110d6:	2004      	moveq	r0, #4
   110d8:	f104 0528 	addne.w	r5, r4, #40	; 0x28
   110dc:	2008      	movne	r0, #8
   110de:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   110e2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   110e6:	4428      	add	r0, r5
   110e8:	4401      	add	r1, r0
   110ea:	e05d      	b.n	111a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x288>
   110ec:	b1db      	cbz	r3, 11126 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x206>
   110ee:	2a08      	cmp	r2, #8
   110f0:	bf04      	itt	eq
   110f2:	462b      	moveq	r3, r5
   110f4:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   110f8:	d00f      	beq.n	1111a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1fa>
   110fa:	2a04      	cmp	r2, #4
   110fc:	bf04      	itt	eq
   110fe:	4633      	moveq	r3, r6
   11100:	f04f 0c10 	moveq.w	ip, #16
   11104:	d009      	beq.n	1111a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1fa>
   11106:	2a02      	cmp	r2, #2
   11108:	bf07      	ittee	eq
   1110a:	f104 0318 	addeq.w	r3, r4, #24
   1110e:	f04f 0c04 	moveq.w	ip, #4
   11112:	f104 0328 	addne.w	r3, r4, #40	; 0x28
   11116:	f04f 0c08 	movne.w	ip, #8
   1111a:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
   1111e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   11122:	4419      	add	r1, r3
   11124:	e020      	b.n	11168 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x248>
   11126:	28ff      	cmp	r0, #255	; 0xff
   11128:	bf34      	ite	cc
   1112a:	4603      	movcc	r3, r0
   1112c:	23ff      	movcs	r3, #255	; 0xff
   1112e:	1d5b      	adds	r3, r3, #5
   11130:	2a08      	cmp	r2, #8
   11132:	bf08      	it	eq
   11134:	fb03 110c 	mlaeq	r1, r3, ip, r1
   11138:	d01f      	beq.n	1117a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x25a>
   1113a:	2a04      	cmp	r2, #4
   1113c:	bf04      	itt	eq
   1113e:	fb03 1109 	mlaeq	r1, r3, r9, r1
   11142:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
   11146:	d018      	beq.n	1117a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x25a>
   11148:	2a02      	cmp	r2, #2
   1114a:	bf0c      	ite	eq
   1114c:	f04f 0c04 	moveq.w	ip, #4
   11150:	f04f 0c08 	movne.w	ip, #8
   11154:	fb03 110c 	mla	r1, r3, ip, r1
   11158:	bf07      	ittee	eq
   1115a:	46a4      	moveq	ip, r4
   1115c:	2318      	moveq	r3, #24
   1115e:	f04f 0c00 	movne.w	ip, #0
   11162:	2328      	movne	r3, #40	; 0x28
   11164:	4463      	add	r3, ip
   11166:	4419      	add	r1, r3
   11168:	28eb      	cmp	r0, #235	; 0xeb
   1116a:	d91d      	bls.n	111a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x288>
   1116c:	2a08      	cmp	r2, #8
   1116e:	d00a      	beq.n	11186 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x266>
   11170:	2a04      	cmp	r2, #4
   11172:	d005      	beq.n	11180 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x260>
   11174:	2a02      	cmp	r2, #2
   11176:	d008      	beq.n	1118a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x26a>
   11178:	e00b      	b.n	11192 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x272>
   1117a:	f44f 73a8 	mov.w	r3, #336	; 0x150
   1117e:	e7f1      	b.n	11164 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x244>
   11180:	4635      	mov	r5, r6
   11182:	2010      	movs	r0, #16
   11184:	e008      	b.n	11198 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x278>
   11186:	2040      	movs	r0, #64	; 0x40
   11188:	e006      	b.n	11198 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x278>
   1118a:	f104 0518 	add.w	r5, r4, #24
   1118e:	2004      	movs	r0, #4
   11190:	e002      	b.n	11198 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x278>
   11192:	f104 0528 	add.w	r5, r4, #40	; 0x28
   11196:	2008      	movs	r0, #8
   11198:	eb00 1080 	add.w	r0, r0, r0, lsl #6
   1119c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   111a0:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   111a4:	fb07 1100 	mla	r1, r7, r0, r1
   111a8:	f101 00ea 	add.w	r0, r1, #234	; 0xea
   111ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111b0:	b1db      	cbz	r3, 111ea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2ca>
   111b2:	2a08      	cmp	r2, #8
   111b4:	bf04      	itt	eq
   111b6:	462b      	moveq	r3, r5
   111b8:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   111bc:	d00f      	beq.n	111de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2be>
   111be:	2a04      	cmp	r2, #4
   111c0:	bf04      	itt	eq
   111c2:	4633      	moveq	r3, r6
   111c4:	f04f 0c10 	moveq.w	ip, #16
   111c8:	d009      	beq.n	111de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2be>
   111ca:	2a02      	cmp	r2, #2
   111cc:	bf07      	ittee	eq
   111ce:	f104 0318 	addeq.w	r3, r4, #24
   111d2:	f04f 0c04 	moveq.w	ip, #4
   111d6:	f104 0328 	addne.w	r3, r4, #40	; 0x28
   111da:	f04f 0c08 	movne.w	ip, #8
   111de:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
   111e2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   111e6:	4419      	add	r1, r3
   111e8:	e020      	b.n	1122c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30c>
   111ea:	28ff      	cmp	r0, #255	; 0xff
   111ec:	bf34      	ite	cc
   111ee:	4603      	movcc	r3, r0
   111f0:	23ff      	movcs	r3, #255	; 0xff
   111f2:	1d5b      	adds	r3, r3, #5
   111f4:	2a08      	cmp	r2, #8
   111f6:	bf08      	it	eq
   111f8:	fb03 110c 	mlaeq	r1, r3, ip, r1
   111fc:	d01f      	beq.n	1123e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x31e>
   111fe:	2a04      	cmp	r2, #4
   11200:	bf04      	itt	eq
   11202:	fb03 1109 	mlaeq	r1, r3, r9, r1
   11206:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
   1120a:	d018      	beq.n	1123e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x31e>
   1120c:	2a02      	cmp	r2, #2
   1120e:	bf0c      	ite	eq
   11210:	f04f 0c04 	moveq.w	ip, #4
   11214:	f04f 0c08 	movne.w	ip, #8
   11218:	fb03 110c 	mla	r1, r3, ip, r1
   1121c:	bf07      	ittee	eq
   1121e:	46a4      	moveq	ip, r4
   11220:	2318      	moveq	r3, #24
   11222:	f04f 0c00 	movne.w	ip, #0
   11226:	2328      	movne	r3, #40	; 0x28
   11228:	4463      	add	r3, ip
   1122a:	4419      	add	r1, r3
   1122c:	28eb      	cmp	r0, #235	; 0xeb
   1122e:	d9bb      	bls.n	111a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x288>
   11230:	2a08      	cmp	r2, #8
   11232:	d0a8      	beq.n	11186 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x266>
   11234:	2a04      	cmp	r2, #4
   11236:	d0a3      	beq.n	11180 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x260>
   11238:	2a02      	cmp	r2, #2
   1123a:	d1aa      	bne.n	11192 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x272>
   1123c:	e7a5      	b.n	1118a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x26a>
   1123e:	f44f 73a8 	mov.w	r3, #336	; 0x150
   11242:	e7f1      	b.n	11228 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x308>
   11244:	2902      	cmp	r1, #2
   11246:	bf08      	it	eq
   11248:	f44f 727a 	moveq.w	r2, #1000	; 0x3e8
   1124c:	d005      	beq.n	1125a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x33a>
   1124e:	2901      	cmp	r1, #1
   11250:	bf0c      	ite	eq
   11252:	f640 0234 	movweq	r2, #2100	; 0x834
   11256:	f640 2228 	movwne	r2, #2600	; 0xa28
   1125a:	f24a 13df 	movw	r3, #41439	; 0xa1df
   1125e:	441a      	add	r2, r3
   11260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11264:	fbb2 fcf3 	udiv	ip, r2, r3
   11268:	2908      	cmp	r1, #8
   1126a:	bf08      	it	eq
   1126c:	2340      	moveq	r3, #64	; 0x40
   1126e:	d00a      	beq.n	11286 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x366>
   11270:	2904      	cmp	r1, #4
   11272:	bf08      	it	eq
   11274:	2310      	moveq	r3, #16
   11276:	d006      	beq.n	11286 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x366>
   11278:	2902      	cmp	r1, #2
   1127a:	bf07      	ittee	eq
   1127c:	2304      	moveq	r3, #4
   1127e:	2212      	moveq	r2, #18
   11280:	2308      	movne	r3, #8
   11282:	2219      	movne	r2, #25
   11284:	e000      	b.n	11288 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x368>
   11286:	2214      	movs	r2, #20
   11288:	fb13 f202 	smulbb	r2, r3, r2
   1128c:	2908      	cmp	r1, #8
   1128e:	bf08      	it	eq
   11290:	2340      	moveq	r3, #64	; 0x40
   11292:	d012      	beq.n	112ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x39a>
   11294:	2904      	cmp	r1, #4
   11296:	bf08      	it	eq
   11298:	232e      	moveq	r3, #46	; 0x2e
   1129a:	d00e      	beq.n	112ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x39a>
   1129c:	2300      	movs	r3, #0
   1129e:	2902      	cmp	r1, #2
   112a0:	bf0c      	ite	eq
   112a2:	2118      	moveq	r1, #24
   112a4:	2128      	movne	r1, #40	; 0x28
   112a6:	4419      	add	r1, r3
   112a8:	4411      	add	r1, r2
   112aa:	fb01 c100 	mla	r1, r1, r0, ip
   112ae:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   112b2:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   112b6:	4408      	add	r0, r1
   112b8:	4770      	bx	lr
   112ba:	f44f 71a8 	mov.w	r1, #336	; 0x150
   112be:	e7f2      	b.n	112a6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x386>
   112c0:	2001      	movs	r0, #1
   112c2:	f7f6 bc11 	b.w	7ae8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>

000112c6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   112c6:	b510      	push	{r4, lr}
   112c8:	7001      	strb	r1, [r0, #0]
   112ca:	7042      	strb	r2, [r0, #1]
   112cc:	7880      	ldrb	r0, [r0, #2]
   112ce:	f3c0 0380 	ubfx	r3, r0, #2, #1
   112d2:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   112d6:	4463      	add	r3, ip
   112d8:	f000 0001 	and.w	r0, r0, #1
   112dc:	4418      	add	r0, r3
   112de:	fb10 f001 	smulbb	r0, r0, r1
   112e2:	fb10 f002 	smulbb	r0, r0, r2
   112e6:	28ff      	cmp	r0, #255	; 0xff
   112e8:	bf38      	it	cc
   112ea:	bd10      	popcc	{r4, pc}
   112ec:	215c      	movs	r1, #92	; 0x5c
   112ee:	202e      	movs	r0, #46	; 0x2e
   112f0:	f7f2 fc8e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000112f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   112f4:	7881      	ldrb	r1, [r0, #2]
   112f6:	f3c1 0280 	ubfx	r2, r1, #2, #1
   112fa:	f3c1 0340 	ubfx	r3, r1, #1, #1
   112fe:	441a      	add	r2, r3
   11300:	f001 0101 	and.w	r1, r1, #1
   11304:	4411      	add	r1, r2
   11306:	7842      	ldrb	r2, [r0, #1]
   11308:	7800      	ldrb	r0, [r0, #0]
   1130a:	fb12 f000 	smulbb	r0, r2, r0
   1130e:	4348      	muls	r0, r1
   11310:	b2c0      	uxtb	r0, r0
   11312:	4770      	bx	lr

00011314 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   11314:	7882      	ldrb	r2, [r0, #2]
   11316:	2100      	movs	r1, #0
   11318:	f012 0f01 	tst.w	r2, #1
   1131c:	d005      	beq.n	1132a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   1131e:	78c3      	ldrb	r3, [r0, #3]
   11320:	f013 0f01 	tst.w	r3, #1
   11324:	bf08      	it	eq
   11326:	2101      	moveq	r1, #1
   11328:	d010      	beq.n	1134c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   1132a:	f012 0f02 	tst.w	r2, #2
   1132e:	d005      	beq.n	1133c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   11330:	78c3      	ldrb	r3, [r0, #3]
   11332:	f013 0f02 	tst.w	r3, #2
   11336:	bf08      	it	eq
   11338:	2102      	moveq	r1, #2
   1133a:	d007      	beq.n	1134c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   1133c:	f012 0f04 	tst.w	r2, #4
   11340:	d004      	beq.n	1134c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   11342:	78c3      	ldrb	r3, [r0, #3]
   11344:	f013 0f04 	tst.w	r3, #4
   11348:	bf08      	it	eq
   1134a:	2104      	moveq	r1, #4
   1134c:	7943      	ldrb	r3, [r0, #5]
   1134e:	1c5b      	adds	r3, r3, #1
   11350:	b2db      	uxtb	r3, r3
   11352:	7143      	strb	r3, [r0, #5]
   11354:	f890 c001 	ldrb.w	ip, [r0, #1]
   11358:	4563      	cmp	r3, ip
   1135a:	d10d      	bne.n	11378 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   1135c:	2300      	movs	r3, #0
   1135e:	7143      	strb	r3, [r0, #5]
   11360:	f890 c003 	ldrb.w	ip, [r0, #3]
   11364:	ea4c 0c01 	orr.w	ip, ip, r1
   11368:	f880 c003 	strb.w	ip, [r0, #3]
   1136c:	4594      	cmp	ip, r2
   1136e:	d103      	bne.n	11378 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   11370:	70c3      	strb	r3, [r0, #3]
   11372:	7902      	ldrb	r2, [r0, #4]
   11374:	1c52      	adds	r2, r2, #1
   11376:	7102      	strb	r2, [r0, #4]
   11378:	2901      	cmp	r1, #1
   1137a:	bf04      	itt	eq
   1137c:	2025      	moveq	r0, #37	; 0x25
   1137e:	4770      	bxeq	lr
   11380:	2902      	cmp	r1, #2
   11382:	bf04      	itt	eq
   11384:	2026      	moveq	r0, #38	; 0x26
   11386:	4770      	bxeq	lr
   11388:	2904      	cmp	r1, #4
   1138a:	bf04      	itt	eq
   1138c:	2027      	moveq	r0, #39	; 0x27
   1138e:	4770      	bxeq	lr
   11390:	b510      	push	{r4, lr}
   11392:	2139      	movs	r1, #57	; 0x39
   11394:	202e      	movs	r0, #46	; 0x2e
   11396:	f7f2 fc3b 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001139a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   1139a:	7081      	strb	r1, [r0, #2]
   1139c:	4770      	bx	lr

0001139e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   1139e:	b410      	push	{r4}
   113a0:	7881      	ldrb	r1, [r0, #2]
   113a2:	f3c1 0280 	ubfx	r2, r1, #2, #1
   113a6:	f3c1 0340 	ubfx	r3, r1, #1, #1
   113aa:	441a      	add	r2, r3
   113ac:	f001 0101 	and.w	r1, r1, #1
   113b0:	7843      	ldrb	r3, [r0, #1]
   113b2:	4411      	add	r1, r2
   113b4:	fb13 f201 	smulbb	r2, r3, r1
   113b8:	78c1      	ldrb	r1, [r0, #3]
   113ba:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   113be:	f3c1 0440 	ubfx	r4, r1, #1, #1
   113c2:	44a4      	add	ip, r4
   113c4:	f001 0101 	and.w	r1, r1, #1
   113c8:	4461      	add	r1, ip
   113ca:	f890 c005 	ldrb.w	ip, [r0, #5]
   113ce:	fb11 c103 	smlabb	r1, r1, r3, ip
   113d2:	7803      	ldrb	r3, [r0, #0]
   113d4:	7900      	ldrb	r0, [r0, #4]
   113d6:	1a18      	subs	r0, r3, r0
   113d8:	fb10 f002 	smulbb	r0, r0, r2
   113dc:	1a40      	subs	r0, r0, r1
   113de:	bc10      	pop	{r4}
   113e0:	b2c0      	uxtb	r0, r0
   113e2:	4770      	bx	lr

000113e4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   113e4:	b510      	push	{r4, lr}
   113e6:	4604      	mov	r4, r0
   113e8:	f001 fa88 	bl	128fc <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   113ec:	2001      	movs	r0, #1
   113ee:	7060      	strb	r0, [r4, #1]
   113f0:	7020      	strb	r0, [r4, #0]
   113f2:	bd10      	pop	{r4, pc}

000113f4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   113f4:	2100      	movs	r1, #0
   113f6:	70c1      	strb	r1, [r0, #3]
   113f8:	7141      	strb	r1, [r0, #5]
   113fa:	7101      	strb	r1, [r0, #4]
   113fc:	4770      	bx	lr

000113fe <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   113fe:	f240 315a 	movw	r1, #858	; 0x35a
   11402:	4348      	muls	r0, r1
   11404:	4770      	bx	lr

00011406 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   11406:	f240 20ef 	movw	r0, #751	; 0x2ef
   1140a:	4770      	bx	lr
   1140c:	041c020e 	.word	0x041c020e
   11410:	0c600630 	.word	0x0c600630
   11414:	06b4035a 	.word	0x06b4035a
   11418:	0bf505c5 	.word	0x0bf505c5
   1141c:	01a31225 	.word	0x01a31225
   11420:	05bf03b1 	.word	0x05bf03b1
   11424:	064902ef 	.word	0x064902ef
   11428:	09a3      	.short	0x09a3

0001142a <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>:
   1142a:	b570      	push	{r4, r5, r6, lr}
   1142c:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
   11430:	4605      	mov	r5, r0
   11432:	4620      	mov	r0, r4
   11434:	f001 f9a4 	bl	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11438:	f64d 7141 	movw	r1, #57153	; 0xdf41
   1143c:	4408      	add	r0, r1
   1143e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11442:	fbb0 f0f1 	udiv	r0, r0, r1
   11446:	f014 010c 	ands.w	r1, r4, #12
   1144a:	bf18      	it	ne
   1144c:	2128      	movne	r1, #40	; 0x28
   1144e:	4408      	add	r0, r1
   11450:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
   11454:	4628      	mov	r0, r5
   11456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1145a:	f44f 71a8 	mov.w	r1, #336	; 0x150
   1145e:	f7ff bd16 	b.w	10e8e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>

00011462 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
   11462:	b570      	push	{r4, r5, r6, lr}
   11464:	4604      	mov	r4, r0
   11466:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
   1146a:	b082      	sub	sp, #8
   1146c:	2800      	cmp	r0, #0
   1146e:	bf07      	ittee	eq
   11470:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
   11474:	2803      	cmpeq	r0, #3
   11476:	b002      	addne	sp, #8
   11478:	bd70      	popne	{r4, r5, r6, pc}
   1147a:	f7fd fc94 	bl	eda6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1147e:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
   11482:	4601      	mov	r1, r0
   11484:	4610      	mov	r0, r2
   11486:	f7ef ffdd 	bl	1444 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1148a:	2800      	cmp	r0, #0
   1148c:	bfdc      	itt	le
   1148e:	b002      	addle	sp, #8
   11490:	bd70      	pople	{r4, r5, r6, pc}
   11492:	6861      	ldr	r1, [r4, #4]
   11494:	2900      	cmp	r1, #0
   11496:	bf14      	ite	ne
   11498:	fbb0 f0f1 	udivne	r0, r0, r1
   1149c:	2000      	moveq	r0, #0
   1149e:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   114a2:	1c40      	adds	r0, r0, #1
   114a4:	4408      	add	r0, r1
   114a6:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   114aa:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
   114ae:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   114b2:	1a08      	subs	r0, r1, r0
   114b4:	b200      	sxth	r0, r0
   114b6:	2800      	cmp	r0, #0
   114b8:	bfdc      	itt	le
   114ba:	b002      	addle	sp, #8
   114bc:	bd70      	pople	{r4, r5, r6, pc}
   114be:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
   114c2:	f7f0 fce9 	bl	1e98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   114c6:	2800      	cmp	r0, #0
   114c8:	bf04      	itt	eq
   114ca:	b002      	addeq	sp, #8
   114cc:	bd70      	popeq	{r4, r5, r6, pc}
   114ce:	2001      	movs	r0, #1
   114d0:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
   114d4:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
   114d8:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   114dc:	ae01      	add	r6, sp, #4
   114de:	1a40      	subs	r0, r0, r1
   114e0:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   114e4:	1e40      	subs	r0, r0, #1
   114e6:	4408      	add	r0, r1
   114e8:	b285      	uxth	r5, r0
   114ea:	e019      	b.n	11520 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xbe>
   114ec:	9600      	str	r6, [sp, #0]
   114ee:	f8b4 1150 	ldrh.w	r1, [r4, #336]	; 0x150
   114f2:	2300      	movs	r3, #0
   114f4:	2201      	movs	r2, #1
   114f6:	4620      	mov	r0, r4
   114f8:	f7f7 fd7e 	bl	8ff8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x268>
   114fc:	2800      	cmp	r0, #0
   114fe:	bf04      	itt	eq
   11500:	b002      	addeq	sp, #8
   11502:	bd70      	popeq	{r4, r5, r6, pc}
   11504:	2801      	cmp	r0, #1
   11506:	d004      	beq.n	11512 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb0>
   11508:	f240 51df 	movw	r1, #1503	; 0x5df
   1150c:	2030      	movs	r0, #48	; 0x30
   1150e:	f7f2 fb7f 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11512:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   11516:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1151a:	4408      	add	r0, r1
   1151c:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   11520:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   11524:	1a28      	subs	r0, r5, r0
   11526:	b200      	sxth	r0, r0
   11528:	2800      	cmp	r0, #0
   1152a:	dadf      	bge.n	114ec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x8a>
   1152c:	b002      	add	sp, #8
   1152e:	bd70      	pop	{r4, r5, r6, pc}
   11530:	00fa01f4 	.word	0x00fa01f4
   11534:	00640096 	.word	0x00640096
   11538:	0032004b 	.word	0x0032004b
   1153c:	0014001e 	.word	0x0014001e
   11540:	0005000a 	.word	0x0005000a
   11544:	00010002 	.word	0x00010002

00011548 <sym_KI22E7SNUU4SSUGQ7PUDMBEHERNXLLCCBKOZDTY>:
   11548:	b570      	push	{r4, r5, r6, lr}
   1154a:	460c      	mov	r4, r1
   1154c:	4605      	mov	r5, r0
   1154e:	f44f 720a 	mov.w	r2, #552	; 0x228
   11552:	2100      	movs	r1, #0
   11554:	4620      	mov	r0, r4
   11556:	f7fd fd99 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1155a:	8025      	strh	r5, [r4, #0]
   1155c:	bd70      	pop	{r4, r5, r6, pc}

0001155e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   1155e:	f7f2 bef7 	b.w	4350 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00011562 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
   11562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11566:	460d      	mov	r5, r1
   11568:	4607      	mov	r7, r0
   1156a:	2101      	movs	r1, #1
   1156c:	f7fe fe51 	bl	10212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11570:	1e04      	subs	r4, r0, #0
   11572:	bf08      	it	eq
   11574:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   11578:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   1157c:	2600      	movs	r6, #0
   1157e:	b1b8      	cbz	r0, 115b0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4e>
   11580:	706e      	strb	r6, [r5, #1]
   11582:	2009      	movs	r0, #9
   11584:	7028      	strb	r0, [r5, #0]
   11586:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   1158a:	b178      	cbz	r0, 115ac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4a>
   1158c:	8466      	strh	r6, [r4, #34]	; 0x22
   1158e:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
   11592:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
   11596:	6068      	str	r0, [r5, #4]
   11598:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
   1159c:	60a8      	str	r0, [r5, #8]
   1159e:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
   115a2:	81a8      	strh	r0, [r5, #12]
   115a4:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   115a8:	2800      	cmp	r0, #0
   115aa:	d1ef      	bne.n	1158c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x2a>
   115ac:	712e      	strb	r6, [r5, #4]
   115ae:	e047      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   115b0:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   115b4:	2800      	cmp	r0, #0
   115b6:	d03a      	beq.n	1162e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xcc>
   115b8:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   115bc:	280d      	cmp	r0, #13
   115be:	d01b      	beq.n	115f8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x96>
   115c0:	280e      	cmp	r0, #14
   115c2:	d004      	beq.n	115ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x6c>
   115c4:	f640 21d3 	movw	r1, #2771	; 0xad3
   115c8:	2031      	movs	r0, #49	; 0x31
   115ca:	f7f2 fb21 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   115ce:	8820      	ldrh	r0, [r4, #0]
   115d0:	f7f2 ff32 	bl	4438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   115d4:	4607      	mov	r7, r0
   115d6:	f7fe fcbc 	bl	ff52 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   115da:	b9a0      	cbnz	r0, 11606 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa4>
   115dc:	706e      	strb	r6, [r5, #1]
   115de:	200e      	movs	r0, #14
   115e0:	7028      	strb	r0, [r5, #0]
   115e2:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   115e6:	7128      	strb	r0, [r5, #4]
   115e8:	8820      	ldrh	r0, [r4, #0]
   115ea:	80e8      	strh	r0, [r5, #6]
   115ec:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   115f0:	4638      	mov	r0, r7
   115f2:	f7fe fcc4 	bl	ff7e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   115f6:	e023      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   115f8:	8820      	ldrh	r0, [r4, #0]
   115fa:	f7f2 ff1d 	bl	4438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   115fe:	4607      	mov	r7, r0
   11600:	f7fe fca7 	bl	ff52 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   11604:	b110      	cbz	r0, 1160c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xaa>
   11606:	2000      	movs	r0, #0
   11608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1160c:	706e      	strb	r6, [r5, #1]
   1160e:	200d      	movs	r0, #13
   11610:	7028      	strb	r0, [r5, #0]
   11612:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   11616:	7128      	strb	r0, [r5, #4]
   11618:	8820      	ldrh	r0, [r4, #0]
   1161a:	80e8      	strh	r0, [r5, #6]
   1161c:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   11620:	7228      	strb	r0, [r5, #8]
   11622:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   11626:	4638      	mov	r0, r7
   11628:	f7fe fca9 	bl	ff7e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   1162c:	e008      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1162e:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
   11632:	b140      	cbz	r0, 11646 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xe4>
   11634:	706e      	strb	r6, [r5, #1]
   11636:	2010      	movs	r0, #16
   11638:	7028      	strb	r0, [r5, #0]
   1163a:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
   1163e:	80af      	strh	r7, [r5, #4]
   11640:	2001      	movs	r0, #1
   11642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11646:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   1164a:	b190      	cbz	r0, 11672 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x110>
   1164c:	706e      	strb	r6, [r5, #1]
   1164e:	200a      	movs	r0, #10
   11650:	7028      	strb	r0, [r5, #0]
   11652:	8820      	ldrh	r0, [r4, #0]
   11654:	80a8      	strh	r0, [r5, #4]
   11656:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   1165a:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
   1165e:	f8c5 0006 	str.w	r0, [r5, #6]
   11662:	f8c5 100a 	str.w	r1, [r5, #10]
   11666:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
   1166a:	81e8      	strh	r0, [r5, #14]
   1166c:	f884 61dc 	strb.w	r6, [r4, #476]	; 0x1dc
   11670:	e7e6      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11672:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   11676:	b180      	cbz	r0, 1169a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x138>
   11678:	706e      	strb	r6, [r5, #1]
   1167a:	201a      	movs	r0, #26
   1167c:	7028      	strb	r0, [r5, #0]
   1167e:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   11682:	2800      	cmp	r0, #0
   11684:	d0dc      	beq.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11686:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
   1168a:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
   1168e:	6068      	str	r0, [r5, #4]
   11690:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   11694:	2800      	cmp	r0, #0
   11696:	d1f6      	bne.n	11686 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x124>
   11698:	e7d2      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1169a:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
   1169e:	b160      	cbz	r0, 116ba <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x158>
   116a0:	706e      	strb	r6, [r5, #1]
   116a2:	2008      	movs	r0, #8
   116a4:	7028      	strb	r0, [r5, #0]
   116a6:	e9d4 0187 	ldrd	r0, r1, [r4, #540]	; 0x21c
   116aa:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
   116ae:	60ea      	str	r2, [r5, #12]
   116b0:	e9c5 0101 	strd	r0, r1, [r5, #4]
   116b4:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
   116b8:	e7c2      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   116ba:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   116be:	b1a0      	cbz	r0, 116ea <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x188>
   116c0:	706e      	strb	r6, [r5, #1]
   116c2:	2015      	movs	r0, #21
   116c4:	7028      	strb	r0, [r5, #0]
   116c6:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   116ca:	2800      	cmp	r0, #0
   116cc:	d0b8      	beq.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   116ce:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
   116d2:	e9d4 017b 	ldrd	r0, r1, [r4, #492]	; 0x1ec
   116d6:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
   116da:	60ea      	str	r2, [r5, #12]
   116dc:	e9c5 0101 	strd	r0, r1, [r5, #4]
   116e0:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   116e4:	2800      	cmp	r0, #0
   116e6:	d1f2      	bne.n	116ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
   116e8:	e7aa      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   116ea:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
   116ee:	b170      	cbz	r0, 1170e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ac>
   116f0:	706e      	strb	r6, [r5, #1]
   116f2:	201c      	movs	r0, #28
   116f4:	7028      	strb	r0, [r5, #0]
   116f6:	f884 61f8 	strb.w	r6, [r4, #504]	; 0x1f8
   116fa:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
   116fe:	6068      	str	r0, [r5, #4]
   11700:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
   11704:	60a8      	str	r0, [r5, #8]
   11706:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
   1170a:	81a8      	strh	r0, [r5, #12]
   1170c:	e798      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1170e:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
   11712:	b138      	cbz	r0, 11724 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1c2>
   11714:	201d      	movs	r0, #29
   11716:	7028      	strb	r0, [r5, #0]
   11718:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
   1171c:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
   11720:	6068      	str	r0, [r5, #4]
   11722:	e78d      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11724:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   11728:	2800      	cmp	r0, #0
   1172a:	bf08      	it	eq
   1172c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   11730:	706e      	strb	r6, [r5, #1]
   11732:	2016      	movs	r0, #22
   11734:	7028      	strb	r0, [r5, #0]
   11736:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   1173a:	2800      	cmp	r0, #0
   1173c:	d080      	beq.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1173e:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
   11742:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
   11746:	6068      	str	r0, [r5, #4]
   11748:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
   1174c:	8128      	strh	r0, [r5, #8]
   1174e:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   11752:	2800      	cmp	r0, #0
   11754:	d1f3      	bne.n	1173e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1dc>
   11756:	e773      	b.n	11640 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>

00011758 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   11758:	2100      	movs	r1, #0
   1175a:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
   1175e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   11762:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
   11766:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
   1176a:	b111      	cbz	r1, 11772 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   1176c:	2102      	movs	r1, #2
   1176e:	f7f7 bb0f 	b.w	8d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   11772:	2103      	movs	r1, #3
   11774:	f7f7 bb0c 	b.w	8d90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>

00011778 <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY>:
   11778:	b570      	push	{r4, r5, r6, lr}
   1177a:	460c      	mov	r4, r1
   1177c:	4615      	mov	r5, r2
   1177e:	4606      	mov	r6, r0
   11780:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   11784:	2100      	movs	r1, #0
   11786:	4620      	mov	r0, r4
   11788:	f7fd fc80 	bl	f08c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1178c:	8026      	strh	r6, [r4, #0]
   1178e:	2d00      	cmp	r5, #0
   11790:	bf1e      	ittt	ne
   11792:	6828      	ldrne	r0, [r5, #0]
   11794:	f8c4 012c 	strne.w	r0, [r4, #300]	; 0x12c
   11798:	bd70      	popne	{r4, r5, r6, pc}
   1179a:	f640 113a 	movw	r1, #2362	; 0x93a
   1179e:	2036      	movs	r0, #54	; 0x36
   117a0:	f7f2 fa36 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000117a4 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   117a4:	f7f2 bdd4 	b.w	4350 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   117a8:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   117ac:	f001 0107 	and.w	r1, r1, #7
   117b0:	7800      	ldrb	r0, [r0, #0]
   117b2:	2201      	movs	r2, #1
   117b4:	408a      	lsls	r2, r1
   117b6:	4010      	ands	r0, r2
   117b8:	40c8      	lsrs	r0, r1
   117ba:	4770      	bx	lr
   117bc:	b118      	cbz	r0, 117c6 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   117be:	2802      	cmp	r0, #2
   117c0:	d001      	beq.n	117c6 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   117c2:	2001      	movs	r0, #1
   117c4:	4770      	bx	lr
   117c6:	2000      	movs	r0, #0
   117c8:	4770      	bx	lr

000117ca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   117ca:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   117ce:	7881      	ldrb	r1, [r0, #2]
   117d0:	4605      	mov	r5, r0
   117d2:	291a      	cmp	r1, #26
   117d4:	d025      	beq.n	11822 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
   117d6:	dc0e      	bgt.n	117f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   117d8:	2916      	cmp	r1, #22
   117da:	d22e      	bcs.n	1183a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   117dc:	e8df f001 	tbb	[pc, r1]
   117e0:	2d2d2d2d 	.word	0x2d2d2d2d
   117e4:	2d2d212d 	.word	0x2d2d212d
   117e8:	2d2d2d2d 	.word	0x2d2d2d2d
   117ec:	2d2d2d2d 	.word	0x2d2d2d2d
   117f0:	212d2d2d 	.word	0x212d2d2d
   117f4:	2121      	.short	0x2121
   117f6:	292a      	cmp	r1, #42	; 0x2a
   117f8:	d01f      	beq.n	1183a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   117fa:	dc0b      	bgt.n	11814 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   117fc:	f1a1 011e 	sub.w	r1, r1, #30
   11800:	290c      	cmp	r1, #12
   11802:	d21a      	bcs.n	1183a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   11804:	e8df f001 	tbb	[pc, r1]
   11808:	19191919 	.word	0x19191919
   1180c:	19191919 	.word	0x19191919
   11810:	0d191919 	.word	0x0d191919
   11814:	393a      	subs	r1, #58	; 0x3a
   11816:	2904      	cmp	r1, #4
   11818:	d20f      	bcs.n	1183a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   1181a:	e8df f001 	tbb	[pc, r1]
   1181e:	020e      	.short	0x020e
   11820:	020e      	.short	0x020e
   11822:	8828      	ldrh	r0, [r5, #0]
   11824:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   11828:	d207      	bcs.n	1183a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   1182a:	2701      	movs	r7, #1
   1182c:	4669      	mov	r1, sp
   1182e:	f7fe fdfc 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11832:	b120      	cbz	r0, 1183e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
   11834:	2002      	movs	r0, #2
   11836:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1183a:	2012      	movs	r0, #18
   1183c:	e7fb      	b.n	11836 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1183e:	f89d 0000 	ldrb.w	r0, [sp]
   11842:	f000 fc84 	bl	1214e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
   11846:	9c01      	ldr	r4, [sp, #4]
   11848:	b110      	cbz	r0, 11850 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x86>
   1184a:	f504 7494 	add.w	r4, r4, #296	; 0x128
   1184e:	e001      	b.n	11854 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   11850:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   11854:	f89d 0000 	ldrb.w	r0, [sp]
   11858:	f000 fc79 	bl	1214e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
   1185c:	9e01      	ldr	r6, [sp, #4]
   1185e:	b110      	cbz	r0, 11866 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x9c>
   11860:	f206 1629 	addw	r6, r6, #297	; 0x129
   11864:	e001      	b.n	1186a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xa0>
   11866:	f206 1689 	addw	r6, r6, #393	; 0x189
   1186a:	4668      	mov	r0, sp
   1186c:	f000 fdce 	bl	1240c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x350>
   11870:	b108      	cbz	r0, 11876 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xac>
   11872:	7820      	ldrb	r0, [r4, #0]
   11874:	b108      	cbz	r0, 1187a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xb0>
   11876:	200c      	movs	r0, #12
   11878:	e7dd      	b.n	11836 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1187a:	7027      	strb	r7, [r4, #0]
   1187c:	78a8      	ldrb	r0, [r5, #2]
   1187e:	7030      	strb	r0, [r6, #0]
   11880:	4668      	mov	r0, sp
   11882:	f7ff fa5f 	bl	10d44 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   11886:	2000      	movs	r0, #0
   11888:	e7d5      	b.n	11836 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0001188a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   1188a:	b510      	push	{r4, lr}
   1188c:	4604      	mov	r4, r0
   1188e:	7800      	ldrb	r0, [r0, #0]
   11890:	b118      	cbz	r0, 1189a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   11892:	2801      	cmp	r0, #1
   11894:	d001      	beq.n	1189a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   11896:	2012      	movs	r0, #18
   11898:	bd10      	pop	{r4, pc}
   1189a:	f000 fd87 	bl	123ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   1189e:	b120      	cbz	r0, 118aa <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   118a0:	f7f4 f94c 	bl	5b3c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   118a4:	b108      	cbz	r0, 118aa <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   118a6:	200c      	movs	r0, #12
   118a8:	bd10      	pop	{r4, pc}
   118aa:	7820      	ldrb	r0, [r4, #0]
   118ac:	f7ff ff86 	bl	117bc <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   118b0:	1de2      	adds	r2, r4, #7
   118b2:	f104 0317 	add.w	r3, r4, #23
   118b6:	1c61      	adds	r1, r4, #1
   118b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   118bc:	f7f4 b98e 	b.w	5bdc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

000118c0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   118c0:	b510      	push	{r4, lr}
   118c2:	4604      	mov	r4, r0
   118c4:	f000 feb6 	bl	12634 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x578>
   118c8:	b108      	cbz	r0, 118ce <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   118ca:	200c      	movs	r0, #12
   118cc:	bd10      	pop	{r4, pc}
   118ce:	7820      	ldrb	r0, [r4, #0]
   118d0:	b128      	cbz	r0, 118de <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   118d2:	2801      	cmp	r0, #1
   118d4:	d003      	beq.n	118de <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   118d6:	28ff      	cmp	r0, #255	; 0xff
   118d8:	d00b      	beq.n	118f2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   118da:	2012      	movs	r0, #18
   118dc:	bd10      	pop	{r4, pc}
   118de:	f7ff ff6d 	bl	117bc <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   118e2:	1c61      	adds	r1, r4, #1
   118e4:	f7f4 fac2 	bl	5e6c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   118e8:	b108      	cbz	r0, 118ee <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   118ea:	2000      	movs	r0, #0
   118ec:	bd10      	pop	{r4, pc}
   118ee:	2007      	movs	r0, #7
   118f0:	bd10      	pop	{r4, pc}
   118f2:	2001      	movs	r0, #1
   118f4:	f7f4 faf6 	bl	5ee4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   118f8:	e7f7      	b.n	118ea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

000118fa <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   118fa:	b510      	push	{r4, lr}
   118fc:	f000 fd56 	bl	123ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   11900:	b120      	cbz	r0, 1190c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   11902:	f7f4 f91b 	bl	5b3c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11906:	b108      	cbz	r0, 1190c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   11908:	200c      	movs	r0, #12
   1190a:	bd10      	pop	{r4, pc}
   1190c:	f7f4 f9cc 	bl	5ca8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   11910:	2000      	movs	r0, #0
   11912:	bd10      	pop	{r4, pc}

00011914 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   11914:	b510      	push	{r4, lr}
   11916:	f000 fe8d 	bl	12634 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x578>
   1191a:	b108      	cbz	r0, 11920 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   1191c:	200c      	movs	r0, #12
   1191e:	bd10      	pop	{r4, pc}
   11920:	f7f4 fae6 	bl	5ef0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   11924:	2000      	movs	r0, #0
   11926:	bd10      	pop	{r4, pc}

00011928 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   11928:	b570      	push	{r4, r5, r6, lr}
   1192a:	4606      	mov	r6, r0
   1192c:	f000 fbc6 	bl	120bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   11930:	2800      	cmp	r0, #0
   11932:	d10c      	bne.n	1194e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x26>
   11934:	8830      	ldrh	r0, [r6, #0]
   11936:	2100      	movs	r1, #0
   11938:	f7fe fc6b 	bl	10212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1193c:	0004      	movs	r4, r0
   1193e:	d007      	beq.n	11950 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   11940:	f000 fd6b 	bl	1241a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
   11944:	b120      	cbz	r0, 11950 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   11946:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
   1194a:	b118      	cbz	r0, 11954 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2c>
   1194c:	203a      	movs	r0, #58	; 0x3a
   1194e:	bd70      	pop	{r4, r5, r6, pc}
   11950:	2002      	movs	r0, #2
   11952:	bd70      	pop	{r4, r5, r6, pc}
   11954:	88b0      	ldrh	r0, [r6, #4]
   11956:	f7fe fd80 	bl	1045a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   1195a:	4605      	mov	r5, r0
   1195c:	4601      	mov	r1, r0
   1195e:	2008      	movs	r0, #8
   11960:	f7fe ff9f 	bl	108a2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   11964:	4601      	mov	r1, r0
   11966:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
   1196a:	4281      	cmp	r1, r0
   1196c:	d301      	bcc.n	11972 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x4a>
   1196e:	42a8      	cmp	r0, r5
   11970:	d301      	bcc.n	11976 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x4e>
   11972:	2012      	movs	r0, #18
   11974:	bd70      	pop	{r4, r5, r6, pc}
   11976:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1197a:	4285      	cmp	r5, r0
   1197c:	d209      	bcs.n	11992 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x6a>
   1197e:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
   11982:	2802      	cmp	r0, #2
   11984:	d103      	bne.n	1198e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
   11986:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1198a:	2802      	cmp	r0, #2
   1198c:	d001      	beq.n	11992 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x6a>
   1198e:	200c      	movs	r0, #12
   11990:	bd70      	pop	{r4, r5, r6, pc}
   11992:	4629      	mov	r1, r5
   11994:	2005      	movs	r0, #5
   11996:	f7fe ff84 	bl	108a2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   1199a:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
   1199e:	2000      	movs	r0, #0
   119a0:	e9c4 0553 	strd	r0, r5, [r4, #332]	; 0x14c
   119a4:	88f0      	ldrh	r0, [r6, #6]
   119a6:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
   119aa:	8930      	ldrh	r0, [r6, #8]
   119ac:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
   119b0:	2001      	movs	r0, #1
   119b2:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
   119b6:	2000      	movs	r0, #0
   119b8:	bd70      	pop	{r4, r5, r6, pc}

000119ba <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   119ba:	b510      	push	{r4, lr}
   119bc:	460b      	mov	r3, r1
   119be:	2201      	movs	r2, #1
   119c0:	f100 0110 	add.w	r1, r0, #16
   119c4:	f7f4 fc4a 	bl	625c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   119c8:	2000      	movs	r0, #0
   119ca:	bd10      	pop	{r4, pc}

000119cc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   119cc:	b510      	push	{r4, lr}
   119ce:	8800      	ldrh	r0, [r0, #0]
   119d0:	2101      	movs	r1, #1
   119d2:	f7fe fc1e 	bl	10212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   119d6:	b118      	cbz	r0, 119e0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   119d8:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
   119dc:	b111      	cbz	r1, 119e4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   119de:	e007      	b.n	119f0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   119e0:	2002      	movs	r0, #2
   119e2:	bd10      	pop	{r4, pc}
   119e4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   119e8:	2914      	cmp	r1, #20
   119ea:	d003      	beq.n	119f4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   119ec:	2915      	cmp	r1, #21
   119ee:	d001      	beq.n	119f4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   119f0:	200c      	movs	r0, #12
   119f2:	bd10      	pop	{r4, pc}
   119f4:	2102      	movs	r1, #2
   119f6:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
   119fa:	2000      	movs	r0, #0
   119fc:	bd10      	pop	{r4, pc}

000119fe <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   119fe:	b570      	push	{r4, r5, r6, lr}
   11a00:	4605      	mov	r5, r0
   11a02:	8800      	ldrh	r0, [r0, #0]
   11a04:	2101      	movs	r1, #1
   11a06:	f7fe fc04 	bl	10212 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11a0a:	0004      	movs	r4, r0
   11a0c:	d003      	beq.n	11a16 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   11a0e:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
   11a12:	b110      	cbz	r0, 11a1a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   11a14:	e00a      	b.n	11a2c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   11a16:	2002      	movs	r0, #2
   11a18:	bd70      	pop	{r4, r5, r6, pc}
   11a1a:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
   11a1e:	2814      	cmp	r0, #20
   11a20:	d001      	beq.n	11a26 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   11a22:	2815      	cmp	r0, #21
   11a24:	d102      	bne.n	11a2c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   11a26:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   11a2a:	b108      	cbz	r0, 11a30 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x32>
   11a2c:	200c      	movs	r0, #12
   11a2e:	bd70      	pop	{r4, r5, r6, pc}
   11a30:	2210      	movs	r2, #16
   11a32:	1ca9      	adds	r1, r5, #2
   11a34:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
   11a38:	f7f1 ff5e 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11a3c:	2001      	movs	r0, #1
   11a3e:	f884 018b 	strb.w	r0, [r4, #395]	; 0x18b
   11a42:	2000      	movs	r0, #0
   11a44:	bd70      	pop	{r4, r5, r6, pc}

00011a46 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   11a46:	b510      	push	{r4, lr}
   11a48:	2108      	movs	r1, #8
   11a4a:	f7f2 ff51 	bl	48f0 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   11a4e:	2000      	movs	r0, #0
   11a50:	bd10      	pop	{r4, pc}

00011a52 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   11a52:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11a54:	460c      	mov	r4, r1
   11a56:	4605      	mov	r5, r0
   11a58:	8800      	ldrh	r0, [r0, #0]
   11a5a:	4669      	mov	r1, sp
   11a5c:	f7fe fce5 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11a60:	2200      	movs	r2, #0
   11a62:	b128      	cbz	r0, 11a70 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
   11a64:	f8c4 2002 	str.w	r2, [r4, #2]
   11a68:	71a2      	strb	r2, [r4, #6]
   11a6a:	8022      	strh	r2, [r4, #0]
   11a6c:	2002      	movs	r0, #2
   11a6e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11a70:	9901      	ldr	r1, [sp, #4]
   11a72:	4608      	mov	r0, r1
   11a74:	3178      	adds	r1, #120	; 0x78
   11a76:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
   11a7a:	68c3      	ldr	r3, [r0, #12]
   11a7c:	f8c4 3002 	str.w	r3, [r4, #2]
   11a80:	7c03      	ldrb	r3, [r0, #16]
   11a82:	71a3      	strb	r3, [r4, #6]
   11a84:	882b      	ldrh	r3, [r5, #0]
   11a86:	8023      	strh	r3, [r4, #0]
   11a88:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   11a8c:	2b00      	cmp	r3, #0
   11a8e:	d1f2      	bne.n	11a76 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
   11a90:	2000      	movs	r0, #0
   11a92:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011a94 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   11a94:	b510      	push	{r4, lr}
   11a96:	4604      	mov	r4, r0
   11a98:	f000 fcb2 	bl	12400 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   11a9c:	b140      	cbz	r0, 11ab0 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   11a9e:	20fb      	movs	r0, #251	; 0xfb
   11aa0:	8020      	strh	r0, [r4, #0]
   11aa2:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   11aa6:	8061      	strh	r1, [r4, #2]
   11aa8:	80a0      	strh	r0, [r4, #4]
   11aaa:	80e1      	strh	r1, [r4, #6]
   11aac:	2000      	movs	r0, #0
   11aae:	bd10      	pop	{r4, pc}
   11ab0:	2001      	movs	r0, #1
   11ab2:	bd10      	pop	{r4, pc}

00011ab4 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   11ab4:	2108      	movs	r1, #8
   11ab6:	7001      	strb	r1, [r0, #0]
   11ab8:	2000      	movs	r0, #0
   11aba:	4770      	bx	lr

00011abc <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   11abc:	21d8      	movs	r1, #216	; 0xd8
   11abe:	7001      	strb	r1, [r0, #0]
   11ac0:	2108      	movs	r1, #8
   11ac2:	7041      	strb	r1, [r0, #1]
   11ac4:	2000      	movs	r0, #0
   11ac6:	4770      	bx	lr

00011ac8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   11ac8:	2108      	movs	r1, #8
   11aca:	7001      	strb	r1, [r0, #0]
   11acc:	2000      	movs	r0, #0
   11ace:	4770      	bx	lr

00011ad0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   11ad0:	b510      	push	{r4, lr}
   11ad2:	4604      	mov	r4, r0
   11ad4:	7800      	ldrb	r0, [r0, #0]
   11ad6:	b108      	cbz	r0, 11adc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   11ad8:	2801      	cmp	r0, #1
   11ada:	d110      	bne.n	11afe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   11adc:	f000 fc66 	bl	123ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   11ae0:	b120      	cbz	r0, 11aec <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   11ae2:	f7f4 f82b 	bl	5b3c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11ae6:	b108      	cbz	r0, 11aec <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   11ae8:	200c      	movs	r0, #12
   11aea:	bd10      	pop	{r4, pc}
   11aec:	7820      	ldrb	r0, [r4, #0]
   11aee:	f7ff fe65 	bl	117bc <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11af2:	1c61      	adds	r1, r4, #1
   11af4:	f7f4 f976 	bl	5de4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   11af8:	b108      	cbz	r0, 11afe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   11afa:	2000      	movs	r0, #0
   11afc:	bd10      	pop	{r4, pc}
   11afe:	2012      	movs	r0, #18
   11b00:	bd10      	pop	{r4, pc}

00011b02 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   11b02:	b510      	push	{r4, lr}
   11b04:	4604      	mov	r4, r0
   11b06:	f000 fd95 	bl	12634 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x578>
   11b0a:	b108      	cbz	r0, 11b10 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   11b0c:	200c      	movs	r0, #12
   11b0e:	bd10      	pop	{r4, pc}
   11b10:	7820      	ldrb	r0, [r4, #0]
   11b12:	b120      	cbz	r0, 11b1e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   11b14:	2801      	cmp	r0, #1
   11b16:	d002      	beq.n	11b1e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   11b18:	28ff      	cmp	r0, #255	; 0xff
   11b1a:	d108      	bne.n	11b2e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   11b1c:	e009      	b.n	11b32 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   11b1e:	f7ff fe4d 	bl	117bc <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11b22:	1c61      	adds	r1, r4, #1
   11b24:	f7fe fc76 	bl	10414 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   11b28:	b108      	cbz	r0, 11b2e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   11b2a:	2000      	movs	r0, #0
   11b2c:	bd10      	pop	{r4, pc}
   11b2e:	2012      	movs	r0, #18
   11b30:	bd10      	pop	{r4, pc}
   11b32:	2000      	movs	r0, #0
   11b34:	f7f4 f9d6 	bl	5ee4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   11b38:	e7f7      	b.n	11b2a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

00011b3a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   11b3a:	b510      	push	{r4, lr}
   11b3c:	4604      	mov	r4, r0
   11b3e:	f000 fc35 	bl	123ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   11b42:	b108      	cbz	r0, 11b48 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   11b44:	200c      	movs	r0, #12
   11b46:	bd10      	pop	{r4, pc}
   11b48:	7820      	ldrb	r0, [r4, #0]
   11b4a:	f000 0001 	and.w	r0, r0, #1
   11b4e:	f7f3 ffef 	bl	5b30 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   11b52:	2000      	movs	r0, #0
   11b54:	bd10      	pop	{r4, pc}

00011b56 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   11b56:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   11b58:	460d      	mov	r5, r1
   11b5a:	4604      	mov	r4, r0
   11b5c:	f000 fc50 	bl	12400 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   11b60:	b130      	cbz	r0, 11b70 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   11b62:	88a0      	ldrh	r0, [r4, #4]
   11b64:	f244 2190 	movw	r1, #17040	; 0x4290
   11b68:	4288      	cmp	r0, r1
   11b6a:	d903      	bls.n	11b74 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   11b6c:	2012      	movs	r0, #18
   11b6e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11b70:	2001      	movs	r0, #1
   11b72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11b74:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   11b78:	4288      	cmp	r0, r1
   11b7a:	d300      	bcc.n	11b7e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   11b7c:	4608      	mov	r0, r1
   11b7e:	8821      	ldrh	r1, [r4, #0]
   11b80:	f8ad 1000 	strh.w	r1, [sp]
   11b84:	8861      	ldrh	r1, [r4, #2]
   11b86:	f8ad 1002 	strh.w	r1, [sp, #2]
   11b8a:	f8ad 0004 	strh.w	r0, [sp, #4]
   11b8e:	8861      	ldrh	r1, [r4, #2]
   11b90:	f8ad 1006 	strh.w	r1, [sp, #6]
   11b94:	f8ad 0008 	strh.w	r0, [sp, #8]
   11b98:	8820      	ldrh	r0, [r4, #0]
   11b9a:	8028      	strh	r0, [r5, #0]
   11b9c:	4668      	mov	r0, sp
   11b9e:	f000 fc6c 	bl	1247a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
   11ba2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00011ba4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   11ba4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   11ba6:	4604      	mov	r4, r0
   11ba8:	f000 fc4f 	bl	1244a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
   11bac:	b1b0      	cbz	r0, 11bdc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x38>
   11bae:	f10d 0007 	add.w	r0, sp, #7
   11bb2:	9000      	str	r0, [sp, #0]
   11bb4:	7922      	ldrb	r2, [r4, #4]
   11bb6:	78e1      	ldrb	r1, [r4, #3]
   11bb8:	78a0      	ldrb	r0, [r4, #2]
   11bba:	f10d 0306 	add.w	r3, sp, #6
   11bbe:	f000 fcf3 	bl	125a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ec>
   11bc2:	2800      	cmp	r0, #0
   11bc4:	d109      	bne.n	11bda <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x36>
   11bc6:	8820      	ldrh	r0, [r4, #0]
   11bc8:	f8ad 0004 	strh.w	r0, [sp, #4]
   11bcc:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   11bd0:	f8ad 0008 	strh.w	r0, [sp, #8]
   11bd4:	a801      	add	r0, sp, #4
   11bd6:	f000 f8fe 	bl	11dd6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   11bda:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11bdc:	2001      	movs	r0, #1
   11bde:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00011be0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   11be0:	b510      	push	{r4, lr}
   11be2:	4604      	mov	r4, r0
   11be4:	f000 fbe2 	bl	123ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   11be8:	b120      	cbz	r0, 11bf4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   11bea:	f7f3 ffa7 	bl	5b3c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11bee:	b108      	cbz	r0, 11bf4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   11bf0:	200c      	movs	r0, #12
   11bf2:	bd10      	pop	{r4, pc}
   11bf4:	7820      	ldrb	r0, [r4, #0]
   11bf6:	f7ff fde1 	bl	117bc <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11bfa:	79e2      	ldrb	r2, [r4, #7]
   11bfc:	1c61      	adds	r1, r4, #1
   11bfe:	f7f3 ff2d 	bl	5a5c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   11c02:	b108      	cbz	r0, 11c08 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   11c04:	2000      	movs	r0, #0
   11c06:	bd10      	pop	{r4, pc}
   11c08:	2002      	movs	r0, #2
   11c0a:	bd10      	pop	{r4, pc}

00011c0c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   11c0c:	b510      	push	{r4, lr}
   11c0e:	4604      	mov	r4, r0
   11c10:	2001      	movs	r0, #1
   11c12:	f7fa ff85 	bl	cb20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   11c16:	b128      	cbz	r0, 11c24 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   11c18:	4621      	mov	r1, r4
   11c1a:	2001      	movs	r0, #1
   11c1c:	f7f2 ffca 	bl	4bb4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   11c20:	2000      	movs	r0, #0
   11c22:	bd10      	pop	{r4, pc}
   11c24:	200c      	movs	r0, #12
   11c26:	bd10      	pop	{r4, pc}

00011c28 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   11c28:	b510      	push	{r4, lr}
   11c2a:	8800      	ldrh	r0, [r0, #0]
   11c2c:	f7f4 f900 	bl	5e30 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   11c30:	b108      	cbz	r0, 11c36 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   11c32:	2000      	movs	r0, #0
   11c34:	bd10      	pop	{r4, pc}
   11c36:	2030      	movs	r0, #48	; 0x30
   11c38:	bd10      	pop	{r4, pc}

00011c3a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   11c3a:	b51c      	push	{r2, r3, r4, lr}
   11c3c:	4604      	mov	r4, r0
   11c3e:	f000 fbdf 	bl	12400 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   11c42:	b178      	cbz	r0, 11c64 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   11c44:	8820      	ldrh	r0, [r4, #0]
   11c46:	f8ad 0000 	strh.w	r0, [sp]
   11c4a:	8860      	ldrh	r0, [r4, #2]
   11c4c:	f8ad 0002 	strh.w	r0, [sp, #2]
   11c50:	8820      	ldrh	r0, [r4, #0]
   11c52:	f8ad 0004 	strh.w	r0, [sp, #4]
   11c56:	8860      	ldrh	r0, [r4, #2]
   11c58:	f8ad 0006 	strh.w	r0, [sp, #6]
   11c5c:	4668      	mov	r0, sp
   11c5e:	f7fb f969 	bl	cf34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
   11c62:	bd1c      	pop	{r2, r3, r4, pc}
   11c64:	2001      	movs	r0, #1
   11c66:	bd1c      	pop	{r2, r3, r4, pc}

00011c68 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   11c68:	b510      	push	{r4, lr}
   11c6a:	f7f2 ffd1 	bl	4c10 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   11c6e:	2000      	movs	r0, #0
   11c70:	bd10      	pop	{r4, pc}

00011c72 <sym_FQEZF5Z2WD64Y6SH4N3MMG6DKWGYWZ62AUIJVGY>:
   11c72:	b51c      	push	{r2, r3, r4, lr}
   11c74:	4614      	mov	r4, r2
   11c76:	460a      	mov	r2, r1
   11c78:	b128      	cbz	r0, 11c86 <sym_FQEZF5Z2WD64Y6SH4N3MMG6DKWGYWZ62AUIJVGY+0x14>
   11c7a:	2801      	cmp	r0, #1
   11c7c:	d006      	beq.n	11c8c <sym_FQEZF5Z2WD64Y6SH4N3MMG6DKWGYWZ62AUIJVGY+0x1a>
   11c7e:	2802      	cmp	r0, #2
   11c80:	d009      	beq.n	11c96 <sym_FQEZF5Z2WD64Y6SH4N3MMG6DKWGYWZ62AUIJVGY+0x24>
   11c82:	2012      	movs	r0, #18
   11c84:	bd1c      	pop	{r2, r3, r4, pc}
   11c86:	f7f5 fe61 	bl	794c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   11c8a:	e001      	b.n	11c90 <sym_FQEZF5Z2WD64Y6SH4N3MMG6DKWGYWZ62AUIJVGY+0x1e>
   11c8c:	f7fa f956 	bl	bf3c <sym_S6BPBH5XQUKYY4ZXMDE725VHOLMGWM2NXJZTDWI>
   11c90:	7020      	strb	r0, [r4, #0]
   11c92:	2000      	movs	r0, #0
   11c94:	bd1c      	pop	{r2, r3, r4, pc}
   11c96:	4669      	mov	r1, sp
   11c98:	4610      	mov	r0, r2
   11c9a:	f7fe fbc6 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11c9e:	b108      	cbz	r0, 11ca4 <sym_FQEZF5Z2WD64Y6SH4N3MMG6DKWGYWZ62AUIJVGY+0x32>
   11ca0:	2002      	movs	r0, #2
   11ca2:	bd1c      	pop	{r2, r3, r4, pc}
   11ca4:	9801      	ldr	r0, [sp, #4]
   11ca6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   11caa:	e7f1      	b.n	11c90 <sym_FQEZF5Z2WD64Y6SH4N3MMG6DKWGYWZ62AUIJVGY+0x1e>

00011cac <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   11cac:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11cae:	460c      	mov	r4, r1
   11cb0:	4605      	mov	r5, r0
   11cb2:	f000 fba5 	bl	12400 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   11cb6:	b178      	cbz	r0, 11cd8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2c>
   11cb8:	4669      	mov	r1, sp
   11cba:	4628      	mov	r0, r5
   11cbc:	f7fe fbb5 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11cc0:	2800      	cmp	r0, #0
   11cc2:	d108      	bne.n	11cd6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2a>
   11cc4:	f89d 0000 	ldrb.w	r0, [sp]
   11cc8:	b140      	cbz	r0, 11cdc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x30>
   11cca:	2100      	movs	r1, #0
   11ccc:	4622      	mov	r2, r4
   11cce:	9801      	ldr	r0, [sp, #4]
   11cd0:	f000 fb32 	bl	12338 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x27c>
   11cd4:	2000      	movs	r0, #0
   11cd6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11cd8:	2001      	movs	r0, #1
   11cda:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11cdc:	2101      	movs	r1, #1
   11cde:	e7f5      	b.n	11ccc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>

00011ce0 <sym_NGYEAZLHHIDBJ5ULALP34CKIXUVTMO6G2MRNQDI>:
   11ce0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11ce2:	460d      	mov	r5, r1
   11ce4:	4614      	mov	r4, r2
   11ce6:	4669      	mov	r1, sp
   11ce8:	f7fe fb9f 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11cec:	2800      	cmp	r0, #0
   11cee:	d105      	bne.n	11cfc <sym_NGYEAZLHHIDBJ5ULALP34CKIXUVTMO6G2MRNQDI+0x1c>
   11cf0:	9801      	ldr	r0, [sp, #4]
   11cf2:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   11cf6:	2801      	cmp	r0, #1
   11cf8:	d001      	beq.n	11cfe <sym_NGYEAZLHHIDBJ5ULALP34CKIXUVTMO6G2MRNQDI+0x1e>
   11cfa:	200c      	movs	r0, #12
   11cfc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11cfe:	9801      	ldr	r0, [sp, #4]
   11d00:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
   11d04:	7029      	strb	r1, [r5, #0]
   11d06:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
   11d0a:	7020      	strb	r0, [r4, #0]
   11d0c:	2000      	movs	r0, #0
   11d0e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011d10 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   11d10:	b538      	push	{r3, r4, r5, lr}
   11d12:	460d      	mov	r5, r1
   11d14:	4604      	mov	r4, r0
   11d16:	f000 fa83 	bl	12220 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x164>
   11d1a:	2800      	cmp	r0, #0
   11d1c:	d108      	bne.n	11d30 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   11d1e:	4620      	mov	r0, r4
   11d20:	f000 fa4d 	bl	121be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x102>
   11d24:	2800      	cmp	r0, #0
   11d26:	d103      	bne.n	11d30 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   11d28:	f7f6 ff32 	bl	8b90 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   11d2c:	b108      	cbz	r0, 11d32 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x22>
   11d2e:	200c      	movs	r0, #12
   11d30:	bd38      	pop	{r3, r4, r5, pc}
   11d32:	f7f5 fe0b 	bl	794c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   11d36:	7028      	strb	r0, [r5, #0]
   11d38:	74e0      	strb	r0, [r4, #19]
   11d3a:	4620      	mov	r0, r4
   11d3c:	f7f5 fc3e 	bl	75bc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   11d40:	4605      	mov	r5, r0
   11d42:	7e60      	ldrb	r0, [r4, #25]
   11d44:	b158      	cbz	r0, 11d5e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4e>
   11d46:	b955      	cbnz	r5, 11d5e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4e>
   11d48:	20ff      	movs	r0, #255	; 0xff
   11d4a:	f88d 0000 	strb.w	r0, [sp]
   11d4e:	4669      	mov	r1, sp
   11d50:	2000      	movs	r0, #0
   11d52:	f7f5 fe5b 	bl	7a0c <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
   11d56:	4669      	mov	r1, sp
   11d58:	2000      	movs	r0, #0
   11d5a:	f7f5 fe65 	bl	7a28 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
   11d5e:	4628      	mov	r0, r5
   11d60:	bd38      	pop	{r3, r4, r5, pc}

00011d62 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   11d62:	b510      	push	{r4, lr}
   11d64:	4604      	mov	r4, r0
   11d66:	2000      	movs	r0, #0
   11d68:	f7fa feda 	bl	cb20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   11d6c:	b128      	cbz	r0, 11d7a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   11d6e:	4621      	mov	r1, r4
   11d70:	2000      	movs	r0, #0
   11d72:	f7f2 ff1f 	bl	4bb4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   11d76:	2000      	movs	r0, #0
   11d78:	bd10      	pop	{r4, pc}
   11d7a:	200c      	movs	r0, #12
   11d7c:	bd10      	pop	{r4, pc}

00011d7e <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
   11d7e:	b510      	push	{r4, lr}
   11d80:	4604      	mov	r4, r0
   11d82:	f7fa f917 	bl	bfb4 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>
   11d86:	b150      	cbz	r0, 11d9e <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   11d88:	f7f6 ff9e 	bl	8cc8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
   11d8c:	b138      	cbz	r0, 11d9e <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   11d8e:	7820      	ldrb	r0, [r4, #0]
   11d90:	f7f6 ffb8 	bl	8d04 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
   11d94:	7820      	ldrb	r0, [r4, #0]
   11d96:	f7fa f8e1 	bl	bf5c <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>
   11d9a:	2000      	movs	r0, #0
   11d9c:	bd10      	pop	{r4, pc}
   11d9e:	200c      	movs	r0, #12
   11da0:	bd10      	pop	{r4, pc}

00011da2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   11da2:	b510      	push	{r4, lr}
   11da4:	4604      	mov	r4, r0
   11da6:	7800      	ldrb	r0, [r0, #0]
   11da8:	f000 0001 	and.w	r0, r0, #1
   11dac:	f7fa f918 	bl	bfe0 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
   11db0:	7820      	ldrb	r0, [r4, #0]
   11db2:	f000 0001 	and.w	r0, r0, #1
   11db6:	f7f6 ffab 	bl	8d10 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
   11dba:	2000      	movs	r0, #0
   11dbc:	bd10      	pop	{r4, pc}

00011dbe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   11dbe:	b510      	push	{r4, lr}
   11dc0:	4604      	mov	r4, r0
   11dc2:	f000 fb1d 	bl	12400 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x344>
   11dc6:	b120      	cbz	r0, 11dd2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   11dc8:	4620      	mov	r0, r4
   11dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11dce:	f000 bb54 	b.w	1247a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
   11dd2:	2001      	movs	r0, #1
   11dd4:	bd10      	pop	{r4, pc}

00011dd6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   11dd6:	b510      	push	{r4, lr}
   11dd8:	4604      	mov	r4, r0
   11dda:	8880      	ldrh	r0, [r0, #4]
   11ddc:	b128      	cbz	r0, 11dea <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11dde:	2801      	cmp	r0, #1
   11de0:	d003      	beq.n	11dea <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11de2:	2802      	cmp	r0, #2
   11de4:	d001      	beq.n	11dea <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11de6:	2012      	movs	r0, #18
   11de8:	bd10      	pop	{r4, pc}
   11dea:	78e0      	ldrb	r0, [r4, #3]
   11dec:	f000 fa82 	bl	122f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   11df0:	b148      	cbz	r0, 11e06 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11df2:	78a0      	ldrb	r0, [r4, #2]
   11df4:	f000 fa7e 	bl	122f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   11df8:	b128      	cbz	r0, 11e06 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11dfa:	4620      	mov	r0, r4
   11dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e00:	2101      	movs	r1, #1
   11e02:	f000 b8cc 	b.w	11f9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   11e06:	2011      	movs	r0, #17
   11e08:	bd10      	pop	{r4, pc}

00011e0a <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA>:
   11e0a:	b51c      	push	{r2, r3, r4, lr}
   11e0c:	2400      	movs	r4, #0
   11e0e:	2a02      	cmp	r2, #2
   11e10:	d019      	beq.n	11e46 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x3c>
   11e12:	dc15      	bgt.n	11e40 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x36>
   11e14:	f112 0f0c 	cmn.w	r2, #12
   11e18:	d015      	beq.n	11e46 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x3c>
   11e1a:	dc09      	bgt.n	11e30 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x26>
   11e1c:	f112 0f28 	cmn.w	r2, #40	; 0x28
   11e20:	d011      	beq.n	11e46 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x3c>
   11e22:	f112 0f14 	cmn.w	r2, #20
   11e26:	d00e      	beq.n	11e46 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x3c>
   11e28:	f112 0f10 	cmn.w	r2, #16
   11e2c:	d110      	bne.n	11e50 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x46>
   11e2e:	e00a      	b.n	11e46 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x3c>
   11e30:	f112 0f08 	cmn.w	r2, #8
   11e34:	d007      	beq.n	11e46 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x3c>
   11e36:	f112 0f04 	cmn.w	r2, #4
   11e3a:	d004      	beq.n	11e46 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x3c>
   11e3c:	b942      	cbnz	r2, 11e50 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x46>
   11e3e:	e002      	b.n	11e46 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x3c>
   11e40:	1ed3      	subs	r3, r2, #3
   11e42:	2b05      	cmp	r3, #5
   11e44:	d804      	bhi.n	11e50 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x46>
   11e46:	b130      	cbz	r0, 11e56 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x4c>
   11e48:	2801      	cmp	r0, #1
   11e4a:	d008      	beq.n	11e5e <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x54>
   11e4c:	2802      	cmp	r0, #2
   11e4e:	d00a      	beq.n	11e66 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x5c>
   11e50:	2412      	movs	r4, #18
   11e52:	4620      	mov	r0, r4
   11e54:	bd1c      	pop	{r2, r3, r4, pc}
   11e56:	4610      	mov	r0, r2
   11e58:	f7f5 fd7e 	bl	7958 <sym_YU3HMHUZPM7PR5DUQBMKDUTAWNSSB25QLMUQA6Y>
   11e5c:	e7f9      	b.n	11e52 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x48>
   11e5e:	4610      	mov	r0, r2
   11e60:	f7fa f874 	bl	bf4c <sym_3X3XIYZ47P6PUIPMHDVYO7YOEUWBHGUNR26JAYA>
   11e64:	e7f5      	b.n	11e52 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x48>
   11e66:	4608      	mov	r0, r1
   11e68:	4614      	mov	r4, r2
   11e6a:	4669      	mov	r1, sp
   11e6c:	f7fe fadd 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11e70:	b108      	cbz	r0, 11e76 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x6c>
   11e72:	2402      	movs	r4, #2
   11e74:	e7ed      	b.n	11e52 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x48>
   11e76:	9801      	ldr	r0, [sp, #4]
   11e78:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
   11e7c:	2400      	movs	r4, #0
   11e7e:	e7e8      	b.n	11e52 <sym_6WEUHXTH5EO2WNHHRM2I5SRIX3LTA3MNDOQBTAA+0x48>

00011e80 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   11e80:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11e82:	460c      	mov	r4, r1
   11e84:	4605      	mov	r5, r0
   11e86:	8800      	ldrh	r0, [r0, #0]
   11e88:	4669      	mov	r1, sp
   11e8a:	f7fe face 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11e8e:	2800      	cmp	r0, #0
   11e90:	d106      	bne.n	11ea0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   11e92:	9801      	ldr	r0, [sp, #4]
   11e94:	8829      	ldrh	r1, [r5, #0]
   11e96:	8021      	strh	r1, [r4, #0]
   11e98:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   11e9c:	8060      	strh	r0, [r4, #2]
   11e9e:	2000      	movs	r0, #0
   11ea0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011ea2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   11ea2:	b510      	push	{r4, lr}
   11ea4:	4604      	mov	r4, r0
   11ea6:	4601      	mov	r1, r0
   11ea8:	2000      	movs	r0, #0
   11eaa:	f7f2 fe61 	bl	4b70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   11eae:	b910      	cbnz	r0, 11eb6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   11eb0:	2000      	movs	r0, #0
   11eb2:	6020      	str	r0, [r4, #0]
   11eb4:	80a0      	strh	r0, [r4, #4]
   11eb6:	2000      	movs	r0, #0
   11eb8:	bd10      	pop	{r4, pc}

00011eba <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   11eba:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11ebc:	8800      	ldrh	r0, [r0, #0]
   11ebe:	4669      	mov	r1, sp
   11ec0:	f7fe fab3 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11ec4:	b978      	cbnz	r0, 11ee6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   11ec6:	4668      	mov	r0, sp
   11ec8:	f000 faa0 	bl	1240c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x350>
   11ecc:	b158      	cbz	r0, 11ee6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   11ece:	9c01      	ldr	r4, [sp, #4]
   11ed0:	f89d 0000 	ldrb.w	r0, [sp]
   11ed4:	3478      	adds	r4, #120	; 0x78
   11ed6:	f000 f93a 	bl	1214e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
   11eda:	2800      	cmp	r0, #0
   11edc:	9801      	ldr	r0, [sp, #4]
   11ede:	d004      	beq.n	11eea <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x30>
   11ee0:	f500 70ac 	add.w	r0, r0, #344	; 0x158
   11ee4:	e003      	b.n	11eee <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   11ee6:	2002      	movs	r0, #2
   11ee8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11eea:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
   11eee:	7801      	ldrb	r1, [r0, #0]
   11ef0:	b911      	cbnz	r1, 11ef8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   11ef2:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   11ef6:	b109      	cbz	r1, 11efc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   11ef8:	203a      	movs	r0, #58	; 0x3a
   11efa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11efc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   11f00:	f04f 0501 	mov.w	r5, #1
   11f04:	0789      	lsls	r1, r1, #30
   11f06:	d103      	bne.n	11f10 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x56>
   11f08:	7005      	strb	r5, [r0, #0]
   11f0a:	4668      	mov	r0, sp
   11f0c:	f7fe ff1a 	bl	10d44 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   11f10:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   11f14:	2000      	movs	r0, #0
   11f16:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011f18 <sym_GNNWZJX3662WRFIX5OCHLN4MOMAPIGACZWUKXCI>:
   11f18:	b508      	push	{r3, lr}
   11f1a:	8802      	ldrh	r2, [r0, #0]
   11f1c:	f821 2b02 	strh.w	r2, [r1], #2
   11f20:	8800      	ldrh	r0, [r0, #0]
   11f22:	466a      	mov	r2, sp
   11f24:	f7ff fedc 	bl	11ce0 <sym_NGYEAZLHHIDBJ5ULALP34CKIXUVTMO6G2MRNQDI>
   11f28:	bd08      	pop	{r3, pc}

00011f2a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   11f2a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11f2c:	460c      	mov	r4, r1
   11f2e:	4605      	mov	r5, r0
   11f30:	8800      	ldrh	r0, [r0, #0]
   11f32:	4669      	mov	r1, sp
   11f34:	f7fe fa79 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11f38:	b108      	cbz	r0, 11f3e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   11f3a:	2002      	movs	r0, #2
   11f3c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11f3e:	78a8      	ldrb	r0, [r5, #2]
   11f40:	b128      	cbz	r0, 11f4e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x24>
   11f42:	2008      	movs	r0, #8
   11f44:	70a0      	strb	r0, [r4, #2]
   11f46:	8828      	ldrh	r0, [r5, #0]
   11f48:	8020      	strh	r0, [r4, #0]
   11f4a:	2000      	movs	r0, #0
   11f4c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11f4e:	9801      	ldr	r0, [sp, #4]
   11f50:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   11f54:	e7f6      	b.n	11f44 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1a>

00011f56 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   11f56:	b510      	push	{r4, lr}
   11f58:	f7fb f81c 	bl	cf94 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   11f5c:	2000      	movs	r0, #0
   11f5e:	bd10      	pop	{r4, pc}

00011f60 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   11f60:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11f64:	4604      	mov	r4, r0
   11f66:	8840      	ldrh	r0, [r0, #2]
   11f68:	460d      	mov	r5, r1
   11f6a:	b1b0      	cbz	r0, 11f9a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
   11f6c:	8820      	ldrh	r0, [r4, #0]
   11f6e:	4669      	mov	r1, sp
   11f70:	f7fe fa5b 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11f74:	2800      	cmp	r0, #0
   11f76:	d10e      	bne.n	11f96 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
   11f78:	8820      	ldrh	r0, [r4, #0]
   11f7a:	8028      	strh	r0, [r5, #0]
   11f7c:	9e01      	ldr	r6, [sp, #4]
   11f7e:	1d35      	adds	r5, r6, #4
   11f80:	3678      	adds	r6, #120	; 0x78
   11f82:	682f      	ldr	r7, [r5, #0]
   11f84:	8862      	ldrh	r2, [r4, #2]
   11f86:	4639      	mov	r1, r7
   11f88:	4630      	mov	r0, r6
   11f8a:	f7fe fc63 	bl	10854 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   11f8e:	6828      	ldr	r0, [r5, #0]
   11f90:	42b8      	cmp	r0, r7
   11f92:	d1f6      	bne.n	11f82 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
   11f94:	2000      	movs	r0, #0
   11f96:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   11f9a:	2012      	movs	r0, #18
   11f9c:	e7fb      	b.n	11f96 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

00011f9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   11f9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11fa2:	b08a      	sub	sp, #40	; 0x28
   11fa4:	468a      	mov	sl, r1
   11fa6:	4681      	mov	r9, r0
   11fa8:	8800      	ldrh	r0, [r0, #0]
   11faa:	a904      	add	r1, sp, #16
   11fac:	f7fe fa3d 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11fb0:	2800      	cmp	r0, #0
   11fb2:	d14a      	bne.n	1204a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11fb4:	9805      	ldr	r0, [sp, #20]
   11fb6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   11fba:	4605      	mov	r5, r0
   11fbc:	3078      	adds	r0, #120	; 0x78
   11fbe:	2900      	cmp	r1, #0
   11fc0:	4629      	mov	r1, r5
   11fc2:	d005      	beq.n	11fd0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x32>
   11fc4:	f891 620c 	ldrb.w	r6, [r1, #524]	; 0x20c
   11fc8:	7b41      	ldrb	r1, [r0, #13]
   11fca:	2921      	cmp	r1, #33	; 0x21
   11fcc:	d003      	beq.n	11fd6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   11fce:	e003      	b.n	11fd8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   11fd0:	f891 61aa 	ldrb.w	r6, [r1, #426]	; 0x1aa
   11fd4:	e7f8      	b.n	11fc8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x2a>
   11fd6:	b13e      	cbz	r6, 11fe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4a>
   11fd8:	2400      	movs	r4, #0
   11fda:	3046      	adds	r0, #70	; 0x46
   11fdc:	2108      	movs	r1, #8
   11fde:	4607      	mov	r7, r0
   11fe0:	f7ff fbe2 	bl	117a8 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   11fe4:	b110      	cbz	r0, 11fec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   11fe6:	e007      	b.n	11ff8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   11fe8:	2401      	movs	r4, #1
   11fea:	e7f6      	b.n	11fda <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   11fec:	210b      	movs	r1, #11
   11fee:	4638      	mov	r0, r7
   11ff0:	f7ff fbda 	bl	117a8 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   11ff4:	b900      	cbnz	r0, 11ff8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   11ff6:	b33c      	cbz	r4, 12048 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xaa>
   11ff8:	a802      	add	r0, sp, #8
   11ffa:	9000      	str	r0, [sp, #0]
   11ffc:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12000:	ab01      	add	r3, sp, #4
   12002:	464a      	mov	r2, r9
   12004:	4629      	mov	r1, r5
   12006:	f000 f9db 	bl	123c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   1200a:	0007      	movs	r7, r0
   1200c:	d11d      	bne.n	1204a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   1200e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12012:	9c05      	ldr	r4, [sp, #20]
   12014:	b1e0      	cbz	r0, 12050 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb2>
   12016:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   1201a:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   1201e:	b168      	cbz	r0, 1203c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   12020:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12024:	f010 0102 	ands.w	r1, r0, #2
   12028:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1202c:	f88d 1004 	strb.w	r1, [sp, #4]
   12030:	f000 0002 	and.w	r0, r0, #2
   12034:	f88d 0008 	strb.w	r0, [sp, #8]
   12038:	d00d      	beq.n	12056 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1203a:	b160      	cbz	r0, 12056 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1203c:	2001      	movs	r0, #1
   1203e:	7060      	strb	r0, [r4, #1]
   12040:	f04f 0800 	mov.w	r8, #0
   12044:	b95e      	cbnz	r6, 1205e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc0>
   12046:	e008      	b.n	1205a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xbc>
   12048:	201a      	movs	r0, #26
   1204a:	b00a      	add	sp, #40	; 0x28
   1204c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12050:	f504 749f 	add.w	r4, r4, #318	; 0x13e
   12054:	e7e1      	b.n	1201a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7c>
   12056:	2009      	movs	r0, #9
   12058:	e7f7      	b.n	1204a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   1205a:	7820      	ldrb	r0, [r4, #0]
   1205c:	b108      	cbz	r0, 12062 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
   1205e:	273a      	movs	r7, #58	; 0x3a
   12060:	e014      	b.n	1208c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xee>
   12062:	f8cd 8018 	str.w	r8, [sp, #24]
   12066:	f884 a000 	strb.w	sl, [r4]
   1206a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1206e:	70a0      	strb	r0, [r4, #2]
   12070:	f89d 1008 	ldrb.w	r1, [sp, #8]
   12074:	70e1      	strb	r1, [r4, #3]
   12076:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   1207a:	80a2      	strh	r2, [r4, #4]
   1207c:	f88d 0018 	strb.w	r0, [sp, #24]
   12080:	f88d 1019 	strb.w	r1, [sp, #25]
   12084:	a906      	add	r1, sp, #24
   12086:	4628      	mov	r0, r5
   12088:	f7fe faca 	bl	10620 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1208c:	f884 8001 	strb.w	r8, [r4, #1]
   12090:	4638      	mov	r0, r7
   12092:	e7da      	b.n	1204a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>

00012094 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   12094:	b510      	push	{r4, lr}
   12096:	2008      	movs	r0, #8
   12098:	f7fb f80e 	bl	d0b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1209c:	f7f9 ffd8 	bl	c050 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>
   120a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   120a4:	f7f7 be18 	b.w	9cd8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>

000120a8 <sym_RJCZ3TUNFFUZPTNFXG35SLVXYYJ7NVMTPNXKOXY>:
   120a8:	b510      	push	{r4, lr}
   120aa:	200b      	movs	r0, #11
   120ac:	f7fb f804 	bl	d0b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   120b0:	f7f9 ffce 	bl	c050 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>
   120b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   120b8:	f7f7 be0e 	b.w	9cd8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>

000120bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   120bc:	b510      	push	{r4, lr}
   120be:	4604      	mov	r4, r0
   120c0:	2000      	movs	r0, #0
   120c2:	8822      	ldrh	r2, [r4, #0]
   120c4:	b086      	sub	sp, #24
   120c6:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   120ca:	39ff      	subs	r1, #255	; 0xff
   120cc:	d008      	beq.n	120e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   120ce:	a903      	add	r1, sp, #12
   120d0:	4610      	mov	r0, r2
   120d2:	f7fe f9aa 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   120d6:	b110      	cbz	r0, 120de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   120d8:	2002      	movs	r0, #2
   120da:	b006      	add	sp, #24
   120dc:	bd10      	pop	{r4, pc}
   120de:	9804      	ldr	r0, [sp, #16]
   120e0:	8921      	ldrh	r1, [r4, #8]
   120e2:	89a3      	ldrh	r3, [r4, #12]
   120e4:	8962      	ldrh	r2, [r4, #10]
   120e6:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   120ea:	88e3      	ldrh	r3, [r4, #6]
   120ec:	88a2      	ldrh	r2, [r4, #4]
   120ee:	8861      	ldrh	r1, [r4, #2]
   120f0:	f7fa fdaa 	bl	cc48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x190>
   120f4:	b108      	cbz	r0, 120fa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   120f6:	2000      	movs	r0, #0
   120f8:	e7ef      	b.n	120da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   120fa:	2030      	movs	r0, #48	; 0x30
   120fc:	e7ed      	b.n	120da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   120fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
   12102:	4288      	cmp	r0, r1
   12104:	d303      	bcc.n	1210e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   12106:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   1210a:	4288      	cmp	r0, r1
   1210c:	d300      	bcc.n	12110 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   1210e:	4608      	mov	r0, r1
   12110:	4770      	bx	lr
   12112:	0741      	lsls	r1, r0, #29
   12114:	d501      	bpl.n	1211a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   12116:	2008      	movs	r0, #8
   12118:	4770      	bx	lr
   1211a:	07c1      	lsls	r1, r0, #31
   1211c:	d001      	beq.n	12122 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   1211e:	2001      	movs	r0, #1
   12120:	4770      	bx	lr
   12122:	0780      	lsls	r0, r0, #30
   12124:	d501      	bpl.n	1212a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6e>
   12126:	2002      	movs	r0, #2
   12128:	4770      	bx	lr
   1212a:	2000      	movs	r0, #0
   1212c:	4770      	bx	lr
   1212e:	b510      	push	{r4, lr}
   12130:	2801      	cmp	r0, #1
   12132:	d00b      	beq.n	1214c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x90>
   12134:	2802      	cmp	r0, #2
   12136:	d009      	beq.n	1214c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x90>
   12138:	2804      	cmp	r0, #4
   1213a:	d006      	beq.n	1214a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8e>
   1213c:	2808      	cmp	r0, #8
   1213e:	d004      	beq.n	1214a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8e>
   12140:	f240 218f 	movw	r1, #655	; 0x28f
   12144:	2006      	movs	r0, #6
   12146:	f7f1 fd63 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1214a:	2003      	movs	r0, #3
   1214c:	bd10      	pop	{r4, pc}
   1214e:	b108      	cbz	r0, 12154 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
   12150:	2000      	movs	r0, #0
   12152:	4770      	bx	lr
   12154:	2001      	movs	r0, #1
   12156:	4770      	bx	lr
   12158:	b570      	push	{r4, r5, r6, lr}
   1215a:	460d      	mov	r5, r1
   1215c:	8899      	ldrh	r1, [r3, #4]
   1215e:	461c      	mov	r4, r3
   12160:	194b      	adds	r3, r1, r5
   12162:	4293      	cmp	r3, r2
   12164:	d901      	bls.n	1216a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   12166:	2007      	movs	r0, #7
   12168:	bd70      	pop	{r4, r5, r6, pc}
   1216a:	6822      	ldr	r2, [r4, #0]
   1216c:	1853      	adds	r3, r2, r1
   1216e:	4601      	mov	r1, r0
   12170:	462a      	mov	r2, r5
   12172:	4618      	mov	r0, r3
   12174:	f7f1 fbc0 	bl	38f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12178:	88a0      	ldrh	r0, [r4, #4]
   1217a:	4428      	add	r0, r5
   1217c:	80a0      	strh	r0, [r4, #4]
   1217e:	2000      	movs	r0, #0
   12180:	bd70      	pop	{r4, r5, r6, pc}
   12182:	b570      	push	{r4, r5, r6, lr}
   12184:	460c      	mov	r4, r1
   12186:	4605      	mov	r5, r0
   12188:	b112      	cbz	r2, 12190 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   1218a:	291f      	cmp	r1, #31
   1218c:	d807      	bhi.n	1219e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe2>
   1218e:	e010      	b.n	121b2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf6>
   12190:	2cff      	cmp	r4, #255	; 0xff
   12192:	d804      	bhi.n	1219e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe2>
   12194:	f7f5 fbc2 	bl	791c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   12198:	b118      	cbz	r0, 121a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe6>
   1219a:	2c1f      	cmp	r4, #31
   1219c:	d901      	bls.n	121a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe6>
   1219e:	2012      	movs	r0, #18
   121a0:	bd70      	pop	{r4, r5, r6, pc}
   121a2:	4628      	mov	r0, r5
   121a4:	f7f5 fbde 	bl	7964 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   121a8:	b128      	cbz	r0, 121b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
   121aa:	4620      	mov	r0, r4
   121ac:	f7f5 f994 	bl	74d8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   121b0:	b118      	cbz	r0, 121ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfe>
   121b2:	2000      	movs	r0, #0
   121b4:	bd70      	pop	{r4, r5, r6, pc}
   121b6:	2042      	movs	r0, #66	; 0x42
   121b8:	bd70      	pop	{r4, r5, r6, pc}
   121ba:	2045      	movs	r0, #69	; 0x45
   121bc:	bd70      	pop	{r4, r5, r6, pc}
   121be:	b510      	push	{r4, lr}
   121c0:	4604      	mov	r4, r0
   121c2:	7840      	ldrb	r0, [r0, #1]
   121c4:	06c0      	lsls	r0, r0, #27
   121c6:	d413      	bmi.n	121f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   121c8:	f7fa ff86 	bl	d0d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   121cc:	0780      	lsls	r0, r0, #30
   121ce:	d405      	bmi.n	121dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
   121d0:	7d20      	ldrb	r0, [r4, #20]
   121d2:	2802      	cmp	r0, #2
   121d4:	d020      	beq.n	12218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   121d6:	7da0      	ldrb	r0, [r4, #22]
   121d8:	2802      	cmp	r0, #2
   121da:	d01d      	beq.n	12218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   121dc:	f7fa ff7c 	bl	d0d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   121e0:	0740      	lsls	r0, r0, #29
   121e2:	d405      	bmi.n	121f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   121e4:	7d20      	ldrb	r0, [r4, #20]
   121e6:	2803      	cmp	r0, #3
   121e8:	d016      	beq.n	12218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   121ea:	7da0      	ldrb	r0, [r4, #22]
   121ec:	2803      	cmp	r0, #3
   121ee:	d013      	beq.n	12218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   121f0:	7860      	ldrb	r0, [r4, #1]
   121f2:	07c0      	lsls	r0, r0, #31
   121f4:	d002      	beq.n	121fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   121f6:	f7fa ff0b 	bl	d010 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   121fa:	b168      	cbz	r0, 12218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   121fc:	7860      	ldrb	r0, [r4, #1]
   121fe:	06c1      	lsls	r1, r0, #27
   12200:	d405      	bmi.n	1220e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   12202:	0700      	lsls	r0, r0, #28
   12204:	d503      	bpl.n	1220e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   12206:	7d20      	ldrb	r0, [r4, #20]
   12208:	2802      	cmp	r0, #2
   1220a:	d105      	bne.n	12218 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x15c>
   1220c:	e006      	b.n	1221c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x160>
   1220e:	7d20      	ldrb	r0, [r4, #20]
   12210:	2802      	cmp	r0, #2
   12212:	d003      	beq.n	1221c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x160>
   12214:	7ea0      	ldrb	r0, [r4, #26]
   12216:	b108      	cbz	r0, 1221c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x160>
   12218:	2011      	movs	r0, #17
   1221a:	bd10      	pop	{r4, pc}
   1221c:	2000      	movs	r0, #0
   1221e:	bd10      	pop	{r4, pc}
   12220:	b538      	push	{r3, r4, r5, lr}
   12222:	4604      	mov	r4, r0
   12224:	7800      	ldrb	r0, [r0, #0]
   12226:	28ef      	cmp	r0, #239	; 0xef
   12228:	d860      	bhi.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   1222a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1222e:	f8ad 0000 	strh.w	r0, [sp]
   12232:	9800      	ldr	r0, [sp, #0]
   12234:	f000 f9cf 	bl	125d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x51a>
   12238:	b3c0      	cbz	r0, 122ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1f0>
   1223a:	7860      	ldrb	r0, [r4, #1]
   1223c:	0701      	lsls	r1, r0, #28
   1223e:	d40f      	bmi.n	12260 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1a4>
   12240:	f8d4 2002 	ldr.w	r2, [r4, #2]
   12244:	f8d4 1005 	ldr.w	r1, [r4, #5]
   12248:	0a13      	lsrs	r3, r2, #8
   1224a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
   1224e:	d84d      	bhi.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   12250:	2320      	movs	r3, #32
   12252:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
   12256:	d849      	bhi.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   12258:	025a      	lsls	r2, r3, #9
   1225a:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   1225e:	d345      	bcc.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   12260:	7a61      	ldrb	r1, [r4, #9]
   12262:	b319      	cbz	r1, 122ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1f0>
   12264:	2907      	cmp	r1, #7
   12266:	d841      	bhi.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   12268:	7aa1      	ldrb	r1, [r4, #10]
   1226a:	b129      	cbz	r1, 12278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
   1226c:	2901      	cmp	r1, #1
   1226e:	d003      	beq.n	12278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
   12270:	2902      	cmp	r1, #2
   12272:	d001      	beq.n	12278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
   12274:	2903      	cmp	r1, #3
   12276:	d139      	bne.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   12278:	0742      	lsls	r2, r0, #29
   1227a:	d403      	bmi.n	12284 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c8>
   1227c:	2902      	cmp	r1, #2
   1227e:	d001      	beq.n	12284 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c8>
   12280:	2903      	cmp	r1, #3
   12282:	d105      	bne.n	12290 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d4>
   12284:	7ae1      	ldrb	r1, [r4, #11]
   12286:	b109      	cbz	r1, 1228c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d0>
   12288:	2901      	cmp	r1, #1
   1228a:	d12f      	bne.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   1228c:	0741      	lsls	r1, r0, #29
   1228e:	d407      	bmi.n	122a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e4>
   12290:	7ca1      	ldrb	r1, [r4, #18]
   12292:	b129      	cbz	r1, 122a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e4>
   12294:	2901      	cmp	r1, #1
   12296:	d003      	beq.n	122a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e4>
   12298:	2902      	cmp	r1, #2
   1229a:	d001      	beq.n	122a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e4>
   1229c:	2903      	cmp	r1, #3
   1229e:	d125      	bne.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122a0:	06c1      	lsls	r1, r0, #27
   122a2:	d504      	bpl.n	122ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1f2>
   122a4:	7d20      	ldrb	r0, [r4, #20]
   122a6:	2801      	cmp	r0, #1
   122a8:	d120      	bne.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122aa:	e01b      	b.n	122e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x228>
   122ac:	e01e      	b.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122ae:	7d21      	ldrb	r1, [r4, #20]
   122b0:	2902      	cmp	r1, #2
   122b2:	d10b      	bne.n	122cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   122b4:	07c1      	lsls	r1, r0, #31
   122b6:	d019      	beq.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122b8:	0741      	lsls	r1, r0, #29
   122ba:	d417      	bmi.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122bc:	0701      	lsls	r1, r0, #28
   122be:	d515      	bpl.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122c0:	0641      	lsls	r1, r0, #25
   122c2:	d413      	bmi.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122c4:	0681      	lsls	r1, r0, #26
   122c6:	d411      	bmi.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122c8:	0781      	lsls	r1, r0, #30
   122ca:	d40f      	bmi.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122cc:	06c0      	lsls	r0, r0, #27
   122ce:	d409      	bmi.n	122e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x228>
   122d0:	7da0      	ldrb	r0, [r4, #22]
   122d2:	2801      	cmp	r0, #1
   122d4:	d003      	beq.n	122de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   122d6:	2802      	cmp	r0, #2
   122d8:	d001      	beq.n	122de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   122da:	2803      	cmp	r0, #3
   122dc:	d106      	bne.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122de:	7de0      	ldrb	r0, [r4, #23]
   122e0:	280f      	cmp	r0, #15
   122e2:	d803      	bhi.n	122ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x230>
   122e4:	7e20      	ldrb	r0, [r4, #24]
   122e6:	b118      	cbz	r0, 122f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x234>
   122e8:	2801      	cmp	r0, #1
   122ea:	d001      	beq.n	122f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x234>
   122ec:	2012      	movs	r0, #18
   122ee:	bd38      	pop	{r3, r4, r5, pc}
   122f0:	2000      	movs	r0, #0
   122f2:	bd38      	pop	{r3, r4, r5, pc}
   122f4:	b510      	push	{r4, lr}
   122f6:	0004      	movs	r4, r0
   122f8:	d005      	beq.n	12306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24a>
   122fa:	f7fa feed 	bl	d0d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   122fe:	4384      	bics	r4, r0
   12300:	d001      	beq.n	12306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24a>
   12302:	2000      	movs	r0, #0
   12304:	bd10      	pop	{r4, pc}
   12306:	2001      	movs	r0, #1
   12308:	bd10      	pop	{r4, pc}
   1230a:	28fb      	cmp	r0, #251	; 0xfb
   1230c:	d802      	bhi.n	12314 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x258>
   1230e:	f5b1 6f29 	cmp.w	r1, #2704	; 0xa90
   12312:	d901      	bls.n	12318 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25c>
   12314:	2011      	movs	r0, #17
   12316:	4770      	bx	lr
   12318:	2000      	movs	r0, #0
   1231a:	4770      	bx	lr
   1231c:	381b      	subs	r0, #27
   1231e:	28e1      	cmp	r0, #225	; 0xe1
   12320:	d206      	bcs.n	12330 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x274>
   12322:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   12326:	d303      	bcc.n	12330 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x274>
   12328:	f244 2090 	movw	r0, #17040	; 0x4290
   1232c:	4281      	cmp	r1, r0
   1232e:	d901      	bls.n	12334 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x278>
   12330:	2012      	movs	r0, #18
   12332:	4770      	bx	lr
   12334:	2000      	movs	r0, #0
   12336:	4770      	bx	lr
   12338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1233c:	4605      	mov	r5, r0
   1233e:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
   12342:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
   12346:	4616      	mov	r6, r2
   12348:	3028      	adds	r0, #40	; 0x28
   1234a:	b111      	cbz	r1, 12352 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x296>
   1234c:	f7f9 fe4e 	bl	bfec <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
   12350:	e001      	b.n	12356 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x29a>
   12352:	f7f6 fce3 	bl	8d1c <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
   12356:	4680      	mov	r8, r0
   12358:	2102      	movs	r1, #2
   1235a:	f7fe f935 	bl	105c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1235e:	4287      	cmp	r7, r0
   12360:	d200      	bcs.n	12364 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a8>
   12362:	4638      	mov	r0, r7
   12364:	4607      	mov	r7, r0
   12366:	2102      	movs	r1, #2
   12368:	4640      	mov	r0, r8
   1236a:	f7fe f92d 	bl	105c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1236e:	4284      	cmp	r4, r0
   12370:	d200      	bcs.n	12374 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b8>
   12372:	4620      	mov	r0, r4
   12374:	8829      	ldrh	r1, [r5, #0]
   12376:	8031      	strh	r1, [r6, #0]
   12378:	2f1b      	cmp	r7, #27
   1237a:	d913      	bls.n	123a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
   1237c:	2ffb      	cmp	r7, #251	; 0xfb
   1237e:	d300      	bcc.n	12382 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
   12380:	27fb      	movs	r7, #251	; 0xfb
   12382:	8077      	strh	r7, [r6, #2]
   12384:	281b      	cmp	r0, #27
   12386:	d90f      	bls.n	123a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ec>
   12388:	28fb      	cmp	r0, #251	; 0xfb
   1238a:	d300      	bcc.n	1238e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
   1238c:	20fb      	movs	r0, #251	; 0xfb
   1238e:	80f0      	strh	r0, [r6, #6]
   12390:	4640      	mov	r0, r8
   12392:	f7ff feb4 	bl	120fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   12396:	80b0      	strh	r0, [r6, #4]
   12398:	4640      	mov	r0, r8
   1239a:	f7ff feb0 	bl	120fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   1239e:	8130      	strh	r0, [r6, #8]
   123a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123a4:	271b      	movs	r7, #27
   123a6:	e7ec      	b.n	12382 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
   123a8:	201b      	movs	r0, #27
   123aa:	e7f0      	b.n	1238e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
   123ac:	b510      	push	{r4, lr}
   123ae:	f000 f859 	bl	12464 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   123b2:	b918      	cbnz	r0, 123bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
   123b4:	f7f6 fbec 	bl	8b90 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   123b8:	2800      	cmp	r0, #0
   123ba:	d000      	beq.n	123be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x302>
   123bc:	2001      	movs	r0, #1
   123be:	bd10      	pop	{r4, pc}
   123c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123c4:	7890      	ldrb	r0, [r2, #2]
   123c6:	9e06      	ldr	r6, [sp, #24]
   123c8:	461d      	mov	r5, r3
   123ca:	4614      	mov	r4, r2
   123cc:	b908      	cbnz	r0, 123d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x316>
   123ce:	f7fa fe83 	bl	d0d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   123d2:	78e4      	ldrb	r4, [r4, #3]
   123d4:	4607      	mov	r7, r0
   123d6:	b914      	cbnz	r4, 123de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x322>
   123d8:	f7fa fe7e 	bl	d0d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   123dc:	4604      	mov	r4, r0
   123de:	b16f      	cbz	r7, 123fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   123e0:	b164      	cbz	r4, 123fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   123e2:	4638      	mov	r0, r7
   123e4:	f7ff fe95 	bl	12112 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   123e8:	4620      	mov	r0, r4
   123ea:	f7ff fe92 	bl	12112 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   123ee:	b12f      	cbz	r7, 123fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   123f0:	b124      	cbz	r4, 123fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   123f2:	702f      	strb	r7, [r5, #0]
   123f4:	7034      	strb	r4, [r6, #0]
   123f6:	2000      	movs	r0, #0
   123f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123fc:	2009      	movs	r0, #9
   123fe:	e7fb      	b.n	123f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x33c>
   12400:	b510      	push	{r4, lr}
   12402:	f7fa fe63 	bl	d0cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   12406:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1240a:	bd10      	pop	{r4, pc}
   1240c:	7801      	ldrb	r1, [r0, #0]
   1240e:	6840      	ldr	r0, [r0, #4]
   12410:	b109      	cbz	r1, 12416 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   12412:	f000 b80e 	b.w	12432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x376>
   12416:	f000 b800 	b.w	1241a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
   1241a:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
   1241e:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   12422:	b920      	cbnz	r0, 1242e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x372>
   12424:	b119      	cbz	r1, 1242e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x372>
   12426:	2904      	cmp	r1, #4
   12428:	d001      	beq.n	1242e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x372>
   1242a:	2001      	movs	r0, #1
   1242c:	4770      	bx	lr
   1242e:	2000      	movs	r0, #0
   12430:	4770      	bx	lr
   12432:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
   12436:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   1243a:	b920      	cbnz	r0, 12446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38a>
   1243c:	b119      	cbz	r1, 12446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38a>
   1243e:	2904      	cmp	r1, #4
   12440:	d001      	beq.n	12446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38a>
   12442:	2001      	movs	r0, #1
   12444:	4770      	bx	lr
   12446:	2000      	movs	r0, #0
   12448:	4770      	bx	lr
   1244a:	b510      	push	{r4, lr}
   1244c:	f7fa fe3e 	bl	d0cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   12450:	0a00      	lsrs	r0, r0, #8
   12452:	07c0      	lsls	r0, r0, #31
   12454:	d104      	bne.n	12460 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a4>
   12456:	f7fa fe39 	bl	d0cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1245a:	0ac0      	lsrs	r0, r0, #11
   1245c:	07c0      	lsls	r0, r0, #31
   1245e:	d000      	beq.n	12462 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a6>
   12460:	2001      	movs	r0, #1
   12462:	bd10      	pop	{r4, pc}
   12464:	b510      	push	{r4, lr}
   12466:	f7f9 fdcf 	bl	c008 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   1246a:	2804      	cmp	r0, #4
   1246c:	d003      	beq.n	12476 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ba>
   1246e:	2805      	cmp	r0, #5
   12470:	d001      	beq.n	12476 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ba>
   12472:	2000      	movs	r0, #0
   12474:	bd10      	pop	{r4, pc}
   12476:	2001      	movs	r0, #1
   12478:	bd10      	pop	{r4, pc}
   1247a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1247e:	b086      	sub	sp, #24
   12480:	4604      	mov	r4, r0
   12482:	8800      	ldrh	r0, [r0, #0]
   12484:	4669      	mov	r1, sp
   12486:	f7fd ffd0 	bl	1042a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1248a:	2800      	cmp	r0, #0
   1248c:	d151      	bne.n	12532 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   1248e:	9801      	ldr	r0, [sp, #4]
   12490:	f89d 1000 	ldrb.w	r1, [sp]
   12494:	3078      	adds	r0, #120	; 0x78
   12496:	2900      	cmp	r1, #0
   12498:	9901      	ldr	r1, [sp, #4]
   1249a:	d007      	beq.n	124ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f0>
   1249c:	f891 11f8 	ldrb.w	r1, [r1, #504]	; 0x1f8
   124a0:	f88d 1008 	strb.w	r1, [sp, #8]
   124a4:	7b81      	ldrb	r1, [r0, #14]
   124a6:	0689      	lsls	r1, r1, #26
   124a8:	d413      	bmi.n	124d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x416>
   124aa:	e009      	b.n	124c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x404>
   124ac:	f891 119e 	ldrb.w	r1, [r1, #414]	; 0x19e
   124b0:	f88d 1008 	strb.w	r1, [sp, #8]
   124b4:	7b41      	ldrb	r1, [r0, #13]
   124b6:	291d      	cmp	r1, #29
   124b8:	d00b      	beq.n	124d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x416>
   124ba:	e001      	b.n	124c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x404>
   124bc:	2101      	movs	r1, #1
   124be:	e000      	b.n	124c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
   124c0:	2100      	movs	r1, #0
   124c2:	f88d 100c 	strb.w	r1, [sp, #12]
   124c6:	2105      	movs	r1, #5
   124c8:	3046      	adds	r0, #70	; 0x46
   124ca:	f7ff f96d 	bl	117a8 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   124ce:	b128      	cbz	r0, 124dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x420>
   124d0:	e007      	b.n	124e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x426>
   124d2:	f89d 1008 	ldrb.w	r1, [sp, #8]
   124d6:	2900      	cmp	r1, #0
   124d8:	d1f2      	bne.n	124c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x404>
   124da:	e7ef      	b.n	124bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x400>
   124dc:	f89d 000c 	ldrb.w	r0, [sp, #12]
   124e0:	b330      	cbz	r0, 12530 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x474>
   124e2:	8921      	ldrh	r1, [r4, #8]
   124e4:	88e0      	ldrh	r0, [r4, #6]
   124e6:	f7ff ff19 	bl	1231c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x260>
   124ea:	2800      	cmp	r0, #0
   124ec:	d121      	bne.n	12532 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   124ee:	88a1      	ldrh	r1, [r4, #4]
   124f0:	8860      	ldrh	r0, [r4, #2]
   124f2:	f7ff ff13 	bl	1231c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x260>
   124f6:	2800      	cmp	r0, #0
   124f8:	d11b      	bne.n	12532 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   124fa:	8921      	ldrh	r1, [r4, #8]
   124fc:	88e0      	ldrh	r0, [r4, #6]
   124fe:	f7ff ff04 	bl	1230a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24e>
   12502:	2800      	cmp	r0, #0
   12504:	d115      	bne.n	12532 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   12506:	88a1      	ldrh	r1, [r4, #4]
   12508:	8860      	ldrh	r0, [r4, #2]
   1250a:	f7ff fefe 	bl	1230a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24e>
   1250e:	0006      	movs	r6, r0
   12510:	d10f      	bne.n	12532 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   12512:	f89d 0000 	ldrb.w	r0, [sp]
   12516:	9f01      	ldr	r7, [sp, #4]
   12518:	b170      	cbz	r0, 12538 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47c>
   1251a:	f507 75da 	add.w	r5, r7, #436	; 0x1b4
   1251e:	f04f 0801 	mov.w	r8, #1
   12522:	f885 8001 	strb.w	r8, [r5, #1]
   12526:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1252a:	b140      	cbz	r0, 1253e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x482>
   1252c:	263a      	movs	r6, #58	; 0x3a
   1252e:	e037      	b.n	125a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e4>
   12530:	201a      	movs	r0, #26
   12532:	b006      	add	sp, #24
   12534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12538:	f507 759a 	add.w	r5, r7, #308	; 0x134
   1253c:	e7ef      	b.n	1251e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x462>
   1253e:	f89d 0000 	ldrb.w	r0, [sp]
   12542:	f7ff fe04 	bl	1214e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
   12546:	4601      	mov	r1, r0
   12548:	aa02      	add	r2, sp, #8
   1254a:	4638      	mov	r0, r7
   1254c:	f7ff fef4 	bl	12338 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x27c>
   12550:	8861      	ldrh	r1, [r4, #2]
   12552:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   12556:	4281      	cmp	r1, r0
   12558:	d200      	bcs.n	1255c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a0>
   1255a:	4608      	mov	r0, r1
   1255c:	80e8      	strh	r0, [r5, #6]
   1255e:	88a1      	ldrh	r1, [r4, #4]
   12560:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   12564:	4281      	cmp	r1, r0
   12566:	d200      	bcs.n	1256a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ae>
   12568:	4608      	mov	r0, r1
   1256a:	8128      	strh	r0, [r5, #8]
   1256c:	88e2      	ldrh	r2, [r4, #6]
   1256e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   12572:	428a      	cmp	r2, r1
   12574:	d200      	bcs.n	12578 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4bc>
   12576:	4611      	mov	r1, r2
   12578:	8069      	strh	r1, [r5, #2]
   1257a:	8921      	ldrh	r1, [r4, #8]
   1257c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   12580:	4291      	cmp	r1, r2
   12582:	d300      	bcc.n	12586 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ca>
   12584:	4611      	mov	r1, r2
   12586:	f640 0248 	movw	r2, #2120	; 0x848
   1258a:	80a9      	strh	r1, [r5, #4]
   1258c:	4291      	cmp	r1, r2
   1258e:	d300      	bcc.n	12592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4d6>
   12590:	4611      	mov	r1, r2
   12592:	80a9      	strh	r1, [r5, #4]
   12594:	4290      	cmp	r0, r2
   12596:	d200      	bcs.n	1259a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   12598:	4602      	mov	r2, r0
   1259a:	812a      	strh	r2, [r5, #8]
   1259c:	f885 8000 	strb.w	r8, [r5]
   125a0:	2000      	movs	r0, #0
   125a2:	7068      	strb	r0, [r5, #1]
   125a4:	4630      	mov	r0, r6
   125a6:	e7c4      	b.n	12532 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   125a8:	b530      	push	{r4, r5, lr}
   125aa:	f340 0400 	sbfx	r4, r0, #0, #1
   125ae:	f340 0040 	sbfx	r0, r0, #1, #1
   125b2:	1c40      	adds	r0, r0, #1
   125b4:	9d03      	ldr	r5, [sp, #12]
   125b6:	1c64      	adds	r4, r4, #1
   125b8:	d000      	beq.n	125bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x500>
   125ba:	b119      	cbz	r1, 125c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x508>
   125bc:	b100      	cbz	r0, 125c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x504>
   125be:	b10a      	cbz	r2, 125c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x508>
   125c0:	b91c      	cbnz	r4, 125ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x50e>
   125c2:	e001      	b.n	125c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x50c>
   125c4:	2011      	movs	r0, #17
   125c6:	bd30      	pop	{r4, r5, pc}
   125c8:	2100      	movs	r1, #0
   125ca:	7019      	strb	r1, [r3, #0]
   125cc:	b900      	cbnz	r0, 125d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x514>
   125ce:	2200      	movs	r2, #0
   125d0:	702a      	strb	r2, [r5, #0]
   125d2:	2000      	movs	r0, #0
   125d4:	bd30      	pop	{r4, r5, pc}
   125d6:	b2c0      	uxtb	r0, r0
   125d8:	06c1      	lsls	r1, r0, #27
   125da:	d415      	bmi.n	12608 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54c>
   125dc:	0681      	lsls	r1, r0, #26
   125de:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   125e2:	d503      	bpl.n	125ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x530>
   125e4:	bb21      	cbnz	r1, 12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   125e6:	0781      	lsls	r1, r0, #30
   125e8:	d422      	bmi.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   125ea:	e001      	b.n	125f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x534>
   125ec:	2900      	cmp	r1, #0
   125ee:	d1fa      	bne.n	125e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52a>
   125f0:	0701      	lsls	r1, r0, #28
   125f2:	d51b      	bpl.n	1262c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
   125f4:	07c1      	lsls	r1, r0, #31
   125f6:	d01b      	beq.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   125f8:	0781      	lsls	r1, r0, #30
   125fa:	d419      	bmi.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   125fc:	0641      	lsls	r1, r0, #25
   125fe:	d417      	bmi.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   12600:	0741      	lsls	r1, r0, #29
   12602:	d415      	bmi.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   12604:	0680      	lsls	r0, r0, #26
   12606:	e00f      	b.n	12628 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   12608:	0641      	lsls	r1, r0, #25
   1260a:	d411      	bmi.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   1260c:	0681      	lsls	r1, r0, #26
   1260e:	d40f      	bmi.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   12610:	07c1      	lsls	r1, r0, #31
   12612:	ea4f 7180 	mov.w	r1, r0, lsl #30
   12616:	d004      	beq.n	12622 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x566>
   12618:	2900      	cmp	r1, #0
   1261a:	db02      	blt.n	12622 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x566>
   1261c:	0740      	lsls	r0, r0, #29
   1261e:	d405      	bmi.n	1262c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
   12620:	e006      	b.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   12622:	0701      	lsls	r1, r0, #28
   12624:	d404      	bmi.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   12626:	0740      	lsls	r0, r0, #29
   12628:	2800      	cmp	r0, #0
   1262a:	db01      	blt.n	12630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x574>
   1262c:	2001      	movs	r0, #1
   1262e:	4770      	bx	lr
   12630:	2000      	movs	r0, #0
   12632:	4770      	bx	lr
   12634:	b510      	push	{r4, lr}
   12636:	f7ff ff15 	bl	12464 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   1263a:	b110      	cbz	r0, 12642 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x586>
   1263c:	f7f9 fc9e 	bl	bf7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   12640:	b928      	cbnz	r0, 1264e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
   12642:	f7f6 faa5 	bl	8b90 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   12646:	b120      	cbz	r0, 12652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
   12648:	f7f5 fa46 	bl	7ad8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   1264c:	b108      	cbz	r0, 12652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
   1264e:	2001      	movs	r0, #1
   12650:	bd10      	pop	{r4, pc}
   12652:	2000      	movs	r0, #0
   12654:	bd10      	pop	{r4, pc}

00012656 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   12656:	6802      	ldr	r2, [r0, #0]
   12658:	b912      	cbnz	r2, 12660 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   1265a:	6001      	str	r1, [r0, #0]
   1265c:	4770      	bx	lr
   1265e:	4602      	mov	r2, r0
   12660:	6850      	ldr	r0, [r2, #4]
   12662:	b108      	cbz	r0, 12668 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   12664:	428a      	cmp	r2, r1
   12666:	d1fa      	bne.n	1265e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   12668:	428a      	cmp	r2, r1
   1266a:	d0f7      	beq.n	1265c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   1266c:	6051      	str	r1, [r2, #4]
   1266e:	4770      	bx	lr
   12670:	b510      	push	{r4, lr}
   12672:	f7f5 f963 	bl	793c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   12676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1267a:	f7fa bccf 	b.w	d01c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   1267e:	b510      	push	{r4, lr}
   12680:	f7f6 faa0 	bl	8bc4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
   12684:	b108      	cbz	r0, 1268a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
   12686:	21e2      	movs	r1, #226	; 0xe2
   12688:	e004      	b.n	12694 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   1268a:	f7f5 f97b 	bl	7984 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1268e:	2800      	cmp	r0, #0
   12690:	d003      	beq.n	1269a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
   12692:	21e7      	movs	r1, #231	; 0xe7
   12694:	2001      	movs	r0, #1
   12696:	f7f1 fabb 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1269a:	bd10      	pop	{r4, pc}
   1269c:	b50e      	push	{r1, r2, r3, lr}
   1269e:	4669      	mov	r1, sp
   126a0:	2001      	movs	r0, #1
   126a2:	f7fd fdc0 	bl	10226 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   126a6:	b148      	cbz	r0, 126bc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   126a8:	219c      	movs	r1, #156	; 0x9c
   126aa:	e01a      	b.n	126e2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   126ac:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   126b0:	2101      	movs	r1, #1
   126b2:	f7f1 fd35 	bl	4120 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   126b6:	b108      	cbz	r0, 126bc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   126b8:	21a0      	movs	r1, #160	; 0xa0
   126ba:	e012      	b.n	126e2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   126bc:	4668      	mov	r0, sp
   126be:	f7f1 fd09 	bl	40d4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   126c2:	2800      	cmp	r0, #0
   126c4:	d0f2      	beq.n	126ac <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x56>
   126c6:	4669      	mov	r1, sp
   126c8:	2000      	movs	r0, #0
   126ca:	f7fd fdac 	bl	10226 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   126ce:	b158      	cbz	r0, 126e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x92>
   126d0:	21a6      	movs	r1, #166	; 0xa6
   126d2:	e006      	b.n	126e2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   126d4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   126d8:	2100      	movs	r1, #0
   126da:	f7f1 fd21 	bl	4120 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   126de:	b118      	cbz	r0, 126e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x92>
   126e0:	21aa      	movs	r1, #170	; 0xaa
   126e2:	2001      	movs	r0, #1
   126e4:	f7f1 fa94 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   126e8:	4668      	mov	r0, sp
   126ea:	f7f1 fcf3 	bl	40d4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   126ee:	2800      	cmp	r0, #0
   126f0:	d0f0      	beq.n	126d4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7e>
   126f2:	bd0e      	pop	{r1, r2, r3, pc}
   126f4:	b510      	push	{r4, lr}
   126f6:	4604      	mov	r4, r0
   126f8:	e002      	b.n	12700 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xaa>
   126fa:	6820      	ldr	r0, [r4, #0]
   126fc:	4780      	blx	r0
   126fe:	6864      	ldr	r4, [r4, #4]
   12700:	2c00      	cmp	r4, #0
   12702:	d1fa      	bne.n	126fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa4>
   12704:	bd10      	pop	{r4, pc}
   12706:	b510      	push	{r4, lr}
   12708:	f7ff ffc8 	bl	1269c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x46>
   1270c:	f7f1 fe80 	bl	4410 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   12710:	f7f2 f9ee 	bl	4af0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   12714:	f7f2 fc82 	bl	501c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   12718:	2800      	cmp	r0, #0
   1271a:	d003      	beq.n	12724 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xce>
   1271c:	21c0      	movs	r1, #192	; 0xc0
   1271e:	2001      	movs	r0, #1
   12720:	f7f1 fa76 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12724:	bd10      	pop	{r4, pc}
   12726:	f7ff bfee 	b.w	12706 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xb0>
   1272a:	b510      	push	{r4, lr}
   1272c:	f7ff ffa7 	bl	1267e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x28>
   12730:	f7f7 fc98 	bl	a064 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   12734:	2800      	cmp	r0, #0
   12736:	d003      	beq.n	12740 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xea>
   12738:	21fe      	movs	r1, #254	; 0xfe
   1273a:	2001      	movs	r0, #1
   1273c:	f7f1 fa68 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12740:	bd10      	pop	{r4, pc}

00012742 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   12742:	b510      	push	{r4, lr}
   12744:	f7fb f9bc 	bl	dac0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   12748:	f7fa fe9e 	bl	d488 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1274c:	f7fa fd30 	bl	d1b0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   12750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12754:	f7fa be32 	b.w	d3bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00012758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   12758:	2801      	cmp	r0, #1
   1275a:	bf04      	itt	eq
   1275c:	2028      	moveq	r0, #40	; 0x28
   1275e:	4770      	bxeq	lr
   12760:	2802      	cmp	r0, #2
   12762:	bf04      	itt	eq
   12764:	2018      	moveq	r0, #24
   12766:	4770      	bxeq	lr
   12768:	2804      	cmp	r0, #4
   1276a:	bf12      	itee	ne
   1276c:	2808      	cmpne	r0, #8
   1276e:	f44f 70a8 	moveq.w	r0, #336	; 0x150
   12772:	4770      	bxeq	lr
   12774:	b510      	push	{r4, lr}
   12776:	f640 3178 	movw	r1, #2936	; 0xb78
   1277a:	203e      	movs	r0, #62	; 0x3e
   1277c:	f7f1 fa48 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   12780:	2801      	cmp	r0, #1
   12782:	bf04      	itt	eq
   12784:	f641 6014 	movweq	r0, #7700	; 0x1e14
   12788:	4770      	bxeq	lr
   1278a:	2802      	cmp	r0, #2
   1278c:	bf04      	itt	eq
   1278e:	f241 1030 	movweq	r0, #4400	; 0x1130
   12792:	4770      	bxeq	lr
   12794:	2804      	cmp	r0, #4
   12796:	bf04      	itt	eq
   12798:	f645 70b4 	movweq	r0, #24500	; 0x5fb4
   1279c:	4770      	bxeq	lr
   1279e:	2808      	cmp	r0, #8
   127a0:	bf04      	itt	eq
   127a2:	f247 303c 	movweq	r0, #29500	; 0x733c
   127a6:	4770      	bxeq	lr
   127a8:	b510      	push	{r4, lr}
   127aa:	f640 318c 	movw	r1, #2956	; 0xb8c
   127ae:	203e      	movs	r0, #62	; 0x3e
   127b0:	f7f1 fa2e 	bl	3c10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000127b4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   127b4:	b570      	push	{r4, r5, r6, lr}
   127b6:	4605      	mov	r5, r0
   127b8:	4614      	mov	r4, r2
   127ba:	4608      	mov	r0, r1
   127bc:	f7ff ffe0 	bl	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   127c0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   127c4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   127c8:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   127cc:	4620      	mov	r0, r4
   127ce:	2c01      	cmp	r4, #1
   127d0:	bf1a      	itte	ne
   127d2:	2802      	cmpne	r0, #2
   127d4:	f64e 2060 	movwne	r0, #60000	; 0xea60
   127d8:	f7ff ffd2 	bleq	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   127dc:	4428      	add	r0, r5
   127de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   127e2:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   127e6:	fbb0 f5f1 	udiv	r5, r0, r1
   127ea:	4620      	mov	r0, r4
   127ec:	f7ff ffb4 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   127f0:	4428      	add	r0, r5
   127f2:	1d40      	adds	r0, r0, #5
   127f4:	bd70      	pop	{r4, r5, r6, pc}

000127f6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   127f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127fa:	4607      	mov	r7, r0
   127fc:	461e      	mov	r6, r3
   127fe:	460d      	mov	r5, r1
   12800:	4614      	mov	r4, r2
   12802:	4610      	mov	r0, r2
   12804:	2a01      	cmp	r2, #1
   12806:	bf1a      	itte	ne
   12808:	2802      	cmpne	r0, #2
   1280a:	f64e 2060 	movwne	r0, #60000	; 0xea60
   1280e:	f7ff ffb7 	bleq	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   12812:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   12816:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1281a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1281e:	2d02      	cmp	r5, #2
   12820:	bf08      	it	eq
   12822:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   12826:	d009      	beq.n	1283c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x46>
   12828:	2d01      	cmp	r5, #1
   1282a:	bf08      	it	eq
   1282c:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   12830:	d004      	beq.n	1283c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x46>
   12832:	2d04      	cmp	r5, #4
   12834:	bf0c      	ite	eq
   12836:	2100      	moveq	r1, #0
   12838:	f241 7170 	movwne	r1, #6000	; 0x1770
   1283c:	4408      	add	r0, r1
   1283e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12842:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   12846:	fbb0 f5f1 	udiv	r5, r0, r1
   1284a:	4620      	mov	r0, r4
   1284c:	f7ff ff84 	bl	12758 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   12850:	4428      	add	r0, r5
   12852:	4430      	add	r0, r6
   12854:	1d40      	adds	r0, r0, #5
   12856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001285a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1285a:	b510      	push	{r4, lr}
   1285c:	4604      	mov	r4, r0
   1285e:	4608      	mov	r0, r1
   12860:	f7ff ff8e 	bl	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   12864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12868:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1286c:	fbb0 f0f1 	udiv	r0, r0, r1
   12870:	1a20      	subs	r0, r4, r0
   12872:	1e80      	subs	r0, r0, #2
   12874:	bd10      	pop	{r4, pc}

00012876 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   12876:	b510      	push	{r4, lr}
   12878:	4604      	mov	r4, r0
   1287a:	4608      	mov	r0, r1
   1287c:	f7ff ff80 	bl	12780 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   12880:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12884:	fbb0 f0f1 	udiv	r0, r0, r1
   12888:	1a20      	subs	r0, r4, r0
   1288a:	bd10      	pop	{r4, pc}

0001288c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   1288c:	2902      	cmp	r1, #2
   1288e:	bf08      	it	eq
   12890:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   12894:	d009      	beq.n	128aa <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1e>
   12896:	2901      	cmp	r1, #1
   12898:	bf08      	it	eq
   1289a:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   1289e:	d004      	beq.n	128aa <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1e>
   128a0:	2904      	cmp	r1, #4
   128a2:	bf0c      	ite	eq
   128a4:	2100      	moveq	r1, #0
   128a6:	f241 7170 	movwne	r1, #6000	; 0x1770
   128aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   128ae:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   128b2:	fbb1 f1f2 	udiv	r1, r1, r2
   128b6:	4408      	add	r0, r1
   128b8:	1e80      	subs	r0, r0, #2
   128ba:	4770      	bx	lr

000128bc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   128bc:	2902      	cmp	r1, #2
   128be:	bf08      	it	eq
   128c0:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   128c4:	d009      	beq.n	128da <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x1e>
   128c6:	2901      	cmp	r1, #1
   128c8:	bf08      	it	eq
   128ca:	f240 51dc 	movweq	r1, #1500	; 0x5dc
   128ce:	d004      	beq.n	128da <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x1e>
   128d0:	2904      	cmp	r1, #4
   128d2:	bf0c      	ite	eq
   128d4:	2100      	moveq	r1, #0
   128d6:	f241 7170 	movwne	r1, #6000	; 0x1770
   128da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   128de:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   128e2:	fbb1 f1f2 	udiv	r1, r1, r2
   128e6:	4408      	add	r0, r1
   128e8:	4770      	bx	lr

000128ea <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>:
   128ea:	2100      	movs	r1, #0
   128ec:	6001      	str	r1, [r0, #0]
   128ee:	6041      	str	r1, [r0, #4]
   128f0:	4770      	bx	lr

000128f2 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   128f2:	680a      	ldr	r2, [r1, #0]
   128f4:	6002      	str	r2, [r0, #0]
   128f6:	790b      	ldrb	r3, [r1, #4]
   128f8:	7103      	strb	r3, [r0, #4]
   128fa:	4770      	bx	lr

000128fc <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   128fc:	2100      	movs	r1, #0
   128fe:	6001      	str	r1, [r0, #0]
   12900:	8081      	strh	r1, [r0, #4]
   12902:	4770      	bx	lr
   12904:	1702080c 	.word	0x1702080c
   12908:	0201010d 	.word	0x0201010d
   1290c:	01010909 	.word	0x01010909
   12910:	18090206 	.word	0x18090206
   12914:	01010318 	.word	0x01010318
   12918:	03030909 	.word	0x03030909
   1291c:	00000005 	.word	0x00000005

00012920 <bt_ready>:
	net_buf_unref(rsp);
}


static void bt_ready(int err)
{
   12920:	b570      	push	{r4, r5, r6, lr}
   12922:	b09a      	sub	sp, #104	; 0x68
	char addr_s[BT_ADDR_LE_STR_LEN];
	bt_addr_le_t addr = {0};
   12924:	2300      	movs	r3, #0
	size_t count = 1;
   12926:	2601      	movs	r6, #1
	bt_addr_le_t addr = {0};
   12928:	9308      	str	r3, [sp, #32]
	size_t count = 1;
   1292a:	9607      	str	r6, [sp, #28]
	bt_addr_le_t addr = {0};
   1292c:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23

	if (err) {
   12930:	4601      	mov	r1, r0
   12932:	b120      	cbz	r0, 1293e <bt_ready+0x1e>
		printk("Bluetooth init failed (err %d)\n", err);
   12934:	4827      	ldr	r0, [pc, #156]	; (129d4 <bt_ready+0xb4>)
	 */

	bt_id_get(&addr, &count);
	bt_addr_le_to_str(&addr, addr_s, sizeof(addr_s));

	printk("Beacon started, advertising as %s\n", addr_s);
   12936:	f00a f937 	bl	1cba8 <printk>
}
   1293a:	b01a      	add	sp, #104	; 0x68
   1293c:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
   1293e:	4d26      	ldr	r5, [pc, #152]	; (129d8 <bt_ready+0xb8>)
	printk("Bluetooth initialized\n");
   12940:	4826      	ldr	r0, [pc, #152]	; (129dc <bt_ready+0xbc>)
   12942:	f00a f931 	bl	1cba8 <printk>
	err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
   12946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12948:	ac0d      	add	r4, sp, #52	; 0x34
   1294a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1294c:	682b      	ldr	r3, [r5, #0]
   1294e:	6023      	str	r3, [r4, #0]
   12950:	4923      	ldr	r1, [pc, #140]	; (129e0 <bt_ready+0xc0>)
   12952:	4b24      	ldr	r3, [pc, #144]	; (129e4 <bt_ready+0xc4>)
   12954:	9600      	str	r6, [sp, #0]
   12956:	2203      	movs	r2, #3
   12958:	a80d      	add	r0, sp, #52	; 0x34
   1295a:	f004 fcc5 	bl	172e8 <bt_le_adv_start>
	if (err) {
   1295e:	4601      	mov	r1, r0
   12960:	b108      	cbz	r0, 12966 <bt_ready+0x46>
		printk("Advertising failed to start (err %d)\n", err);
   12962:	4821      	ldr	r0, [pc, #132]	; (129e8 <bt_ready+0xc8>)
   12964:	e7e7      	b.n	12936 <bt_ready+0x16>
	bt_id_get(&addr, &count);
   12966:	a907      	add	r1, sp, #28
   12968:	a808      	add	r0, sp, #32
   1296a:	f003 ff6d 	bl	16848 <bt_id_get>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1296e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12972:	ac0a      	add	r4, sp, #40	; 0x28
   12974:	2b03      	cmp	r3, #3
   12976:	d827      	bhi.n	129c8 <bt_ready+0xa8>
   12978:	e8df f003 	tbb	[pc, r3]
   1297c:	24222002 	.word	0x24222002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   12980:	491a      	ldr	r1, [pc, #104]	; (129ec <bt_ready+0xcc>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   12982:	4620      	mov	r0, r4
   12984:	f00b faff 	bl	1df86 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   12988:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1298c:	9304      	str	r3, [sp, #16]
   1298e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   12992:	9303      	str	r3, [sp, #12]
   12994:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12998:	9302      	str	r3, [sp, #8]
   1299a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1299e:	9301      	str	r3, [sp, #4]
   129a0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   129a4:	9300      	str	r3, [sp, #0]
   129a6:	211e      	movs	r1, #30
   129a8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   129ac:	4a10      	ldr	r2, [pc, #64]	; (129f0 <bt_ready+0xd0>)
   129ae:	9405      	str	r4, [sp, #20]
   129b0:	a812      	add	r0, sp, #72	; 0x48
   129b2:	f00a f906 	bl	1cbc2 <snprintk>
	printk("Beacon started, advertising as %s\n", addr_s);
   129b6:	480f      	ldr	r0, [pc, #60]	; (129f4 <bt_ready+0xd4>)
   129b8:	a912      	add	r1, sp, #72	; 0x48
   129ba:	e7bc      	b.n	12936 <bt_ready+0x16>
		strcpy(type, "random");
   129bc:	490e      	ldr	r1, [pc, #56]	; (129f8 <bt_ready+0xd8>)
   129be:	e7e0      	b.n	12982 <bt_ready+0x62>
		strcpy(type, "public-id");
   129c0:	490e      	ldr	r1, [pc, #56]	; (129fc <bt_ready+0xdc>)
   129c2:	e7de      	b.n	12982 <bt_ready+0x62>
		strcpy(type, "random-id");
   129c4:	490e      	ldr	r1, [pc, #56]	; (12a00 <bt_ready+0xe0>)
   129c6:	e7dc      	b.n	12982 <bt_ready+0x62>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   129c8:	4a0e      	ldr	r2, [pc, #56]	; (12a04 <bt_ready+0xe4>)
   129ca:	210a      	movs	r1, #10
   129cc:	4620      	mov	r0, r4
   129ce:	f00a f8f8 	bl	1cbc2 <snprintk>
		break;
   129d2:	e7d9      	b.n	12988 <bt_ready+0x68>
   129d4:	000209b4 	.word	0x000209b4
   129d8:	000203d0 	.word	0x000203d0
   129dc:	000209d4 	.word	0x000209d4
   129e0:	00020458 	.word	0x00020458
   129e4:	00020470 	.word	0x00020470
   129e8:	000209eb 	.word	0x000209eb
   129ec:	00020a11 	.word	0x00020a11
   129f0:	00020a33 	.word	0x00020a33
   129f4:	00020a56 	.word	0x00020a56
   129f8:	00020a18 	.word	0x00020a18
   129fc:	00020a1f 	.word	0x00020a1f
   12a00:	00020a29 	.word	0x00020a29
   12a04:	00021ea4 	.word	0x00021ea4

00012a08 <main>:

void main(void)
{
   12a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	printk("Starting Beacon Demo\n");
   12a0a:	481e      	ldr	r0, [pc, #120]	; (12a84 <main+0x7c>)
   12a0c:	f00a f8cc 	bl	1cba8 <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
   12a10:	481d      	ldr	r0, [pc, #116]	; (12a88 <main+0x80>)
   12a12:	f004 fa9d 	bl	16f50 <bt_enable>
	if (err) {
   12a16:	4601      	mov	r1, r0
   12a18:	b110      	cbz	r0, 12a20 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
   12a1a:	481c      	ldr	r0, [pc, #112]	; (12a8c <main+0x84>)
   12a1c:	f00a f8c4 	bl	1cba8 <printk>
	struct net_buf *buf, *rsp = NULL;
   12a20:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_VS_WRITE_TX_POWER_LEVEL,
   12a22:	2104      	movs	r1, #4
   12a24:	f64f 400e 	movw	r0, #64526	; 0xfc0e
	struct net_buf *buf, *rsp = NULL;
   12a28:	9501      	str	r5, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_VS_WRITE_TX_POWER_LEVEL,
   12a2a:	f003 f921 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   12a2e:	4604      	mov	r4, r0
   12a30:	b920      	cbnz	r0, 12a3c <main+0x34>
		printk("Unable to allocate command buffer\n");
   12a32:	4817      	ldr	r0, [pc, #92]	; (12a90 <main+0x88>)
   12a34:	f00a f8b8 	bl	1cba8 <printk>

	set_tx_power(BT_HCI_VS_LL_HANDLE_TYPE_ADV,
				     0, TX_VALUE);


}
   12a38:	b003      	add	sp, #12
   12a3a:	bd30      	pop	{r4, r5, pc}
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   12a3c:	2104      	movs	r1, #4
   12a3e:	3008      	adds	r0, #8
   12a40:	f00c fcf9 	bl	1f436 <net_buf_simple_add>
	cp->tx_power_level = tx_pwr_lvl;
   12a44:	2308      	movs	r3, #8
	cp->handle = sys_cpu_to_le16(handle);
   12a46:	7045      	strb	r5, [r0, #1]
   12a48:	7085      	strb	r5, [r0, #2]
	cp->handle_type = handle_type;
   12a4a:	7005      	strb	r5, [r0, #0]
	cp->tx_power_level = tx_pwr_lvl;
   12a4c:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_WRITE_TX_POWER_LEVEL,
   12a4e:	aa01      	add	r2, sp, #4
   12a50:	4621      	mov	r1, r4
   12a52:	f64f 400e 	movw	r0, #64526	; 0xfc0e
   12a56:	f003 f943 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   12a5a:	9a01      	ldr	r2, [sp, #4]
   12a5c:	4601      	mov	r1, r0
   12a5e:	b130      	cbz	r0, 12a6e <main+0x66>
		uint8_t reason = rsp ?
   12a60:	b10a      	cbz	r2, 12a66 <main+0x5e>
   12a62:	6893      	ldr	r3, [r2, #8]
   12a64:	781a      	ldrb	r2, [r3, #0]
		printk("Set Tx power err: %d reason 0x%02x\n", err, reason);
   12a66:	480b      	ldr	r0, [pc, #44]	; (12a94 <main+0x8c>)
   12a68:	f00a f89e 	bl	1cba8 <printk>
		return;
   12a6c:	e7e4      	b.n	12a38 <main+0x30>
	printk("Actual Tx Power: %d\n", rp->selected_tx_power);
   12a6e:	6893      	ldr	r3, [r2, #8]
   12a70:	4809      	ldr	r0, [pc, #36]	; (12a98 <main+0x90>)
   12a72:	f993 1004 	ldrsb.w	r1, [r3, #4]
   12a76:	f00a f897 	bl	1cba8 <printk>
	net_buf_unref(rsp);
   12a7a:	9801      	ldr	r0, [sp, #4]
   12a7c:	f007 fa82 	bl	19f84 <net_buf_unref>
   12a80:	e7da      	b.n	12a38 <main+0x30>
   12a82:	bf00      	nop
   12a84:	00020a79 	.word	0x00020a79
   12a88:	00012921 	.word	0x00012921
   12a8c:	000209b4 	.word	0x000209b4
   12a90:	00020a8f 	.word	0x00020a8f
   12a94:	00020ab2 	.word	0x00020ab2
   12a98:	00020ad6 	.word	0x00020ad6

00012a9c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   12a9c:	680b      	ldr	r3, [r1, #0]
   12a9e:	3301      	adds	r3, #1
   12aa0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   12aa2:	4b01      	ldr	r3, [pc, #4]	; (12aa8 <char_out+0xc>)
   12aa4:	681b      	ldr	r3, [r3, #0]
   12aa6:	4718      	bx	r3
   12aa8:	200004f8 	.word	0x200004f8

00012aac <__printk_hook_install>:
	_char_out = fn;
   12aac:	4b01      	ldr	r3, [pc, #4]	; (12ab4 <__printk_hook_install+0x8>)
   12aae:	6018      	str	r0, [r3, #0]
}
   12ab0:	4770      	bx	lr
   12ab2:	bf00      	nop
   12ab4:	200004f8 	.word	0x200004f8

00012ab8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   12ab8:	b507      	push	{r0, r1, r2, lr}
   12aba:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12abc:	2100      	movs	r1, #0
{
   12abe:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   12ac0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   12ac2:	4803      	ldr	r0, [pc, #12]	; (12ad0 <vprintk+0x18>)
   12ac4:	a901      	add	r1, sp, #4
   12ac6:	f000 f8ff 	bl	12cc8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   12aca:	b003      	add	sp, #12
   12acc:	f85d fb04 	ldr.w	pc, [sp], #4
   12ad0:	00012a9d 	.word	0x00012a9d

00012ad4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12ad4:	b530      	push	{r4, r5, lr}
   12ad6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   12ad8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   12adc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   12ade:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   12ae0:	a901      	add	r1, sp, #4
   12ae2:	4805      	ldr	r0, [pc, #20]	; (12af8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   12ae4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   12ae6:	f000 f8ef 	bl	12cc8 <cbvprintf>

	if (ctx.count < ctx.max) {
   12aea:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   12aee:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12af0:	bfb8      	it	lt
   12af2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12af4:	b005      	add	sp, #20
   12af6:	bd30      	pop	{r4, r5, pc}
   12af8:	0001cb83 	.word	0x0001cb83

00012afc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12b00:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12b04:	f019 0808 	ands.w	r8, r9, #8
{
   12b08:	4604      	mov	r4, r0
   12b0a:	4693      	mov	fp, r2
	if (processing) {
   12b0c:	d00d      	beq.n	12b2a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   12b0e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12b10:	bf0c      	ite	eq
   12b12:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12b16:	f049 0920 	orrne.w	r9, r9, #32
   12b1a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12b1e:	f38b 8811 	msr	BASEPRI, fp
   12b22:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12b2a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   12b2e:	2902      	cmp	r1, #2
   12b30:	d107      	bne.n	12b42 <process_event+0x46>
			evt = process_recheck(mgr);
   12b32:	4620      	mov	r0, r4
   12b34:	f00a f852 	bl	1cbdc <process_recheck>
		if (evt == EVT_NOP) {
   12b38:	2800      	cmp	r0, #0
   12b3a:	d0f0      	beq.n	12b1e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   12b3c:	2801      	cmp	r0, #1
   12b3e:	8b23      	ldrh	r3, [r4, #24]
   12b40:	d150      	bne.n	12be4 <process_event+0xe8>
			res = mgr->last_res;
   12b42:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12b44:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   12b46:	2f00      	cmp	r7, #0
   12b48:	da15      	bge.n	12b76 <process_event+0x7a>
		*clients = mgr->clients;
   12b4a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12b4c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   12b50:	e9c4 8800 	strd	r8, r8, [r4]
   12b54:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12b58:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   12b5a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12b5c:	8b21      	ldrh	r1, [r4, #24]
   12b5e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12b62:	45ca      	cmp	sl, r9
   12b64:	d002      	beq.n	12b6c <process_event+0x70>
		if (do_monitors
   12b66:	68a3      	ldr	r3, [r4, #8]
   12b68:	2b00      	cmp	r3, #0
   12b6a:	d15c      	bne.n	12c26 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   12b6c:	b90d      	cbnz	r5, 12b72 <process_event+0x76>
		    || (transit != NULL)) {
   12b6e:	2e00      	cmp	r6, #0
   12b70:	d074      	beq.n	12c5c <process_event+0x160>
   12b72:	2300      	movs	r3, #0
   12b74:	e058      	b.n	12c28 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12b76:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12b7a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12b7c:	2a01      	cmp	r2, #1
   12b7e:	d820      	bhi.n	12bc2 <process_event+0xc6>
		*clients = mgr->clients;
   12b80:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   12b84:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   12b86:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   12b88:	b289      	uxth	r1, r1
	list->tail = NULL;
   12b8a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12b8e:	d10c      	bne.n	12baa <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12b90:	2d00      	cmp	r5, #0
   12b92:	462b      	mov	r3, r5
   12b94:	bf38      	it	cc
   12b96:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12b98:	b12b      	cbz	r3, 12ba6 <process_event+0xaa>
				mgr->refs += 1U;
   12b9a:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12b9c:	681b      	ldr	r3, [r3, #0]
   12b9e:	3201      	adds	r2, #1
   12ba0:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12ba2:	2b00      	cmp	r3, #0
   12ba4:	d1f8      	bne.n	12b98 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12ba6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12baa:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12bac:	4620      	mov	r0, r4
   12bae:	f00a f815 	bl	1cbdc <process_recheck>
   12bb2:	4606      	mov	r6, r0
   12bb4:	2800      	cmp	r0, #0
   12bb6:	d0d1      	beq.n	12b5c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12bb8:	8b23      	ldrh	r3, [r4, #24]
   12bba:	f043 0320 	orr.w	r3, r3, #32
   12bbe:	8323      	strh	r3, [r4, #24]
   12bc0:	e7cb      	b.n	12b5a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12bc2:	2b04      	cmp	r3, #4
   12bc4:	d10c      	bne.n	12be0 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12bc6:	f021 0107 	bic.w	r1, r1, #7
   12bca:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12bcc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12bce:	4620      	mov	r0, r4
   12bd0:	f00a f804 	bl	1cbdc <process_recheck>
   12bd4:	4605      	mov	r5, r0
   12bd6:	2800      	cmp	r0, #0
   12bd8:	d0bf      	beq.n	12b5a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12bda:	f041 0120 	orr.w	r1, r1, #32
   12bde:	8321      	strh	r1, [r4, #24]
   12be0:	2500      	movs	r5, #0
   12be2:	e7ba      	b.n	12b5a <process_event+0x5e>
		} else if (evt == EVT_START) {
   12be4:	2803      	cmp	r0, #3
   12be6:	d109      	bne.n	12bfc <process_event+0x100>
			transit = mgr->transitions->start;
   12be8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12bea:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   12bee:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12bf0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12bf4:	8323      	strh	r3, [r4, #24]
}
   12bf6:	2500      	movs	r5, #0
		res = 0;
   12bf8:	462f      	mov	r7, r5
   12bfa:	e7af      	b.n	12b5c <process_event+0x60>
		} else if (evt == EVT_STOP) {
   12bfc:	2804      	cmp	r0, #4
   12bfe:	d106      	bne.n	12c0e <process_event+0x112>
			transit = mgr->transitions->stop;
   12c00:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c02:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   12c06:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c08:	f043 0304 	orr.w	r3, r3, #4
   12c0c:	e7f2      	b.n	12bf4 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   12c0e:	2805      	cmp	r0, #5
   12c10:	d106      	bne.n	12c20 <process_event+0x124>
			transit = mgr->transitions->reset;
   12c12:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c14:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   12c18:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12c1a:	f043 0305 	orr.w	r3, r3, #5
   12c1e:	e7e9      	b.n	12bf4 <process_event+0xf8>
   12c20:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   12c22:	462e      	mov	r6, r5
   12c24:	e7e8      	b.n	12bf8 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   12c26:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12c28:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12c2c:	8321      	strh	r1, [r4, #24]
   12c2e:	f38b 8811 	msr	BASEPRI, fp
   12c32:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12c36:	bb03      	cbnz	r3, 12c7a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   12c38:	2d00      	cmp	r5, #0
   12c3a:	d133      	bne.n	12ca4 <process_event+0x1a8>
			if (transit != NULL) {
   12c3c:	b116      	cbz	r6, 12c44 <process_event+0x148>
				transit(mgr, transition_complete);
   12c3e:	4921      	ldr	r1, [pc, #132]	; (12cc4 <process_event+0x1c8>)
   12c40:	4620      	mov	r0, r4
   12c42:	47b0      	blx	r6
	__asm__ volatile(
   12c44:	f04f 0340 	mov.w	r3, #64	; 0x40
   12c48:	f3ef 8b11 	mrs	fp, BASEPRI
   12c4c:	f383 8811 	msr	BASEPRI, r3
   12c50:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12c54:	8b23      	ldrh	r3, [r4, #24]
   12c56:	f023 0308 	bic.w	r3, r3, #8
   12c5a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12c5c:	8b23      	ldrh	r3, [r4, #24]
   12c5e:	06da      	lsls	r2, r3, #27
   12c60:	d528      	bpl.n	12cb4 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12c62:	f023 0310 	bic.w	r3, r3, #16
   12c66:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12c68:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   12c6a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   12c6e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   12c72:	2900      	cmp	r1, #0
   12c74:	f47f af5b 	bne.w	12b2e <process_event+0x32>
out:
   12c78:	e751      	b.n	12b1e <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12c7a:	68a1      	ldr	r1, [r4, #8]
   12c7c:	2900      	cmp	r1, #0
   12c7e:	d0db      	beq.n	12c38 <process_event+0x13c>
	return node->next;
   12c80:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   12c82:	f8d1 b004 	ldr.w	fp, [r1, #4]
   12c86:	2b00      	cmp	r3, #0
   12c88:	bf38      	it	cc
   12c8a:	2300      	movcc	r3, #0
   12c8c:	4699      	mov	r9, r3
   12c8e:	4652      	mov	r2, sl
   12c90:	463b      	mov	r3, r7
   12c92:	4620      	mov	r0, r4
   12c94:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12c96:	f1b9 0f00 	cmp.w	r9, #0
   12c9a:	d0cd      	beq.n	12c38 <process_event+0x13c>
   12c9c:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12ca0:	4649      	mov	r1, r9
   12ca2:	e7ee      	b.n	12c82 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12ca4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   12ca6:	463b      	mov	r3, r7
   12ca8:	4652      	mov	r2, sl
   12caa:	4620      	mov	r0, r4
   12cac:	682d      	ldr	r5, [r5, #0]
   12cae:	f009 ffb1 	bl	1cc14 <notify_one>
   12cb2:	e7c1      	b.n	12c38 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12cb4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12cb8:	bf1e      	ittt	ne
   12cba:	f023 0320 	bicne.w	r3, r3, #32
   12cbe:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   12cc0:	2102      	movne	r1, #2
   12cc2:	e7d2      	b.n	12c6a <process_event+0x16e>
   12cc4:	0001cc41 	.word	0x0001cc41

00012cc8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   12cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ccc:	b091      	sub	sp, #68	; 0x44
   12cce:	468b      	mov	fp, r1
   12cd0:	9002      	str	r0, [sp, #8]
   12cd2:	4692      	mov	sl, r2
   12cd4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12cd6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12cd8:	f89a 0000 	ldrb.w	r0, [sl]
   12cdc:	b908      	cbnz	r0, 12ce2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   12cde:	4628      	mov	r0, r5
   12ce0:	e35e      	b.n	133a0 <cbvprintf+0x6d8>
		if (*fp != '%') {
   12ce2:	2825      	cmp	r0, #37	; 0x25
   12ce4:	f10a 0701 	add.w	r7, sl, #1
   12ce8:	d007      	beq.n	12cfa <cbvprintf+0x32>
			OUTC('%');
   12cea:	9b02      	ldr	r3, [sp, #8]
   12cec:	4659      	mov	r1, fp
   12cee:	4798      	blx	r3
   12cf0:	2800      	cmp	r0, #0
   12cf2:	f2c0 8355 	blt.w	133a0 <cbvprintf+0x6d8>
   12cf6:	3501      	adds	r5, #1
			break;
   12cf8:	e210      	b.n	1311c <cbvprintf+0x454>
		} state = {
   12cfa:	2218      	movs	r2, #24
   12cfc:	2100      	movs	r1, #0
   12cfe:	a80a      	add	r0, sp, #40	; 0x28
   12d00:	f00b f9b5 	bl	1e06e <memset>
	if (*sp == '%') {
   12d04:	f89a 3001 	ldrb.w	r3, [sl, #1]
   12d08:	2b25      	cmp	r3, #37	; 0x25
   12d0a:	d078      	beq.n	12dfe <cbvprintf+0x136>
   12d0c:	2200      	movs	r2, #0
   12d0e:	4694      	mov	ip, r2
   12d10:	4616      	mov	r6, r2
   12d12:	4696      	mov	lr, r2
   12d14:	4610      	mov	r0, r2
   12d16:	4639      	mov	r1, r7
		switch (*sp) {
   12d18:	f817 3b01 	ldrb.w	r3, [r7], #1
   12d1c:	2b2b      	cmp	r3, #43	; 0x2b
   12d1e:	f000 809d 	beq.w	12e5c <cbvprintf+0x194>
   12d22:	f200 8094 	bhi.w	12e4e <cbvprintf+0x186>
   12d26:	2b20      	cmp	r3, #32
   12d28:	f000 809b 	beq.w	12e62 <cbvprintf+0x19a>
   12d2c:	2b23      	cmp	r3, #35	; 0x23
   12d2e:	f000 809a 	beq.w	12e66 <cbvprintf+0x19e>
   12d32:	b128      	cbz	r0, 12d40 <cbvprintf+0x78>
   12d34:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12d38:	f040 0004 	orr.w	r0, r0, #4
   12d3c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12d40:	f1be 0f00 	cmp.w	lr, #0
   12d44:	d005      	beq.n	12d52 <cbvprintf+0x8a>
   12d46:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12d4a:	f040 0008 	orr.w	r0, r0, #8
   12d4e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12d52:	b12e      	cbz	r6, 12d60 <cbvprintf+0x98>
   12d54:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12d58:	f040 0010 	orr.w	r0, r0, #16
   12d5c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12d60:	f1bc 0f00 	cmp.w	ip, #0
   12d64:	d005      	beq.n	12d72 <cbvprintf+0xaa>
   12d66:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12d6a:	f040 0020 	orr.w	r0, r0, #32
   12d6e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12d72:	b12a      	cbz	r2, 12d80 <cbvprintf+0xb8>
   12d74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12d7c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   12d80:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12d84:	f002 0044 	and.w	r0, r2, #68	; 0x44
   12d88:	2844      	cmp	r0, #68	; 0x44
   12d8a:	d103      	bne.n	12d94 <cbvprintf+0xcc>
		conv->flag_zero = false;
   12d8c:	f36f 1286 	bfc	r2, #6, #1
   12d90:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   12d94:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12d98:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   12d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12d9e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12da2:	d17b      	bne.n	12e9c <cbvprintf+0x1d4>
		conv->width_star = true;
   12da4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12da8:	f042 0201 	orr.w	r2, r2, #1
   12dac:	1c4b      	adds	r3, r1, #1
   12dae:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   12db2:	781a      	ldrb	r2, [r3, #0]
   12db4:	2a2e      	cmp	r2, #46	; 0x2e
   12db6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12dba:	bf0c      	ite	eq
   12dbc:	2101      	moveq	r1, #1
   12dbe:	2100      	movne	r1, #0
   12dc0:	f361 0241 	bfi	r2, r1, #1, #1
   12dc4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   12dc8:	d174      	bne.n	12eb4 <cbvprintf+0x1ec>
	if (*sp == '*') {
   12dca:	785a      	ldrb	r2, [r3, #1]
   12dcc:	2a2a      	cmp	r2, #42	; 0x2a
   12dce:	d06a      	beq.n	12ea6 <cbvprintf+0x1de>
   12dd0:	3301      	adds	r3, #1
	size_t val = 0;
   12dd2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   12dd4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12dd6:	4618      	mov	r0, r3
   12dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
   12ddc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12de0:	2f09      	cmp	r7, #9
   12de2:	f240 808e 	bls.w	12f02 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   12de6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   12dea:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   12dec:	f3c2 0040 	ubfx	r0, r2, #1, #1
   12df0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   12df4:	f361 0241 	bfi	r2, r1, #1, #1
   12df8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12dfc:	e05a      	b.n	12eb4 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   12dfe:	f10a 0702 	add.w	r7, sl, #2
   12e02:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   12e06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12e0a:	07d9      	lsls	r1, r3, #31
   12e0c:	f140 8149 	bpl.w	130a2 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   12e10:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   12e14:	f1b9 0f00 	cmp.w	r9, #0
   12e18:	da07      	bge.n	12e2a <cbvprintf+0x162>
				conv->flag_dash = true;
   12e1a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12e1e:	f042 0204 	orr.w	r2, r2, #4
   12e22:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   12e26:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   12e2a:	075a      	lsls	r2, r3, #29
   12e2c:	f140 8142 	bpl.w	130b4 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   12e30:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   12e34:	f1b8 0f00 	cmp.w	r8, #0
   12e38:	f280 8141 	bge.w	130be <cbvprintf+0x3f6>
				conv->prec_present = false;
   12e3c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12e40:	f36f 0341 	bfc	r3, #1, #1
   12e44:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   12e48:	f04f 38ff 	mov.w	r8, #4294967295
   12e4c:	e137      	b.n	130be <cbvprintf+0x3f6>
		switch (*sp) {
   12e4e:	2b2d      	cmp	r3, #45	; 0x2d
   12e50:	d00c      	beq.n	12e6c <cbvprintf+0x1a4>
   12e52:	2b30      	cmp	r3, #48	; 0x30
   12e54:	f47f af6d 	bne.w	12d32 <cbvprintf+0x6a>
			conv->flag_zero = true;
   12e58:	2201      	movs	r2, #1
	} while (loop);
   12e5a:	e75c      	b.n	12d16 <cbvprintf+0x4e>
			conv->flag_plus = true;
   12e5c:	f04f 0e01 	mov.w	lr, #1
   12e60:	e759      	b.n	12d16 <cbvprintf+0x4e>
			conv->flag_space = true;
   12e62:	2601      	movs	r6, #1
   12e64:	e757      	b.n	12d16 <cbvprintf+0x4e>
			conv->flag_hash = true;
   12e66:	f04f 0c01 	mov.w	ip, #1
   12e6a:	e754      	b.n	12d16 <cbvprintf+0x4e>
		switch (*sp) {
   12e6c:	2001      	movs	r0, #1
   12e6e:	e752      	b.n	12d16 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   12e70:	fb0c 0202 	mla	r2, ip, r2, r0
   12e74:	3a30      	subs	r2, #48	; 0x30
   12e76:	4633      	mov	r3, r6
   12e78:	461e      	mov	r6, r3
   12e7a:	f816 0b01 	ldrb.w	r0, [r6], #1
   12e7e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12e82:	2f09      	cmp	r7, #9
   12e84:	d9f4      	bls.n	12e70 <cbvprintf+0x1a8>
	if (sp != wp) {
   12e86:	4299      	cmp	r1, r3
   12e88:	d093      	beq.n	12db2 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   12e8a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   12e8e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   12e90:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12e92:	f362 0141 	bfi	r1, r2, #1, #1
   12e96:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   12e9a:	e78a      	b.n	12db2 <cbvprintf+0xea>
   12e9c:	460b      	mov	r3, r1
	size_t val = 0;
   12e9e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12ea0:	f04f 0c0a 	mov.w	ip, #10
   12ea4:	e7e8      	b.n	12e78 <cbvprintf+0x1b0>
		conv->prec_star = true;
   12ea6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12eaa:	f042 0204 	orr.w	r2, r2, #4
   12eae:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   12eb2:	3302      	adds	r3, #2
	switch (*sp) {
   12eb4:	461f      	mov	r7, r3
   12eb6:	f817 2b01 	ldrb.w	r2, [r7], #1
   12eba:	2a6c      	cmp	r2, #108	; 0x6c
   12ebc:	d041      	beq.n	12f42 <cbvprintf+0x27a>
   12ebe:	d825      	bhi.n	12f0c <cbvprintf+0x244>
   12ec0:	2a68      	cmp	r2, #104	; 0x68
   12ec2:	d02b      	beq.n	12f1c <cbvprintf+0x254>
   12ec4:	2a6a      	cmp	r2, #106	; 0x6a
   12ec6:	d046      	beq.n	12f56 <cbvprintf+0x28e>
   12ec8:	2a4c      	cmp	r2, #76	; 0x4c
   12eca:	d04c      	beq.n	12f66 <cbvprintf+0x29e>
   12ecc:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   12ece:	f817 2b01 	ldrb.w	r2, [r7], #1
   12ed2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12ed6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   12eda:	2a78      	cmp	r2, #120	; 0x78
   12edc:	f200 80d9 	bhi.w	13092 <cbvprintf+0x3ca>
   12ee0:	2a57      	cmp	r2, #87	; 0x57
   12ee2:	d84d      	bhi.n	12f80 <cbvprintf+0x2b8>
   12ee4:	2a41      	cmp	r2, #65	; 0x41
   12ee6:	d003      	beq.n	12ef0 <cbvprintf+0x228>
   12ee8:	3a45      	subs	r2, #69	; 0x45
   12eea:	2a02      	cmp	r2, #2
   12eec:	f200 80d1 	bhi.w	13092 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   12ef0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12ef4:	2204      	movs	r2, #4
   12ef6:	f362 0302 	bfi	r3, r2, #0, #3
   12efa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   12efe:	2301      	movs	r3, #1
			break;
   12f00:	e09e      	b.n	13040 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   12f02:	fb06 2101 	mla	r1, r6, r1, r2
   12f06:	3930      	subs	r1, #48	; 0x30
   12f08:	4603      	mov	r3, r0
   12f0a:	e764      	b.n	12dd6 <cbvprintf+0x10e>
	switch (*sp) {
   12f0c:	2a74      	cmp	r2, #116	; 0x74
   12f0e:	d026      	beq.n	12f5e <cbvprintf+0x296>
   12f10:	2a7a      	cmp	r2, #122	; 0x7a
   12f12:	d1db      	bne.n	12ecc <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   12f14:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12f18:	2206      	movs	r2, #6
   12f1a:	e00d      	b.n	12f38 <cbvprintf+0x270>
		if (*++sp == 'h') {
   12f1c:	785a      	ldrb	r2, [r3, #1]
   12f1e:	2a68      	cmp	r2, #104	; 0x68
   12f20:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12f24:	d106      	bne.n	12f34 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   12f26:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12f28:	f361 02c6 	bfi	r2, r1, #3, #4
   12f2c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   12f30:	1c9f      	adds	r7, r3, #2
   12f32:	e7cc      	b.n	12ece <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   12f34:	4613      	mov	r3, r2
   12f36:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   12f38:	f362 03c6 	bfi	r3, r2, #3, #4
   12f3c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   12f40:	e7c5      	b.n	12ece <cbvprintf+0x206>
		if (*++sp == 'l') {
   12f42:	785a      	ldrb	r2, [r3, #1]
   12f44:	2a6c      	cmp	r2, #108	; 0x6c
   12f46:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12f4a:	d101      	bne.n	12f50 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   12f4c:	2104      	movs	r1, #4
   12f4e:	e7eb      	b.n	12f28 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   12f50:	4613      	mov	r3, r2
   12f52:	2203      	movs	r2, #3
   12f54:	e7f0      	b.n	12f38 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   12f56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12f5a:	2205      	movs	r2, #5
   12f5c:	e7ec      	b.n	12f38 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   12f5e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12f62:	2207      	movs	r2, #7
   12f64:	e7e8      	b.n	12f38 <cbvprintf+0x270>
		conv->unsupported = true;
   12f66:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   12f6a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   12f6e:	f023 0302 	bic.w	r3, r3, #2
   12f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12f76:	f043 0302 	orr.w	r3, r3, #2
   12f7a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   12f7e:	e7a6      	b.n	12ece <cbvprintf+0x206>
   12f80:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12f84:	2920      	cmp	r1, #32
   12f86:	f200 8084 	bhi.w	13092 <cbvprintf+0x3ca>
   12f8a:	a001      	add	r0, pc, #4	; (adr r0, 12f90 <cbvprintf+0x2c8>)
   12f8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12f90:	00013055 	.word	0x00013055
   12f94:	00013093 	.word	0x00013093
   12f98:	00013093 	.word	0x00013093
   12f9c:	00013093 	.word	0x00013093
   12fa0:	00013093 	.word	0x00013093
   12fa4:	00013093 	.word	0x00013093
   12fa8:	00013093 	.word	0x00013093
   12fac:	00013093 	.word	0x00013093
   12fb0:	00013093 	.word	0x00013093
   12fb4:	00012ef1 	.word	0x00012ef1
   12fb8:	00013093 	.word	0x00013093
   12fbc:	00013055 	.word	0x00013055
   12fc0:	00013015 	.word	0x00013015
   12fc4:	00012ef1 	.word	0x00012ef1
   12fc8:	00012ef1 	.word	0x00012ef1
   12fcc:	00012ef1 	.word	0x00012ef1
   12fd0:	00013093 	.word	0x00013093
   12fd4:	00013015 	.word	0x00013015
   12fd8:	00013093 	.word	0x00013093
   12fdc:	00013093 	.word	0x00013093
   12fe0:	00013093 	.word	0x00013093
   12fe4:	00013093 	.word	0x00013093
   12fe8:	0001305d 	.word	0x0001305d
   12fec:	00013055 	.word	0x00013055
   12ff0:	00013079 	.word	0x00013079
   12ff4:	00013093 	.word	0x00013093
   12ff8:	00013093 	.word	0x00013093
   12ffc:	00013079 	.word	0x00013079
   13000:	00013093 	.word	0x00013093
   13004:	00013055 	.word	0x00013055
   13008:	00013093 	.word	0x00013093
   1300c:	00013093 	.word	0x00013093
   13010:	00013055 	.word	0x00013055
		conv->specifier_cat = SPECIFIER_SINT;
   13014:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   13018:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1301a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1301e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   13022:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   13024:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   13028:	bf02      	ittt	eq
   1302a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   1302e:	f041 0101 	orreq.w	r1, r1, #1
   13032:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   13036:	2a63      	cmp	r2, #99	; 0x63
   13038:	d131      	bne.n	1309e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1303a:	3b00      	subs	r3, #0
   1303c:	bf18      	it	ne
   1303e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   13040:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   13044:	f3c2 0140 	ubfx	r1, r2, #1, #1
   13048:	430b      	orrs	r3, r1
   1304a:	f363 0241 	bfi	r2, r3, #1, #1
   1304e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   13052:	e6d8      	b.n	12e06 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   13054:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   13058:	2002      	movs	r0, #2
   1305a:	e7de      	b.n	1301a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   1305c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   13060:	f003 0378 	and.w	r3, r3, #120	; 0x78
   13064:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   13068:	2103      	movs	r1, #3
   1306a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1306e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   13070:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   13074:	4143      	adcs	r3, r0
   13076:	e7e3      	b.n	13040 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   13078:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1307c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1307e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   13082:	f361 0202 	bfi	r2, r1, #0, #3
   13086:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1308a:	bf14      	ite	ne
   1308c:	2301      	movne	r3, #1
   1308e:	2300      	moveq	r3, #0
   13090:	e7d6      	b.n	13040 <cbvprintf+0x378>
		conv->invalid = true;
   13092:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13096:	f043 0301 	orr.w	r3, r3, #1
   1309a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1309e:	2300      	movs	r3, #0
   130a0:	e7ce      	b.n	13040 <cbvprintf+0x378>
		} else if (conv->width_present) {
   130a2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   130a6:	2a00      	cmp	r2, #0
			width = conv->width_value;
   130a8:	bfb4      	ite	lt
   130aa:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   130ae:	f04f 39ff 	movge.w	r9, #4294967295
   130b2:	e6ba      	b.n	12e2a <cbvprintf+0x162>
		} else if (conv->prec_present) {
   130b4:	079b      	lsls	r3, r3, #30
   130b6:	f57f aec7 	bpl.w	12e48 <cbvprintf+0x180>
			precision = conv->prec_value;
   130ba:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   130be:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   130c2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   130c4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   130c8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   130cc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   130d0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   130d2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   130d6:	d136      	bne.n	13146 <cbvprintf+0x47e>
			switch (length_mod) {
   130d8:	1ed3      	subs	r3, r2, #3
   130da:	2b04      	cmp	r3, #4
   130dc:	d820      	bhi.n	13120 <cbvprintf+0x458>
   130de:	e8df f003 	tbb	[pc, r3]
   130e2:	0703      	.short	0x0703
   130e4:	1f07      	.short	0x1f07
   130e6:	1f          	.byte	0x1f
   130e7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   130e8:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   130ec:	17c1      	asrs	r1, r0, #31
   130ee:	e004      	b.n	130fa <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   130f0:	3407      	adds	r4, #7
   130f2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   130f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   130fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   130fe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13102:	f013 0603 	ands.w	r6, r3, #3
   13106:	d054      	beq.n	131b2 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   13108:	9802      	ldr	r0, [sp, #8]
   1310a:	463b      	mov	r3, r7
   1310c:	4652      	mov	r2, sl
   1310e:	4659      	mov	r1, fp
   13110:	f00a f919 	bl	1d346 <outs>
   13114:	2800      	cmp	r0, #0
   13116:	f2c0 8143 	blt.w	133a0 <cbvprintf+0x6d8>
   1311a:	4405      	add	r5, r0
			continue;
   1311c:	46ba      	mov	sl, r7
   1311e:	e5db      	b.n	12cd8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13120:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   13124:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13126:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1312a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1312e:	d105      	bne.n	1313c <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   13130:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   13134:	930a      	str	r3, [sp, #40]	; 0x28
   13136:	2300      	movs	r3, #0
   13138:	930b      	str	r3, [sp, #44]	; 0x2c
   1313a:	e7e0      	b.n	130fe <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   1313c:	2a02      	cmp	r2, #2
   1313e:	d1de      	bne.n	130fe <cbvprintf+0x436>
				value->sint = (short)value->sint;
   13140:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   13144:	e7d2      	b.n	130ec <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   13146:	2b02      	cmp	r3, #2
   13148:	d123      	bne.n	13192 <cbvprintf+0x4ca>
			switch (length_mod) {
   1314a:	1ed3      	subs	r3, r2, #3
   1314c:	2b04      	cmp	r3, #4
   1314e:	d813      	bhi.n	13178 <cbvprintf+0x4b0>
   13150:	e8df f003 	tbb	[pc, r3]
   13154:	120a0a03 	.word	0x120a0a03
   13158:	12          	.byte	0x12
   13159:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1315a:	6820      	ldr	r0, [r4, #0]
   1315c:	900a      	str	r0, [sp, #40]	; 0x28
   1315e:	2100      	movs	r1, #0
   13160:	1d23      	adds	r3, r4, #4
   13162:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   13164:	461c      	mov	r4, r3
   13166:	e7ca      	b.n	130fe <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   13168:	3407      	adds	r4, #7
   1316a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   1316e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   13172:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   13176:	e7f5      	b.n	13164 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   13178:	f854 3b04 	ldr.w	r3, [r4], #4
   1317c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1317e:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   13180:	f04f 0300 	mov.w	r3, #0
   13184:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   13186:	d0d3      	beq.n	13130 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   13188:	2a02      	cmp	r2, #2
   1318a:	d1b8      	bne.n	130fe <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   1318c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   13190:	e7d0      	b.n	13134 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   13192:	2b04      	cmp	r3, #4
   13194:	d107      	bne.n	131a6 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   13196:	3407      	adds	r4, #7
   13198:	f024 0407 	bic.w	r4, r4, #7
   1319c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   131a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   131a4:	e7ab      	b.n	130fe <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   131a6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   131a8:	bf04      	itt	eq
   131aa:	f854 3b04 	ldreq.w	r3, [r4], #4
   131ae:	930a      	streq	r3, [sp, #40]	; 0x28
   131b0:	e7a5      	b.n	130fe <cbvprintf+0x436>
		switch (conv->specifier) {
   131b2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   131b6:	2878      	cmp	r0, #120	; 0x78
   131b8:	d8b0      	bhi.n	1311c <cbvprintf+0x454>
   131ba:	2862      	cmp	r0, #98	; 0x62
   131bc:	d822      	bhi.n	13204 <cbvprintf+0x53c>
   131be:	2825      	cmp	r0, #37	; 0x25
   131c0:	f43f ad93 	beq.w	12cea <cbvprintf+0x22>
   131c4:	2858      	cmp	r0, #88	; 0x58
   131c6:	d1a9      	bne.n	1311c <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   131c8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   131cc:	9300      	str	r3, [sp, #0]
   131ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   131d2:	ab04      	add	r3, sp, #16
   131d4:	aa0c      	add	r2, sp, #48	; 0x30
   131d6:	f00a f86b 	bl	1d2b0 <encode_uint>
   131da:	4682      	mov	sl, r0
			if (precision >= 0) {
   131dc:	f1b8 0f00 	cmp.w	r8, #0
   131e0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   131e4:	db0c      	blt.n	13200 <cbvprintf+0x538>
				conv->flag_zero = false;
   131e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   131ea:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   131ee:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   131f2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   131f4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   131f8:	d902      	bls.n	13200 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   131fa:	eba8 0303 	sub.w	r3, r8, r3
   131fe:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   13200:	4680      	mov	r8, r0
   13202:	e03d      	b.n	13280 <cbvprintf+0x5b8>
   13204:	3863      	subs	r0, #99	; 0x63
   13206:	2815      	cmp	r0, #21
   13208:	d888      	bhi.n	1311c <cbvprintf+0x454>
   1320a:	a101      	add	r1, pc, #4	; (adr r1, 13210 <cbvprintf+0x548>)
   1320c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   13210:	00013291 	.word	0x00013291
   13214:	000132f5 	.word	0x000132f5
   13218:	0001311d 	.word	0x0001311d
   1321c:	0001311d 	.word	0x0001311d
   13220:	0001311d 	.word	0x0001311d
   13224:	0001311d 	.word	0x0001311d
   13228:	000132f5 	.word	0x000132f5
   1322c:	0001311d 	.word	0x0001311d
   13230:	0001311d 	.word	0x0001311d
   13234:	0001311d 	.word	0x0001311d
   13238:	0001311d 	.word	0x0001311d
   1323c:	00013353 	.word	0x00013353
   13240:	00013321 	.word	0x00013321
   13244:	00013325 	.word	0x00013325
   13248:	0001311d 	.word	0x0001311d
   1324c:	0001311d 	.word	0x0001311d
   13250:	00013269 	.word	0x00013269
   13254:	0001311d 	.word	0x0001311d
   13258:	00013321 	.word	0x00013321
   1325c:	0001311d 	.word	0x0001311d
   13260:	0001311d 	.word	0x0001311d
   13264:	00013321 	.word	0x00013321
			if (precision >= 0) {
   13268:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1326c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   13270:	db0a      	blt.n	13288 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   13272:	4641      	mov	r1, r8
   13274:	4650      	mov	r0, sl
   13276:	f00a feaa 	bl	1dfce <strnlen>
			bpe = bps + len;
   1327a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   1327e:	2600      	movs	r6, #0
		if (bps == NULL) {
   13280:	f1ba 0f00 	cmp.w	sl, #0
   13284:	d10c      	bne.n	132a0 <cbvprintf+0x5d8>
   13286:	e749      	b.n	1311c <cbvprintf+0x454>
				len = strlen(bps);
   13288:	4650      	mov	r0, sl
   1328a:	f00a fe99 	bl	1dfc0 <strlen>
   1328e:	e7f4      	b.n	1327a <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13292:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   13296:	2600      	movs	r6, #0
			bpe = buf + 1;
   13298:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   1329c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   132a0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   132a4:	b106      	cbz	r6, 132a8 <cbvprintf+0x5e0>
			nj_len += 1U;
   132a6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   132a8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   132ac:	06d0      	lsls	r0, r2, #27
   132ae:	d56b      	bpl.n	13388 <cbvprintf+0x6c0>
			nj_len += 2U;
   132b0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   132b2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   132b4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   132b6:	bf48      	it	mi
   132b8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   132ba:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   132bc:	bf48      	it	mi
   132be:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   132c0:	f1b9 0f00 	cmp.w	r9, #0
   132c4:	dd79      	ble.n	133ba <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   132c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   132ca:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   132ce:	f3c2 0380 	ubfx	r3, r2, #2, #1
   132d2:	9303      	str	r3, [sp, #12]
   132d4:	0753      	lsls	r3, r2, #29
   132d6:	d470      	bmi.n	133ba <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   132d8:	0650      	lsls	r0, r2, #25
   132da:	d564      	bpl.n	133a6 <cbvprintf+0x6de>
					if (sign != 0) {
   132dc:	b146      	cbz	r6, 132f0 <cbvprintf+0x628>
						OUTC(sign);
   132de:	9b02      	ldr	r3, [sp, #8]
   132e0:	4659      	mov	r1, fp
   132e2:	4630      	mov	r0, r6
   132e4:	4798      	blx	r3
   132e6:	2800      	cmp	r0, #0
   132e8:	db5a      	blt.n	133a0 <cbvprintf+0x6d8>
						sign = 0;
   132ea:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   132ec:	3501      	adds	r5, #1
						sign = 0;
   132ee:	461e      	mov	r6, r3
					pad = '0';
   132f0:	2330      	movs	r3, #48	; 0x30
   132f2:	e059      	b.n	133a8 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   132f4:	071e      	lsls	r6, r3, #28
   132f6:	d411      	bmi.n	1331c <cbvprintf+0x654>
				sign = ' ';
   132f8:	f013 0610 	ands.w	r6, r3, #16
   132fc:	bf18      	it	ne
   132fe:	2620      	movne	r6, #32
			if (value->sint < 0) {
   13300:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   13304:	2a00      	cmp	r2, #0
   13306:	f173 0100 	sbcs.w	r1, r3, #0
   1330a:	f6bf af5d 	bge.w	131c8 <cbvprintf+0x500>
				value->uint = (uint_value_type)-value->sint;
   1330e:	4252      	negs	r2, r2
   13310:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13314:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   13318:	262d      	movs	r6, #45	; 0x2d
   1331a:	e755      	b.n	131c8 <cbvprintf+0x500>
				sign = '+';
   1331c:	262b      	movs	r6, #43	; 0x2b
   1331e:	e7ef      	b.n	13300 <cbvprintf+0x638>
		switch (conv->specifier) {
   13320:	2600      	movs	r6, #0
   13322:	e751      	b.n	131c8 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   13324:	980a      	ldr	r0, [sp, #40]	; 0x28
   13326:	b348      	cbz	r0, 1337c <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13328:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1332c:	9300      	str	r3, [sp, #0]
   1332e:	aa0c      	add	r2, sp, #48	; 0x30
   13330:	ab04      	add	r3, sp, #16
   13332:	2100      	movs	r1, #0
   13334:	f009 ffbc 	bl	1d2b0 <encode_uint>
				conv->altform_0c = true;
   13338:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   1333c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   13340:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   13344:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   13348:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1334a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   1334e:	2600      	movs	r6, #0
				goto prec_int_pad0;
   13350:	e744      	b.n	131dc <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   13352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   13354:	2a07      	cmp	r2, #7
   13356:	f63f aee1 	bhi.w	1311c <cbvprintf+0x454>
   1335a:	e8df f002 	tbb	[pc, r2]
   1335e:	040d      	.short	0x040d
   13360:	08080d06 	.word	0x08080d06
   13364:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   13366:	701d      	strb	r5, [r3, #0]
		break;
   13368:	e6d8      	b.n	1311c <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1336a:	801d      	strh	r5, [r3, #0]
		break;
   1336c:	e6d6      	b.n	1311c <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   1336e:	4628      	mov	r0, r5
   13370:	17e9      	asrs	r1, r5, #31
   13372:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   13376:	e6d1      	b.n	1311c <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   13378:	601d      	str	r5, [r3, #0]
		break;
   1337a:	e6cf      	b.n	1311c <cbvprintf+0x454>
			bpe = bps + 5;
   1337c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 13444 <cbvprintf+0x77c>
   13380:	4606      	mov	r6, r0
			bps = "(nil)";
   13382:	f1a8 0a05 	sub.w	sl, r8, #5
   13386:	e78b      	b.n	132a0 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   13388:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1338a:	bf48      	it	mi
   1338c:	3301      	addmi	r3, #1
   1338e:	e790      	b.n	132b2 <cbvprintf+0x5ea>
					OUTC(pad);
   13390:	4618      	mov	r0, r3
   13392:	9303      	str	r3, [sp, #12]
   13394:	4659      	mov	r1, fp
   13396:	9b02      	ldr	r3, [sp, #8]
   13398:	4798      	blx	r3
   1339a:	2800      	cmp	r0, #0
   1339c:	9b03      	ldr	r3, [sp, #12]
   1339e:	da04      	bge.n	133aa <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   133a0:	b011      	add	sp, #68	; 0x44
   133a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   133a6:	2320      	movs	r3, #32
   133a8:	444d      	add	r5, r9
   133aa:	464a      	mov	r2, r9
				while (width-- > 0) {
   133ac:	2a00      	cmp	r2, #0
   133ae:	eba5 0109 	sub.w	r1, r5, r9
   133b2:	f109 39ff 	add.w	r9, r9, #4294967295
   133b6:	dceb      	bgt.n	13390 <cbvprintf+0x6c8>
   133b8:	460d      	mov	r5, r1
		if (sign != 0) {
   133ba:	b136      	cbz	r6, 133ca <cbvprintf+0x702>
			OUTC(sign);
   133bc:	9b02      	ldr	r3, [sp, #8]
   133be:	4659      	mov	r1, fp
   133c0:	4630      	mov	r0, r6
   133c2:	4798      	blx	r3
   133c4:	2800      	cmp	r0, #0
   133c6:	dbeb      	blt.n	133a0 <cbvprintf+0x6d8>
   133c8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   133ca:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   133ce:	06d9      	lsls	r1, r3, #27
   133d0:	d401      	bmi.n	133d6 <cbvprintf+0x70e>
   133d2:	071a      	lsls	r2, r3, #28
   133d4:	d506      	bpl.n	133e4 <cbvprintf+0x71c>
				OUTC('0');
   133d6:	9b02      	ldr	r3, [sp, #8]
   133d8:	4659      	mov	r1, fp
   133da:	2030      	movs	r0, #48	; 0x30
   133dc:	4798      	blx	r3
   133de:	2800      	cmp	r0, #0
   133e0:	dbde      	blt.n	133a0 <cbvprintf+0x6d8>
   133e2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   133e4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   133e8:	06db      	lsls	r3, r3, #27
   133ea:	d507      	bpl.n	133fc <cbvprintf+0x734>
				OUTC(conv->specifier);
   133ec:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   133f0:	9b02      	ldr	r3, [sp, #8]
   133f2:	4659      	mov	r1, fp
   133f4:	4798      	blx	r3
   133f6:	2800      	cmp	r0, #0
   133f8:	dbd2      	blt.n	133a0 <cbvprintf+0x6d8>
   133fa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   133fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   133fe:	442e      	add	r6, r5
   13400:	1b73      	subs	r3, r6, r5
   13402:	2b00      	cmp	r3, #0
   13404:	dc16      	bgt.n	13434 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   13406:	9802      	ldr	r0, [sp, #8]
   13408:	4643      	mov	r3, r8
   1340a:	4652      	mov	r2, sl
   1340c:	4659      	mov	r1, fp
   1340e:	f009 ff9a 	bl	1d346 <outs>
   13412:	2800      	cmp	r0, #0
   13414:	dbc4      	blt.n	133a0 <cbvprintf+0x6d8>
   13416:	4405      	add	r5, r0
		while (width > 0) {
   13418:	44a9      	add	r9, r5
   1341a:	eba9 0305 	sub.w	r3, r9, r5
   1341e:	2b00      	cmp	r3, #0
   13420:	f77f ae7c 	ble.w	1311c <cbvprintf+0x454>
			OUTC(' ');
   13424:	9b02      	ldr	r3, [sp, #8]
   13426:	4659      	mov	r1, fp
   13428:	2020      	movs	r0, #32
   1342a:	4798      	blx	r3
   1342c:	2800      	cmp	r0, #0
   1342e:	dbb7      	blt.n	133a0 <cbvprintf+0x6d8>
   13430:	3501      	adds	r5, #1
			--width;
   13432:	e7f2      	b.n	1341a <cbvprintf+0x752>
				OUTC('0');
   13434:	9b02      	ldr	r3, [sp, #8]
   13436:	4659      	mov	r1, fp
   13438:	2030      	movs	r0, #48	; 0x30
   1343a:	4798      	blx	r3
   1343c:	2800      	cmp	r0, #0
   1343e:	dbaf      	blt.n	133a0 <cbvprintf+0x6d8>
   13440:	3501      	adds	r5, #1
   13442:	e7dd      	b.n	13400 <cbvprintf+0x738>
   13444:	00020afc 	.word	0x00020afc

00013448 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   13448:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1344a:	4910      	ldr	r1, [pc, #64]	; (1348c <enable_logger+0x44>)
   1344c:	4810      	ldr	r0, [pc, #64]	; (13490 <enable_logger+0x48>)
{
   1344e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   13450:	2200      	movs	r2, #0
   13452:	f00c fcc8 	bl	1fde6 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13456:	4d0f      	ldr	r5, [pc, #60]	; (13494 <enable_logger+0x4c>)
   13458:	490f      	ldr	r1, [pc, #60]	; (13498 <enable_logger+0x50>)
   1345a:	2200      	movs	r2, #0
   1345c:	2300      	movs	r3, #0
   1345e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13462:	2400      	movs	r4, #0
   13464:	230e      	movs	r3, #14
   13466:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1346a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1346e:	4b0b      	ldr	r3, [pc, #44]	; (1349c <enable_logger+0x54>)
   13470:	9400      	str	r4, [sp, #0]
   13472:	f44f 7240 	mov.w	r2, #768	; 0x300
   13476:	4628      	mov	r0, r5
   13478:	f008 ff96 	bl	1c3a8 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread_id, *(uintptr_t *)&value, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread_id, value);
   1347c:	4908      	ldr	r1, [pc, #32]	; (134a0 <enable_logger+0x58>)
   1347e:	4628      	mov	r0, r5
   13480:	f00c fbc7 	bl	1fc12 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   13484:	4620      	mov	r0, r4
   13486:	b009      	add	sp, #36	; 0x24
   13488:	bd30      	pop	{r4, r5, pc}
   1348a:	bf00      	nop
   1348c:	000134a5 	.word	0x000134a5
   13490:	20001c48 	.word	0x20001c48
   13494:	20001c80 	.word	0x20001c80
   13498:	20003000 	.word	0x20003000
   1349c:	000138bd 	.word	0x000138bd
   134a0:	00020afd 	.word	0x00020afd

000134a4 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   134a4:	4801      	ldr	r0, [pc, #4]	; (134ac <log_process_thread_timer_expiry_fn+0x8>)
   134a6:	f008 bee5 	b.w	1c274 <z_impl_k_sem_give>
   134aa:	bf00      	nop
   134ac:	20000768 	.word	0x20000768

000134b0 <log_core_init>:
{
   134b0:	b508      	push	{r3, lr}
		log_msg_pool_init();
   134b2:	f000 fa65 	bl	13980 <log_msg_pool_init>
		log_list_init(&list);
   134b6:	4809      	ldr	r0, [pc, #36]	; (134dc <log_core_init+0x2c>)
   134b8:	f009 ff5c 	bl	1d374 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   134bc:	2304      	movs	r3, #4
   134be:	2228      	movs	r2, #40	; 0x28
   134c0:	4907      	ldr	r1, [pc, #28]	; (134e0 <log_core_init+0x30>)
   134c2:	4808      	ldr	r0, [pc, #32]	; (134e4 <log_core_init+0x34>)
   134c4:	f00c f9a7 	bl	1f816 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   134c8:	4b07      	ldr	r3, [pc, #28]	; (134e8 <log_core_init+0x38>)
   134ca:	4a08      	ldr	r2, [pc, #32]	; (134ec <log_core_init+0x3c>)
   134cc:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   134ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
   134d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   134d6:	f000 bc9b 	b.w	13e10 <log_output_timestamp_freq_set>
   134da:	bf00      	nop
   134dc:	200023a4 	.word	0x200023a4
   134e0:	20005550 	.word	0x20005550
   134e4:	200023ac 	.word	0x200023ac
   134e8:	200004fc 	.word	0x200004fc
   134ec:	0001d3b3 	.word	0x0001d3b3

000134f0 <dropped_notify>:
{
   134f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   134f2:	4b0f      	ldr	r3, [pc, #60]	; (13530 <dropped_notify+0x40>)
   134f4:	f3bf 8f5b 	dmb	ish
   134f8:	2500      	movs	r5, #0
   134fa:	e853 7f00 	ldrex	r7, [r3]
   134fe:	e843 5200 	strex	r2, r5, [r3]
   13502:	2a00      	cmp	r2, #0
   13504:	d1f9      	bne.n	134fa <dropped_notify+0xa>
   13506:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1350a:	4c0a      	ldr	r4, [pc, #40]	; (13534 <dropped_notify+0x44>)
   1350c:	4e0a      	ldr	r6, [pc, #40]	; (13538 <dropped_notify+0x48>)
   1350e:	1b36      	subs	r6, r6, r4
   13510:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   13512:	42b5      	cmp	r5, r6
   13514:	db00      	blt.n	13518 <dropped_notify+0x28>
}
   13516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13518:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1351a:	795b      	ldrb	r3, [r3, #5]
   1351c:	b12b      	cbz	r3, 1352a <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
   1351e:	6823      	ldr	r3, [r4, #0]
   13520:	68db      	ldr	r3, [r3, #12]
   13522:	b113      	cbz	r3, 1352a <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
   13524:	4639      	mov	r1, r7
   13526:	4620      	mov	r0, r4
   13528:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1352a:	3501      	adds	r5, #1
   1352c:	3410      	adds	r4, #16
   1352e:	e7f0      	b.n	13512 <dropped_notify+0x22>
   13530:	2000239c 	.word	0x2000239c
   13534:	000203b0 	.word	0x000203b0
   13538:	000203d0 	.word	0x000203d0

0001353c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1353c:	4b06      	ldr	r3, [pc, #24]	; (13558 <log_dropped+0x1c>)
   1353e:	f3bf 8f5b 	dmb	ish
   13542:	e853 2f00 	ldrex	r2, [r3]
   13546:	3201      	adds	r2, #1
   13548:	e843 2100 	strex	r1, r2, [r3]
   1354c:	2900      	cmp	r1, #0
   1354e:	d1f8      	bne.n	13542 <log_dropped+0x6>
   13550:	f3bf 8f5b 	dmb	ish
}
   13554:	4770      	bx	lr
   13556:	bf00      	nop
   13558:	2000239c 	.word	0x2000239c

0001355c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1355c:	4a04      	ldr	r2, [pc, #16]	; (13570 <log_source_name_get+0x14>)
   1355e:	4b05      	ldr	r3, [pc, #20]	; (13574 <log_source_name_get+0x18>)
   13560:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   13562:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   13566:	bf34      	ite	cc
   13568:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   1356c:	2000      	movcs	r0, #0
}
   1356e:	4770      	bx	lr
   13570:	00020308 	.word	0x00020308
   13574:	000203b0 	.word	0x000203b0

00013578 <log_backend_enable>:
	id += backend - log_backend_get(0);
   13578:	4b09      	ldr	r3, [pc, #36]	; (135a0 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   1357a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   1357c:	1ac3      	subs	r3, r0, r3
   1357e:	111b      	asrs	r3, r3, #4
   13580:	3301      	adds	r3, #1
{
   13582:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   13584:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
   13586:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   13588:	4c06      	ldr	r4, [pc, #24]	; (135a4 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
   1358a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1358c:	2201      	movs	r2, #1
   1358e:	715a      	strb	r2, [r3, #5]
   13590:	7822      	ldrb	r2, [r4, #0]
   13592:	b912      	cbnz	r2, 1359a <log_backend_enable+0x22>
   13594:	4804      	ldr	r0, [pc, #16]	; (135a8 <log_backend_enable+0x30>)
   13596:	f008 fe6d 	bl	1c274 <z_impl_k_sem_give>
	backend_attached = true;
   1359a:	2301      	movs	r3, #1
   1359c:	7023      	strb	r3, [r4, #0]
}
   1359e:	bd10      	pop	{r4, pc}
   135a0:	000203b0 	.word	0x000203b0
   135a4:	200026c6 	.word	0x200026c6
   135a8:	20000768 	.word	0x20000768

000135ac <log_init>:
{
   135ac:	b570      	push	{r4, r5, r6, lr}
   135ae:	4b11      	ldr	r3, [pc, #68]	; (135f4 <log_init+0x48>)
   135b0:	f3bf 8f5b 	dmb	ish
   135b4:	e853 5f00 	ldrex	r5, [r3]
   135b8:	1c6a      	adds	r2, r5, #1
   135ba:	e843 2100 	strex	r1, r2, [r3]
   135be:	2900      	cmp	r1, #0
   135c0:	d1f8      	bne.n	135b4 <log_init+0x8>
   135c2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   135c6:	b92d      	cbnz	r5, 135d4 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
   135c8:	4c0b      	ldr	r4, [pc, #44]	; (135f8 <log_init+0x4c>)
   135ca:	4e0c      	ldr	r6, [pc, #48]	; (135fc <log_init+0x50>)
   135cc:	1b36      	subs	r6, r6, r4
   135ce:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   135d0:	42b5      	cmp	r5, r6
   135d2:	db00      	blt.n	135d6 <log_init+0x2a>
}
   135d4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   135d6:	7b23      	ldrb	r3, [r4, #12]
   135d8:	b143      	cbz	r3, 135ec <log_init+0x40>
			if (backend->api->init != NULL) {
   135da:	6823      	ldr	r3, [r4, #0]
   135dc:	695b      	ldr	r3, [r3, #20]
   135de:	b103      	cbz	r3, 135e2 <log_init+0x36>
				backend->api->init();
   135e0:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   135e2:	2204      	movs	r2, #4
   135e4:	2100      	movs	r1, #0
   135e6:	4620      	mov	r0, r4
   135e8:	f7ff ffc6 	bl	13578 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   135ec:	3501      	adds	r5, #1
   135ee:	3410      	adds	r4, #16
   135f0:	e7ee      	b.n	135d0 <log_init+0x24>
   135f2:	bf00      	nop
   135f4:	200023a0 	.word	0x200023a0
   135f8:	000203b0 	.word	0x000203b0
   135fc:	000203d0 	.word	0x000203d0

00013600 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   13600:	4b16      	ldr	r3, [pc, #88]	; (1365c <log_strdup+0x5c>)
   13602:	4298      	cmp	r0, r3
{
   13604:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13606:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   13608:	d302      	bcc.n	13610 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1360a:	4b15      	ldr	r3, [pc, #84]	; (13660 <log_strdup+0x60>)
   1360c:	4298      	cmp	r0, r3
   1360e:	d320      	bcc.n	13652 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   13610:	4814      	ldr	r0, [pc, #80]	; (13664 <log_strdup+0x64>)
   13612:	2200      	movs	r2, #0
   13614:	2300      	movs	r3, #0
   13616:	a901      	add	r1, sp, #4
   13618:	f008 f93c 	bl	1b894 <k_mem_slab_alloc>
	if (err != 0) {
   1361c:	4605      	mov	r5, r0
   1361e:	b9d8      	cbnz	r0, 13658 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13620:	2201      	movs	r2, #1
   13622:	9b01      	ldr	r3, [sp, #4]
   13624:	f3bf 8f5b 	dmb	ish
   13628:	e853 1f00 	ldrex	r1, [r3]
   1362c:	e843 2000 	strex	r0, r2, [r3]
   13630:	2800      	cmp	r0, #0
   13632:	d1f9      	bne.n	13628 <log_strdup+0x28>
   13634:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   13638:	9801      	ldr	r0, [sp, #4]
   1363a:	4621      	mov	r1, r4
   1363c:	221f      	movs	r2, #31
   1363e:	3004      	adds	r0, #4
   13640:	f00a fcab 	bl	1df9a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   13644:	9c01      	ldr	r4, [sp, #4]
   13646:	237e      	movs	r3, #126	; 0x7e
   13648:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1364c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
   13650:	3404      	adds	r4, #4
}
   13652:	4620      	mov	r0, r4
   13654:	b003      	add	sp, #12
   13656:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   13658:	4c03      	ldr	r4, [pc, #12]	; (13668 <log_strdup+0x68>)
   1365a:	e7fa      	b.n	13652 <log_strdup+0x52>
   1365c:	00020104 	.word	0x00020104
   13660:	000222c8 	.word	0x000222c8
   13664:	200023ac 	.word	0x200023ac
   13668:	00020b05 	.word	0x00020b05

0001366c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   1366c:	b148      	cbz	r0, 13682 <log_is_strdup+0x16>
   1366e:	4b05      	ldr	r3, [pc, #20]	; (13684 <log_is_strdup+0x18>)
   13670:	4298      	cmp	r0, r3
   13672:	d305      	bcc.n	13680 <log_is_strdup+0x14>
   13674:	33a0      	adds	r3, #160	; 0xa0
   13676:	4298      	cmp	r0, r3
   13678:	bf2c      	ite	cs
   1367a:	2000      	movcs	r0, #0
   1367c:	2001      	movcc	r0, #1
   1367e:	4770      	bx	lr
   13680:	2000      	movs	r0, #0
}
   13682:	4770      	bx	lr
   13684:	20005550 	.word	0x20005550

00013688 <z_impl_log_process>:
{
   13688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   1368c:	4b4c      	ldr	r3, [pc, #304]	; (137c0 <z_impl_log_process+0x138>)
   1368e:	781b      	ldrb	r3, [r3, #0]
{
   13690:	b085      	sub	sp, #20
   13692:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   13694:	b903      	cbnz	r3, 13698 <z_impl_log_process+0x10>
   13696:	b360      	cbz	r0, 136f2 <z_impl_log_process+0x6a>
   13698:	f04f 0340 	mov.w	r3, #64	; 0x40
   1369c:	f3ef 8611 	mrs	r6, BASEPRI
   136a0:	f383 8811 	msr	BASEPRI, r3
   136a4:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   136a8:	4846      	ldr	r0, [pc, #280]	; (137c4 <z_impl_log_process+0x13c>)
   136aa:	f009 fe73 	bl	1d394 <log_list_head_get>
   136ae:	4605      	mov	r5, r0
	__asm__ volatile(
   136b0:	f386 8811 	msr	BASEPRI, r6
   136b4:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   136b8:	b178      	cbz	r0, 136da <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   136ba:	f3bf 8f5b 	dmb	ish
   136be:	4b42      	ldr	r3, [pc, #264]	; (137c8 <z_impl_log_process+0x140>)
   136c0:	e853 2f00 	ldrex	r2, [r3]
   136c4:	3a01      	subs	r2, #1
   136c6:	e843 2100 	strex	r1, r2, [r3]
   136ca:	2900      	cmp	r1, #0
   136cc:	d1f8      	bne.n	136c0 <z_impl_log_process+0x38>
   136ce:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
   136d2:	b194      	cbz	r4, 136fa <z_impl_log_process+0x72>
	log_msg_put(msg);
   136d4:	4628      	mov	r0, r5
   136d6:	f009 ff81 	bl	1d5dc <log_msg_put>
	if (!bypass && dropped_cnt) {
   136da:	b924      	cbnz	r4, 136e6 <z_impl_log_process+0x5e>
   136dc:	4b3b      	ldr	r3, [pc, #236]	; (137cc <z_impl_log_process+0x144>)
   136de:	681b      	ldr	r3, [r3, #0]
   136e0:	b10b      	cbz	r3, 136e6 <z_impl_log_process+0x5e>
		dropped_notify();
   136e2:	f7ff ff05 	bl	134f0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   136e6:	4837      	ldr	r0, [pc, #220]	; (137c4 <z_impl_log_process+0x13c>)
   136e8:	f009 fe52 	bl	1d390 <log_list_head_peek>
   136ec:	1e04      	subs	r4, r0, #0
   136ee:	bf18      	it	ne
   136f0:	2401      	movne	r4, #1
}
   136f2:	4620      	mov	r0, r4
   136f4:	b005      	add	sp, #20
   136f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   136fa:	4b35      	ldr	r3, [pc, #212]	; (137d0 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   136fc:	781b      	ldrb	r3, [r3, #0]
   136fe:	b9cb      	cbnz	r3, 13734 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13700:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   13702:	07db      	lsls	r3, r3, #31
   13704:	d416      	bmi.n	13734 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
   13706:	f009 ff7c 	bl	1d602 <log_msg_str_get>
   1370a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1370c:	4628      	mov	r0, r5
   1370e:	f009 ff43 	bl	1d598 <log_msg_nargs_get>
   13712:	4601      	mov	r1, r0
   13714:	4640      	mov	r0, r8
   13716:	f009 fe50 	bl	1d3ba <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1371a:	4f2e      	ldr	r7, [pc, #184]	; (137d4 <z_impl_log_process+0x14c>)
   1371c:	4b2e      	ldr	r3, [pc, #184]	; (137d8 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   1371e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 137f4 <z_impl_log_process+0x16c>
   13722:	1bdb      	subs	r3, r3, r7
   13724:	08db      	lsrs	r3, r3, #3
   13726:	9303      	str	r3, [sp, #12]
   13728:	4b2c      	ldr	r3, [pc, #176]	; (137dc <z_impl_log_process+0x154>)
   1372a:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1372c:	4606      	mov	r6, r0
   1372e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   13732:	b936      	cbnz	r6, 13742 <z_impl_log_process+0xba>
   13734:	4e2a      	ldr	r6, [pc, #168]	; (137e0 <z_impl_log_process+0x158>)
   13736:	4f2b      	ldr	r7, [pc, #172]	; (137e4 <z_impl_log_process+0x15c>)
   13738:	1bbf      	subs	r7, r7, r6
   1373a:	113f      	asrs	r7, r7, #4
   1373c:	f04f 0800 	mov.w	r8, #0
   13740:	e03a      	b.n	137b8 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
   13742:	fab6 f186 	clz	r1, r6
   13746:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1374a:	4649      	mov	r1, r9
   1374c:	4628      	mov	r0, r5
   1374e:	f009 ff26 	bl	1d59e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   13752:	4b25      	ldr	r3, [pc, #148]	; (137e8 <z_impl_log_process+0x160>)
   13754:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   13756:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   13758:	d302      	bcc.n	13760 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1375a:	4b24      	ldr	r3, [pc, #144]	; (137ec <z_impl_log_process+0x164>)
   1375c:	4298      	cmp	r0, r3
   1375e:	d31a      	bcc.n	13796 <z_impl_log_process+0x10e>
   13760:	4608      	mov	r0, r1
   13762:	f7ff ff83 	bl	1366c <log_is_strdup>
   13766:	4602      	mov	r2, r0
   13768:	b9a8      	cbnz	r0, 13796 <z_impl_log_process+0x10e>
   1376a:	4b21      	ldr	r3, [pc, #132]	; (137f0 <z_impl_log_process+0x168>)
   1376c:	4299      	cmp	r1, r3
   1376e:	d012      	beq.n	13796 <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
   13770:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   13772:	9903      	ldr	r1, [sp, #12]
   13774:	f3c3 1389 	ubfx	r3, r3, #6, #10
   13778:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   1377a:	bf38      	it	cc
   1377c:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   13780:	ea4f 138a 	mov.w	r3, sl, lsl #6
   13784:	f043 0301 	orr.w	r3, r3, #1
   13788:	f8ad 3000 	strh.w	r3, [sp]
   1378c:	4649      	mov	r1, r9
   1378e:	4643      	mov	r3, r8
   13790:	4658      	mov	r0, fp
   13792:	f009 fe6c 	bl	1d46e <log_3>
		mask &= ~BIT(idx);
   13796:	2101      	movs	r1, #1
   13798:	fa01 f109 	lsl.w	r1, r1, r9
   1379c:	ea26 0601 	bic.w	r6, r6, r1
   137a0:	e7c7      	b.n	13732 <z_impl_log_process+0xaa>
	return backend->cb->active;
   137a2:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   137a4:	795b      	ldrb	r3, [r3, #5]
   137a6:	b123      	cbz	r3, 137b2 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
   137a8:	6833      	ldr	r3, [r6, #0]
   137aa:	4629      	mov	r1, r5
   137ac:	681b      	ldr	r3, [r3, #0]
   137ae:	4630      	mov	r0, r6
   137b0:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   137b2:	f108 0801 	add.w	r8, r8, #1
   137b6:	3610      	adds	r6, #16
   137b8:	45b8      	cmp	r8, r7
   137ba:	dbf2      	blt.n	137a2 <z_impl_log_process+0x11a>
   137bc:	e78a      	b.n	136d4 <z_impl_log_process+0x4c>
   137be:	bf00      	nop
   137c0:	200026c6 	.word	0x200026c6
   137c4:	200023a4 	.word	0x200023a4
   137c8:	20002398 	.word	0x20002398
   137cc:	2000239c 	.word	0x2000239c
   137d0:	200026c7 	.word	0x200026c7
   137d4:	00020308 	.word	0x00020308
   137d8:	000203b0 	.word	0x000203b0
   137dc:	00020360 	.word	0x00020360
   137e0:	000203b0 	.word	0x000203b0
   137e4:	000203d0 	.word	0x000203d0
   137e8:	00020104 	.word	0x00020104
   137ec:	000222c8 	.word	0x000222c8
   137f0:	00020b05 	.word	0x00020b05
   137f4:	00020b1f 	.word	0x00020b1f

000137f8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   137f8:	4b29      	ldr	r3, [pc, #164]	; (138a0 <msg_finalize+0xa8>)
{
   137fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   137fc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   137fe:	8141      	strh	r1, [r0, #10]
{
   13800:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13802:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13804:	4d27      	ldr	r5, [pc, #156]	; (138a4 <msg_finalize+0xac>)
   13806:	60e0      	str	r0, [r4, #12]
   13808:	f3bf 8f5b 	dmb	ish
   1380c:	e855 3f00 	ldrex	r3, [r5]
   13810:	3301      	adds	r3, #1
   13812:	e845 3200 	strex	r2, r3, [r5]
   13816:	2a00      	cmp	r2, #0
   13818:	d1f8      	bne.n	1380c <msg_finalize+0x14>
   1381a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   1381e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13822:	f3ef 8611 	mrs	r6, BASEPRI
   13826:	f383 8811 	msr	BASEPRI, r3
   1382a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1382e:	481e      	ldr	r0, [pc, #120]	; (138a8 <msg_finalize+0xb0>)
   13830:	4621      	mov	r1, r4
   13832:	f009 fda3 	bl	1d37c <log_list_add_tail>
	__asm__ volatile(
   13836:	f386 8811 	msr	BASEPRI, r6
   1383a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   1383e:	4b1b      	ldr	r3, [pc, #108]	; (138ac <msg_finalize+0xb4>)
   13840:	781b      	ldrb	r3, [r3, #0]
   13842:	b183      	cbz	r3, 13866 <msg_finalize+0x6e>
	__asm__ volatile(
   13844:	f04f 0340 	mov.w	r3, #64	; 0x40
   13848:	f3ef 8411 	mrs	r4, BASEPRI
   1384c:	f383 8811 	msr	BASEPRI, r3
   13850:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   13854:	2000      	movs	r0, #0
   13856:	f7ff ff17 	bl	13688 <z_impl_log_process>
	__asm__ volatile(
   1385a:	f384 8811 	msr	BASEPRI, r4
   1385e:	f3bf 8f6f 	isb	sy
}
   13862:	b002      	add	sp, #8
   13864:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   13866:	4a12      	ldr	r2, [pc, #72]	; (138b0 <msg_finalize+0xb8>)
   13868:	682b      	ldr	r3, [r5, #0]
   1386a:	6812      	ldr	r2, [r2, #0]
   1386c:	2a00      	cmp	r2, #0
   1386e:	d0f8      	beq.n	13862 <msg_finalize+0x6a>
   13870:	2b01      	cmp	r3, #1
   13872:	d10a      	bne.n	1388a <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
   13874:	2200      	movs	r2, #0
   13876:	2300      	movs	r3, #0
   13878:	e9cd 2300 	strd	r2, r3, [sp]
   1387c:	480d      	ldr	r0, [pc, #52]	; (138b4 <msg_finalize+0xbc>)
   1387e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13882:	2300      	movs	r3, #0
   13884:	f009 f846 	bl	1c914 <z_impl_k_timer_start>
   13888:	e7eb      	b.n	13862 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1388a:	2b0a      	cmp	r3, #10
   1388c:	d1e9      	bne.n	13862 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   1388e:	4809      	ldr	r0, [pc, #36]	; (138b4 <msg_finalize+0xbc>)
   13890:	f00c fab5 	bl	1fdfe <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13894:	4808      	ldr	r0, [pc, #32]	; (138b8 <msg_finalize+0xc0>)
}
   13896:	b002      	add	sp, #8
   13898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1389c:	f008 bcea 	b.w	1c274 <z_impl_k_sem_give>
   138a0:	200004fc 	.word	0x200004fc
   138a4:	20002398 	.word	0x20002398
   138a8:	200023a4 	.word	0x200023a4
   138ac:	200026c7 	.word	0x200026c7
   138b0:	200023c8 	.word	0x200023c8
   138b4:	20001c48 	.word	0x20001c48
   138b8:	20000768 	.word	0x20000768

000138bc <log_process_thread_func>:
{
   138bc:	b510      	push	{r4, lr}
	log_init();
   138be:	f7ff fe75 	bl	135ac <log_init>
	return z_impl_k_current_get();
   138c2:	f008 fcd1 	bl	1c268 <z_impl_k_current_get>
	proc_tid = process_tid;
   138c6:	4b0c      	ldr	r3, [pc, #48]	; (138f8 <log_process_thread_func+0x3c>)
   138c8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   138ca:	b130      	cbz	r0, 138da <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   138cc:	4b0b      	ldr	r3, [pc, #44]	; (138fc <log_process_thread_func+0x40>)
	    process_tid &&
   138ce:	681b      	ldr	r3, [r3, #0]
   138d0:	2b09      	cmp	r3, #9
   138d2:	dd02      	ble.n	138da <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   138d4:	480a      	ldr	r0, [pc, #40]	; (13900 <log_process_thread_func+0x44>)
   138d6:	f008 fccd 	bl	1c274 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   138da:	4c09      	ldr	r4, [pc, #36]	; (13900 <log_process_thread_func+0x44>)
   138dc:	2000      	movs	r0, #0
   138de:	f7ff fed3 	bl	13688 <z_impl_log_process>
		if (log_process(false) == false) {
   138e2:	2800      	cmp	r0, #0
   138e4:	d1fa      	bne.n	138dc <log_process_thread_func+0x20>
   138e6:	f04f 32ff 	mov.w	r2, #4294967295
   138ea:	f04f 33ff 	mov.w	r3, #4294967295
   138ee:	4620      	mov	r0, r4
   138f0:	f008 fce6 	bl	1c2c0 <z_impl_k_sem_take>
   138f4:	e7f2      	b.n	138dc <log_process_thread_func+0x20>
   138f6:	bf00      	nop
   138f8:	200023c8 	.word	0x200023c8
   138fc:	20002398 	.word	0x20002398
   13900:	20000768 	.word	0x20000768

00013904 <z_impl_log_panic>:
{
   13904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   13906:	4f0e      	ldr	r7, [pc, #56]	; (13940 <z_impl_log_panic+0x3c>)
   13908:	783d      	ldrb	r5, [r7, #0]
   1390a:	b975      	cbnz	r5, 1392a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   1390c:	4c0d      	ldr	r4, [pc, #52]	; (13944 <z_impl_log_panic+0x40>)
   1390e:	4e0e      	ldr	r6, [pc, #56]	; (13948 <z_impl_log_panic+0x44>)
	log_init();
   13910:	f7ff fe4c 	bl	135ac <log_init>
   13914:	1b36      	subs	r6, r6, r4
   13916:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   13918:	42b5      	cmp	r5, r6
   1391a:	db07      	blt.n	1392c <z_impl_log_panic+0x28>
   1391c:	2000      	movs	r0, #0
   1391e:	f7ff feb3 	bl	13688 <z_impl_log_process>
		while (log_process(false) == true) {
   13922:	2800      	cmp	r0, #0
   13924:	d1fa      	bne.n	1391c <z_impl_log_panic+0x18>
	panic_mode = true;
   13926:	2301      	movs	r3, #1
   13928:	703b      	strb	r3, [r7, #0]
}
   1392a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   1392c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1392e:	795b      	ldrb	r3, [r3, #5]
   13930:	b11b      	cbz	r3, 1393a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   13932:	6823      	ldr	r3, [r4, #0]
   13934:	4620      	mov	r0, r4
   13936:	691b      	ldr	r3, [r3, #16]
   13938:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1393a:	3501      	adds	r5, #1
   1393c:	3410      	adds	r4, #16
   1393e:	e7eb      	b.n	13918 <z_impl_log_panic+0x14>
   13940:	200026c7 	.word	0x200026c7
   13944:	000203b0 	.word	0x000203b0
   13948:	000203d0 	.word	0x000203d0

0001394c <log_free>:
{
   1394c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   1394e:	3804      	subs	r0, #4
   13950:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13952:	f3bf 8f5b 	dmb	ish
   13956:	e850 3f00 	ldrex	r3, [r0]
   1395a:	1e5a      	subs	r2, r3, #1
   1395c:	e840 2100 	strex	r1, r2, [r0]
   13960:	2900      	cmp	r1, #0
   13962:	d1f8      	bne.n	13956 <log_free+0xa>
   13964:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   13968:	2b01      	cmp	r3, #1
   1396a:	d103      	bne.n	13974 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   1396c:	4803      	ldr	r0, [pc, #12]	; (1397c <log_free+0x30>)
   1396e:	a901      	add	r1, sp, #4
   13970:	f007 ffc2 	bl	1b8f8 <k_mem_slab_free>
}
   13974:	b003      	add	sp, #12
   13976:	f85d fb04 	ldr.w	pc, [sp], #4
   1397a:	bf00      	nop
   1397c:	200023ac 	.word	0x200023ac

00013980 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   13980:	2320      	movs	r3, #32
   13982:	4902      	ldr	r1, [pc, #8]	; (1398c <log_msg_pool_init+0xc>)
   13984:	4802      	ldr	r0, [pc, #8]	; (13990 <log_msg_pool_init+0x10>)
   13986:	461a      	mov	r2, r3
   13988:	f00b bf45 	b.w	1f816 <k_mem_slab_init>
   1398c:	200055f0 	.word	0x200055f0
   13990:	200023cc 	.word	0x200023cc

00013994 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   13994:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   13996:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   13998:	4d09      	ldr	r5, [pc, #36]	; (139c0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   1399a:	9301      	str	r3, [sp, #4]
   1399c:	2001      	movs	r0, #1
   1399e:	f7ff fe73 	bl	13688 <z_impl_log_process>
   139a2:	4604      	mov	r4, r0
			log_dropped();
   139a4:	f7ff fdca 	bl	1353c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   139a8:	2200      	movs	r2, #0
   139aa:	2300      	movs	r3, #0
   139ac:	a901      	add	r1, sp, #4
   139ae:	4628      	mov	r0, r5
   139b0:	f007 ff70 	bl	1b894 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   139b4:	b108      	cbz	r0, 139ba <log_msg_no_space_handle+0x26>
   139b6:	2c00      	cmp	r4, #0
   139b8:	d1f0      	bne.n	1399c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   139ba:	9801      	ldr	r0, [sp, #4]
   139bc:	b003      	add	sp, #12
   139be:	bd30      	pop	{r4, r5, pc}
   139c0:	200023cc 	.word	0x200023cc

000139c4 <log_msg_chunk_alloc>:
{
   139c4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   139c6:	2300      	movs	r3, #0
   139c8:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   139ca:	4807      	ldr	r0, [pc, #28]	; (139e8 <log_msg_chunk_alloc+0x24>)
   139cc:	2200      	movs	r2, #0
   139ce:	2300      	movs	r3, #0
   139d0:	a901      	add	r1, sp, #4
   139d2:	f007 ff5f 	bl	1b894 <k_mem_slab_alloc>
	if (err != 0) {
   139d6:	b110      	cbz	r0, 139de <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   139d8:	f7ff ffdc 	bl	13994 <log_msg_no_space_handle>
   139dc:	9001      	str	r0, [sp, #4]
}
   139de:	9801      	ldr	r0, [sp, #4]
   139e0:	b003      	add	sp, #12
   139e2:	f85d fb04 	ldr.w	pc, [sp], #4
   139e6:	bf00      	nop
   139e8:	200023cc 	.word	0x200023cc

000139ec <msg_free>:
{
   139ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   139ee:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   139f0:	7a45      	ldrb	r5, [r0, #9]
{
   139f2:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   139f4:	092d      	lsrs	r5, r5, #4
{
   139f6:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   139f8:	07d8      	lsls	r0, r3, #31
   139fa:	d41c      	bmi.n	13a36 <msg_free+0x4a>
   139fc:	b1dd      	cbz	r5, 13a36 <msg_free+0x4a>
		uint32_t smask = 0;
   139fe:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   13a00:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   13a02:	9801      	ldr	r0, [sp, #4]
   13a04:	4631      	mov	r1, r6
   13a06:	f009 fdca 	bl	1d59e <log_msg_arg_get>
   13a0a:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   13a0c:	f7ff fe2e 	bl	1366c <log_is_strdup>
   13a10:	b170      	cbz	r0, 13a30 <msg_free+0x44>
				if (smask == 0) {
   13a12:	b934      	cbnz	r4, 13a22 <msg_free+0x36>
					smask = z_log_get_s_mask(
   13a14:	9b01      	ldr	r3, [sp, #4]
   13a16:	4629      	mov	r1, r5
   13a18:	6918      	ldr	r0, [r3, #16]
   13a1a:	f009 fcce 	bl	1d3ba <z_log_get_s_mask>
					if (smask == 0) {
   13a1e:	4604      	mov	r4, r0
   13a20:	b148      	cbz	r0, 13a36 <msg_free+0x4a>
				if (smask & BIT(i)) {
   13a22:	fa24 f306 	lsr.w	r3, r4, r6
   13a26:	07d9      	lsls	r1, r3, #31
   13a28:	d502      	bpl.n	13a30 <msg_free+0x44>
					log_free(buf);
   13a2a:	4638      	mov	r0, r7
   13a2c:	f7ff ff8e 	bl	1394c <log_free>
		for (i = 0; i < nargs; i++) {
   13a30:	3601      	adds	r6, #1
   13a32:	42ae      	cmp	r6, r5
   13a34:	d3e5      	bcc.n	13a02 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   13a36:	9b01      	ldr	r3, [sp, #4]
   13a38:	7a1a      	ldrb	r2, [r3, #8]
   13a3a:	0792      	lsls	r2, r2, #30
   13a3c:	d504      	bpl.n	13a48 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   13a3e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13a40:	4c08      	ldr	r4, [pc, #32]	; (13a64 <msg_free+0x78>)
   13a42:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   13a44:	9b03      	ldr	r3, [sp, #12]
   13a46:	b92b      	cbnz	r3, 13a54 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   13a48:	4806      	ldr	r0, [pc, #24]	; (13a64 <msg_free+0x78>)
   13a4a:	a901      	add	r1, sp, #4
   13a4c:	f007 ff54 	bl	1b8f8 <k_mem_slab_free>
}
   13a50:	b005      	add	sp, #20
   13a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   13a54:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13a56:	a903      	add	r1, sp, #12
   13a58:	4620      	mov	r0, r4
   13a5a:	f007 ff4d 	bl	1b8f8 <k_mem_slab_free>
		cont = next;
   13a5e:	9503      	str	r5, [sp, #12]
   13a60:	e7f0      	b.n	13a44 <msg_free+0x58>
   13a62:	bf00      	nop
   13a64:	200023cc 	.word	0x200023cc

00013a68 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   13a68:	b40e      	push	{r1, r2, r3}
   13a6a:	b503      	push	{r0, r1, lr}
   13a6c:	ab03      	add	r3, sp, #12
   13a6e:	4601      	mov	r1, r0
   13a70:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   13a74:	4804      	ldr	r0, [pc, #16]	; (13a88 <print_formatted+0x20>)
	va_start(args, fmt);
   13a76:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   13a78:	f7ff f926 	bl	12cc8 <cbvprintf>
	va_end(args);

	return length;
}
   13a7c:	b002      	add	sp, #8
   13a7e:	f85d eb04 	ldr.w	lr, [sp], #4
   13a82:	b003      	add	sp, #12
   13a84:	4770      	bx	lr
   13a86:	bf00      	nop
   13a88:	0001da51 	.word	0x0001da51

00013a8c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   13a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a90:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   13a92:	f011 0402 	ands.w	r4, r1, #2
{
   13a96:	4690      	mov	r8, r2
   13a98:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   13a9c:	4606      	mov	r6, r0
   13a9e:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   13aa0:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13aa4:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   13aa8:	d007      	beq.n	13aba <prefix_print+0x2e>
	if (!format) {
   13aaa:	f011 0f44 	tst.w	r1, #68	; 0x44
   13aae:	d137      	bne.n	13b20 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   13ab0:	4932      	ldr	r1, [pc, #200]	; (13b7c <prefix_print+0xf0>)
   13ab2:	f7ff ffd9 	bl	13a68 <print_formatted>
			length = print_formatted(log_output,
   13ab6:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
   13ab8:	460c      	mov	r4, r1
	if (color) {
   13aba:	f1b9 0f00 	cmp.w	r9, #0
   13abe:	d00a      	beq.n	13ad6 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
   13ac0:	4b2f      	ldr	r3, [pc, #188]	; (13b80 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   13ac2:	4930      	ldr	r1, [pc, #192]	; (13b84 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
   13ac4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   13ac8:	4b2f      	ldr	r3, [pc, #188]	; (13b88 <prefix_print+0xfc>)
   13aca:	4630      	mov	r0, r6
   13acc:	2a00      	cmp	r2, #0
   13ace:	bf08      	it	eq
   13ad0:	461a      	moveq	r2, r3
   13ad2:	f7ff ffc9 	bl	13a68 <print_formatted>
	if (level_on) {
   13ad6:	b13d      	cbz	r5, 13ae8 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   13ad8:	4b2c      	ldr	r3, [pc, #176]	; (13b8c <prefix_print+0x100>)
   13ada:	492d      	ldr	r1, [pc, #180]	; (13b90 <prefix_print+0x104>)
   13adc:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   13ae0:	4630      	mov	r0, r6
   13ae2:	f7ff ffc1 	bl	13a68 <print_formatted>
   13ae6:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   13ae8:	f1b8 0f00 	cmp.w	r8, #0
   13aec:	d043      	beq.n	13b76 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   13aee:	2301      	movs	r3, #1
   13af0:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   13af4:	4b27      	ldr	r3, [pc, #156]	; (13b94 <prefix_print+0x108>)
   13af6:	f017 0f10 	tst.w	r7, #16
   13afa:	4f27      	ldr	r7, [pc, #156]	; (13b98 <prefix_print+0x10c>)
   13afc:	bf18      	it	ne
   13afe:	461f      	movne	r7, r3
   13b00:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   13b04:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   13b08:	f7ff fd28 	bl	1355c <log_source_name_get>
   13b0c:	4639      	mov	r1, r7
   13b0e:	4602      	mov	r2, r0
   13b10:	4630      	mov	r0, r6
   13b12:	f7ff ffa9 	bl	13a68 <print_formatted>
   13b16:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   13b18:	4420      	add	r0, r4
   13b1a:	b005      	add	sp, #20
   13b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   13b20:	4b1e      	ldr	r3, [pc, #120]	; (13b9c <prefix_print+0x110>)
   13b22:	6819      	ldr	r1, [r3, #0]
   13b24:	2900      	cmp	r1, #0
   13b26:	d0c7      	beq.n	13ab8 <prefix_print+0x2c>
		timestamp /= timestamp_div;
   13b28:	4b1d      	ldr	r3, [pc, #116]	; (13ba0 <prefix_print+0x114>)
   13b2a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   13b2e:	681b      	ldr	r3, [r3, #0]
   13b30:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
   13b34:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
   13b38:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   13b3c:	fbb4 f2fe 	udiv	r2, r4, lr
   13b40:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   13b44:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   13b48:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   13b4c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13b50:	fbb4 fbf1 	udiv	fp, r4, r1
   13b54:	fb01 441b 	mls	r4, r1, fp, r4
   13b58:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   13b5c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13b60:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   13b64:	e9cd b101 	strd	fp, r1, [sp, #4]
   13b68:	fb0a e113 	mls	r1, sl, r3, lr
   13b6c:	9100      	str	r1, [sp, #0]
   13b6e:	490d      	ldr	r1, [pc, #52]	; (13ba4 <prefix_print+0x118>)
   13b70:	f7ff ff7a 	bl	13a68 <print_formatted>
   13b74:	e79f      	b.n	13ab6 <prefix_print+0x2a>
	total += print_formatted(log_output,
   13b76:	4f08      	ldr	r7, [pc, #32]	; (13b98 <prefix_print+0x10c>)
   13b78:	e7c2      	b.n	13b00 <prefix_print+0x74>
   13b7a:	bf00      	nop
   13b7c:	00020b70 	.word	0x00020b70
   13b80:	00020478 	.word	0x00020478
   13b84:	000216a5 	.word	0x000216a5
   13b88:	00020b62 	.word	0x00020b62
   13b8c:	0002048c 	.word	0x0002048c
   13b90:	00020b95 	.word	0x00020b95
   13b94:	00020b6c 	.word	0x00020b6c
   13b98:	00020b67 	.word	0x00020b67
   13b9c:	200023e8 	.word	0x200023e8
   13ba0:	200023ec 	.word	0x200023ec
   13ba4:	00020b79 	.word	0x00020b79

00013ba8 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   13ba8:	b538      	push	{r3, r4, r5, lr}
   13baa:	460c      	mov	r4, r1
	if (color) {
   13bac:	07e1      	lsls	r1, r4, #31
{
   13bae:	4605      	mov	r5, r0
	if (color) {
   13bb0:	d503      	bpl.n	13bba <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   13bb2:	4a08      	ldr	r2, [pc, #32]	; (13bd4 <postfix_print+0x2c>)
   13bb4:	4908      	ldr	r1, [pc, #32]	; (13bd8 <postfix_print+0x30>)
   13bb6:	f7ff ff57 	bl	13a68 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13bba:	06e2      	lsls	r2, r4, #27
   13bbc:	d408      	bmi.n	13bd0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13bbe:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   13bc0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   13bc2:	bf4c      	ite	mi
   13bc4:	4905      	ldrmi	r1, [pc, #20]	; (13bdc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   13bc6:	4906      	ldrpl	r1, [pc, #24]	; (13be0 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   13bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   13bcc:	f7ff bf4c 	b.w	13a68 <print_formatted>
}
   13bd0:	bd38      	pop	{r3, r4, r5, pc}
   13bd2:	bf00      	nop
   13bd4:	00020b62 	.word	0x00020b62
   13bd8:	000216a5 	.word	0x000216a5
   13bdc:	00020b9c 	.word	0x00020b9c
   13be0:	00020b9b 	.word	0x00020b9b

00013be4 <hexdump_line_print>:
{
   13be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13be8:	461d      	mov	r5, r3
   13bea:	9b08      	ldr	r3, [sp, #32]
   13bec:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13bee:	06da      	lsls	r2, r3, #27
{
   13bf0:	4604      	mov	r4, r0
   13bf2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13bf4:	d405      	bmi.n	13c02 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13bf6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   13bf8:	bf4c      	ite	mi
   13bfa:	492a      	ldrmi	r1, [pc, #168]	; (13ca4 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   13bfc:	492a      	ldrpl	r1, [pc, #168]	; (13ca8 <hexdump_line_print+0xc4>)
   13bfe:	f7ff ff33 	bl	13a68 <print_formatted>
		print_formatted(log_output, " ");
   13c02:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 13cb0 <hexdump_line_print+0xcc>
{
   13c06:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   13c0a:	45a8      	cmp	r8, r5
   13c0c:	db2a      	blt.n	13c64 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
   13c0e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 13cb4 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   13c12:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 13cb8 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   13c16:	f8df a098 	ldr.w	sl, [pc, #152]	; 13cb0 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13c1a:	2500      	movs	r5, #0
		if (i < length) {
   13c1c:	42bd      	cmp	r5, r7
   13c1e:	d22f      	bcs.n	13c80 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
   13c20:	5d72      	ldrb	r2, [r6, r5]
   13c22:	4649      	mov	r1, r9
   13c24:	4620      	mov	r0, r4
   13c26:	f7ff ff1f 	bl	13a68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13c2a:	3501      	adds	r5, #1
   13c2c:	2d10      	cmp	r5, #16
   13c2e:	d120      	bne.n	13c72 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
   13c30:	491e      	ldr	r1, [pc, #120]	; (13cac <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
   13c32:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13cb0 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
   13c36:	f8df 9084 	ldr.w	r9, [pc, #132]	; 13cbc <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
   13c3a:	4620      	mov	r0, r4
   13c3c:	f7ff ff14 	bl	13a68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13c40:	2500      	movs	r5, #0
		if (i < length) {
   13c42:	42af      	cmp	r7, r5
   13c44:	d928      	bls.n	13c98 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   13c46:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
   13c48:	f1a2 0320 	sub.w	r3, r2, #32
   13c4c:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(log_output, "%c",
   13c4e:	bf28      	it	cs
   13c50:	222e      	movcs	r2, #46	; 0x2e
   13c52:	4649      	mov	r1, r9
   13c54:	4620      	mov	r0, r4
   13c56:	f7ff ff07 	bl	13a68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13c5a:	3501      	adds	r5, #1
   13c5c:	2d10      	cmp	r5, #16
   13c5e:	d114      	bne.n	13c8a <hexdump_line_print+0xa6>
}
   13c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   13c64:	4649      	mov	r1, r9
   13c66:	4620      	mov	r0, r4
   13c68:	f7ff fefe 	bl	13a68 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13c6c:	f108 0801 	add.w	r8, r8, #1
   13c70:	e7cb      	b.n	13c0a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   13c72:	076a      	lsls	r2, r5, #29
   13c74:	d1d2      	bne.n	13c1c <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   13c76:	4651      	mov	r1, sl
   13c78:	4620      	mov	r0, r4
   13c7a:	f7ff fef5 	bl	13a68 <print_formatted>
   13c7e:	e7cd      	b.n	13c1c <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   13c80:	4641      	mov	r1, r8
   13c82:	4620      	mov	r0, r4
   13c84:	f7ff fef0 	bl	13a68 <print_formatted>
   13c88:	e7cf      	b.n	13c2a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   13c8a:	076b      	lsls	r3, r5, #29
   13c8c:	d1d9      	bne.n	13c42 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
   13c8e:	4641      	mov	r1, r8
   13c90:	4620      	mov	r0, r4
   13c92:	f7ff fee9 	bl	13a68 <print_formatted>
   13c96:	e7d4      	b.n	13c42 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
   13c98:	4641      	mov	r1, r8
   13c9a:	4620      	mov	r0, r4
   13c9c:	f7ff fee4 	bl	13a68 <print_formatted>
   13ca0:	e7db      	b.n	13c5a <hexdump_line_print+0x76>
   13ca2:	bf00      	nop
   13ca4:	00020b9c 	.word	0x00020b9c
   13ca8:	00020b9b 	.word	0x00020b9b
   13cac:	00020ba8 	.word	0x00020ba8
   13cb0:	00020ba6 	.word	0x00020ba6
   13cb4:	00020ba4 	.word	0x00020ba4
   13cb8:	00020b9e 	.word	0x00020b9e
   13cbc:	00020baa 	.word	0x00020baa

00013cc0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   13cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   13cc4:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13cc6:	f013 0807 	ands.w	r8, r3, #7
{
   13cca:	4617      	mov	r7, r2
   13ccc:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13cce:	7a0a      	ldrb	r2, [r1, #8]
   13cd0:	4605      	mov	r5, r0
   13cd2:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13cd4:	d021      	beq.n	13d1a <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
   13cd6:	8949      	ldrh	r1, [r1, #10]
   13cd8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13cdc:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13ce0:	43d2      	mvns	r2, r2
   13ce2:	e9cd 8300 	strd	r8, r3, [sp]
   13ce6:	9102      	str	r1, [sp, #8]
   13ce8:	68f3      	ldr	r3, [r6, #12]
   13cea:	f002 0201 	and.w	r2, r2, #1
   13cee:	4639      	mov	r1, r7
   13cf0:	f7ff fecc 	bl	13a8c <prefix_print>
   13cf4:	4681      	mov	r9, r0
   13cf6:	7a34      	ldrb	r4, [r6, #8]
   13cf8:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   13cfa:	f014 0401 	ands.w	r4, r4, #1
   13cfe:	d00e      	beq.n	13d1e <log_output_msg_process+0x5e>
		std_print(msg, log_output);
   13d00:	4629      	mov	r1, r5
   13d02:	4630      	mov	r0, r6
   13d04:	f009 fd3a 	bl	1d77c <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   13d08:	f1b8 0f00 	cmp.w	r8, #0
   13d0c:	d02b      	beq.n	13d66 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
   13d0e:	4642      	mov	r2, r8
   13d10:	4639      	mov	r1, r7
   13d12:	4628      	mov	r0, r5
   13d14:	f7ff ff48 	bl	13ba8 <postfix_print>
   13d18:	e025      	b.n	13d66 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13d1a:	46c1      	mov	r9, r8
   13d1c:	e7eb      	b.n	13cf6 <log_output_msg_process+0x36>
	} else if (raw_string) {
   13d1e:	f1b8 0f00 	cmp.w	r8, #0
   13d22:	d126      	bne.n	13d72 <log_output_msg_process+0xb2>
	size_t offset = 0;
   13d24:	4627      	mov	r7, r4
		length = log_output->size;
   13d26:	68eb      	ldr	r3, [r5, #12]
   13d28:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   13d2a:	aa06      	add	r2, sp, #24
   13d2c:	463b      	mov	r3, r7
   13d2e:	68a9      	ldr	r1, [r5, #8]
   13d30:	4630      	mov	r0, r6
   13d32:	f009 fd0f 	bl	1d754 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   13d36:	9a06      	ldr	r2, [sp, #24]
   13d38:	686b      	ldr	r3, [r5, #4]
   13d3a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   13d3c:	b13a      	cbz	r2, 13d4e <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
   13d3e:	68ab      	ldr	r3, [r5, #8]
   13d40:	4413      	add	r3, r2
   13d42:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   13d46:	f1a4 030a 	sub.w	r3, r4, #10
   13d4a:	425c      	negs	r4, r3
   13d4c:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   13d4e:	4628      	mov	r0, r5
   13d50:	f009 fe71 	bl	1da36 <log_output_flush>
		offset += length;
   13d54:	9b06      	ldr	r3, [sp, #24]
   13d56:	441f      	add	r7, r3
	} while (length > 0);
   13d58:	2b00      	cmp	r3, #0
   13d5a:	d1e4      	bne.n	13d26 <log_output_msg_process+0x66>
	if (eol) {
   13d5c:	b11c      	cbz	r4, 13d66 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
   13d5e:	4914      	ldr	r1, [pc, #80]	; (13db0 <log_output_msg_process+0xf0>)
   13d60:	4628      	mov	r0, r5
   13d62:	f7ff fe81 	bl	13a68 <print_formatted>
	}

	log_output_flush(log_output);
   13d66:	4628      	mov	r0, r5
   13d68:	f009 fe65 	bl	1da36 <log_output_flush>
}
   13d6c:	b00a      	add	sp, #40	; 0x28
   13d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   13d72:	4630      	mov	r0, r6
   13d74:	f009 fc45 	bl	1d602 <log_msg_str_get>
   13d78:	490e      	ldr	r1, [pc, #56]	; (13db4 <log_output_msg_process+0xf4>)
   13d7a:	4602      	mov	r2, r0
   13d7c:	4628      	mov	r0, r5
   13d7e:	f7ff fe73 	bl	13a68 <print_formatted>
		length = sizeof(buf);
   13d82:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13d86:	aa05      	add	r2, sp, #20
   13d88:	4623      	mov	r3, r4
   13d8a:	a906      	add	r1, sp, #24
   13d8c:	4630      	mov	r0, r6
		length = sizeof(buf);
   13d8e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13d92:	f009 fcdf 	bl	1d754 <log_msg_hexdump_data_get>
		if (length) {
   13d96:	9a05      	ldr	r2, [sp, #20]
   13d98:	2a00      	cmp	r2, #0
   13d9a:	d0b8      	beq.n	13d0e <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
   13d9c:	464b      	mov	r3, r9
   13d9e:	9700      	str	r7, [sp, #0]
   13da0:	a906      	add	r1, sp, #24
   13da2:	4628      	mov	r0, r5
   13da4:	f7ff ff1e 	bl	13be4 <hexdump_line_print>
			offset += length;
   13da8:	9b05      	ldr	r3, [sp, #20]
   13daa:	441c      	add	r4, r3
		length = sizeof(buf);
   13dac:	e7eb      	b.n	13d86 <log_output_msg_process+0xc6>
   13dae:	bf00      	nop
   13db0:	00020bad 	.word	0x00020bad
   13db4:	000216a5 	.word	0x000216a5

00013db8 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
   13db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13dba:	f242 730f 	movw	r3, #9999	; 0x270f
   13dbe:	428b      	cmp	r3, r1
   13dc0:	bf28      	it	cs
   13dc2:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   13dc4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13dc6:	4a0f      	ldr	r2, [pc, #60]	; (13e04 <log_output_dropped_process+0x4c>)
{
   13dc8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13dca:	2105      	movs	r1, #5
   13dcc:	4668      	mov	r0, sp
   13dce:	f008 fef8 	bl	1cbc2 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13dd2:	6863      	ldr	r3, [r4, #4]
   13dd4:	490c      	ldr	r1, [pc, #48]	; (13e08 <log_output_dropped_process+0x50>)
   13dd6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13dd8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13dda:	220b      	movs	r2, #11
   13ddc:	4628      	mov	r0, r5
   13dde:	f009 fcc0 	bl	1d762 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   13de2:	6863      	ldr	r3, [r4, #4]
   13de4:	4632      	mov	r2, r6
   13de6:	4669      	mov	r1, sp
   13de8:	4628      	mov	r0, r5
   13dea:	685b      	ldr	r3, [r3, #4]
   13dec:	f009 fcb9 	bl	1d762 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13df0:	6863      	ldr	r3, [r4, #4]
   13df2:	4906      	ldr	r1, [pc, #24]	; (13e0c <log_output_dropped_process+0x54>)
   13df4:	685b      	ldr	r3, [r3, #4]
   13df6:	221b      	movs	r2, #27
   13df8:	4628      	mov	r0, r5
   13dfa:	f009 fcb2 	bl	1d762 <buffer_write>
		     log_output->control_block->ctx);
}
   13dfe:	b002      	add	sp, #8
   13e00:	bd70      	pop	{r4, r5, r6, pc}
   13e02:	bf00      	nop
   13e04:	000221a5 	.word	0x000221a5
   13e08:	00020beb 	.word	0x00020beb
   13e0c:	00020bcf 	.word	0x00020bcf

00013e10 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   13e10:	4a08      	ldr	r2, [pc, #32]	; (13e34 <log_output_timestamp_freq_set+0x24>)
{
   13e12:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   13e14:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   13e16:	4c08      	ldr	r4, [pc, #32]	; (13e38 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   13e18:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   13e1a:	2100      	movs	r1, #0
   13e1c:	42a0      	cmp	r0, r4
   13e1e:	d804      	bhi.n	13e2a <log_output_timestamp_freq_set+0x1a>
   13e20:	b101      	cbz	r1, 13e24 <log_output_timestamp_freq_set+0x14>
   13e22:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   13e24:	4b05      	ldr	r3, [pc, #20]	; (13e3c <log_output_timestamp_freq_set+0x2c>)
   13e26:	6018      	str	r0, [r3, #0]
}
   13e28:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   13e2a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13e2c:	005b      	lsls	r3, r3, #1
   13e2e:	2101      	movs	r1, #1
   13e30:	e7f4      	b.n	13e1c <log_output_timestamp_freq_set+0xc>
   13e32:	bf00      	nop
   13e34:	200023ec 	.word	0x200023ec
   13e38:	000f4240 	.word	0x000f4240
   13e3c:	200023e8 	.word	0x200023e8

00013e40 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   13e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   13e42:	4f07      	ldr	r7, [pc, #28]	; (13e60 <char_out+0x20>)
{
   13e44:	460d      	mov	r5, r1
   13e46:	4604      	mov	r4, r0
   13e48:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   13e4a:	42b4      	cmp	r4, r6
   13e4c:	d101      	bne.n	13e52 <char_out+0x12>
	}

	return length;
}
   13e4e:	4628      	mov	r0, r5
   13e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   13e52:	6838      	ldr	r0, [r7, #0]
   13e54:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   13e58:	6883      	ldr	r3, [r0, #8]
   13e5a:	685b      	ldr	r3, [r3, #4]
   13e5c:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   13e5e:	e7f4      	b.n	13e4a <char_out+0xa>
   13e60:	20002404 	.word	0x20002404

00013e64 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   13e64:	4801      	ldr	r0, [pc, #4]	; (13e6c <panic+0x8>)
   13e66:	f009 bde6 	b.w	1da36 <log_output_flush>
   13e6a:	bf00      	nop
   13e6c:	000204b8 	.word	0x000204b8

00013e70 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   13e70:	4801      	ldr	r0, [pc, #4]	; (13e78 <dropped+0x8>)
   13e72:	f7ff bfa1 	b.w	13db8 <log_output_dropped_process>
   13e76:	bf00      	nop
   13e78:	000204b8 	.word	0x000204b8

00013e7c <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   13e7c:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   13e7e:	4803      	ldr	r0, [pc, #12]	; (13e8c <log_backend_uart_init+0x10>)
   13e80:	f007 fb76 	bl	1b570 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13e84:	4b02      	ldr	r3, [pc, #8]	; (13e90 <log_backend_uart_init+0x14>)
   13e86:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
   13e88:	bd08      	pop	{r3, pc}
   13e8a:	bf00      	nop
   13e8c:	00020bf7 	.word	0x00020bf7
   13e90:	20002404 	.word	0x20002404

00013e94 <put>:
{
   13e94:	b510      	push	{r4, lr}
	log_msg_get(msg);
   13e96:	4608      	mov	r0, r1
   13e98:	460c      	mov	r4, r1
   13e9a:	f009 fb70 	bl	1d57e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   13e9e:	4805      	ldr	r0, [pc, #20]	; (13eb4 <put+0x20>)
   13ea0:	4621      	mov	r1, r4
   13ea2:	220f      	movs	r2, #15
   13ea4:	f7ff ff0c 	bl	13cc0 <log_output_msg_process>
	log_msg_put(msg);
   13ea8:	4620      	mov	r0, r4
}
   13eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13eae:	f009 bb95 	b.w	1d5dc <log_msg_put>
   13eb2:	bf00      	nop
   13eb4:	000204b8 	.word	0x000204b8

00013eb8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   13eb8:	4b01      	ldr	r3, [pc, #4]	; (13ec0 <log_backend_rtt_init+0x8>)
   13eba:	2201      	movs	r2, #1
   13ebc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   13ebe:	4770      	bx	lr
   13ec0:	200026d9 	.word	0x200026d9

00013ec4 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   13ec4:	4b02      	ldr	r3, [pc, #8]	; (13ed0 <panic+0xc>)
	log_output_flush(log_output);
   13ec6:	4803      	ldr	r0, [pc, #12]	; (13ed4 <panic+0x10>)
   13ec8:	2201      	movs	r2, #1
   13eca:	701a      	strb	r2, [r3, #0]
   13ecc:	f009 bdb3 	b.w	1da36 <log_output_flush>
   13ed0:	200026da 	.word	0x200026da
   13ed4:	000204e0 	.word	0x000204e0

00013ed8 <dropped>:
	log_output_dropped_process(log_output, cnt);
   13ed8:	4801      	ldr	r0, [pc, #4]	; (13ee0 <dropped+0x8>)
   13eda:	f7ff bf6d 	b.w	13db8 <log_output_dropped_process>
   13ede:	bf00      	nop
   13ee0:	000204e0 	.word	0x000204e0

00013ee4 <put>:
{
   13ee4:	b510      	push	{r4, lr}
	log_msg_get(msg);
   13ee6:	4608      	mov	r0, r1
   13ee8:	460c      	mov	r4, r1
   13eea:	f009 fb48 	bl	1d57e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   13eee:	4805      	ldr	r0, [pc, #20]	; (13f04 <put+0x20>)
   13ef0:	4621      	mov	r1, r4
   13ef2:	220f      	movs	r2, #15
   13ef4:	f7ff fee4 	bl	13cc0 <log_output_msg_process>
	log_msg_put(msg);
   13ef8:	4620      	mov	r0, r4
}
   13efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13efe:	f009 bb6d 	b.w	1d5dc <log_msg_put>
   13f02:	bf00      	nop
   13f04:	000204e0 	.word	0x000204e0

00013f08 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   13f08:	4b05      	ldr	r3, [pc, #20]	; (13f20 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   13f0a:	781b      	ldrb	r3, [r3, #0]
   13f0c:	b11b      	cbz	r3, 13f16 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   13f0e:	f241 3088 	movw	r0, #5000	; 0x1388
   13f12:	f00b be7a 	b.w	1fc0a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   13f16:	20a4      	movs	r0, #164	; 0xa4
   13f18:	2100      	movs	r1, #0
   13f1a:	f008 b983 	b.w	1c224 <z_impl_k_sleep>
   13f1e:	bf00      	nop
   13f20:	200026da 	.word	0x200026da

00013f24 <data_out_block_mode>:
{
   13f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   13f28:	f8df 9090 	ldr.w	r9, [pc, #144]	; 13fbc <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
   13f2c:	f8df b090 	ldr.w	fp, [pc, #144]	; 13fc0 <data_out_block_mode+0x9c>
{
   13f30:	4607      	mov	r7, r0
   13f32:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   13f34:	2404      	movs	r4, #4
   13f36:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
   13f38:	f899 3000 	ldrb.w	r3, [r9]
   13f3c:	b933      	cbnz	r3, 13f4c <data_out_block_mode+0x28>
   13f3e:	f04f 32ff 	mov.w	r2, #4294967295
   13f42:	f04f 33ff 	mov.w	r3, #4294967295
   13f46:	4658      	mov	r0, fp
   13f48:	f007 fd02 	bl	1b950 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13f4c:	4632      	mov	r2, r6
   13f4e:	4639      	mov	r1, r7
   13f50:	2000      	movs	r0, #0
   13f52:	f000 fb63 	bl	1461c <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
   13f56:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13f5a:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
   13f5c:	b913      	cbnz	r3, 13f64 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
   13f5e:	4658      	mov	r0, fp
   13f60:	f007 fd6e 	bl	1ba40 <z_impl_k_mutex_unlock>
		if (ret) {
   13f64:	4d14      	ldr	r5, [pc, #80]	; (13fb8 <data_out_block_mode+0x94>)
   13f66:	f1b8 0f00 	cmp.w	r8, #0
   13f6a:	d018      	beq.n	13f9e <data_out_block_mode+0x7a>
	host_present = true;
   13f6c:	2301      	movs	r3, #1
   13f6e:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   13f70:	f89a 3000 	ldrb.w	r3, [sl]
   13f74:	b933      	cbnz	r3, 13f84 <data_out_block_mode+0x60>
}
   13f76:	4630      	mov	r0, r6
   13f78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
   13f7c:	b95c      	cbnz	r4, 13f96 <data_out_block_mode+0x72>
		host_present = false;
   13f7e:	702c      	strb	r4, [r5, #0]
   13f80:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   13f84:	2000      	movs	r0, #0
   13f86:	f000 fb95 	bl	146b4 <SEGGER_RTT_HasDataUp>
   13f8a:	2800      	cmp	r0, #0
   13f8c:	d0f3      	beq.n	13f76 <data_out_block_mode+0x52>
   13f8e:	782b      	ldrb	r3, [r5, #0]
   13f90:	2b00      	cmp	r3, #0
   13f92:	d1f3      	bne.n	13f7c <data_out_block_mode+0x58>
   13f94:	e7ef      	b.n	13f76 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
   13f96:	3c01      	subs	r4, #1
   13f98:	f7ff ffb6 	bl	13f08 <on_failed_write.part.0>
   13f9c:	e7f2      	b.n	13f84 <data_out_block_mode+0x60>
		} else if (host_present) {
   13f9e:	782b      	ldrb	r3, [r5, #0]
   13fa0:	b113      	cbz	r3, 13fa8 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
   13fa2:	3c01      	subs	r4, #1
   13fa4:	d104      	bne.n	13fb0 <data_out_block_mode+0x8c>
		host_present = false;
   13fa6:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   13fa8:	782b      	ldrb	r3, [r5, #0]
   13faa:	2b00      	cmp	r3, #0
   13fac:	d1c4      	bne.n	13f38 <data_out_block_mode+0x14>
   13fae:	e7e2      	b.n	13f76 <data_out_block_mode+0x52>
   13fb0:	f7ff ffaa 	bl	13f08 <on_failed_write.part.0>
   13fb4:	e7f8      	b.n	13fa8 <data_out_block_mode+0x84>
   13fb6:	bf00      	nop
   13fb8:	200026d9 	.word	0x200026d9
   13fbc:	200026da 	.word	0x200026da
   13fc0:	20000754 	.word	0x20000754

00013fc4 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
   13fc4:	4b02      	ldr	r3, [pc, #8]	; (13fd0 <hrs_init+0xc>)
   13fc6:	2201      	movs	r2, #1
   13fc8:	701a      	strb	r2, [r3, #0]

	return 0;
}
   13fca:	2000      	movs	r0, #0
   13fcc:	4770      	bx	lr
   13fce:	bf00      	nop
   13fd0:	200026db 	.word	0x200026db

00013fd4 <read_blsc>:
{
   13fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
   13fd6:	2401      	movs	r4, #1
   13fd8:	9402      	str	r4, [sp, #8]
   13fda:	4c04      	ldr	r4, [pc, #16]	; (13fec <read_blsc+0x18>)
   13fdc:	9401      	str	r4, [sp, #4]
   13fde:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   13fe2:	9400      	str	r4, [sp, #0]
   13fe4:	f00b f8e1 	bl	1f1aa <bt_gatt_attr_read>
}
   13fe8:	b004      	add	sp, #16
   13fea:	bd10      	pop	{r4, pc}
   13fec:	200026db 	.word	0x200026db

00013ff0 <hrmc_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   13ff0:	4b07      	ldr	r3, [pc, #28]	; (14010 <hrmc_ccc_cfg_changed+0x20>)
   13ff2:	4a08      	ldr	r2, [pc, #32]	; (14014 <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   13ff4:	4808      	ldr	r0, [pc, #32]	; (14018 <hrmc_ccc_cfg_changed+0x28>)
   13ff6:	1ad2      	subs	r2, r2, r3
   13ff8:	08d2      	lsrs	r2, r2, #3
   13ffa:	4b08      	ldr	r3, [pc, #32]	; (1401c <hrmc_ccc_cfg_changed+0x2c>)
   13ffc:	0192      	lsls	r2, r2, #6
   13ffe:	2901      	cmp	r1, #1
   14000:	bf14      	ite	ne
   14002:	4601      	movne	r1, r0
   14004:	4619      	moveq	r1, r3
   14006:	f042 0203 	orr.w	r2, r2, #3
   1400a:	4805      	ldr	r0, [pc, #20]	; (14020 <hrmc_ccc_cfg_changed+0x30>)
   1400c:	f009 ba02 	b.w	1d414 <log_1>
   14010:	00020308 	.word	0x00020308
   14014:	00020358 	.word	0x00020358
   14018:	00020c27 	.word	0x00020c27
   1401c:	00020c1f 	.word	0x00020c1f
   14020:	00020c30 	.word	0x00020c30

00014024 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   14024:	b510      	push	{r4, lr}
   14026:	4807      	ldr	r0, [pc, #28]	; (14044 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
   14028:	4c07      	ldr	r4, [pc, #28]	; (14048 <uart_console_init+0x24>)
   1402a:	f007 faa1 	bl	1b570 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1402e:	4b07      	ldr	r3, [pc, #28]	; (1404c <uart_console_init+0x28>)
   14030:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   14032:	4620      	mov	r0, r4
   14034:	f001 f8b6 	bl	151a4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   14038:	4620      	mov	r0, r4
   1403a:	f7fe fd37 	bl	12aac <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   1403e:	2000      	movs	r0, #0
   14040:	bd10      	pop	{r4, pc}
   14042:	bf00      	nop
   14044:	00020bf7 	.word	0x00020bf7
   14048:	00014051 	.word	0x00014051
   1404c:	2000241c 	.word	0x2000241c

00014050 <console_out>:
	if ('\n' == c) {
   14050:	280a      	cmp	r0, #10
{
   14052:	b538      	push	{r3, r4, r5, lr}
   14054:	4d07      	ldr	r5, [pc, #28]	; (14074 <console_out+0x24>)
   14056:	4604      	mov	r4, r0
	if ('\n' == c) {
   14058:	d104      	bne.n	14064 <console_out+0x14>
   1405a:	6828      	ldr	r0, [r5, #0]
   1405c:	6883      	ldr	r3, [r0, #8]
   1405e:	210d      	movs	r1, #13
   14060:	685b      	ldr	r3, [r3, #4]
   14062:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   14064:	6828      	ldr	r0, [r5, #0]
   14066:	6883      	ldr	r3, [r0, #8]
   14068:	b2e1      	uxtb	r1, r4
   1406a:	685b      	ldr	r3, [r3, #4]
   1406c:	4798      	blx	r3
}
   1406e:	4620      	mov	r0, r4
   14070:	bd38      	pop	{r3, r4, r5, pc}
   14072:	bf00      	nop
   14074:	2000241c 	.word	0x2000241c

00014078 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14078:	b570      	push	{r4, r5, r6, lr}
   1407a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1407c:	480d      	ldr	r0, [pc, #52]	; (140b4 <onoff_stop+0x3c>)
   1407e:	1a23      	subs	r3, r4, r0
   14080:	109a      	asrs	r2, r3, #2
   14082:	4b0d      	ldr	r3, [pc, #52]	; (140b8 <onoff_stop+0x40>)
   14084:	4353      	muls	r3, r2
   14086:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   14088:	250c      	movs	r5, #12
   1408a:	435d      	muls	r5, r3
   1408c:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
   14090:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   14092:	4418      	add	r0, r3
   14094:	2140      	movs	r1, #64	; 0x40
   14096:	f009 fcff 	bl	1da98 <set_off_state>
	if (err < 0) {
   1409a:	1e01      	subs	r1, r0, #0
   1409c:	db04      	blt.n	140a8 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   1409e:	4b07      	ldr	r3, [pc, #28]	; (140bc <onoff_stop+0x44>)
   140a0:	442b      	add	r3, r5
   140a2:	685b      	ldr	r3, [r3, #4]
   140a4:	4798      	blx	r3
	return 0;
   140a6:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   140a8:	4620      	mov	r0, r4
   140aa:	4633      	mov	r3, r6
}
   140ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   140b0:	4718      	bx	r3
   140b2:	bf00      	nop
   140b4:	20002430 	.word	0x20002430
   140b8:	b6db6db7 	.word	0xb6db6db7
   140bc:	000205a4 	.word	0x000205a4

000140c0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   140c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   140c4:	4c0f      	ldr	r4, [pc, #60]	; (14104 <onoff_start+0x44>)
   140c6:	4d10      	ldr	r5, [pc, #64]	; (14108 <onoff_start+0x48>)
   140c8:	1b03      	subs	r3, r0, r4
   140ca:	109b      	asrs	r3, r3, #2
   140cc:	435d      	muls	r5, r3
   140ce:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   140d0:	250c      	movs	r5, #12
   140d2:	435d      	muls	r5, r3
{
   140d4:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   140d6:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   140da:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   140dc:	4420      	add	r0, r4
   140de:	2140      	movs	r1, #64	; 0x40
   140e0:	f009 fcf3 	bl	1daca <set_starting_state>
	if (err < 0) {
   140e4:	1e01      	subs	r1, r0, #0
   140e6:	db08      	blt.n	140fa <onoff_start+0x3a>
	subdata->cb = cb;
   140e8:	4b08      	ldr	r3, [pc, #32]	; (1410c <onoff_start+0x4c>)
   140ea:	442c      	add	r4, r5
	subdata->user_data = user_data;
   140ec:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   140f0:	4b07      	ldr	r3, [pc, #28]	; (14110 <onoff_start+0x50>)
   140f2:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   140f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   140f8:	4718      	bx	r3
		notify(mgr, err);
   140fa:	4638      	mov	r0, r7
   140fc:	4633      	mov	r3, r6
}
   140fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   14102:	4718      	bx	r3
   14104:	20002430 	.word	0x20002430
   14108:	b6db6db7 	.word	0xb6db6db7
   1410c:	0001db2d 	.word	0x0001db2d
   14110:	000205a4 	.word	0x000205a4

00014114 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14114:	2200      	movs	r2, #0
{
   14116:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14118:	2101      	movs	r1, #1
{
   1411a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1411c:	4610      	mov	r0, r2
   1411e:	f000 fbf5 	bl	1490c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   14122:	2000      	movs	r0, #0
   14124:	f000 fbe2 	bl	148ec <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   14128:	480f      	ldr	r0, [pc, #60]	; (14168 <clk_init+0x54>)
   1412a:	f007 f88f 	bl	1b24c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1412e:	4b0f      	ldr	r3, [pc, #60]	; (1416c <clk_init+0x58>)
   14130:	4298      	cmp	r0, r3
   14132:	d115      	bne.n	14160 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   14134:	f00b fafb 	bl	1f72e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   14138:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1413a:	490d      	ldr	r1, [pc, #52]	; (14170 <clk_init+0x5c>)
   1413c:	4630      	mov	r0, r6
   1413e:	f008 fd9c 	bl	1cc7a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   14142:	2800      	cmp	r0, #0
   14144:	db0b      	blt.n	1415e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14146:	2501      	movs	r5, #1
   14148:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   1414a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1414c:	4908      	ldr	r1, [pc, #32]	; (14170 <clk_init+0x5c>)
   1414e:	f104 001c 	add.w	r0, r4, #28
   14152:	f008 fd92 	bl	1cc7a <onoff_manager_init>
		if (err < 0) {
   14156:	2800      	cmp	r0, #0
   14158:	db01      	blt.n	1415e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1415a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1415c:	2000      	movs	r0, #0
}
   1415e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   14160:	f06f 0004 	mvn.w	r0, #4
   14164:	e7fb      	b.n	1415e <clk_init+0x4a>
   14166:	bf00      	nop
   14168:	000141a9 	.word	0x000141a9
   1416c:	0bad0000 	.word	0x0bad0000
   14170:	000205bc 	.word	0x000205bc

00014174 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   14174:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   14176:	230c      	movs	r3, #12
   14178:	4809      	ldr	r0, [pc, #36]	; (141a0 <clkstarted_handle.constprop.0+0x2c>)
   1417a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1417c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1417e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   14180:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   14184:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   14186:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   14188:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1418a:	4418      	add	r0, r3
   1418c:	f009 fcbb 	bl	1db06 <set_on_state>
	if (callback) {
   14190:	b12d      	cbz	r5, 1419e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14192:	4632      	mov	r2, r6
   14194:	462b      	mov	r3, r5
   14196:	4803      	ldr	r0, [pc, #12]	; (141a4 <clkstarted_handle.constprop.0+0x30>)
}
   14198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1419c:	4718      	bx	r3
}
   1419e:	bd70      	pop	{r4, r5, r6, pc}
   141a0:	20002430 	.word	0x20002430
   141a4:	200006ac 	.word	0x200006ac

000141a8 <clock_event_handler>:
	switch (event) {
   141a8:	b110      	cbz	r0, 141b0 <clock_event_handler+0x8>
   141aa:	2801      	cmp	r0, #1
   141ac:	d004      	beq.n	141b8 <clock_event_handler+0x10>
   141ae:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   141b0:	4b03      	ldr	r3, [pc, #12]	; (141c0 <clock_event_handler+0x18>)
   141b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   141b4:	075b      	lsls	r3, r3, #29
   141b6:	d101      	bne.n	141bc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   141b8:	f7ff bfdc 	b.w	14174 <clkstarted_handle.constprop.0>
}
   141bc:	4770      	bx	lr
   141be:	bf00      	nop
   141c0:	20002430 	.word	0x20002430

000141c4 <generic_hfclk_start>:
{
   141c4:	b508      	push	{r3, lr}
	__asm__ volatile(
   141c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   141ca:	f3ef 8111 	mrs	r1, BASEPRI
   141ce:	f383 8811 	msr	BASEPRI, r3
   141d2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   141d6:	4a12      	ldr	r2, [pc, #72]	; (14220 <generic_hfclk_start+0x5c>)
   141d8:	6813      	ldr	r3, [r2, #0]
   141da:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   141de:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   141e2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   141e4:	d00c      	beq.n	14200 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   141e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   141ea:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   141ee:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   141f2:	f013 0301 	ands.w	r3, r3, #1
   141f6:	d003      	beq.n	14200 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   141f8:	480a      	ldr	r0, [pc, #40]	; (14224 <generic_hfclk_start+0x60>)
   141fa:	f009 fc84 	bl	1db06 <set_on_state>
			already_started = true;
   141fe:	2301      	movs	r3, #1
	__asm__ volatile(
   14200:	f381 8811 	msr	BASEPRI, r1
   14204:	f3bf 8f6f 	isb	sy
	if (already_started) {
   14208:	b123      	cbz	r3, 14214 <generic_hfclk_start+0x50>
}
   1420a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1420e:	2000      	movs	r0, #0
   14210:	f7ff bfb0 	b.w	14174 <clkstarted_handle.constprop.0>
}
   14214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14218:	2001      	movs	r0, #1
   1421a:	f007 b807 	b.w	1b22c <nrfx_clock_start>
   1421e:	bf00      	nop
   14220:	20002480 	.word	0x20002480
   14224:	20002470 	.word	0x20002470

00014228 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14228:	4b09      	ldr	r3, [pc, #36]	; (14250 <generic_hfclk_stop+0x28>)
   1422a:	f3bf 8f5b 	dmb	ish
   1422e:	e853 2f00 	ldrex	r2, [r3]
   14232:	f022 0102 	bic.w	r1, r2, #2
   14236:	e843 1000 	strex	r0, r1, [r3]
   1423a:	2800      	cmp	r0, #0
   1423c:	d1f7      	bne.n	1422e <generic_hfclk_stop+0x6>
   1423e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   14242:	07d3      	lsls	r3, r2, #31
   14244:	d402      	bmi.n	1424c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14246:	2001      	movs	r0, #1
   14248:	f00b ba6c 	b.w	1f724 <nrfx_clock_stop>
}
   1424c:	4770      	bx	lr
   1424e:	bf00      	nop
   14250:	20002480 	.word	0x20002480

00014254 <api_blocking_start>:
{
   14254:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14256:	2200      	movs	r2, #0
   14258:	2301      	movs	r3, #1
   1425a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1425e:	ab04      	add	r3, sp, #16
   14260:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14264:	4a09      	ldr	r2, [pc, #36]	; (1428c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14266:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1426a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1426c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14270:	f009 fc82 	bl	1db78 <api_start>
	if (err < 0) {
   14274:	2800      	cmp	r0, #0
   14276:	db05      	blt.n	14284 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   14278:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1427c:	2300      	movs	r3, #0
   1427e:	4668      	mov	r0, sp
   14280:	f008 f81e 	bl	1c2c0 <z_impl_k_sem_take>
}
   14284:	b007      	add	sp, #28
   14286:	f85d fb04 	ldr.w	pc, [sp], #4
   1428a:	bf00      	nop
   1428c:	0001db4b 	.word	0x0001db4b

00014290 <z_nrf_clock_control_lf_on>:
{
   14290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14294:	493a      	ldr	r1, [pc, #232]	; (14380 <z_nrf_clock_control_lf_on+0xf0>)
   14296:	f3bf 8f5b 	dmb	ish
   1429a:	4606      	mov	r6, r0
   1429c:	2201      	movs	r2, #1
   1429e:	e851 3f00 	ldrex	r3, [r1]
   142a2:	e841 2000 	strex	r0, r2, [r1]
   142a6:	2800      	cmp	r0, #0
   142a8:	d1f9      	bne.n	1429e <z_nrf_clock_control_lf_on+0xe>
   142aa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   142ae:	b933      	cbnz	r3, 142be <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   142b0:	4934      	ldr	r1, [pc, #208]	; (14384 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   142b2:	4835      	ldr	r0, [pc, #212]	; (14388 <z_nrf_clock_control_lf_on+0xf8>)
   142b4:	604b      	str	r3, [r1, #4]
   142b6:	60cb      	str	r3, [r1, #12]
   142b8:	608a      	str	r2, [r1, #8]
   142ba:	f008 fcf1 	bl	1cca0 <onoff_request>
	switch (start_mode) {
   142be:	1e73      	subs	r3, r6, #1
   142c0:	2b01      	cmp	r3, #1
   142c2:	d832      	bhi.n	1432a <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   142c4:	2e01      	cmp	r6, #1
   142c6:	d107      	bne.n	142d8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   142c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   142cc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   142d0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   142d4:	2b01      	cmp	r3, #1
   142d6:	d028      	beq.n	1432a <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   142d8:	f00b fc91 	bl	1fbfe <k_is_in_isr>
   142dc:	4604      	mov	r4, r0
   142de:	b918      	cbnz	r0, 142e8 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   142e0:	4b2a      	ldr	r3, [pc, #168]	; (1438c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   142e2:	781b      	ldrb	r3, [r3, #0]
   142e4:	2b00      	cmp	r3, #0
   142e6:	d144      	bne.n	14372 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   142e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   142ec:	f3ef 8511 	mrs	r5, BASEPRI
   142f0:	f383 8811 	msr	BASEPRI, r3
   142f4:	f3bf 8f6f 	isb	sy
   142f8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   142fa:	4f25      	ldr	r7, [pc, #148]	; (14390 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   142fc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 14394 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14300:	f8df 9094 	ldr.w	r9, [pc, #148]	; 14398 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14308:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1430c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   14310:	03d2      	lsls	r2, r2, #15
   14312:	d50c      	bpl.n	1432e <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   14314:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   14318:	2b01      	cmp	r3, #1
   1431a:	d001      	beq.n	14320 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1431c:	2e01      	cmp	r6, #1
   1431e:	d106      	bne.n	1432e <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   14320:	b30c      	cbz	r4, 14366 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   14322:	f385 8811 	msr	BASEPRI, r5
   14326:	f3bf 8f6f 	isb	sy
}
   1432a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   1432e:	b1ac      	cbz	r4, 1435c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   14330:	4628      	mov	r0, r5
   14332:	f000 fb77 	bl	14a24 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   14336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1433a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1433e:	2b00      	cmp	r3, #0
   14340:	d1e0      	bne.n	14304 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14342:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   14344:	2900      	cmp	r1, #0
   14346:	d0dd      	beq.n	14304 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14348:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1434a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1434c:	2301      	movs	r3, #1
   1434e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   14352:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14356:	f8c9 3000 	str.w	r3, [r9]
}
   1435a:	e7d3      	b.n	14304 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   1435c:	2100      	movs	r1, #0
   1435e:	2021      	movs	r0, #33	; 0x21
   14360:	f007 ff60 	bl	1c224 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14364:	e7e7      	b.n	14336 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   14366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1436a:	2202      	movs	r2, #2
   1436c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14370:	e7db      	b.n	1432a <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   14372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14376:	2202      	movs	r2, #2
   14378:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1437c:	4605      	mov	r5, r0
}
   1437e:	e7bc      	b.n	142fa <z_nrf_clock_control_lf_on+0x6a>
   14380:	20002484 	.word	0x20002484
   14384:	20002420 	.word	0x20002420
   14388:	2000244c 	.word	0x2000244c
   1438c:	20002ffb 	.word	0x20002ffb
   14390:	40000104 	.word	0x40000104
   14394:	e000e100 	.word	0xe000e100
   14398:	40000008 	.word	0x40000008

0001439c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   1439c:	4a04      	ldr	r2, [pc, #16]	; (143b0 <sys_clock_timeout_handler+0x14>)
   1439e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   143a0:	1ac8      	subs	r0, r1, r3
   143a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   143a6:	4403      	add	r3, r0
   143a8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   143aa:	f008 ba07 	b.w	1c7bc <z_clock_announce>
   143ae:	bf00      	nop
   143b0:	20002494 	.word	0x20002494

000143b4 <set_absolute_alarm>:
{
   143b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   143b8:	0086      	lsls	r6, r0, #2
   143ba:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   143be:	f100 0450 	add.w	r4, r0, #80	; 0x50
   143c2:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   143c6:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   143c8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 14448 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
   143cc:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   143d0:	b2a4      	uxth	r4, r4
   143d2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   143d6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   143da:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
   143de:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   143e2:	4087      	lsls	r7, r0
   143e4:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
   143e6:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   143ea:	eba3 030a 	sub.w	r3, r3, sl
   143ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   143f2:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   143f6:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   143f8:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   143fc:	d102      	bne.n	14404 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
   143fe:	2013      	movs	r0, #19
   14400:	f00b fc03 	bl	1fc0a <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   14404:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   14408:	1aab      	subs	r3, r5, r2
   1440a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   1440e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   14412:	bf88      	it	hi
   14414:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14416:	2300      	movs	r3, #0
   14418:	6023      	str	r3, [r4, #0]
   1441a:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1441c:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14420:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   14424:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   14428:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1442c:	459a      	cmp	sl, r3
   1442e:	d006      	beq.n	1443e <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
   14430:	1aeb      	subs	r3, r5, r3
   14432:	3b02      	subs	r3, #2
   14434:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   14438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1443c:	d801      	bhi.n	14442 <set_absolute_alarm+0x8e>
}
   1443e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   14442:	462b      	mov	r3, r5
   14444:	e7cf      	b.n	143e6 <set_absolute_alarm+0x32>
   14446:	bf00      	nop
   14448:	40011000 	.word	0x40011000

0001444c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
   1444e:	4e10      	ldr	r6, [pc, #64]	; (14490 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14450:	4f10      	ldr	r7, [pc, #64]	; (14494 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   14452:	2500      	movs	r5, #0
   14454:	4b10      	ldr	r3, [pc, #64]	; (14498 <rtc_nrf_isr+0x4c>)
   14456:	2000      	movs	r0, #0
   14458:	681c      	ldr	r4, [r3, #0]
   1445a:	461a      	mov	r2, r3
   1445c:	b105      	cbz	r5, 14460 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   1445e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   14460:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   14464:	03c9      	lsls	r1, r1, #15
   14466:	d5fa      	bpl.n	1445e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14468:	6839      	ldr	r1, [r7, #0]
   1446a:	2900      	cmp	r1, #0
   1446c:	d0f7      	beq.n	1445e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1446e:	603d      	str	r5, [r7, #0]
   14470:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   14472:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   14476:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
   1447a:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1447e:	2501      	movs	r5, #1
			if (handler) {
   14480:	b11c      	cbz	r4, 1448a <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
   14482:	685a      	ldr	r2, [r3, #4]
   14484:	6018      	str	r0, [r3, #0]
   14486:	47a0      	blx	r4
   14488:	e7e4      	b.n	14454 <rtc_nrf_isr+0x8>
   1448a:	6014      	str	r4, [r2, #0]
}
   1448c:	e7e7      	b.n	1445e <rtc_nrf_isr+0x12>
   1448e:	bf00      	nop
   14490:	40011000 	.word	0x40011000
   14494:	40011140 	.word	0x40011140
   14498:	20002488 	.word	0x20002488

0001449c <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
   1449c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   1449e:	4d10      	ldr	r5, [pc, #64]	; (144e0 <z_clock_driver_init+0x44>)
   144a0:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   144a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   144a6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   144aa:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   144ae:	4b0d      	ldr	r3, [pc, #52]	; (144e4 <z_clock_driver_init+0x48>)
   144b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   144b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   144b8:	2101      	movs	r1, #1
   144ba:	4622      	mov	r2, r4
   144bc:	2011      	movs	r0, #17
   144be:	f000 fa25 	bl	1490c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   144c2:	2011      	movs	r0, #17
   144c4:	f000 fa12 	bl	148ec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   144c8:	4a07      	ldr	r2, [pc, #28]	; (144e8 <z_clock_driver_init+0x4c>)
   144ca:	2301      	movs	r3, #1
   144cc:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   144ce:	4a07      	ldr	r2, [pc, #28]	; (144ec <z_clock_driver_init+0x50>)
   144d0:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   144d2:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
   144d4:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   144d6:	f7ff fedb 	bl	14290 <z_nrf_clock_control_lf_on>

	return 0;
}
   144da:	4620      	mov	r0, r4
   144dc:	bd38      	pop	{r3, r4, r5, pc}
   144de:	bf00      	nop
   144e0:	40011000 	.word	0x40011000
   144e4:	e000e100 	.word	0xe000e100
   144e8:	40011008 	.word	0x40011008
   144ec:	20002490 	.word	0x20002490

000144f0 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   144f0:	4b13      	ldr	r3, [pc, #76]	; (14540 <z_clock_set_timeout+0x50>)
   144f2:	f1b0 3fff 	cmp.w	r0, #4294967295
   144f6:	bf08      	it	eq
   144f8:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   144fa:	3801      	subs	r0, #1
   144fc:	2800      	cmp	r0, #0
   144fe:	dd1c      	ble.n	1453a <z_clock_set_timeout+0x4a>
   14500:	4298      	cmp	r0, r3
   14502:	bfa8      	it	ge
   14504:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   14506:	4b0f      	ldr	r3, [pc, #60]	; (14544 <z_clock_set_timeout+0x54>)
   14508:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   1450c:	4b0e      	ldr	r3, [pc, #56]	; (14548 <z_clock_set_timeout+0x58>)
   1450e:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   14510:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   14512:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   14516:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
   1451a:	bf18      	it	ne
   1451c:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
   1451e:	4a0b      	ldr	r2, [pc, #44]	; (1454c <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   14520:	3301      	adds	r3, #1
   14522:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   14524:	480a      	ldr	r0, [pc, #40]	; (14550 <z_clock_set_timeout+0x60>)
   14526:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   14528:	2000      	movs	r0, #0
   1452a:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   1452c:	4a04      	ldr	r2, [pc, #16]	; (14540 <z_clock_set_timeout+0x50>)
   1452e:	4293      	cmp	r3, r2
   14530:	bf94      	ite	ls
   14532:	18c9      	addls	r1, r1, r3
   14534:	1889      	addhi	r1, r1, r2
   14536:	f7ff bf3d 	b.w	143b4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1453a:	2000      	movs	r0, #0
   1453c:	e7e3      	b.n	14506 <z_clock_set_timeout+0x16>
   1453e:	bf00      	nop
   14540:	007fffff 	.word	0x007fffff
   14544:	40011000 	.word	0x40011000
   14548:	20002494 	.word	0x20002494
   1454c:	20002488 	.word	0x20002488
   14550:	0001439d 	.word	0x0001439d

00014554 <z_clock_elapsed>:
	__asm__ volatile(
   14554:	f04f 0240 	mov.w	r2, #64	; 0x40
   14558:	f3ef 8311 	mrs	r3, BASEPRI
   1455c:	f382 8811 	msr	BASEPRI, r2
   14560:	f3bf 8f6f 	isb	sy
   14564:	4a06      	ldr	r2, [pc, #24]	; (14580 <z_clock_elapsed+0x2c>)
   14566:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   1456a:	4a06      	ldr	r2, [pc, #24]	; (14584 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   1456c:	6812      	ldr	r2, [r2, #0]
   1456e:	1a80      	subs	r0, r0, r2
   14570:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   14574:	f383 8811 	msr	BASEPRI, r3
   14578:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1457c:	4770      	bx	lr
   1457e:	bf00      	nop
   14580:	40011000 	.word	0x40011000
   14584:	20002494 	.word	0x20002494

00014588 <z_timer_cycle_get_32>:
	__asm__ volatile(
   14588:	f04f 0340 	mov.w	r3, #64	; 0x40
   1458c:	f3ef 8211 	mrs	r2, BASEPRI
   14590:	f383 8811 	msr	BASEPRI, r3
   14594:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   14598:	4906      	ldr	r1, [pc, #24]	; (145b4 <z_timer_cycle_get_32+0x2c>)
   1459a:	4b07      	ldr	r3, [pc, #28]	; (145b8 <z_timer_cycle_get_32+0x30>)
   1459c:	6808      	ldr	r0, [r1, #0]
   1459e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   145a2:	f382 8811 	msr	BASEPRI, r2
   145a6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   145aa:	1a1b      	subs	r3, r3, r0
   145ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   145b0:	4418      	add	r0, r3
   145b2:	4770      	bx	lr
   145b4:	20002494 	.word	0x20002494
   145b8:	40011000 	.word	0x40011000

000145bc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
   145bc:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   145be:	4c11      	ldr	r4, [pc, #68]	; (14604 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   145c0:	4a11      	ldr	r2, [pc, #68]	; (14608 <_DoInit+0x4c>)
   145c2:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   145c4:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   145c6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   145ca:	4b10      	ldr	r3, [pc, #64]	; (1460c <_DoInit+0x50>)
   145cc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   145ce:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   145d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
   145d4:	4a0e      	ldr	r2, [pc, #56]	; (14610 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   145d6:	490f      	ldr	r1, [pc, #60]	; (14614 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   145d8:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   145da:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   145dc:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   145de:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
   145e0:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   145e2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   145e4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   145e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   145e8:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   145ea:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   145ec:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   145ee:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   145f0:	f009 fcc9 	bl	1df86 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   145f4:	4908      	ldr	r1, [pc, #32]	; (14618 <_DoInit+0x5c>)
   145f6:	4620      	mov	r0, r4
   145f8:	f009 fcc5 	bl	1df86 <strcpy>
  p->acID[6] = ' ';
   145fc:	2320      	movs	r3, #32
   145fe:	71a3      	strb	r3, [r4, #6]
}
   14600:	bd10      	pop	{r4, pc}
   14602:	bf00      	nop
   14604:	20002498 	.word	0x20002498
   14608:	00020c79 	.word	0x00020c79
   1460c:	200026ec 	.word	0x200026ec
   14610:	200026dc 	.word	0x200026dc
   14614:	00020c82 	.word	0x00020c82
   14618:	00020c86 	.word	0x00020c86

0001461c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1461c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   14620:	4f23      	ldr	r7, [pc, #140]	; (146b0 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   14622:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   14626:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   14628:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1462c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1462e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   14630:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   14632:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   14634:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   14636:	d834      	bhi.n	146a2 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   14638:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1463c:	ebaa 0905 	sub.w	r9, sl, r5
   14640:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   14644:	4294      	cmp	r4, r2
   14646:	d811      	bhi.n	1466c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   14648:	f04f 0918 	mov.w	r9, #24
   1464c:	fb06 9309 	mla	r3, r6, r9, r9
   14650:	443b      	add	r3, r7
   14652:	4622      	mov	r2, r4
   14654:	6858      	ldr	r0, [r3, #4]
   14656:	4641      	mov	r1, r8
   14658:	4428      	add	r0, r5
   1465a:	f009 fcdd 	bl	1e018 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   1465e:	fb09 7606 	mla	r6, r9, r6, r7
   14662:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
   14664:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   14666:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   14668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1466c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1466e:	429c      	cmp	r4, r3
   14670:	d81b      	bhi.n	146aa <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   14672:	fb00 bb0b 	mla	fp, r0, fp, fp
   14676:	44bb      	add	fp, r7
   14678:	464a      	mov	r2, r9
   1467a:	f8db 0004 	ldr.w	r0, [fp, #4]
   1467e:	442c      	add	r4, r5
   14680:	4428      	add	r0, r5
   14682:	f009 fcc9 	bl	1e018 <memcpy>
      if (NumBytes) {
   14686:	ebb4 040a 	subs.w	r4, r4, sl
   1468a:	d006      	beq.n	1469a <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
   1468c:	f8db 0004 	ldr.w	r0, [fp, #4]
   14690:	4622      	mov	r2, r4
   14692:	eb08 0109 	add.w	r1, r8, r9
   14696:	f009 fcbf 	bl	1e018 <memcpy>
      pRing->WrOff = NumBytes;
   1469a:	2018      	movs	r0, #24
   1469c:	fb00 7606 	mla	r6, r0, r6, r7
   146a0:	e7e0      	b.n	14664 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   146a2:	3b01      	subs	r3, #1
   146a4:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   146a6:	42a3      	cmp	r3, r4
   146a8:	d2ce      	bcs.n	14648 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   146aa:	2000      	movs	r0, #0
   146ac:	e7dc      	b.n	14668 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   146ae:	bf00      	nop
   146b0:	20002498 	.word	0x20002498

000146b4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   146b4:	4b03      	ldr	r3, [pc, #12]	; (146c4 <SEGGER_RTT_HasDataUp+0x10>)
   146b6:	2218      	movs	r2, #24
   146b8:	fb02 3300 	mla	r3, r2, r0, r3
   146bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   146be:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   146c0:	1a80      	subs	r0, r0, r2
   146c2:	4770      	bx	lr
   146c4:	20002498 	.word	0x20002498

000146c8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   146c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   146ca:	4e26      	ldr	r6, [pc, #152]	; (14764 <tc_aes128_set_encrypt_key+0x9c>)
{
   146cc:	4607      	mov	r7, r0
   146ce:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   146d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   146d2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   146d4:	ad01      	add	r5, sp, #4
   146d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   146d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   146da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   146dc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   146e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   146e4:	4638      	mov	r0, r7
   146e6:	2f00      	cmp	r7, #0
   146e8:	d038      	beq.n	1475c <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   146ea:	2c00      	cmp	r4, #0
   146ec:	d038      	beq.n	14760 <tc_aes128_set_encrypt_key+0x98>
   146ee:	1f38      	subs	r0, r7, #4
   146f0:	4621      	mov	r1, r4
   146f2:	4602      	mov	r2, r0
   146f4:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   146f6:	784b      	ldrb	r3, [r1, #1]
   146f8:	780d      	ldrb	r5, [r1, #0]
   146fa:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   146fc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14700:	78cd      	ldrb	r5, [r1, #3]
   14702:	432b      	orrs	r3, r5
   14704:	788d      	ldrb	r5, [r1, #2]
   14706:	3104      	adds	r1, #4
   14708:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1470c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1470e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14712:	d1f0      	bne.n	146f6 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14714:	4c14      	ldr	r4, [pc, #80]	; (14768 <tc_aes128_set_encrypt_key+0xa0>)
   14716:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14718:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1471a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1471c:	d116      	bne.n	1474c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1471e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14722:	5ca5      	ldrb	r5, [r4, r2]
   14724:	0e1a      	lsrs	r2, r3, #24
   14726:	5ca2      	ldrb	r2, [r4, r2]
   14728:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1472c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14730:	b2db      	uxtb	r3, r3
   14732:	5d65      	ldrb	r5, [r4, r5]
   14734:	5ce3      	ldrb	r3, [r4, r3]
   14736:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1473a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1473e:	ad0c      	add	r5, sp, #48	; 0x30
   14740:	f021 0303 	bic.w	r3, r1, #3
   14744:	442b      	add	r3, r5
   14746:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1474a:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1474c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14750:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14752:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14754:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14756:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14758:	d1de      	bne.n	14718 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1475a:	2001      	movs	r0, #1
}
   1475c:	b00d      	add	sp, #52	; 0x34
   1475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14760:	4620      	mov	r0, r4
   14762:	e7fb      	b.n	1475c <tc_aes128_set_encrypt_key+0x94>
   14764:	000203e4 	.word	0x000203e4
   14768:	00020c8d 	.word	0x00020c8d

0001476c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1476c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14770:	4615      	mov	r5, r2
   14772:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   14774:	4606      	mov	r6, r0
   14776:	2800      	cmp	r0, #0
   14778:	d058      	beq.n	1482c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1477a:	2900      	cmp	r1, #0
   1477c:	d059      	beq.n	14832 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1477e:	2a00      	cmp	r2, #0
   14780:	d059      	beq.n	14836 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   14782:	2310      	movs	r3, #16
   14784:	460a      	mov	r2, r1
   14786:	4668      	mov	r0, sp
   14788:	4619      	mov	r1, r3
   1478a:	f009 fa18 	bl	1dbbe <_copy>
	add_round_key(state, s->words);
   1478e:	4629      	mov	r1, r5
   14790:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   14792:	4c2a      	ldr	r4, [pc, #168]	; (1483c <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   14794:	f009 fa2b 	bl	1dbee <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   14798:	f105 0710 	add.w	r7, r5, #16
   1479c:	46a1      	mov	r9, r4
   1479e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   147a0:	46e8      	mov	r8, sp
{
   147a2:	466a      	mov	r2, sp
   147a4:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   147a6:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   147a8:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   147aa:	5c61      	ldrb	r1, [r4, r1]
   147ac:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   147b0:	d1f9      	bne.n	147a6 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   147b2:	4668      	mov	r0, sp
   147b4:	f009 fa60 	bl	1dc78 <shift_rows>
	mult_row_column(t, s);
   147b8:	4669      	mov	r1, sp
   147ba:	a804      	add	r0, sp, #16
   147bc:	f009 fa95 	bl	1dcea <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   147c0:	a901      	add	r1, sp, #4
   147c2:	a805      	add	r0, sp, #20
   147c4:	f009 fa91 	bl	1dcea <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   147c8:	a902      	add	r1, sp, #8
   147ca:	a806      	add	r0, sp, #24
   147cc:	f009 fa8d 	bl	1dcea <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   147d0:	a903      	add	r1, sp, #12
   147d2:	a807      	add	r0, sp, #28
   147d4:	f009 fa89 	bl	1dcea <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   147d8:	2310      	movs	r3, #16
   147da:	4619      	mov	r1, r3
   147dc:	eb0d 0203 	add.w	r2, sp, r3
   147e0:	4668      	mov	r0, sp
   147e2:	f009 f9ec 	bl	1dbbe <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   147e6:	4639      	mov	r1, r7
   147e8:	4668      	mov	r0, sp
   147ea:	3710      	adds	r7, #16
   147ec:	f009 f9ff 	bl	1dbee <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   147f0:	42af      	cmp	r7, r5
   147f2:	d1d5      	bne.n	147a0 <tc_aes_encrypt+0x34>
   147f4:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   147f6:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   147fa:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   147fc:	f819 3003 	ldrb.w	r3, [r9, r3]
   14800:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   14804:	d1f7      	bne.n	147f6 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   14806:	4668      	mov	r0, sp
   14808:	f009 fa36 	bl	1dc78 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1480c:	4629      	mov	r1, r5
   1480e:	4668      	mov	r0, sp
   14810:	f009 f9ed 	bl	1dbee <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   14814:	2310      	movs	r3, #16
   14816:	4619      	mov	r1, r3
   14818:	466a      	mov	r2, sp
   1481a:	4630      	mov	r0, r6
   1481c:	f009 f9cf 	bl	1dbbe <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   14820:	4668      	mov	r0, sp
   14822:	2210      	movs	r2, #16
   14824:	4621      	mov	r1, r4
   14826:	f009 f9d7 	bl	1dbd8 <_set>

	return TC_CRYPTO_SUCCESS;
   1482a:	2001      	movs	r0, #1
}
   1482c:	b009      	add	sp, #36	; 0x24
   1482e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   14832:	4608      	mov	r0, r1
   14834:	e7fa      	b.n	1482c <tc_aes_encrypt+0xc0>
   14836:	4610      	mov	r0, r2
   14838:	e7f8      	b.n	1482c <tc_aes_encrypt+0xc0>
   1483a:	bf00      	nop
   1483c:	00020c8d 	.word	0x00020c8d

00014840 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14840:	4a0a      	ldr	r2, [pc, #40]	; (1486c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14842:	490b      	ldr	r1, [pc, #44]	; (14870 <arch_swap+0x30>)
	_current->arch.basepri = key;
   14844:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14846:	6809      	ldr	r1, [r1, #0]
   14848:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1484c:	4909      	ldr	r1, [pc, #36]	; (14874 <arch_swap+0x34>)
	_current->arch.basepri = key;
   1484e:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14850:	684b      	ldr	r3, [r1, #4]
   14852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14856:	604b      	str	r3, [r1, #4]
   14858:	2300      	movs	r3, #0
   1485a:	f383 8811 	msr	BASEPRI, r3
   1485e:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14862:	6893      	ldr	r3, [r2, #8]
}
   14864:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   14868:	4770      	bx	lr
   1486a:	bf00      	nop
   1486c:	20002674 	.word	0x20002674
   14870:	0002099c 	.word	0x0002099c
   14874:	e000ed00 	.word	0xe000ed00

00014878 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14878:	4912      	ldr	r1, [pc, #72]	; (148c4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1487a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1487c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   14880:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14882:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14886:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1488a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1488c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14890:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14894:	4f0c      	ldr	r7, [pc, #48]	; (148c8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14896:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1489a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   1489c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1489e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   148a0:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
   148a2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   148a4:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   148a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   148aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   148ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   148ae:	f000 fbad 	bl	1500c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   148b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   148b6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   148ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   148be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   148c2:	4770      	bx	lr
    ldr r1, =_kernel
   148c4:	20002674 	.word	0x20002674
    ldr v4, =_SCS_ICSR
   148c8:	e000ed04 	.word	0xe000ed04

000148cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   148cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   148d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   148d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   148d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   148da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   148dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   148e0:	2902      	cmp	r1, #2
    beq _oops
   148e2:	d0ff      	beq.n	148e4 <_oops>

000148e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   148e4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   148e6:	f009 fb43 	bl	1df70 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   148ea:	bd01      	pop	{r0, pc}

000148ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   148ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   148ee:	2b00      	cmp	r3, #0
   148f0:	db08      	blt.n	14904 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   148f2:	2201      	movs	r2, #1
   148f4:	f000 001f 	and.w	r0, r0, #31
   148f8:	fa02 f000 	lsl.w	r0, r2, r0
   148fc:	095b      	lsrs	r3, r3, #5
   148fe:	4a02      	ldr	r2, [pc, #8]	; (14908 <arch_irq_enable+0x1c>)
   14900:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   14904:	4770      	bx	lr
   14906:	bf00      	nop
   14908:	e000e100 	.word	0xe000e100

0001490c <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (flags & IRQ_ZERO_LATENCY) {
   1490c:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1490e:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   14910:	bf54      	ite	pl
   14912:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14914:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14916:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14918:	bfac      	ite	ge
   1491a:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1491e:	4a07      	ldrlt	r2, [pc, #28]	; (1493c <z_arm_irq_priority_set+0x30>)
   14920:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14924:	bfac      	ite	ge
   14926:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1492a:	f000 000f 	andlt.w	r0, r0, #15
   1492e:	b2db      	uxtb	r3, r3
   14930:	bfb4      	ite	lt
   14932:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14934:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   14938:	4770      	bx	lr
   1493a:	bf00      	nop
   1493c:	e000ed14 	.word	0xe000ed14

00014940 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14940:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14942:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14944:	4b04      	ldr	r3, [pc, #16]	; (14958 <_arch_isr_direct_pm+0x18>)
   14946:	6a58      	ldr	r0, [r3, #36]	; 0x24
   14948:	b118      	cbz	r0, 14952 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1494a:	2200      	movs	r2, #0
   1494c:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
   1494e:	f00a fef4 	bl	1f73a <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14952:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14954:	bd08      	pop	{r3, pc}
   14956:	bf00      	nop
   14958:	20002674 	.word	0x20002674

0001495c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1495c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14960:	9b00      	ldr	r3, [sp, #0]
   14962:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14966:	490a      	ldr	r1, [pc, #40]	; (14990 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14968:	9b01      	ldr	r3, [sp, #4]
   1496a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1496e:	9b02      	ldr	r3, [sp, #8]
   14970:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14974:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1497c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14980:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14984:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14986:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14988:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   1498a:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1498c:	4770      	bx	lr
   1498e:	bf00      	nop
   14990:	0001cd33 	.word	0x0001cd33

00014994 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14994:	4a0b      	ldr	r2, [pc, #44]	; (149c4 <z_check_thread_stack_fail+0x30>)
{
   14996:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14998:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
   1499a:	b190      	cbz	r0, 149c2 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1499c:	f113 0f16 	cmn.w	r3, #22
   149a0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   149a2:	d005      	beq.n	149b0 <z_check_thread_stack_fail+0x1c>
   149a4:	f1a0 0220 	sub.w	r2, r0, #32
   149a8:	429a      	cmp	r2, r3
   149aa:	d806      	bhi.n	149ba <z_check_thread_stack_fail+0x26>
   149ac:	4283      	cmp	r3, r0
   149ae:	d204      	bcs.n	149ba <z_check_thread_stack_fail+0x26>
   149b0:	4281      	cmp	r1, r0
   149b2:	bf2c      	ite	cs
   149b4:	2100      	movcs	r1, #0
   149b6:	2101      	movcc	r1, #1
   149b8:	e000      	b.n	149bc <z_check_thread_stack_fail+0x28>
   149ba:	2100      	movs	r1, #0
   149bc:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   149be:	bf08      	it	eq
   149c0:	2000      	moveq	r0, #0
}
   149c2:	4770      	bx	lr
   149c4:	20002674 	.word	0x20002674

000149c8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   149c8:	b508      	push	{r3, lr}
   149ca:	4604      	mov	r4, r0
   149cc:	460e      	mov	r6, r1
   149ce:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
   149d0:	f000 fb10 	bl	14ff4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   149d4:	4b08      	ldr	r3, [pc, #32]	; (149f8 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   149d6:	4620      	mov	r0, r4
	_current = main_thread;
   149d8:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
   149da:	f000 fb17 	bl	1500c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   149de:	4628      	mov	r0, r5
   149e0:	f386 8809 	msr	PSP, r6
   149e4:	2100      	movs	r1, #0
   149e6:	b663      	cpsie	if
   149e8:	f381 8811 	msr	BASEPRI, r1
   149ec:	f3bf 8f6f 	isb	sy
   149f0:	2200      	movs	r2, #0
   149f2:	2300      	movs	r3, #0
   149f4:	f008 f99d 	bl	1cd32 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   149f8:	20002674 	.word	0x20002674

000149fc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   149fc:	4901      	ldr	r1, [pc, #4]	; (14a04 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   149fe:	2210      	movs	r2, #16
	str	r2, [r1]
   14a00:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14a02:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14a04:	e000ed10 	.word	0xe000ed10

00014a08 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14a08:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14a0a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14a0c:	f380 8811 	msr	BASEPRI, r0
	isb
   14a10:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   14a14:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   14a18:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14a1a:	b662      	cpsie	i
	isb
   14a1c:	f3bf 8f6f 	isb	sy

	bx	lr
   14a20:	4770      	bx	lr
   14a22:	bf00      	nop

00014a24 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14a24:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14a26:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14a28:	f381 8811 	msr	BASEPRI, r1

	wfe
   14a2c:	bf20      	wfe

	msr	BASEPRI, r0
   14a2e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14a32:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14a34:	4770      	bx	lr
   14a36:	bf00      	nop

00014a38 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14a3a:	4606      	mov	r6, r0

	if (esf != NULL) {
   14a3c:	460c      	mov	r4, r1
   14a3e:	b301      	cbz	r1, 14a82 <z_arm_fatal_error+0x4a>
   14a40:	4b13      	ldr	r3, [pc, #76]	; (14a90 <z_arm_fatal_error+0x58>)
   14a42:	4d14      	ldr	r5, [pc, #80]	; (14a94 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14a44:	4814      	ldr	r0, [pc, #80]	; (14a98 <z_arm_fatal_error+0x60>)
   14a46:	1aed      	subs	r5, r5, r3
   14a48:	08ed      	lsrs	r5, r5, #3
   14a4a:	01ad      	lsls	r5, r5, #6
   14a4c:	f045 0501 	orr.w	r5, r5, #1
   14a50:	f8ad 5000 	strh.w	r5, [sp]
   14a54:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   14a58:	6809      	ldr	r1, [r1, #0]
   14a5a:	f008 fd08 	bl	1d46e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14a5e:	f8ad 5000 	strh.w	r5, [sp]
   14a62:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   14a66:	68e1      	ldr	r1, [r4, #12]
   14a68:	480c      	ldr	r0, [pc, #48]	; (14a9c <z_arm_fatal_error+0x64>)
   14a6a:	f008 fd00 	bl	1d46e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14a6e:	69e1      	ldr	r1, [r4, #28]
   14a70:	480b      	ldr	r0, [pc, #44]	; (14aa0 <z_arm_fatal_error+0x68>)
   14a72:	462a      	mov	r2, r5
   14a74:	f008 fcce 	bl	1d414 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14a78:	69a1      	ldr	r1, [r4, #24]
   14a7a:	480a      	ldr	r0, [pc, #40]	; (14aa4 <z_arm_fatal_error+0x6c>)
   14a7c:	462a      	mov	r2, r5
   14a7e:	f008 fcc9 	bl	1d414 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14a82:	4621      	mov	r1, r4
   14a84:	4630      	mov	r0, r6
}
   14a86:	b002      	add	sp, #8
   14a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   14a8c:	f006 bd98 	b.w	1b5c0 <z_fatal_error>
   14a90:	00020308 	.word	0x00020308
   14a94:	00020380 	.word	0x00020380
   14a98:	00020d8d 	.word	0x00020d8d
   14a9c:	00020dbc 	.word	0x00020dbc
   14aa0:	00020deb 	.word	0x00020deb
   14aa4:	00020dfa 	.word	0x00020dfa

00014aa8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14aa8:	bf30      	wfi
    b z_SysNmiOnReset
   14aaa:	f7ff bffd 	b.w	14aa8 <z_SysNmiOnReset>
   14aae:	bf00      	nop

00014ab0 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   14ab0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14ab2:	4b08      	ldr	r3, [pc, #32]	; (14ad4 <z_arm_prep_c+0x24>)
   14ab4:	4a08      	ldr	r2, [pc, #32]	; (14ad8 <z_arm_prep_c+0x28>)
   14ab6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   14aba:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14abc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14ac0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14ac4:	f006 fe0a 	bl	1b6dc <z_bss_zero>
	z_data_copy();
   14ac8:	f007 fd7e 	bl	1c5c8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14acc:	f000 fa64 	bl	14f98 <z_arm_interrupt_init>
	z_cstart();
   14ad0:	f006 fe28 	bl	1b724 <z_cstart>
   14ad4:	00000000 	.word	0x00000000
   14ad8:	e000ed00 	.word	0xe000ed00

00014adc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14adc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14ade:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14ae0:	4a0b      	ldr	r2, [pc, #44]	; (14b10 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14ae2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   14ae4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14ae6:	bf1e      	ittt	ne
	movne	r1, #0
   14ae8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14aea:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
   14aec:	f00a fe25 	blne	1f73a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14af0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14af2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14af6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14afa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14afe:	4905      	ldr	r1, [pc, #20]	; (14b14 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14b00:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14b02:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14b04:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14b06:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14b0a:	4903      	ldr	r1, [pc, #12]	; (14b18 <_isr_wrapper+0x3c>)
	bx r1
   14b0c:	4708      	bx	r1
   14b0e:	0000      	.short	0x0000
	ldr r2, =_kernel
   14b10:	20002674 	.word	0x20002674
	ldr r1, =_sw_isr_table
   14b14:	0002018c 	.word	0x0002018c
	ldr r1, =z_arm_int_exit
   14b18:	00014f7d 	.word	0x00014f7d

00014b1c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   14b1c:	f009 fae0 	bl	1e0e0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14b20:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   14b22:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14b26:	4808      	ldr	r0, [pc, #32]	; (14b48 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   14b28:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   14b2c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14b2e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14b32:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14b36:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   14b38:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14b3a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14b3e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14b42:	f7ff ffb5 	bl	14ab0 <z_arm_prep_c>
   14b46:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   14b48:	200048e0 	.word	0x200048e0

00014b4c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14b4c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14b50:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14b54:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14b56:	4672      	mov	r2, lr
	bl z_arm_fault
   14b58:	f000 f93a 	bl	14dd0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   14b5c:	bd01      	pop	{r0, pc}
   14b5e:	bf00      	nop

00014b60 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14b64:	4b31      	ldr	r3, [pc, #196]	; (14c2c <mem_manage_fault+0xcc>)
   14b66:	4c32      	ldr	r4, [pc, #200]	; (14c30 <mem_manage_fault+0xd0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14b68:	4d32      	ldr	r5, [pc, #200]	; (14c34 <mem_manage_fault+0xd4>)
   14b6a:	1ae4      	subs	r4, r4, r3
   14b6c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   14b6e:	01a4      	lsls	r4, r4, #6
   14b70:	f044 0901 	orr.w	r9, r4, #1
{
   14b74:	4607      	mov	r7, r0
   14b76:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14b78:	482f      	ldr	r0, [pc, #188]	; (14c38 <mem_manage_fault+0xd8>)
   14b7a:	4649      	mov	r1, r9
{
   14b7c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   14b7e:	f008 fc3c 	bl	1d3fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14b82:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14b84:	06d0      	lsls	r0, r2, #27
   14b86:	d503      	bpl.n	14b90 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14b88:	482c      	ldr	r0, [pc, #176]	; (14c3c <mem_manage_fault+0xdc>)
   14b8a:	4649      	mov	r1, r9
   14b8c:	f008 fc35 	bl	1d3fa <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14b90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b92:	0719      	lsls	r1, r3, #28
   14b94:	d504      	bpl.n	14ba0 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   14b96:	482a      	ldr	r0, [pc, #168]	; (14c40 <mem_manage_fault+0xe0>)
   14b98:	f044 0101 	orr.w	r1, r4, #1
   14b9c:	f008 fc2d 	bl	1d3fa <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14ba0:	4d24      	ldr	r5, [pc, #144]	; (14c34 <mem_manage_fault+0xd4>)
   14ba2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14ba4:	079a      	lsls	r2, r3, #30
   14ba6:	d41a      	bmi.n	14bde <mem_manage_fault+0x7e>
	uint32_t mmfar = -EINVAL;
   14ba8:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14bac:	4d21      	ldr	r5, [pc, #132]	; (14c34 <mem_manage_fault+0xd4>)
   14bae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14bb0:	07d8      	lsls	r0, r3, #31
   14bb2:	d504      	bpl.n	14bbe <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   14bb4:	4823      	ldr	r0, [pc, #140]	; (14c44 <mem_manage_fault+0xe4>)
   14bb6:	f044 0101 	orr.w	r1, r4, #1
   14bba:	f008 fc1e 	bl	1d3fa <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14bbe:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14bc0:	06d9      	lsls	r1, r3, #27
   14bc2:	d424      	bmi.n	14c0e <mem_manage_fault+0xae>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14bc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14bc6:	079a      	lsls	r2, r3, #30
   14bc8:	d421      	bmi.n	14c0e <mem_manage_fault+0xae>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14bca:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14bcc:	4a19      	ldr	r2, [pc, #100]	; (14c34 <mem_manage_fault+0xd4>)
   14bce:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14bd0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14bd4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   14bd6:	2300      	movs	r3, #0
   14bd8:	7033      	strb	r3, [r6, #0]

	return reason;
}
   14bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   14bde:	f044 0a01 	orr.w	sl, r4, #1
   14be2:	4819      	ldr	r0, [pc, #100]	; (14c48 <mem_manage_fault+0xe8>)
   14be4:	4651      	mov	r1, sl
   14be6:	f008 fc08 	bl	1d3fa <log_0>
		uint32_t temp = SCB->MMFAR;
   14bea:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14bee:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14bf0:	061b      	lsls	r3, r3, #24
   14bf2:	d5d9      	bpl.n	14ba8 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14bf4:	4815      	ldr	r0, [pc, #84]	; (14c4c <mem_manage_fault+0xec>)
   14bf6:	4652      	mov	r2, sl
   14bf8:	4649      	mov	r1, r9
   14bfa:	f008 fc0b 	bl	1d414 <log_1>
			if (from_hard_fault) {
   14bfe:	f1b8 0f00 	cmp.w	r8, #0
   14c02:	d0d3      	beq.n	14bac <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14c04:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14c0a:	62ab      	str	r3, [r5, #40]	; 0x28
   14c0c:	e7ce      	b.n	14bac <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14c0e:	4b09      	ldr	r3, [pc, #36]	; (14c34 <mem_manage_fault+0xd4>)
   14c10:	685b      	ldr	r3, [r3, #4]
   14c12:	051b      	lsls	r3, r3, #20
   14c14:	d5d9      	bpl.n	14bca <mem_manage_fault+0x6a>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   14c16:	4639      	mov	r1, r7
   14c18:	4648      	mov	r0, r9
   14c1a:	f7ff febb 	bl	14994 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   14c1e:	2800      	cmp	r0, #0
   14c20:	d0d3      	beq.n	14bca <mem_manage_fault+0x6a>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   14c22:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   14c26:	2002      	movs	r0, #2
   14c28:	e7d0      	b.n	14bcc <mem_manage_fault+0x6c>
   14c2a:	bf00      	nop
   14c2c:	00020308 	.word	0x00020308
   14c30:	00020380 	.word	0x00020380
   14c34:	e000ed00 	.word	0xe000ed00
   14c38:	00020e28 	.word	0x00020e28
   14c3c:	00020e3e 	.word	0x00020e3e
   14c40:	00020e71 	.word	0x00020e71
   14c44:	00020eb2 	.word	0x00020eb2
   14c48:	00020e84 	.word	0x00020e84
   14c4c:	00020e9c 	.word	0x00020e9c

00014c50 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14c50:	b570      	push	{r4, r5, r6, lr}
   14c52:	4b23      	ldr	r3, [pc, #140]	; (14ce0 <usage_fault.isra.0+0x90>)
   14c54:	4c23      	ldr	r4, [pc, #140]	; (14ce4 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14c56:	4d24      	ldr	r5, [pc, #144]	; (14ce8 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   14c58:	4824      	ldr	r0, [pc, #144]	; (14cec <usage_fault.isra.0+0x9c>)
   14c5a:	1ae4      	subs	r4, r4, r3
   14c5c:	08e4      	lsrs	r4, r4, #3
   14c5e:	01a4      	lsls	r4, r4, #6
   14c60:	f044 0601 	orr.w	r6, r4, #1
   14c64:	4631      	mov	r1, r6
   14c66:	f008 fbc8 	bl	1d3fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14c6a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14c6c:	0193      	lsls	r3, r2, #6
   14c6e:	d503      	bpl.n	14c78 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   14c70:	481f      	ldr	r0, [pc, #124]	; (14cf0 <usage_fault.isra.0+0xa0>)
   14c72:	4631      	mov	r1, r6
   14c74:	f008 fbc1 	bl	1d3fa <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14c78:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c7a:	01dd      	lsls	r5, r3, #7
   14c7c:	d504      	bpl.n	14c88 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   14c7e:	481d      	ldr	r0, [pc, #116]	; (14cf4 <usage_fault.isra.0+0xa4>)
   14c80:	f044 0101 	orr.w	r1, r4, #1
   14c84:	f008 fbb9 	bl	1d3fa <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14c88:	4d17      	ldr	r5, [pc, #92]	; (14ce8 <usage_fault.isra.0+0x98>)
   14c8a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14c8c:	0310      	lsls	r0, r2, #12
   14c8e:	d504      	bpl.n	14c9a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   14c90:	4819      	ldr	r0, [pc, #100]	; (14cf8 <usage_fault.isra.0+0xa8>)
   14c92:	f044 0101 	orr.w	r1, r4, #1
   14c96:	f008 fbb0 	bl	1d3fa <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14c9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c9c:	0359      	lsls	r1, r3, #13
   14c9e:	d504      	bpl.n	14caa <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14ca0:	4816      	ldr	r0, [pc, #88]	; (14cfc <usage_fault.isra.0+0xac>)
   14ca2:	f044 0101 	orr.w	r1, r4, #1
   14ca6:	f008 fba8 	bl	1d3fa <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14caa:	4d0f      	ldr	r5, [pc, #60]	; (14ce8 <usage_fault.isra.0+0x98>)
   14cac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14cae:	0392      	lsls	r2, r2, #14
   14cb0:	d504      	bpl.n	14cbc <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14cb2:	4813      	ldr	r0, [pc, #76]	; (14d00 <usage_fault.isra.0+0xb0>)
   14cb4:	f044 0101 	orr.w	r1, r4, #1
   14cb8:	f008 fb9f 	bl	1d3fa <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14cbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14cbe:	03db      	lsls	r3, r3, #15
   14cc0:	d504      	bpl.n	14ccc <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14cc2:	4810      	ldr	r0, [pc, #64]	; (14d04 <usage_fault.isra.0+0xb4>)
   14cc4:	f044 0101 	orr.w	r1, r4, #1
   14cc8:	f008 fb97 	bl	1d3fa <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14ccc:	4a06      	ldr	r2, [pc, #24]	; (14ce8 <usage_fault.isra.0+0x98>)
   14cce:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14cd0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14cd4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   14cd8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   14cda:	2000      	movs	r0, #0
   14cdc:	bd70      	pop	{r4, r5, r6, pc}
   14cde:	bf00      	nop
   14ce0:	00020308 	.word	0x00020308
   14ce4:	00020380 	.word	0x00020380
   14ce8:	e000ed00 	.word	0xe000ed00
   14cec:	00020ed1 	.word	0x00020ed1
   14cf0:	00020ee9 	.word	0x00020ee9
   14cf4:	00020efc 	.word	0x00020efc
   14cf8:	00020f16 	.word	0x00020f16
   14cfc:	00020f34 	.word	0x00020f34
   14d00:	00020f59 	.word	0x00020f59
   14d04:	00020f73 	.word	0x00020f73

00014d08 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d0c:	4b26      	ldr	r3, [pc, #152]	; (14da8 <bus_fault.isra.0+0xa0>)
   14d0e:	4c27      	ldr	r4, [pc, #156]	; (14dac <bus_fault.isra.0+0xa4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14d10:	4d27      	ldr	r5, [pc, #156]	; (14db0 <bus_fault.isra.0+0xa8>)
   14d12:	1ae4      	subs	r4, r4, r3
   14d14:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   14d16:	01a4      	lsls	r4, r4, #6
   14d18:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14d1c:	4607      	mov	r7, r0
   14d1e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14d20:	4824      	ldr	r0, [pc, #144]	; (14db4 <bus_fault.isra.0+0xac>)
   14d22:	4641      	mov	r1, r8
   14d24:	f008 fb69 	bl	1d3fa <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14d28:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14d2a:	04d1      	lsls	r1, r2, #19
   14d2c:	d503      	bpl.n	14d36 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   14d2e:	4822      	ldr	r0, [pc, #136]	; (14db8 <bus_fault.isra.0+0xb0>)
   14d30:	4641      	mov	r1, r8
   14d32:	f008 fb62 	bl	1d3fa <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14d36:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14d38:	051a      	lsls	r2, r3, #20
   14d3a:	d504      	bpl.n	14d46 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14d3c:	481f      	ldr	r0, [pc, #124]	; (14dbc <bus_fault.isra.0+0xb4>)
   14d3e:	f044 0101 	orr.w	r1, r4, #1
   14d42:	f008 fb5a 	bl	1d3fa <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14d46:	4d1a      	ldr	r5, [pc, #104]	; (14db0 <bus_fault.isra.0+0xa8>)
   14d48:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14d4a:	059b      	lsls	r3, r3, #22
   14d4c:	d512      	bpl.n	14d74 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   14d4e:	f044 0801 	orr.w	r8, r4, #1
   14d52:	481b      	ldr	r0, [pc, #108]	; (14dc0 <bus_fault.isra.0+0xb8>)
   14d54:	4641      	mov	r1, r8
   14d56:	f008 fb50 	bl	1d3fa <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   14d5a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14d5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14d5e:	0418      	lsls	r0, r3, #16
   14d60:	d508      	bpl.n	14d74 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14d62:	4818      	ldr	r0, [pc, #96]	; (14dc4 <bus_fault.isra.0+0xbc>)
   14d64:	4642      	mov	r2, r8
   14d66:	f008 fb55 	bl	1d414 <log_1>
			if (from_hard_fault) {
   14d6a:	b11f      	cbz	r7, 14d74 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14d6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14d6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14d72:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14d74:	4d0e      	ldr	r5, [pc, #56]	; (14db0 <bus_fault.isra.0+0xa8>)
   14d76:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14d78:	0552      	lsls	r2, r2, #21
   14d7a:	d504      	bpl.n	14d86 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   14d7c:	4812      	ldr	r0, [pc, #72]	; (14dc8 <bus_fault.isra.0+0xc0>)
   14d7e:	f044 0101 	orr.w	r1, r4, #1
   14d82:	f008 fb3a 	bl	1d3fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14d86:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14d88:	05db      	lsls	r3, r3, #23
   14d8a:	d504      	bpl.n	14d96 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Instruction bus error");
   14d8c:	480f      	ldr	r0, [pc, #60]	; (14dcc <bus_fault.isra.0+0xc4>)
   14d8e:	f044 0101 	orr.w	r1, r4, #1
   14d92:	f008 fb32 	bl	1d3fa <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14d96:	4a06      	ldr	r2, [pc, #24]	; (14db0 <bus_fault.isra.0+0xa8>)
   14d98:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14d9a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14d9c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14da0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14da2:	7030      	strb	r0, [r6, #0]
}
   14da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14da8:	00020308 	.word	0x00020308
   14dac:	00020380 	.word	0x00020380
   14db0:	e000ed00 	.word	0xe000ed00
   14db4:	00020f9e 	.word	0x00020f9e
   14db8:	00020fb4 	.word	0x00020fb4
   14dbc:	00020e71 	.word	0x00020e71
   14dc0:	00020fc5 	.word	0x00020fc5
   14dc4:	00020fde 	.word	0x00020fde
   14dc8:	00020ff3 	.word	0x00020ff3
   14dcc:	0002100e 	.word	0x0002100e

00014dd0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14dd4:	4b57      	ldr	r3, [pc, #348]	; (14f34 <z_arm_fault+0x164>)
   14dd6:	685e      	ldr	r6, [r3, #4]
{
   14dd8:	b08a      	sub	sp, #40	; 0x28
   14dda:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14ddc:	f3c6 0408 	ubfx	r4, r6, #0, #9
   14de0:	2500      	movs	r5, #0
   14de2:	f385 8811 	msr	BASEPRI, r5
   14de6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14dea:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14dee:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14df2:	d10d      	bne.n	14e10 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14df4:	f002 030c 	and.w	r3, r2, #12
   14df8:	2b08      	cmp	r3, #8
   14dfa:	d10b      	bne.n	14e14 <z_arm_fault+0x44>
   14dfc:	494e      	ldr	r1, [pc, #312]	; (14f38 <z_arm_fault+0x168>)
   14dfe:	4b4f      	ldr	r3, [pc, #316]	; (14f3c <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   14e00:	484f      	ldr	r0, [pc, #316]	; (14f40 <z_arm_fault+0x170>)
   14e02:	1ac9      	subs	r1, r1, r3
   14e04:	08c9      	lsrs	r1, r1, #3
   14e06:	0189      	lsls	r1, r1, #6
   14e08:	f041 0101 	orr.w	r1, r1, #1
   14e0c:	f008 faf5 	bl	1d3fa <log_0>
		return NULL;
   14e10:	462f      	mov	r7, r5
   14e12:	e003      	b.n	14e1c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14e14:	0712      	lsls	r2, r2, #28
   14e16:	d401      	bmi.n	14e1c <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   14e18:	4607      	mov	r7, r0
			*nested_exc = true;
   14e1a:	2501      	movs	r5, #1
	*recoverable = false;
   14e1c:	2300      	movs	r3, #0
   14e1e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   14e22:	1ee3      	subs	r3, r4, #3
   14e24:	2b09      	cmp	r3, #9
   14e26:	d86b      	bhi.n	14f00 <z_arm_fault+0x130>
   14e28:	e8df f003 	tbb	[pc, r3]
   14e2c:	3d5d5905 	.word	0x3d5d5905
   14e30:	6a6a6a6a 	.word	0x6a6a6a6a
   14e34:	616a      	.short	0x616a
   14e36:	4b41      	ldr	r3, [pc, #260]	; (14f3c <z_arm_fault+0x16c>)
   14e38:	4e3f      	ldr	r6, [pc, #252]	; (14f38 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   14e3a:	4842      	ldr	r0, [pc, #264]	; (14f44 <z_arm_fault+0x174>)
   14e3c:	1af6      	subs	r6, r6, r3
   14e3e:	08f6      	lsrs	r6, r6, #3
   14e40:	01b6      	lsls	r6, r6, #6
   14e42:	f046 0601 	orr.w	r6, r6, #1
   14e46:	4631      	mov	r1, r6
   14e48:	f008 fad7 	bl	1d3fa <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14e4c:	4b39      	ldr	r3, [pc, #228]	; (14f34 <z_arm_fault+0x164>)
   14e4e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   14e50:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14e54:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   14e58:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14e5c:	d005      	beq.n	14e6a <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   14e5e:	483a      	ldr	r0, [pc, #232]	; (14f48 <z_arm_fault+0x178>)
   14e60:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   14e62:	f008 faca 	bl	1d3fa <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14e66:	2400      	movs	r4, #0
}
   14e68:	e020      	b.n	14eac <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14e6c:	005b      	lsls	r3, r3, #1
   14e6e:	d51d      	bpl.n	14eac <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
   14e70:	4836      	ldr	r0, [pc, #216]	; (14f4c <z_arm_fault+0x17c>)
   14e72:	4631      	mov	r1, r6
   14e74:	f008 fac1 	bl	1d3fa <log_0>
		if (SCB_MMFSR != 0) {
   14e78:	4b35      	ldr	r3, [pc, #212]	; (14f50 <z_arm_fault+0x180>)
   14e7a:	781b      	ldrb	r3, [r3, #0]
   14e7c:	b133      	cbz	r3, 14e8c <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
   14e7e:	f10d 0207 	add.w	r2, sp, #7
   14e82:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14e84:	4638      	mov	r0, r7
   14e86:	f7ff fe6b 	bl	14b60 <mem_manage_fault>
   14e8a:	e00e      	b.n	14eaa <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
   14e8c:	4b31      	ldr	r3, [pc, #196]	; (14f54 <z_arm_fault+0x184>)
   14e8e:	781b      	ldrb	r3, [r3, #0]
   14e90:	b12b      	cbz	r3, 14e9e <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
   14e92:	f10d 0107 	add.w	r1, sp, #7
   14e96:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   14e98:	f7ff ff36 	bl	14d08 <bus_fault.isra.0>
   14e9c:	e005      	b.n	14eaa <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
   14e9e:	4b2e      	ldr	r3, [pc, #184]	; (14f58 <z_arm_fault+0x188>)
   14ea0:	881b      	ldrh	r3, [r3, #0]
   14ea2:	b29b      	uxth	r3, r3
   14ea4:	b113      	cbz	r3, 14eac <z_arm_fault+0xdc>
			reason = usage_fault(esf);
   14ea6:	f7ff fed3 	bl	14c50 <usage_fault.isra.0>
   14eaa:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14eac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14eb0:	b993      	cbnz	r3, 14ed8 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14eb2:	2220      	movs	r2, #32
   14eb4:	4639      	mov	r1, r7
   14eb6:	a802      	add	r0, sp, #8
   14eb8:	f009 f8ae 	bl	1e018 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14ebe:	b39d      	cbz	r5, 14f28 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14ec0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14ec4:	b922      	cbnz	r2, 14ed0 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14ec6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14eca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14ece:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14ed0:	a902      	add	r1, sp, #8
   14ed2:	4620      	mov	r0, r4
   14ed4:	f7ff fdb0 	bl	14a38 <z_arm_fatal_error>
}
   14ed8:	b00a      	add	sp, #40	; 0x28
   14eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   14ede:	f10d 0207 	add.w	r2, sp, #7
   14ee2:	2100      	movs	r1, #0
   14ee4:	e7ce      	b.n	14e84 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
   14ee6:	f10d 0107 	add.w	r1, sp, #7
   14eea:	2000      	movs	r0, #0
   14eec:	e7d4      	b.n	14e98 <z_arm_fault+0xc8>
   14eee:	4912      	ldr	r1, [pc, #72]	; (14f38 <z_arm_fault+0x168>)
   14ef0:	4b12      	ldr	r3, [pc, #72]	; (14f3c <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
   14ef2:	481a      	ldr	r0, [pc, #104]	; (14f5c <z_arm_fault+0x18c>)
   14ef4:	1ac9      	subs	r1, r1, r3
   14ef6:	08c9      	lsrs	r1, r1, #3
   14ef8:	0189      	lsls	r1, r1, #6
   14efa:	f041 0101 	orr.w	r1, r1, #1
   14efe:	e7b0      	b.n	14e62 <z_arm_fault+0x92>
   14f00:	4a0e      	ldr	r2, [pc, #56]	; (14f3c <z_arm_fault+0x16c>)
   14f02:	4b0d      	ldr	r3, [pc, #52]	; (14f38 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
   14f04:	4816      	ldr	r0, [pc, #88]	; (14f60 <z_arm_fault+0x190>)
   14f06:	4917      	ldr	r1, [pc, #92]	; (14f64 <z_arm_fault+0x194>)
   14f08:	1a9b      	subs	r3, r3, r2
   14f0a:	08db      	lsrs	r3, r3, #3
   14f0c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   14f10:	ea4f 1383 	mov.w	r3, r3, lsl #6
   14f14:	bf18      	it	ne
   14f16:	4601      	movne	r1, r0
   14f18:	f043 0301 	orr.w	r3, r3, #1
   14f1c:	4812      	ldr	r0, [pc, #72]	; (14f68 <z_arm_fault+0x198>)
   14f1e:	f1a4 0210 	sub.w	r2, r4, #16
   14f22:	f008 fa8b 	bl	1d43c <log_2>
   14f26:	e79e      	b.n	14e66 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14f28:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14f2c:	f023 0301 	bic.w	r3, r3, #1
   14f30:	e7cd      	b.n	14ece <z_arm_fault+0xfe>
   14f32:	bf00      	nop
   14f34:	e000ed00 	.word	0xe000ed00
   14f38:	00020380 	.word	0x00020380
   14f3c:	00020308 	.word	0x00020308
   14f40:	00021026 	.word	0x00021026
   14f44:	00021051 	.word	0x00021051
   14f48:	00021068 	.word	0x00021068
   14f4c:	00021089 	.word	0x00021089
   14f50:	e000ed28 	.word	0xe000ed28
   14f54:	e000ed29 	.word	0xe000ed29
   14f58:	e000ed2a 	.word	0xe000ed2a
   14f5c:	000210a8 	.word	0x000210a8
   14f60:	000210f3 	.word	0x000210f3
   14f64:	000210de 	.word	0x000210de
   14f68:	0002110c 	.word	0x0002110c

00014f6c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14f6c:	4a02      	ldr	r2, [pc, #8]	; (14f78 <z_arm_fault_init+0xc>)
   14f6e:	6953      	ldr	r3, [r2, #20]
   14f70:	f043 0310 	orr.w	r3, r3, #16
   14f74:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   14f76:	4770      	bx	lr
   14f78:	e000ed00 	.word	0xe000ed00

00014f7c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14f7c:	4b04      	ldr	r3, [pc, #16]	; (14f90 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14f7e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14f80:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   14f82:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14f84:	d003      	beq.n	14f8e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14f86:	4903      	ldr	r1, [pc, #12]	; (14f94 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14f8c:	600a      	str	r2, [r1, #0]

00014f8e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14f8e:	4770      	bx	lr
	ldr r3, =_kernel
   14f90:	20002674 	.word	0x20002674
	ldr r1, =_SCS_ICSR
   14f94:	e000ed04 	.word	0xe000ed04

00014f98 <z_arm_interrupt_init>:
   14f98:	4804      	ldr	r0, [pc, #16]	; (14fac <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14f9a:	2300      	movs	r3, #0
   14f9c:	2140      	movs	r1, #64	; 0x40
   14f9e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14fa0:	3301      	adds	r3, #1
   14fa2:	2b28      	cmp	r3, #40	; 0x28
   14fa4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14fa8:	d1f9      	bne.n	14f9e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14faa:	4770      	bx	lr
   14fac:	e000e100 	.word	0xe000e100

00014fb0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   14fb0:	b508      	push	{r3, lr}
	if (_current == thread) {
   14fb2:	4b0e      	ldr	r3, [pc, #56]	; (14fec <z_impl_k_thread_abort+0x3c>)
   14fb4:	689b      	ldr	r3, [r3, #8]
   14fb6:	4283      	cmp	r3, r0
   14fb8:	d107      	bne.n	14fca <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14fba:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14fbe:	b193      	cbz	r3, 14fe6 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14fc0:	4a0b      	ldr	r2, [pc, #44]	; (14ff0 <z_impl_k_thread_abort+0x40>)
   14fc2:	6853      	ldr	r3, [r2, #4]
   14fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14fc8:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   14fca:	f006 ff7d 	bl	1bec8 <z_thread_single_abort>
	__asm__ volatile(
   14fce:	f04f 0340 	mov.w	r3, #64	; 0x40
   14fd2:	f3ef 8011 	mrs	r0, BASEPRI
   14fd6:	f383 8811 	msr	BASEPRI, r3
   14fda:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   14fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   14fe2:	f00a bd2a 	b.w	1fa3a <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   14fe6:	f007 fa69 	bl	1c4bc <z_self_abort>
   14fea:	bf00      	nop
   14fec:	20002674 	.word	0x20002674
   14ff0:	e000ed00 	.word	0xe000ed00

00014ff4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14ff4:	4b02      	ldr	r3, [pc, #8]	; (15000 <z_arm_configure_static_mpu_regions+0xc>)
   14ff6:	4a03      	ldr	r2, [pc, #12]	; (15004 <z_arm_configure_static_mpu_regions+0x10>)
   14ff8:	4803      	ldr	r0, [pc, #12]	; (15008 <z_arm_configure_static_mpu_regions+0x14>)
   14ffa:	2101      	movs	r1, #1
   14ffc:	f000 b8b2 	b.w	15164 <arm_core_mpu_configure_static_mpu_regions>
   15000:	20008000 	.word	0x20008000
   15004:	20000000 	.word	0x20000000
   15008:	000205c8 	.word	0x000205c8

0001500c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1500c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1500e:	4b05      	ldr	r3, [pc, #20]	; (15024 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   15010:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   15012:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15014:	4a04      	ldr	r2, [pc, #16]	; (15028 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   15016:	2120      	movs	r1, #32
   15018:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   1501c:	4618      	mov	r0, r3
   1501e:	2101      	movs	r1, #1
   15020:	f000 b8aa 	b.w	15178 <arm_core_mpu_configure_dynamic_mpu_regions>
   15024:	20002540 	.word	0x20002540
   15028:	150b0000 	.word	0x150b0000

0001502c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   1502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   1502e:	4f28      	ldr	r7, [pc, #160]	; (150d0 <mpu_configure_regions+0xa4>)
   15030:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   15032:	2100      	movs	r1, #0
   15034:	42b1      	cmp	r1, r6
   15036:	da14      	bge.n	15062 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   15038:	6844      	ldr	r4, [r0, #4]
   1503a:	2c00      	cmp	r4, #0
   1503c:	d045      	beq.n	150ca <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1503e:	b1c3      	cbz	r3, 15072 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   15040:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   15044:	ea14 0f0c 	tst.w	r4, ip
   15048:	d00d      	beq.n	15066 <mpu_configure_regions+0x3a>
   1504a:	4a22      	ldr	r2, [pc, #136]	; (150d4 <mpu_configure_regions+0xa8>)
   1504c:	4b22      	ldr	r3, [pc, #136]	; (150d8 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   1504e:	4823      	ldr	r0, [pc, #140]	; (150dc <mpu_configure_regions+0xb0>)
   15050:	1ad2      	subs	r2, r2, r3
   15052:	08d2      	lsrs	r2, r2, #3
   15054:	0192      	lsls	r2, r2, #6
   15056:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1505a:	f008 f9db 	bl	1d414 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1505e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   15062:	4610      	mov	r0, r2
   15064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   15066:	2c1f      	cmp	r4, #31
   15068:	d9ef      	bls.n	1504a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   1506a:	6805      	ldr	r5, [r0, #0]
		&&
   1506c:	ea1c 0f05 	tst.w	ip, r5
   15070:	d1eb      	bne.n	1504a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   15072:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15074:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   15076:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   1507a:	6802      	ldr	r2, [r0, #0]
   1507c:	d916      	bls.n	150ac <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   1507e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15082:	d815      	bhi.n	150b0 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15084:	3c01      	subs	r4, #1
   15086:	fab4 f484 	clz	r4, r4
   1508a:	f1c4 041f 	rsb	r4, r4, #31
   1508e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   15090:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15092:	ea4c 0404 	orr.w	r4, ip, r4
   15096:	d90d      	bls.n	150b4 <mpu_configure_regions+0x88>
   15098:	4a0e      	ldr	r2, [pc, #56]	; (150d4 <mpu_configure_regions+0xa8>)
   1509a:	4b0f      	ldr	r3, [pc, #60]	; (150d8 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1509c:	4810      	ldr	r0, [pc, #64]	; (150e0 <mpu_configure_regions+0xb4>)
   1509e:	1ad2      	subs	r2, r2, r3
   150a0:	08d2      	lsrs	r2, r2, #3
   150a2:	0192      	lsls	r2, r2, #6
   150a4:	f042 0201 	orr.w	r2, r2, #1
   150a8:	4629      	mov	r1, r5
   150aa:	e7d6      	b.n	1505a <mpu_configure_regions+0x2e>
		return REGION_32B;
   150ac:	2408      	movs	r4, #8
   150ae:	e7ef      	b.n	15090 <mpu_configure_regions+0x64>
		return REGION_4G;
   150b0:	243e      	movs	r4, #62	; 0x3e
   150b2:	e7ed      	b.n	15090 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   150b4:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   150b8:	432a      	orrs	r2, r5
   150ba:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   150be:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   150c2:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   150c4:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   150c6:	613c      	str	r4, [r7, #16]
		reg_index++;
   150c8:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   150ca:	3101      	adds	r1, #1
   150cc:	300c      	adds	r0, #12
   150ce:	e7b1      	b.n	15034 <mpu_configure_regions+0x8>
   150d0:	e000ed90 	.word	0xe000ed90
   150d4:	00020370 	.word	0x00020370
   150d8:	00020308 	.word	0x00020308
   150dc:	00021123 	.word	0x00021123
   150e0:	00021146 	.word	0x00021146

000150e4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   150e4:	4b03      	ldr	r3, [pc, #12]	; (150f4 <arm_core_mpu_enable+0x10>)
   150e6:	2205      	movs	r2, #5
   150e8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   150ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   150ee:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   150f2:	4770      	bx	lr
   150f4:	e000ed90 	.word	0xe000ed90

000150f8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   150f8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   150fc:	4b01      	ldr	r3, [pc, #4]	; (15104 <arm_core_mpu_disable+0xc>)
   150fe:	2200      	movs	r2, #0
   15100:	605a      	str	r2, [r3, #4]
}
   15102:	4770      	bx	lr
   15104:	e000ed90 	.word	0xe000ed90

00015108 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15108:	4913      	ldr	r1, [pc, #76]	; (15158 <arm_mpu_init+0x50>)
   1510a:	6808      	ldr	r0, [r1, #0]
   1510c:	2808      	cmp	r0, #8
{
   1510e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15110:	d81e      	bhi.n	15150 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   15112:	f7ff fff1 	bl	150f8 <arm_core_mpu_disable>
	MPU->RNR = index;
   15116:	4c11      	ldr	r4, [pc, #68]	; (1515c <arm_mpu_init+0x54>)
   15118:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1511a:	2200      	movs	r2, #0
   1511c:	4290      	cmp	r0, r2
   1511e:	f101 010c 	add.w	r1, r1, #12
   15122:	d105      	bne.n	15130 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   15124:	4b0e      	ldr	r3, [pc, #56]	; (15160 <arm_mpu_init+0x58>)
   15126:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   15128:	f7ff ffdc 	bl	150e4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1512c:	2000      	movs	r0, #0
}
   1512e:	bd10      	pop	{r4, pc}
   15130:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15132:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   15136:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1513a:	4313      	orrs	r3, r2
   1513c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15140:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15142:	f851 3c04 	ldr.w	r3, [r1, #-4]
   15146:	f043 0301 	orr.w	r3, r3, #1
   1514a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1514c:	3201      	adds	r2, #1
   1514e:	e7e5      	b.n	1511c <arm_mpu_init+0x14>
		return -1;
   15150:	f04f 30ff 	mov.w	r0, #4294967295
   15154:	e7eb      	b.n	1512e <arm_mpu_init+0x26>
   15156:	bf00      	nop
   15158:	000205d4 	.word	0x000205d4
   1515c:	e000ed90 	.word	0xe000ed90
   15160:	20002aec 	.word	0x20002aec

00015164 <arm_core_mpu_configure_static_mpu_regions>:
{
   15164:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15166:	4c03      	ldr	r4, [pc, #12]	; (15174 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15168:	2301      	movs	r3, #1
   1516a:	7822      	ldrb	r2, [r4, #0]
   1516c:	f7ff ff5e 	bl	1502c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15170:	7020      	strb	r0, [r4, #0]
}
   15172:	bd10      	pop	{r4, pc}
   15174:	20002aec 	.word	0x20002aec

00015178 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   15178:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1517a:	4a08      	ldr	r2, [pc, #32]	; (1519c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   1517c:	2300      	movs	r3, #0
   1517e:	7812      	ldrb	r2, [r2, #0]
   15180:	f7ff ff54 	bl	1502c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15184:	f110 0f16 	cmn.w	r0, #22
   15188:	d003      	beq.n	15192 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   1518a:	4b05      	ldr	r3, [pc, #20]	; (151a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   1518c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1518e:	2807      	cmp	r0, #7
   15190:	dd00      	ble.n	15194 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
   15192:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   15194:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   15196:	611a      	str	r2, [r3, #16]
   15198:	3001      	adds	r0, #1
   1519a:	e7f8      	b.n	1518e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   1519c:	20002aec 	.word	0x20002aec
   151a0:	e000ed90 	.word	0xe000ed90

000151a4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   151a4:	4b01      	ldr	r3, [pc, #4]	; (151ac <__stdout_hook_install+0x8>)
   151a6:	6018      	str	r0, [r3, #0]
}
   151a8:	4770      	bx	lr
   151aa:	bf00      	nop
   151ac:	20000530 	.word	0x20000530

000151b0 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   151b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   151b4:	b2c0      	uxtb	r0, r0
   151b6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   151ba:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   151be:	4905      	ldr	r1, [pc, #20]	; (151d4 <sys_arch_reboot+0x24>)
   151c0:	4b05      	ldr	r3, [pc, #20]	; (151d8 <sys_arch_reboot+0x28>)
   151c2:	68ca      	ldr	r2, [r1, #12]
   151c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   151c8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   151ca:	60cb      	str	r3, [r1, #12]
   151cc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   151d0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   151d2:	e7fd      	b.n	151d0 <sys_arch_reboot+0x20>
   151d4:	e000ed00 	.word	0xe000ed00
   151d8:	05fa0004 	.word	0x05fa0004

000151dc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   151dc:	b120      	cbz	r0, 151e8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   151de:	4b03      	ldr	r3, [pc, #12]	; (151ec <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   151e0:	0180      	lsls	r0, r0, #6
   151e2:	f043 0301 	orr.w	r3, r3, #1
   151e6:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   151e8:	4770      	bx	lr
   151ea:	bf00      	nop
   151ec:	00020450 	.word	0x00020450

000151f0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   151f0:	4b0e      	ldr	r3, [pc, #56]	; (1522c <bt_hex_real+0x3c>)
   151f2:	2940      	cmp	r1, #64	; 0x40
{
   151f4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   151f6:	bf28      	it	cs
   151f8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   151fa:	4c0d      	ldr	r4, [pc, #52]	; (15230 <bt_hex_real+0x40>)
   151fc:	1846      	adds	r6, r0, r1
   151fe:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15200:	42b0      	cmp	r0, r6
   15202:	f103 0302 	add.w	r3, r3, #2
   15206:	d104      	bne.n	15212 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15208:	2300      	movs	r3, #0
   1520a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1520e:	4807      	ldr	r0, [pc, #28]	; (1522c <bt_hex_real+0x3c>)
   15210:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   15212:	7802      	ldrb	r2, [r0, #0]
   15214:	0912      	lsrs	r2, r2, #4
   15216:	5ca2      	ldrb	r2, [r4, r2]
   15218:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   1521c:	f810 2b01 	ldrb.w	r2, [r0], #1
   15220:	f002 020f 	and.w	r2, r2, #15
   15224:	5ca2      	ldrb	r2, [r4, r2]
   15226:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1522a:	e7e9      	b.n	15200 <bt_hex_real+0x10>
   1522c:	20002aed 	.word	0x20002aed
   15230:	0002117f 	.word	0x0002117f

00015234 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   15234:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   15236:	7803      	ldrb	r3, [r0, #0]
   15238:	b08b      	sub	sp, #44	; 0x2c
   1523a:	4604      	mov	r4, r0
   1523c:	ad07      	add	r5, sp, #28
   1523e:	2b03      	cmp	r3, #3
   15240:	d821      	bhi.n	15286 <bt_addr_le_str_real+0x52>
   15242:	e8df f003 	tbb	[pc, r3]
   15246:	1a02      	.short	0x1a02
   15248:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1524a:	4912      	ldr	r1, [pc, #72]	; (15294 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   1524c:	4628      	mov	r0, r5
   1524e:	f008 fe9a 	bl	1df86 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15252:	7863      	ldrb	r3, [r4, #1]
   15254:	9304      	str	r3, [sp, #16]
   15256:	78a3      	ldrb	r3, [r4, #2]
   15258:	9303      	str	r3, [sp, #12]
   1525a:	78e3      	ldrb	r3, [r4, #3]
   1525c:	9302      	str	r3, [sp, #8]
   1525e:	7923      	ldrb	r3, [r4, #4]
   15260:	9301      	str	r3, [sp, #4]
   15262:	7963      	ldrb	r3, [r4, #5]
   15264:	9300      	str	r3, [sp, #0]
   15266:	4a0c      	ldr	r2, [pc, #48]	; (15298 <bt_addr_le_str_real+0x64>)
   15268:	79a3      	ldrb	r3, [r4, #6]
   1526a:	9505      	str	r5, [sp, #20]
   1526c:	211e      	movs	r1, #30
   1526e:	480b      	ldr	r0, [pc, #44]	; (1529c <bt_addr_le_str_real+0x68>)
   15270:	f007 fca7 	bl	1cbc2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15274:	4809      	ldr	r0, [pc, #36]	; (1529c <bt_addr_le_str_real+0x68>)
   15276:	b00b      	add	sp, #44	; 0x2c
   15278:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1527a:	4909      	ldr	r1, [pc, #36]	; (152a0 <bt_addr_le_str_real+0x6c>)
   1527c:	e7e6      	b.n	1524c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   1527e:	4909      	ldr	r1, [pc, #36]	; (152a4 <bt_addr_le_str_real+0x70>)
   15280:	e7e4      	b.n	1524c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   15282:	4909      	ldr	r1, [pc, #36]	; (152a8 <bt_addr_le_str_real+0x74>)
   15284:	e7e2      	b.n	1524c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   15286:	4a09      	ldr	r2, [pc, #36]	; (152ac <bt_addr_le_str_real+0x78>)
   15288:	210a      	movs	r1, #10
   1528a:	4628      	mov	r0, r5
   1528c:	f007 fc99 	bl	1cbc2 <snprintk>
		break;
   15290:	e7df      	b.n	15252 <bt_addr_le_str_real+0x1e>
   15292:	bf00      	nop
   15294:	00020a11 	.word	0x00020a11
   15298:	00020a33 	.word	0x00020a33
   1529c:	20002b6e 	.word	0x20002b6e
   152a0:	00020a18 	.word	0x00020a18
   152a4:	00020a1f 	.word	0x00020a1f
   152a8:	00020a29 	.word	0x00020a29
   152ac:	00021ea4 	.word	0x00021ea4

000152b0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   152b0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   152b2:	7802      	ldrb	r2, [r0, #0]
   152b4:	2a01      	cmp	r2, #1
{
   152b6:	4604      	mov	r4, r0
   152b8:	460b      	mov	r3, r1
	switch (src->type) {
   152ba:	d016      	beq.n	152ea <uuid_to_uuid128+0x3a>
   152bc:	2a02      	cmp	r2, #2
   152be:	d02c      	beq.n	1531a <uuid_to_uuid128+0x6a>
   152c0:	b98a      	cbnz	r2, 152e6 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   152c2:	4a19      	ldr	r2, [pc, #100]	; (15328 <uuid_to_uuid128+0x78>)
   152c4:	460d      	mov	r5, r1
   152c6:	f102 0710 	add.w	r7, r2, #16
   152ca:	6810      	ldr	r0, [r2, #0]
   152cc:	6851      	ldr	r1, [r2, #4]
   152ce:	462e      	mov	r6, r5
   152d0:	c603      	stmia	r6!, {r0, r1}
   152d2:	3208      	adds	r2, #8
   152d4:	42ba      	cmp	r2, r7
   152d6:	4635      	mov	r5, r6
   152d8:	d1f7      	bne.n	152ca <uuid_to_uuid128+0x1a>
   152da:	7812      	ldrb	r2, [r2, #0]
   152dc:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   152de:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   152e0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   152e2:	0a12      	lsrs	r2, r2, #8
   152e4:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   152e6:	bcf0      	pop	{r4, r5, r6, r7}
   152e8:	4770      	bx	lr
		*dst = uuid128_base;
   152ea:	4a0f      	ldr	r2, [pc, #60]	; (15328 <uuid_to_uuid128+0x78>)
   152ec:	460d      	mov	r5, r1
   152ee:	f102 0710 	add.w	r7, r2, #16
   152f2:	6810      	ldr	r0, [r2, #0]
   152f4:	6851      	ldr	r1, [r2, #4]
   152f6:	462e      	mov	r6, r5
   152f8:	c603      	stmia	r6!, {r0, r1}
   152fa:	3208      	adds	r2, #8
   152fc:	42ba      	cmp	r2, r7
   152fe:	4635      	mov	r5, r6
   15300:	d1f7      	bne.n	152f2 <uuid_to_uuid128+0x42>
   15302:	7812      	ldrb	r2, [r2, #0]
   15304:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15306:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   15308:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1530a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   1530e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   15310:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   15312:	0a12      	lsrs	r2, r2, #8
   15314:	7399      	strb	r1, [r3, #14]
   15316:	741a      	strb	r2, [r3, #16]
}
   15318:	e7e5      	b.n	152e6 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1531a:	4601      	mov	r1, r0
}
   1531c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   1531e:	2211      	movs	r2, #17
   15320:	4618      	mov	r0, r3
   15322:	f008 be79 	b.w	1e018 <memcpy>
   15326:	bf00      	nop
   15328:	00021197 	.word	0x00021197

0001532c <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1532c:	b538      	push	{r3, r4, r5, lr}
   1532e:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   15330:	4805      	ldr	r0, [pc, #20]	; (15348 <bt_buf_get_rx+0x1c>)
   15332:	f00a f82a 	bl	1f38a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15336:	4604      	mov	r4, r0
   15338:	b120      	cbz	r0, 15344 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   1533a:	2100      	movs	r1, #0
   1533c:	3008      	adds	r0, #8
   1533e:	f00a f843 	bl	1f3c8 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15342:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15344:	4620      	mov	r0, r4
   15346:	bd38      	pop	{r3, r4, r5, pc}
   15348:	20000880 	.word	0x20000880

0001534c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1534c:	b570      	push	{r4, r5, r6, lr}
   1534e:	4602      	mov	r2, r0
   15350:	460b      	mov	r3, r1
   15352:	f04f 0140 	mov.w	r1, #64	; 0x40
   15356:	f3ef 8511 	mrs	r5, BASEPRI
   1535a:	f381 8811 	msr	BASEPRI, r1
   1535e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   15362:	480c      	ldr	r0, [pc, #48]	; (15394 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   15364:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   15366:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
   1536a:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
	__asm__ volatile(
   1536e:	f385 8811 	msr	BASEPRI, r5
   15372:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   15376:	b924      	cbnz	r4, 15382 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1537c:	2001      	movs	r0, #1
   1537e:	f7ff bfd5 	b.w	1532c <bt_buf_get_rx>
   15382:	2301      	movs	r3, #1
   15384:	f104 0008 	add.w	r0, r4, #8
   15388:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   1538a:	81a1      	strh	r1, [r4, #12]
   1538c:	f00a f81c 	bl	1f3c8 <net_buf_simple_reserve>
}
   15390:	4620      	mov	r0, r4
   15392:	bd70      	pop	{r4, r5, r6, pc}
   15394:	200003c8 	.word	0x200003c8

00015398 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15398:	b570      	push	{r4, r5, r6, lr}
   1539a:	4604      	mov	r4, r0
	switch (evt) {
   1539c:	2c0f      	cmp	r4, #15
{
   1539e:	460d      	mov	r5, r1
   153a0:	4610      	mov	r0, r2
   153a2:	4619      	mov	r1, r3
	switch (evt) {
   153a4:	d805      	bhi.n	153b2 <bt_buf_get_evt+0x1a>
   153a6:	2c0d      	cmp	r4, #13
   153a8:	d912      	bls.n	153d0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   153aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   153ae:	f7ff bfcd 	b.w	1534c <bt_buf_get_cmd_complete>
	switch (evt) {
   153b2:	2c13      	cmp	r4, #19
   153b4:	d10c      	bne.n	153d0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   153b6:	480b      	ldr	r0, [pc, #44]	; (153e4 <bt_buf_get_evt+0x4c>)
   153b8:	f009 ffe7 	bl	1f38a <net_buf_alloc_fixed>
			if (buf) {
   153bc:	4604      	mov	r4, r0
   153be:	b128      	cbz	r0, 153cc <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   153c0:	2100      	movs	r1, #0
   153c2:	3008      	adds	r0, #8
   153c4:	f00a f800 	bl	1f3c8 <net_buf_simple_reserve>
   153c8:	2301      	movs	r3, #1
   153ca:	7523      	strb	r3, [r4, #20]
}
   153cc:	4620      	mov	r0, r4
   153ce:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   153d0:	4602      	mov	r2, r0
   153d2:	460b      	mov	r3, r1
		if (discardable) {
   153d4:	b10d      	cbz	r5, 153da <bt_buf_get_evt+0x42>
   153d6:	4804      	ldr	r0, [pc, #16]	; (153e8 <bt_buf_get_evt+0x50>)
   153d8:	e7ee      	b.n	153b8 <bt_buf_get_evt+0x20>
}
   153da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   153de:	2001      	movs	r0, #1
   153e0:	f7ff bfa4 	b.w	1532c <bt_buf_get_rx>
   153e4:	200008a8 	.word	0x200008a8
   153e8:	20000808 	.word	0x20000808

000153ec <ver_str>:
	return 1U;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   153ec:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   153ee:	4d0b      	ldr	r5, [pc, #44]	; (1541c <ver_str+0x30>)
{
   153f0:	4606      	mov	r6, r0
	const char * const str[] = {
   153f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   153f4:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
   153f6:	466c      	mov	r4, sp
   153f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   153fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   153fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   153fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   15402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
   15406:	2e0b      	cmp	r6, #11
		return str[ver];
   15408:	bf9b      	ittet	ls
   1540a:	ab0c      	addls	r3, sp, #48	; 0x30
   1540c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   15410:	4803      	ldrhi	r0, [pc, #12]	; (15420 <ver_str+0x34>)
		return str[ver];
   15412:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
   15416:	b00c      	add	sp, #48	; 0x30
   15418:	bd70      	pop	{r4, r5, r6, pc}
   1541a:	bf00      	nop
   1541c:	00020410 	.word	0x00020410
   15420:	0002129a 	.word	0x0002129a

00015424 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
   15424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   15426:	4f0a      	ldr	r7, [pc, #40]	; (15450 <id_find+0x2c>)
{
   15428:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1542a:	2500      	movs	r5, #0
   1542c:	79fb      	ldrb	r3, [r7, #7]
   1542e:	b2ec      	uxtb	r4, r5
   15430:	42a3      	cmp	r3, r4
   15432:	d802      	bhi.n	1543a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   15434:	f06f 0401 	mvn.w	r4, #1
   15438:	e008      	b.n	1544c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1543a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1543e:	4439      	add	r1, r7
   15440:	4630      	mov	r0, r6
   15442:	f008 fed9 	bl	1e1f8 <bt_addr_le_cmp>
   15446:	3501      	adds	r5, #1
   15448:	2800      	cmp	r0, #0
   1544a:	d1ef      	bne.n	1542c <id_find+0x8>
}
   1544c:	4620      	mov	r0, r4
   1544e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15450:	200003c8 	.word	0x200003c8

00015454 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   15454:	6843      	ldr	r3, [r0, #4]
{
   15456:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15458:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1545a:	0558      	lsls	r0, r3, #21
   1545c:	d502      	bpl.n	15464 <valid_adv_param+0x10>
		return false;
   1545e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   15460:	b003      	add	sp, #12
   15462:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15464:	6922      	ldr	r2, [r4, #16]
   15466:	b10a      	cbz	r2, 1546c <valid_adv_param+0x18>
   15468:	07d9      	lsls	r1, r3, #31
   1546a:	d5f8      	bpl.n	1545e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1546c:	4d1a      	ldr	r5, [pc, #104]	; (154d8 <valid_adv_param+0x84>)
   1546e:	7820      	ldrb	r0, [r4, #0]
   15470:	79eb      	ldrb	r3, [r5, #7]
   15472:	4283      	cmp	r3, r0
   15474:	d9f3      	bls.n	1545e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   15476:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1547a:	2300      	movs	r3, #0
   1547c:	4669      	mov	r1, sp
   1547e:	4428      	add	r0, r5
   15480:	9300      	str	r3, [sp, #0]
   15482:	f8cd 3003 	str.w	r3, [sp, #3]
   15486:	f008 feb7 	bl	1e1f8 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
   1548a:	2800      	cmp	r0, #0
   1548c:	d0e7      	beq.n	1545e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1548e:	6860      	ldr	r0, [r4, #4]
   15490:	07c2      	lsls	r2, r0, #31
   15492:	d406      	bmi.n	154a2 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   15494:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   15498:	2b08      	cmp	r3, #8
   1549a:	d802      	bhi.n	154a2 <valid_adv_param+0x4e>
   1549c:	68a3      	ldr	r3, [r4, #8]
   1549e:	2b9f      	cmp	r3, #159	; 0x9f
   154a0:	d9dd      	bls.n	1545e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   154a2:	f010 0f30 	tst.w	r0, #48	; 0x30
   154a6:	d002      	beq.n	154ae <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   154a8:	6923      	ldr	r3, [r4, #16]
   154aa:	2b00      	cmp	r3, #0
   154ac:	d0d7      	beq.n	1545e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   154ae:	06c3      	lsls	r3, r0, #27
   154b0:	d401      	bmi.n	154b6 <valid_adv_param+0x62>
   154b2:	6923      	ldr	r3, [r4, #16]
   154b4:	b943      	cbnz	r3, 154c8 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
   154b6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   154ba:	429a      	cmp	r2, r3
   154bc:	d8cf      	bhi.n	1545e <valid_adv_param+0xa>
   154be:	2a1f      	cmp	r2, #31
   154c0:	d9cd      	bls.n	1545e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   154c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   154c6:	d8ca      	bhi.n	1545e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   154c8:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   154cc:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   154d0:	bf18      	it	ne
   154d2:	2001      	movne	r0, #1
   154d4:	e7c4      	b.n	15460 <valid_adv_param+0xc>
   154d6:	bf00      	nop
   154d8:	200003c8 	.word	0x200003c8

000154dc <hci_data_buf_overflow>:
   154dc:	4905      	ldr	r1, [pc, #20]	; (154f4 <hci_data_buf_overflow+0x18>)
   154de:	4a06      	ldr	r2, [pc, #24]	; (154f8 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   154e0:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   154e2:	4806      	ldr	r0, [pc, #24]	; (154fc <hci_data_buf_overflow+0x20>)
   154e4:	1a52      	subs	r2, r2, r1
   154e6:	08d2      	lsrs	r2, r2, #3
   154e8:	0192      	lsls	r2, r2, #6
   154ea:	7819      	ldrb	r1, [r3, #0]
   154ec:	f042 0202 	orr.w	r2, r2, #2
   154f0:	f007 bf90 	b.w	1d414 <log_1>
   154f4:	00020308 	.word	0x00020308
   154f8:	00020328 	.word	0x00020328
   154fc:	000212a2 	.word	0x000212a2

00015500 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15500:	6883      	ldr	r3, [r0, #8]
{
   15502:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15504:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15506:	4620      	mov	r0, r4
   15508:	f002 fa94 	bl	17a34 <bt_conn_lookup_handle>
	if (!conn) {
   1550c:	b960      	cbnz	r0, 15528 <le_data_len_change+0x28>
   1550e:	4a08      	ldr	r2, [pc, #32]	; (15530 <le_data_len_change+0x30>)
   15510:	4b08      	ldr	r3, [pc, #32]	; (15534 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15512:	4809      	ldr	r0, [pc, #36]	; (15538 <le_data_len_change+0x38>)
   15514:	1ad2      	subs	r2, r2, r3
   15516:	08d2      	lsrs	r2, r2, #3
   15518:	0192      	lsls	r2, r2, #6
   1551a:	4621      	mov	r1, r4
   1551c:	f042 0201 	orr.w	r2, r2, #1
}
   15520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15524:	f007 bf76 	b.w	1d414 <log_1>
}
   15528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1552c:	f008 bfe3 	b.w	1e4f6 <bt_conn_unref>
   15530:	00020328 	.word	0x00020328
   15534:	00020308 	.word	0x00020308
   15538:	000212ca 	.word	0x000212ca

0001553c <hci_disconn_complete_prio>:
{
   1553c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1553e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   15540:	781a      	ldrb	r2, [r3, #0]
   15542:	b9da      	cbnz	r2, 1557c <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15544:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15548:	4628      	mov	r0, r5
   1554a:	f002 fa73 	bl	17a34 <bt_conn_lookup_handle>
	if (!conn) {
   1554e:	4604      	mov	r4, r0
   15550:	b960      	cbnz	r0, 1556c <hci_disconn_complete_prio+0x30>
   15552:	4b0b      	ldr	r3, [pc, #44]	; (15580 <hci_disconn_complete_prio+0x44>)
   15554:	4a0b      	ldr	r2, [pc, #44]	; (15584 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   15556:	480c      	ldr	r0, [pc, #48]	; (15588 <hci_disconn_complete_prio+0x4c>)
   15558:	1ad2      	subs	r2, r2, r3
   1555a:	08d2      	lsrs	r2, r2, #3
   1555c:	0192      	lsls	r2, r2, #6
   1555e:	4629      	mov	r1, r5
   15560:	f042 0201 	orr.w	r2, r2, #1
}
   15564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15568:	f007 bf54 	b.w	1d414 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1556c:	2101      	movs	r1, #1
   1556e:	f002 fa6d 	bl	17a4c <bt_conn_set_state>
	bt_conn_unref(conn);
   15572:	4620      	mov	r0, r4
}
   15574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15578:	f008 bfbd 	b.w	1e4f6 <bt_conn_unref>
}
   1557c:	bd38      	pop	{r3, r4, r5, pc}
   1557e:	bf00      	nop
   15580:	00020308 	.word	0x00020308
   15584:	00020328 	.word	0x00020328
   15588:	000212ee 	.word	0x000212ee

0001558c <hci_disconn_complete>:
{
   1558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1558e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   15590:	7835      	ldrb	r5, [r6, #0]
   15592:	b9f5      	cbnz	r5, 155d2 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15594:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   15598:	4638      	mov	r0, r7
   1559a:	f002 fa4b 	bl	17a34 <bt_conn_lookup_handle>
	if (!conn) {
   1559e:	4604      	mov	r4, r0
   155a0:	b960      	cbnz	r0, 155bc <hci_disconn_complete+0x30>
   155a2:	4b0c      	ldr	r3, [pc, #48]	; (155d4 <hci_disconn_complete+0x48>)
   155a4:	4a0c      	ldr	r2, [pc, #48]	; (155d8 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   155a6:	480d      	ldr	r0, [pc, #52]	; (155dc <hci_disconn_complete+0x50>)
   155a8:	1ad2      	subs	r2, r2, r3
   155aa:	08d2      	lsrs	r2, r2, #3
   155ac:	0192      	lsls	r2, r2, #6
   155ae:	4639      	mov	r1, r7
   155b0:	f042 0201 	orr.w	r2, r2, #1
}
   155b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   155b8:	f007 bf2c 	b.w	1d414 <log_1>
	conn->err = evt->reason;
   155bc:	78f3      	ldrb	r3, [r6, #3]
   155be:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   155c0:	4629      	mov	r1, r5
   155c2:	f002 fa43 	bl	17a4c <bt_conn_set_state>
	conn->handle = 0U;
   155c6:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   155c8:	4620      	mov	r0, r4
}
   155ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   155ce:	f008 bf92 	b.w	1e4f6 <bt_conn_unref>
}
   155d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155d4:	00020308 	.word	0x00020308
   155d8:	00020328 	.word	0x00020328
   155dc:	000212ee 	.word	0x000212ee

000155e0 <hci_hardware_error>:
{
   155e0:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   155e2:	2101      	movs	r1, #1
   155e4:	3008      	adds	r0, #8
   155e6:	f009 ff4d 	bl	1f484 <net_buf_simple_pull_mem>
   155ea:	4b06      	ldr	r3, [pc, #24]	; (15604 <hci_hardware_error+0x24>)
   155ec:	4a06      	ldr	r2, [pc, #24]	; (15608 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   155ee:	7801      	ldrb	r1, [r0, #0]
   155f0:	4806      	ldr	r0, [pc, #24]	; (1560c <hci_hardware_error+0x2c>)
   155f2:	1ad2      	subs	r2, r2, r3
   155f4:	08d2      	lsrs	r2, r2, #3
   155f6:	0192      	lsls	r2, r2, #6
}
   155f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   155fc:	f042 0201 	orr.w	r2, r2, #1
   15600:	f007 bf08 	b.w	1d414 <log_1>
   15604:	00020308 	.word	0x00020308
   15608:	00020328 	.word	0x00020328
   1560c:	00021314 	.word	0x00021314

00015610 <hci_vendor_event>:
{
   15610:	b510      	push	{r4, lr}
   15612:	4a0a      	ldr	r2, [pc, #40]	; (1563c <hci_vendor_event+0x2c>)
   15614:	4c0a      	ldr	r4, [pc, #40]	; (15640 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   15616:	8981      	ldrh	r1, [r0, #12]
   15618:	6880      	ldr	r0, [r0, #8]
   1561a:	1aa4      	subs	r4, r4, r2
   1561c:	f7ff fde8 	bl	151f0 <bt_hex_real>
   15620:	f7fd ffee 	bl	13600 <log_strdup>
   15624:	08e4      	lsrs	r4, r4, #3
   15626:	01a4      	lsls	r4, r4, #6
   15628:	f044 0402 	orr.w	r4, r4, #2
   1562c:	4601      	mov	r1, r0
   1562e:	4622      	mov	r2, r4
   15630:	4804      	ldr	r0, [pc, #16]	; (15644 <hci_vendor_event+0x34>)
}
   15632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   15636:	f007 beed 	b.w	1d414 <log_1>
   1563a:	bf00      	nop
   1563c:	00020308 	.word	0x00020308
   15640:	00020328 	.word	0x00020328
   15644:	00021336 	.word	0x00021336

00015648 <le_conn_update_complete>:
{
   15648:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1564a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1564c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15650:	4630      	mov	r0, r6
   15652:	f002 f9ef 	bl	17a34 <bt_conn_lookup_handle>
	if (!conn) {
   15656:	4604      	mov	r4, r0
   15658:	b960      	cbnz	r0, 15674 <le_conn_update_complete+0x2c>
   1565a:	4a1f      	ldr	r2, [pc, #124]	; (156d8 <le_conn_update_complete+0x90>)
   1565c:	4b1f      	ldr	r3, [pc, #124]	; (156dc <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1565e:	4820      	ldr	r0, [pc, #128]	; (156e0 <le_conn_update_complete+0x98>)
   15660:	1ad2      	subs	r2, r2, r3
   15662:	08d2      	lsrs	r2, r2, #3
   15664:	0192      	lsls	r2, r2, #6
   15666:	f042 0201 	orr.w	r2, r2, #1
   1566a:	4631      	mov	r1, r6
   1566c:	f007 fed2 	bl	1d414 <log_1>
}
   15670:	b002      	add	sp, #8
   15672:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   15674:	782b      	ldrb	r3, [r5, #0]
   15676:	b9bb      	cbnz	r3, 156a8 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   15678:	792a      	ldrb	r2, [r5, #4]
   1567a:	78eb      	ldrb	r3, [r5, #3]
   1567c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15680:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   15684:	79aa      	ldrb	r2, [r5, #6]
   15686:	796b      	ldrb	r3, [r5, #5]
   15688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1568c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15690:	79eb      	ldrb	r3, [r5, #7]
   15692:	7a2a      	ldrb	r2, [r5, #8]
   15694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15698:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1569c:	f001 fff0 	bl	17680 <notify_le_param_updated>
	bt_conn_unref(conn);
   156a0:	4620      	mov	r0, r4
   156a2:	f008 ff28 	bl	1e4f6 <bt_conn_unref>
   156a6:	e7e3      	b.n	15670 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   156a8:	2b1a      	cmp	r3, #26
   156aa:	d1f9      	bne.n	156a0 <le_conn_update_complete+0x58>
   156ac:	78c3      	ldrb	r3, [r0, #3]
   156ae:	2b01      	cmp	r3, #1
   156b0:	d1f6      	bne.n	156a0 <le_conn_update_complete+0x58>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   156b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   156b6:	3004      	adds	r0, #4
   156b8:	f008 fda1 	bl	1e1fe <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   156bc:	0543      	lsls	r3, r0, #21
   156be:	d4ef      	bmi.n	156a0 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   156c0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   156c4:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   156c6:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   156c8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   156cc:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   156ce:	4620      	mov	r0, r4
   156d0:	f002 fdf2 	bl	182b8 <bt_l2cap_update_conn_param>
   156d4:	e7e4      	b.n	156a0 <le_conn_update_complete+0x58>
   156d6:	bf00      	nop
   156d8:	00020328 	.word	0x00020328
   156dc:	00020308 	.word	0x00020308
   156e0:	000212ca 	.word	0x000212ca

000156e4 <hci_cmd_done>:
{
   156e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   156e8:	4607      	mov	r7, r0
   156ea:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   156ec:	7990      	ldrb	r0, [r2, #6]
   156ee:	4e34      	ldr	r6, [pc, #208]	; (157c0 <hci_cmd_done+0xdc>)
{
   156f0:	4688      	mov	r8, r1
   156f2:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   156f4:	f004 fb8a 	bl	19e0c <net_buf_pool_get>
   156f8:	4286      	cmp	r6, r0
   156fa:	d016      	beq.n	1572a <hci_cmd_done+0x46>
   156fc:	4b31      	ldr	r3, [pc, #196]	; (157c4 <hci_cmd_done+0xe0>)
   156fe:	4d32      	ldr	r5, [pc, #200]	; (157c8 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   15700:	79a0      	ldrb	r0, [r4, #6]
   15702:	9700      	str	r7, [sp, #0]
   15704:	1aed      	subs	r5, r5, r3
   15706:	08ed      	lsrs	r5, r5, #3
   15708:	9001      	str	r0, [sp, #4]
   1570a:	f004 fb7f 	bl	19e0c <net_buf_pool_get>
   1570e:	01ad      	lsls	r5, r5, #6
   15710:	f045 0502 	orr.w	r5, r5, #2
   15714:	e9cd 0602 	strd	r0, r6, [sp, #8]
   15718:	462b      	mov	r3, r5
   1571a:	482c      	ldr	r0, [pc, #176]	; (157cc <hci_cmd_done+0xe8>)
   1571c:	2204      	movs	r2, #4
   1571e:	4669      	mov	r1, sp
   15720:	f007 fec1 	bl	1d4a6 <log_n>
}
   15724:	b005      	add	sp, #20
   15726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   1572a:	4620      	mov	r0, r4
   1572c:	f004 fb76 	bl	19e1c <net_buf_id>
   15730:	4d27      	ldr	r5, [pc, #156]	; (157d0 <hci_cmd_done+0xec>)
   15732:	f04f 090c 	mov.w	r9, #12
   15736:	fb09 5300 	mla	r3, r9, r0, r5
   1573a:	885b      	ldrh	r3, [r3, #2]
   1573c:	42bb      	cmp	r3, r7
   1573e:	d011      	beq.n	15764 <hci_cmd_done+0x80>
   15740:	4b20      	ldr	r3, [pc, #128]	; (157c4 <hci_cmd_done+0xe0>)
   15742:	4e21      	ldr	r6, [pc, #132]	; (157c8 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   15744:	4620      	mov	r0, r4
   15746:	1af6      	subs	r6, r6, r3
   15748:	f004 fb68 	bl	19e1c <net_buf_id>
   1574c:	08f6      	lsrs	r6, r6, #3
   1574e:	fb09 5000 	mla	r0, r9, r0, r5
   15752:	01b6      	lsls	r6, r6, #6
   15754:	f046 0602 	orr.w	r6, r6, #2
   15758:	8842      	ldrh	r2, [r0, #2]
   1575a:	481e      	ldr	r0, [pc, #120]	; (157d4 <hci_cmd_done+0xf0>)
   1575c:	4633      	mov	r3, r6
   1575e:	4639      	mov	r1, r7
   15760:	f007 fe6c 	bl	1d43c <log_2>
	if (cmd(buf)->state && !status) {
   15764:	4620      	mov	r0, r4
   15766:	f004 fb59 	bl	19e1c <net_buf_id>
   1576a:	260c      	movs	r6, #12
   1576c:	fb06 5000 	mla	r0, r6, r0, r5
   15770:	6843      	ldr	r3, [r0, #4]
   15772:	b16b      	cbz	r3, 15790 <hci_cmd_done+0xac>
   15774:	f1b8 0f00 	cmp.w	r8, #0
   15778:	d10a      	bne.n	15790 <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1577a:	4620      	mov	r0, r4
   1577c:	f004 fb4e 	bl	19e1c <net_buf_id>
   15780:	fb06 5000 	mla	r0, r6, r0, r5
   15784:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   15786:	e9d3 0100 	ldrd	r0, r1, [r3]
   1578a:	7a1a      	ldrb	r2, [r3, #8]
   1578c:	f008 fd55 	bl	1e23a <atomic_set_bit_to>
	if (cmd(buf)->sync) {
   15790:	4620      	mov	r0, r4
   15792:	f004 fb43 	bl	19e1c <net_buf_id>
   15796:	260c      	movs	r6, #12
   15798:	fb06 5000 	mla	r0, r6, r0, r5
   1579c:	6883      	ldr	r3, [r0, #8]
   1579e:	2b00      	cmp	r3, #0
   157a0:	d0c0      	beq.n	15724 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   157a2:	4620      	mov	r0, r4
   157a4:	f004 fb3a 	bl	19e1c <net_buf_id>
   157a8:	4370      	muls	r0, r6
   157aa:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   157ae:	4620      	mov	r0, r4
   157b0:	f004 fb34 	bl	19e1c <net_buf_id>
   157b4:	fb06 5500 	mla	r5, r6, r0, r5
   157b8:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   157ba:	f006 fd5b 	bl	1c274 <z_impl_k_sem_give>
}
   157be:	e7b1      	b.n	15724 <hci_cmd_done+0x40>
   157c0:	20000858 	.word	0x20000858
   157c4:	00020308 	.word	0x00020308
   157c8:	00020328 	.word	0x00020328
   157cc:	0002135a 	.word	0x0002135a
   157d0:	2000254c 	.word	0x2000254c
   157d4:	0002138f 	.word	0x0002138f

000157d8 <handle_event>:
{
   157d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   157da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   157de:	4605      	mov	r5, r0
   157e0:	4608      	mov	r0, r1
		if (handler->event != event) {
   157e2:	7811      	ldrb	r1, [r2, #0]
   157e4:	42a9      	cmp	r1, r5
   157e6:	d01a      	beq.n	1581e <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   157e8:	3208      	adds	r2, #8
   157ea:	429a      	cmp	r2, r3
   157ec:	d1f9      	bne.n	157e2 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   157ee:	8986      	ldrh	r6, [r0, #12]
   157f0:	4b16      	ldr	r3, [pc, #88]	; (1584c <handle_event+0x74>)
   157f2:	4c17      	ldr	r4, [pc, #92]	; (15850 <handle_event+0x78>)
   157f4:	6880      	ldr	r0, [r0, #8]
   157f6:	4631      	mov	r1, r6
   157f8:	1ae4      	subs	r4, r4, r3
   157fa:	f7ff fcf9 	bl	151f0 <bt_hex_real>
   157fe:	f7fd feff 	bl	13600 <log_strdup>
   15802:	08e4      	lsrs	r4, r4, #3
   15804:	01a4      	lsls	r4, r4, #6
   15806:	f044 0402 	orr.w	r4, r4, #2
   1580a:	4603      	mov	r3, r0
   1580c:	f8ad 4000 	strh.w	r4, [sp]
   15810:	4810      	ldr	r0, [pc, #64]	; (15854 <handle_event+0x7c>)
   15812:	4632      	mov	r2, r6
   15814:	4629      	mov	r1, r5
   15816:	f007 fe2a 	bl	1d46e <log_3>
}
   1581a:	b002      	add	sp, #8
   1581c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   1581e:	8981      	ldrh	r1, [r0, #12]
   15820:	7853      	ldrb	r3, [r2, #1]
   15822:	428b      	cmp	r3, r1
   15824:	d90d      	bls.n	15842 <handle_event+0x6a>
   15826:	4a09      	ldr	r2, [pc, #36]	; (1584c <handle_event+0x74>)
   15828:	4b09      	ldr	r3, [pc, #36]	; (15850 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1582a:	480b      	ldr	r0, [pc, #44]	; (15858 <handle_event+0x80>)
   1582c:	1a9b      	subs	r3, r3, r2
   1582e:	08db      	lsrs	r3, r3, #3
   15830:	019b      	lsls	r3, r3, #6
   15832:	f043 0301 	orr.w	r3, r3, #1
   15836:	462a      	mov	r2, r5
}
   15838:	b002      	add	sp, #8
   1583a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1583e:	f007 bdfd 	b.w	1d43c <log_2>
		handler->handler(buf);
   15842:	6853      	ldr	r3, [r2, #4]
}
   15844:	b002      	add	sp, #8
   15846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   1584a:	4718      	bx	r3
   1584c:	00020308 	.word	0x00020308
   15850:	00020328 	.word	0x00020328
   15854:	000213e4 	.word	0x000213e4
   15858:	000213c2 	.word	0x000213c2

0001585c <hci_rx_thread>:
{
   1585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15860:	4b47      	ldr	r3, [pc, #284]	; (15980 <hci_rx_thread+0x124>)
   15862:	4d48      	ldr	r5, [pc, #288]	; (15984 <hci_rx_thread+0x128>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   15864:	f8df 813c 	ldr.w	r8, [pc, #316]	; 159a4 <hci_rx_thread+0x148>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15868:	f8df 913c 	ldr.w	r9, [pc, #316]	; 159a8 <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1586c:	4f46      	ldr	r7, [pc, #280]	; (15988 <hci_rx_thread+0x12c>)
   1586e:	1aed      	subs	r5, r5, r3
   15870:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   15872:	f04f 32ff 	mov.w	r2, #4294967295
   15876:	f04f 33ff 	mov.w	r3, #4294967295
   1587a:	4640      	mov	r0, r8
   1587c:	f009 fd8a 	bl	1f394 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15880:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   15882:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   15884:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   15886:	d046      	beq.n	15916 <hci_rx_thread+0xba>
   15888:	2903      	cmp	r1, #3
   1588a:	d173      	bne.n	15974 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1588c:	8983      	ldrh	r3, [r0, #12]
   1588e:	2b03      	cmp	r3, #3
   15890:	d80c      	bhi.n	158ac <hci_rx_thread+0x50>
   15892:	493e      	ldr	r1, [pc, #248]	; (1598c <hci_rx_thread+0x130>)
   15894:	483e      	ldr	r0, [pc, #248]	; (15990 <hci_rx_thread+0x134>)
   15896:	f240 43ac 	movw	r3, #1196	; 0x4ac
   1589a:	463a      	mov	r2, r7
   1589c:	f007 f984 	bl	1cba8 <printk>
   158a0:	4040      	eors	r0, r0
   158a2:	f380 8811 	msr	BASEPRI, r0
   158a6:	f04f 0003 	mov.w	r0, #3
   158aa:	df02      	svc	2
   158ac:	2104      	movs	r1, #4
   158ae:	f104 0008 	add.w	r0, r4, #8
   158b2:	f009 fde7 	bl	1f484 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   158b6:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   158b8:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   158ba:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   158be:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   158c0:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   158c4:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   158c6:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   158c8:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   158ca:	d009      	beq.n	158e0 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   158cc:	01ab      	lsls	r3, r5, #6
   158ce:	4831      	ldr	r0, [pc, #196]	; (15994 <hci_rx_thread+0x138>)
   158d0:	f043 0301 	orr.w	r3, r3, #1
   158d4:	f007 fdb2 	bl	1d43c <log_2>
			net_buf_unref(buf);
   158d8:	4620      	mov	r0, r4
   158da:	f004 fb53 	bl	19f84 <net_buf_unref>
			break;
   158de:	e017      	b.n	15910 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   158e0:	f002 f8a8 	bl	17a34 <bt_conn_lookup_handle>
	if (!conn) {
   158e4:	4606      	mov	r6, r0
   158e6:	b938      	cbnz	r0, 158f8 <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   158e8:	01aa      	lsls	r2, r5, #6
   158ea:	8ae1      	ldrh	r1, [r4, #22]
   158ec:	482a      	ldr	r0, [pc, #168]	; (15998 <hci_rx_thread+0x13c>)
   158ee:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   158f2:	f007 fd8f 	bl	1d414 <log_1>
   158f6:	e7ef      	b.n	158d8 <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   158f8:	f002 fb42 	bl	17f80 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   158fc:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   15900:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   15902:	4621      	mov	r1, r4
   15904:	4630      	mov	r0, r6
   15906:	f001 ff35 	bl	17774 <bt_conn_recv>
	bt_conn_unref(conn);
   1590a:	4630      	mov	r0, r6
   1590c:	f008 fdf3 	bl	1e4f6 <bt_conn_unref>
	z_impl_k_yield();
   15910:	f006 fc3a 	bl	1c188 <z_impl_k_yield>
	while (1) {
   15914:	e7ad      	b.n	15872 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15916:	8983      	ldrh	r3, [r0, #12]
   15918:	2b01      	cmp	r3, #1
   1591a:	d80c      	bhi.n	15936 <hci_rx_thread+0xda>
   1591c:	491b      	ldr	r1, [pc, #108]	; (1598c <hci_rx_thread+0x130>)
   1591e:	481c      	ldr	r0, [pc, #112]	; (15990 <hci_rx_thread+0x134>)
   15920:	f241 33fb 	movw	r3, #5115	; 0x13fb
   15924:	463a      	mov	r2, r7
   15926:	f007 f93f 	bl	1cba8 <printk>
   1592a:	4040      	eors	r0, r0
   1592c:	f380 8811 	msr	BASEPRI, r0
   15930:	f04f 0003 	mov.w	r0, #3
   15934:	df02      	svc	2
   15936:	2102      	movs	r1, #2
   15938:	f104 0008 	add.w	r0, r4, #8
   1593c:	f009 fda2 	bl	1f484 <net_buf_simple_pull_mem>
   15940:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15942:	7800      	ldrb	r0, [r0, #0]
   15944:	f008 fc2e 	bl	1e1a4 <bt_hci_evt_get_flags>
   15948:	0783      	lsls	r3, r0, #30
   1594a:	d40c      	bmi.n	15966 <hci_rx_thread+0x10a>
   1594c:	4913      	ldr	r1, [pc, #76]	; (1599c <hci_rx_thread+0x140>)
   1594e:	4810      	ldr	r0, [pc, #64]	; (15990 <hci_rx_thread+0x134>)
   15950:	f241 33ff 	movw	r3, #5119	; 0x13ff
   15954:	463a      	mov	r2, r7
   15956:	f007 f927 	bl	1cba8 <printk>
   1595a:	4040      	eors	r0, r0
   1595c:	f380 8811 	msr	BASEPRI, r0
   15960:	f04f 0003 	mov.w	r0, #3
   15964:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15966:	7830      	ldrb	r0, [r6, #0]
   15968:	2304      	movs	r3, #4
   1596a:	464a      	mov	r2, r9
   1596c:	4621      	mov	r1, r4
   1596e:	f7ff ff33 	bl	157d8 <handle_event>
	net_buf_unref(buf);
   15972:	e7b1      	b.n	158d8 <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15974:	01aa      	lsls	r2, r5, #6
   15976:	480a      	ldr	r0, [pc, #40]	; (159a0 <hci_rx_thread+0x144>)
   15978:	f042 0201 	orr.w	r2, r2, #1
   1597c:	e7b9      	b.n	158f2 <hci_rx_thread+0x96>
   1597e:	bf00      	nop
   15980:	00020308 	.word	0x00020308
   15984:	00020328 	.word	0x00020328
   15988:	00021406 	.word	0x00021406
   1598c:	0002143a 	.word	0x0002143a
   15990:	00021453 	.word	0x00021453
   15994:	00021470 	.word	0x00021470
   15998:	00021494 	.word	0x00021494
   1599c:	000214b6 	.word	0x000214b6
   159a0:	000214e4 	.word	0x000214e4
   159a4:	200004c4 	.word	0x200004c4
   159a8:	0002067c 	.word	0x0002067c

000159ac <hci_le_meta_event>:
{
   159ac:	b510      	push	{r4, lr}
   159ae:	2101      	movs	r1, #1
   159b0:	4604      	mov	r4, r0
   159b2:	3008      	adds	r0, #8
   159b4:	f009 fd66 	bl	1f484 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   159b8:	4621      	mov	r1, r4
   159ba:	4a03      	ldr	r2, [pc, #12]	; (159c8 <hci_le_meta_event+0x1c>)
   159bc:	7800      	ldrb	r0, [r0, #0]
}
   159be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   159c2:	2307      	movs	r3, #7
   159c4:	f7ff bf08 	b.w	157d8 <handle_event>
   159c8:	00020624 	.word	0x00020624

000159cc <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   159cc:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   159ce:	4c0c      	ldr	r4, [pc, #48]	; (15a00 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   159d0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   159d2:	2205      	movs	r2, #5
   159d4:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   159d8:	f002 f968 	bl	17cac <bt_conn_lookup_state_le>
		if (!conn) {
   159dc:	b970      	cbnz	r0, 159fc <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   159de:	4b09      	ldr	r3, [pc, #36]	; (15a04 <find_pending_connect.part.0+0x38>)
   159e0:	6818      	ldr	r0, [r3, #0]
   159e2:	889a      	ldrh	r2, [r3, #4]
   159e4:	9000      	str	r0, [sp, #0]
   159e6:	799b      	ldrb	r3, [r3, #6]
   159e8:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   159ec:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
   159f0:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   159f4:	2204      	movs	r2, #4
   159f6:	4669      	mov	r1, sp
   159f8:	f002 f958 	bl	17cac <bt_conn_lookup_state_le>
}
   159fc:	b002      	add	sp, #8
   159fe:	bd10      	pop	{r4, pc}
   15a00:	200003c8 	.word	0x200003c8
   15a04:	00020440 	.word	0x00020440

00015a08 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   15a08:	b530      	push	{r4, r5, lr}
   15a0a:	4d13      	ldr	r5, [pc, #76]	; (15a58 <id_create.isra.0+0x50>)
   15a0c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15a10:	b085      	sub	sp, #20
   15a12:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15a14:	460c      	mov	r4, r1
   15a16:	b171      	cbz	r1, 15a36 <id_create.isra.0+0x2e>
   15a18:	2300      	movs	r3, #0
   15a1a:	4669      	mov	r1, sp
   15a1c:	4620      	mov	r0, r4
   15a1e:	9300      	str	r3, [sp, #0]
   15a20:	f8cd 3003 	str.w	r3, [sp, #3]
   15a24:	f008 fbe8 	bl	1e1f8 <bt_addr_le_cmp>
   15a28:	b128      	cbz	r0, 15a36 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   15a2a:	4621      	mov	r1, r4
   15a2c:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15a2e:	f008 fbe0 	bl	1e1f2 <bt_addr_le_copy>
}
   15a32:	b005      	add	sp, #20
   15a34:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   15a36:	a802      	add	r0, sp, #8
   15a38:	f008 fba6 	bl	1e188 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   15a3c:	a802      	add	r0, sp, #8
   15a3e:	f7ff fcf1 	bl	15424 <id_find>
   15a42:	2800      	cmp	r0, #0
   15a44:	daf7      	bge.n	15a36 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   15a46:	a902      	add	r1, sp, #8
   15a48:	4628      	mov	r0, r5
   15a4a:	f008 fbd2 	bl	1e1f2 <bt_addr_le_copy>
		if (addr) {
   15a4e:	2c00      	cmp	r4, #0
   15a50:	d0ef      	beq.n	15a32 <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15a52:	4629      	mov	r1, r5
   15a54:	4620      	mov	r0, r4
   15a56:	e7ea      	b.n	15a2e <id_create.isra.0+0x26>
   15a58:	200003c8 	.word	0x200003c8

00015a5c <hci_num_completed_packets>:
{
   15a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a60:	4d3d      	ldr	r5, [pc, #244]	; (15b58 <hci_num_completed_packets+0xfc>)
   15a62:	4b3e      	ldr	r3, [pc, #248]	; (15b5c <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   15a64:	f8d0 8008 	ldr.w	r8, [r0, #8]
		k_queue_append(&work_q->queue, work);
   15a68:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 15b68 <hci_num_completed_packets+0x10c>
   15a6c:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   15a6e:	2600      	movs	r6, #0
   15a70:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   15a72:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   15a74:	f898 3000 	ldrb.w	r3, [r8]
   15a78:	429e      	cmp	r6, r3
   15a7a:	db01      	blt.n	15a80 <hci_num_completed_packets+0x24>
}
   15a7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   15a80:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   15a84:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   15a88:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   15a8c:	4658      	mov	r0, fp
   15a8e:	f001 ffd1 	bl	17a34 <bt_conn_lookup_handle>
		if (!conn) {
   15a92:	4604      	mov	r4, r0
   15a94:	b1d8      	cbz	r0, 15ace <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   15a96:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   15a9a:	2f00      	cmp	r7, #0
   15a9c:	d033      	beq.n	15b06 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   15a9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15aa2:	f3ef 8211 	mrs	r2, BASEPRI
   15aa6:	f383 8811 	msr	BASEPRI, r3
   15aaa:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   15aae:	69e3      	ldr	r3, [r4, #28]
   15ab0:	b1b3      	cbz	r3, 15ae0 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   15ab2:	3b01      	subs	r3, #1
   15ab4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15ab6:	f382 8811 	msr	BASEPRI, r2
   15aba:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   15abe:	4620      	mov	r0, r4
   15ac0:	f001 fdda 	bl	17678 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   15ac4:	3f01      	subs	r7, #1
   15ac6:	f006 fbd5 	bl	1c274 <z_impl_k_sem_give>
   15aca:	b2bf      	uxth	r7, r7
   15acc:	e7e5      	b.n	15a9a <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   15ace:	01aa      	lsls	r2, r5, #6
   15ad0:	4823      	ldr	r0, [pc, #140]	; (15b60 <hci_num_completed_packets+0x104>)
   15ad2:	f042 0201 	orr.w	r2, r2, #1
   15ad6:	4659      	mov	r1, fp
   15ad8:	f007 fc9c 	bl	1d414 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   15adc:	3601      	adds	r6, #1
   15ade:	e7c9      	b.n	15a74 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   15ae0:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   15ae2:	b12b      	cbz	r3, 15af0 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15ae4:	69a1      	ldr	r1, [r4, #24]
   15ae6:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   15ae8:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15aea:	428b      	cmp	r3, r1
	list->tail = node;
   15aec:	bf08      	it	eq
   15aee:	61a0      	streq	r0, [r4, #24]
   15af0:	f382 8811 	msr	BASEPRI, r2
   15af4:	f3bf 8f6f 	isb	sy
			if (!node) {
   15af8:	b94b      	cbnz	r3, 15b0e <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   15afa:	01a9      	lsls	r1, r5, #6
   15afc:	4819      	ldr	r0, [pc, #100]	; (15b64 <hci_num_completed_packets+0x108>)
   15afe:	f041 0101 	orr.w	r1, r1, #1
   15b02:	f007 fc7a 	bl	1d3fa <log_0>
		bt_conn_unref(conn);
   15b06:	4620      	mov	r0, r4
   15b08:	f008 fcf5 	bl	1e4f6 <bt_conn_unref>
   15b0c:	e7e6      	b.n	15adc <hci_num_completed_packets+0x80>
	__asm__ volatile(
   15b0e:	f04f 0240 	mov.w	r2, #64	; 0x40
   15b12:	f3ef 8111 	mrs	r1, BASEPRI
   15b16:	f382 8811 	msr	BASEPRI, r2
   15b1a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   15b1e:	68da      	ldr	r2, [r3, #12]
   15b20:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   15b22:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   15b26:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   15b28:	f8c3 900c 	str.w	r9, [r3, #12]
   15b2c:	b98a      	cbnz	r2, 15b52 <hci_num_completed_packets+0xf6>
	list->head = node;
   15b2e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   15b32:	f381 8811 	msr	BASEPRI, r1
   15b36:	f3bf 8f6f 	isb	sy
   15b3a:	2101      	movs	r1, #1
   15b3c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15b40:	f008 fb5d 	bl	1e1fe <atomic_or>
   15b44:	07c3      	lsls	r3, r0, #31
   15b46:	d4ba      	bmi.n	15abe <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
   15b48:	4659      	mov	r1, fp
   15b4a:	4650      	mov	r0, sl
   15b4c:	f009 fefb 	bl	1f946 <k_queue_append>
   15b50:	e7b5      	b.n	15abe <hci_num_completed_packets+0x62>
	parent->next = child;
   15b52:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15b54:	6263      	str	r3, [r4, #36]	; 0x24
}
   15b56:	e7ec      	b.n	15b32 <hci_num_completed_packets+0xd6>
   15b58:	00020328 	.word	0x00020328
   15b5c:	00020308 	.word	0x00020308
   15b60:	000214f8 	.word	0x000214f8
   15b64:	00021514 	.word	0x00021514
   15b68:	200022f0 	.word	0x200022f0

00015b6c <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   15b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15b6e:	4b28      	ldr	r3, [pc, #160]	; (15c10 <le_adv_start_add_conn+0xa4>)
   15b70:	b085      	sub	sp, #20
   15b72:	4605      	mov	r5, r0
   15b74:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
   15b76:	7801      	ldrb	r1, [r0, #0]
   15b78:	f103 0028 	add.w	r0, r3, #40	; 0x28
   15b7c:	f008 fb33 	bl	1e1e6 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   15b80:	f010 0f40 	tst.w	r0, #64	; 0x40
   15b84:	461a      	mov	r2, r3
   15b86:	d008      	beq.n	15b9a <le_adv_start_add_conn+0x2e>
   15b88:	f103 0028 	add.w	r0, r3, #40	; 0x28
   15b8c:	f008 fb2b 	bl	1e1e6 <atomic_get>
   15b90:	05c0      	lsls	r0, r0, #23
   15b92:	d502      	bpl.n	15b9a <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   15b94:	7e1b      	ldrb	r3, [r3, #24]
   15b96:	428b      	cmp	r3, r1
   15b98:	d131      	bne.n	15bfe <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
   15b9a:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15b9c:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
   15b9e:	f816 3b09 	ldrb.w	r3, [r6], #9
   15ba2:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15ba6:	4630      	mov	r0, r6
   15ba8:	2300      	movs	r3, #0
   15baa:	9300      	str	r3, [sp, #0]
   15bac:	f8cd 3003 	str.w	r3, [sp, #3]
   15bb0:	f008 fb22 	bl	1e1f8 <bt_addr_le_cmp>
   15bb4:	4604      	mov	r4, r0
   15bb6:	7828      	ldrb	r0, [r5, #0]
   15bb8:	b164      	cbz	r4, 15bd4 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   15bba:	4631      	mov	r1, r6
   15bbc:	f002 f850 	bl	17c60 <bt_conn_exists_le>
   15bc0:	4604      	mov	r4, r0
   15bc2:	b9f8      	cbnz	r0, 15c04 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   15bc4:	7828      	ldrb	r0, [r5, #0]
   15bc6:	4631      	mov	r1, r6
   15bc8:	f001 ff08 	bl	179dc <bt_conn_add_le>
	if (!conn) {
   15bcc:	4605      	mov	r5, r0
   15bce:	b1e0      	cbz	r0, 15c0a <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   15bd0:	2105      	movs	r1, #5
   15bd2:	e00e      	b.n	15bf2 <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   15bd4:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   15bd8:	9302      	str	r3, [sp, #8]
   15bda:	a902      	add	r1, sp, #8
   15bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15be0:	f8ad 300c 	strh.w	r3, [sp, #12]
   15be4:	f88d 300e 	strb.w	r3, [sp, #14]
   15be8:	f001 fef8 	bl	179dc <bt_conn_add_le>
		if (!conn) {
   15bec:	4605      	mov	r5, r0
   15bee:	b160      	cbz	r0, 15c0a <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   15bf0:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   15bf2:	f001 ff2b 	bl	17a4c <bt_conn_set_state>
	*out_conn = conn;
   15bf6:	603d      	str	r5, [r7, #0]
	return 0;
}
   15bf8:	4620      	mov	r0, r4
   15bfa:	b005      	add	sp, #20
   15bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
   15bfe:	f06f 0422 	mvn.w	r4, #34	; 0x22
   15c02:	e7f9      	b.n	15bf8 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
   15c04:	f06f 0415 	mvn.w	r4, #21
   15c08:	e7f6      	b.n	15bf8 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
   15c0a:	f06f 040b 	mvn.w	r4, #11
   15c0e:	e7f3      	b.n	15bf8 <le_adv_start_add_conn+0x8c>
   15c10:	200003c8 	.word	0x200003c8

00015c14 <hci_cmd_status>:
{
   15c14:	b538      	push	{r3, r4, r5, lr}
   15c16:	2104      	movs	r1, #4
   15c18:	4604      	mov	r4, r0
   15c1a:	3008      	adds	r0, #8
   15c1c:	f009 fc32 	bl	1f484 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   15c20:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   15c22:	7801      	ldrb	r1, [r0, #0]
   15c24:	8840      	ldrh	r0, [r0, #2]
   15c26:	4622      	mov	r2, r4
   15c28:	f7ff fd5c 	bl	156e4 <hci_cmd_done>
	if (ncmd) {
   15c2c:	b125      	cbz	r5, 15c38 <hci_cmd_status+0x24>
   15c2e:	4803      	ldr	r0, [pc, #12]	; (15c3c <hci_cmd_status+0x28>)
}
   15c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15c34:	f006 bb1e 	b.w	1c274 <z_impl_k_sem_give>
   15c38:	bd38      	pop	{r3, r4, r5, pc}
   15c3a:	bf00      	nop
   15c3c:	200004a8 	.word	0x200004a8

00015c40 <hci_cmd_complete>:
{
   15c40:	b538      	push	{r3, r4, r5, lr}
   15c42:	2103      	movs	r1, #3
   15c44:	4604      	mov	r4, r0
   15c46:	3008      	adds	r0, #8
   15c48:	f009 fc1c 	bl	1f484 <net_buf_simple_pull_mem>
	status = buf->data[0];
   15c4c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   15c4e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   15c50:	7819      	ldrb	r1, [r3, #0]
   15c52:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   15c56:	4622      	mov	r2, r4
   15c58:	f7ff fd44 	bl	156e4 <hci_cmd_done>
	if (ncmd) {
   15c5c:	b125      	cbz	r5, 15c68 <hci_cmd_complete+0x28>
   15c5e:	4803      	ldr	r0, [pc, #12]	; (15c6c <hci_cmd_complete+0x2c>)
}
   15c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15c64:	f006 bb06 	b.w	1c274 <z_impl_k_sem_give>
   15c68:	bd38      	pop	{r3, r4, r5, pc}
   15c6a:	bf00      	nop
   15c6c:	200004a8 	.word	0x200004a8

00015c70 <bt_hci_cmd_create>:
{
   15c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   15c74:	f04f 32ff 	mov.w	r2, #4294967295
   15c78:	f04f 33ff 	mov.w	r3, #4294967295
   15c7c:	4605      	mov	r5, r0
   15c7e:	4816      	ldr	r0, [pc, #88]	; (15cd8 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   15c80:	f8df 8058 	ldr.w	r8, [pc, #88]	; 15cdc <bt_hci_cmd_create+0x6c>
{
   15c84:	460e      	mov	r6, r1
   15c86:	f009 fb80 	bl	1f38a <net_buf_alloc_fixed>
   15c8a:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   15c8c:	f100 0b08 	add.w	fp, r0, #8
   15c90:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15c92:	2700      	movs	r7, #0
   15c94:	4658      	mov	r0, fp
   15c96:	f009 fb97 	bl	1f3c8 <net_buf_simple_reserve>
   15c9a:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   15c9c:	4620      	mov	r0, r4
   15c9e:	f004 f8bd 	bl	19e1c <net_buf_id>
   15ca2:	f04f 0a0c 	mov.w	sl, #12
   15ca6:	fb0a 8000 	mla	r0, sl, r0, r8
   15caa:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   15cac:	4620      	mov	r0, r4
   15cae:	f004 f8b5 	bl	19e1c <net_buf_id>
   15cb2:	fb0a 8000 	mla	r0, sl, r0, r8
   15cb6:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   15cb8:	4620      	mov	r0, r4
   15cba:	f004 f8af 	bl	19e1c <net_buf_id>
   15cbe:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   15cc2:	2103      	movs	r1, #3
   15cc4:	6047      	str	r7, [r0, #4]
   15cc6:	4658      	mov	r0, fp
   15cc8:	f009 fbb5 	bl	1f436 <net_buf_simple_add>
	hdr->param_len = param_len;
   15ccc:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   15cce:	8005      	strh	r5, [r0, #0]
}
   15cd0:	4620      	mov	r0, r4
   15cd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd6:	bf00      	nop
   15cd8:	20000858 	.word	0x20000858
   15cdc:	2000254c 	.word	0x2000254c

00015ce0 <bt_hci_cmd_send_sync>:
{
   15ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ce4:	4607      	mov	r7, r0
   15ce6:	b086      	sub	sp, #24
   15ce8:	4615      	mov	r5, r2
	if (!buf) {
   15cea:	460c      	mov	r4, r1
   15cec:	b921      	cbnz	r1, 15cf8 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   15cee:	f7ff ffbf 	bl	15c70 <bt_hci_cmd_create>
		if (!buf) {
   15cf2:	4604      	mov	r4, r0
   15cf4:	2800      	cmp	r0, #0
   15cf6:	d055      	beq.n	15da4 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15cf8:	2201      	movs	r2, #1
   15cfa:	2100      	movs	r1, #0
   15cfc:	4668      	mov	r0, sp
   15cfe:	f009 ff6e 	bl	1fbde <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   15d02:	4620      	mov	r0, r4
   15d04:	f004 f88a 	bl	19e1c <net_buf_id>
   15d08:	4e28      	ldr	r6, [pc, #160]	; (15dac <bt_hci_cmd_send_sync+0xcc>)
   15d0a:	230c      	movs	r3, #12
   15d0c:	fb03 6000 	mla	r0, r3, r0, r6
   15d10:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   15d14:	4620      	mov	r0, r4
   15d16:	f009 fb68 	bl	1f3ea <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   15d1a:	4825      	ldr	r0, [pc, #148]	; (15db0 <bt_hci_cmd_send_sync+0xd0>)
   15d1c:	4621      	mov	r1, r4
   15d1e:	f009 fb57 	bl	1f3d0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   15d22:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   15d26:	2300      	movs	r3, #0
   15d28:	4668      	mov	r0, sp
   15d2a:	f006 fac9 	bl	1c2c0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   15d2e:	4680      	mov	r8, r0
   15d30:	b180      	cbz	r0, 15d54 <bt_hci_cmd_send_sync+0x74>
   15d32:	4a20      	ldr	r2, [pc, #128]	; (15db4 <bt_hci_cmd_send_sync+0xd4>)
   15d34:	4920      	ldr	r1, [pc, #128]	; (15db8 <bt_hci_cmd_send_sync+0xd8>)
   15d36:	4821      	ldr	r0, [pc, #132]	; (15dbc <bt_hci_cmd_send_sync+0xdc>)
   15d38:	f240 134d 	movw	r3, #333	; 0x14d
   15d3c:	f006 ff34 	bl	1cba8 <printk>
   15d40:	481f      	ldr	r0, [pc, #124]	; (15dc0 <bt_hci_cmd_send_sync+0xe0>)
   15d42:	4641      	mov	r1, r8
   15d44:	f006 ff30 	bl	1cba8 <printk>
   15d48:	4040      	eors	r0, r0
   15d4a:	f380 8811 	msr	BASEPRI, r0
   15d4e:	f04f 0003 	mov.w	r0, #3
   15d52:	df02      	svc	2
	status = cmd(buf)->status;
   15d54:	4620      	mov	r0, r4
   15d56:	f004 f861 	bl	19e1c <net_buf_id>
   15d5a:	230c      	movs	r3, #12
   15d5c:	4343      	muls	r3, r0
   15d5e:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   15d60:	b1be      	cbz	r6, 15d92 <bt_hci_cmd_send_sync+0xb2>
   15d62:	4a18      	ldr	r2, [pc, #96]	; (15dc4 <bt_hci_cmd_send_sync+0xe4>)
   15d64:	4b18      	ldr	r3, [pc, #96]	; (15dc8 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   15d66:	4819      	ldr	r0, [pc, #100]	; (15dcc <bt_hci_cmd_send_sync+0xec>)
   15d68:	1a9b      	subs	r3, r3, r2
   15d6a:	08db      	lsrs	r3, r3, #3
   15d6c:	019b      	lsls	r3, r3, #6
   15d6e:	f043 0302 	orr.w	r3, r3, #2
   15d72:	4632      	mov	r2, r6
   15d74:	4639      	mov	r1, r7
   15d76:	f007 fb61 	bl	1d43c <log_2>
		net_buf_unref(buf);
   15d7a:	4620      	mov	r0, r4
   15d7c:	f004 f902 	bl	19f84 <net_buf_unref>
			return -EIO;
   15d80:	2e09      	cmp	r6, #9
   15d82:	bf0c      	ite	eq
   15d84:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
   15d88:	f06f 0004 	mvnne.w	r0, #4
}
   15d8c:	b006      	add	sp, #24
   15d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   15d92:	b115      	cbz	r5, 15d9a <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   15d94:	602c      	str	r4, [r5, #0]
	return 0;
   15d96:	4630      	mov	r0, r6
   15d98:	e7f8      	b.n	15d8c <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   15d9a:	4620      	mov	r0, r4
   15d9c:	f004 f8f2 	bl	19f84 <net_buf_unref>
	return 0;
   15da0:	4628      	mov	r0, r5
   15da2:	e7f3      	b.n	15d8c <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   15da4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   15da8:	e7f0      	b.n	15d8c <bt_hci_cmd_send_sync+0xac>
   15daa:	bf00      	nop
   15dac:	2000254c 	.word	0x2000254c
   15db0:	200004dc 	.word	0x200004dc
   15db4:	00021406 	.word	0x00021406
   15db8:	0002152b 	.word	0x0002152b
   15dbc:	00021453 	.word	0x00021453
   15dc0:	00021534 	.word	0x00021534
   15dc4:	00020308 	.word	0x00020308
   15dc8:	00020328 	.word	0x00020328
   15dcc:	00021554 	.word	0x00021554

00015dd0 <hci_le_read_max_data_len>:
{
   15dd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15dd2:	4606      	mov	r6, r0
   15dd4:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15dd6:	aa01      	add	r2, sp, #4
   15dd8:	2100      	movs	r1, #0
   15dda:	f242 002f 	movw	r0, #8239	; 0x202f
   15dde:	f7ff ff7f 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   15de2:	4604      	mov	r4, r0
   15de4:	b160      	cbz	r0, 15e00 <hci_le_read_max_data_len+0x30>
   15de6:	490c      	ldr	r1, [pc, #48]	; (15e18 <hci_le_read_max_data_len+0x48>)
   15de8:	4b0c      	ldr	r3, [pc, #48]	; (15e1c <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   15dea:	480d      	ldr	r0, [pc, #52]	; (15e20 <hci_le_read_max_data_len+0x50>)
   15dec:	1ac9      	subs	r1, r1, r3
   15dee:	08c9      	lsrs	r1, r1, #3
   15df0:	0189      	lsls	r1, r1, #6
   15df2:	f041 0101 	orr.w	r1, r1, #1
   15df6:	f007 fb00 	bl	1d3fa <log_0>
}
   15dfa:	4620      	mov	r0, r4
   15dfc:	b002      	add	sp, #8
   15dfe:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15e00:	9801      	ldr	r0, [sp, #4]
   15e02:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15e04:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15e08:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15e0a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   15e0e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   15e10:	f004 f8b8 	bl	19f84 <net_buf_unref>
	return 0;
   15e14:	e7f1      	b.n	15dfa <hci_le_read_max_data_len+0x2a>
   15e16:	bf00      	nop
   15e18:	00020328 	.word	0x00020328
   15e1c:	00020308 	.word	0x00020308
   15e20:	00021570 	.word	0x00021570

00015e24 <set_random_address>:
{
   15e24:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
   15e26:	4e15      	ldr	r6, [pc, #84]	; (15e7c <set_random_address+0x58>)
   15e28:	2206      	movs	r2, #6
   15e2a:	f106 012d 	add.w	r1, r6, #45	; 0x2d
   15e2e:	4605      	mov	r5, r0
   15e30:	f008 f8e2 	bl	1dff8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15e34:	4604      	mov	r4, r0
   15e36:	b1e0      	cbz	r0, 15e72 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   15e38:	2106      	movs	r1, #6
   15e3a:	f242 0005 	movw	r0, #8197	; 0x2005
   15e3e:	f7ff ff17 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   15e42:	4604      	mov	r4, r0
   15e44:	b1b8      	cbz	r0, 15e76 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15e46:	2206      	movs	r2, #6
   15e48:	4629      	mov	r1, r5
   15e4a:	3008      	adds	r0, #8
   15e4c:	f009 faf9 	bl	1f442 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   15e50:	4621      	mov	r1, r4
   15e52:	2200      	movs	r2, #0
   15e54:	f242 0005 	movw	r0, #8197	; 0x2005
   15e58:	f7ff ff42 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   15e5c:	4604      	mov	r4, r0
   15e5e:	b940      	cbnz	r0, 15e72 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
   15e60:	2206      	movs	r2, #6
   15e62:	4629      	mov	r1, r5
   15e64:	f106 002d 	add.w	r0, r6, #45	; 0x2d
   15e68:	f008 f8d6 	bl	1e018 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   15e6c:	2301      	movs	r3, #1
   15e6e:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
   15e72:	4620      	mov	r0, r4
   15e74:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   15e76:	f06f 0436 	mvn.w	r4, #54	; 0x36
   15e7a:	e7fa      	b.n	15e72 <set_random_address+0x4e>
   15e7c:	200003c8 	.word	0x200003c8

00015e80 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   15e80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15e84:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   15e86:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   15e8a:	460e      	mov	r6, r1
   15e8c:	4690      	mov	r8, r2
   15e8e:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   15e90:	d027      	beq.n	15ee2 <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   15e92:	4f27      	ldr	r7, [pc, #156]	; (15f30 <le_adv_set_random_addr.isra.0+0xb0>)
   15e94:	b12a      	cbz	r2, 15ea2 <le_adv_set_random_addr.isra.0+0x22>
   15e96:	0688      	lsls	r0, r1, #26
   15e98:	d503      	bpl.n	15ea2 <le_adv_set_random_addr.isra.0+0x22>
   15e9a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   15e9e:	0659      	lsls	r1, r3, #25
   15ea0:	d542      	bpl.n	15f28 <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15ea2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   15ea6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   15eaa:	5cfb      	ldrb	r3, [r7, r3]
   15eac:	2b01      	cmp	r3, #1
   15eae:	d008      	beq.n	15ec2 <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
   15eb0:	eba9 0404 	sub.w	r4, r9, r4
   15eb4:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15eb6:	f1b8 0f00 	cmp.w	r8, #0
   15eba:	d10d      	bne.n	15ed8 <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   15ebc:	702b      	strb	r3, [r5, #0]
	return 0;
   15ebe:	2000      	movs	r0, #0
   15ec0:	e007      	b.n	15ed2 <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
   15ec2:	2007      	movs	r0, #7
   15ec4:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   15ec8:	4438      	add	r0, r7
   15eca:	f7ff ffab 	bl	15e24 <set_random_address>
				if (err) {
   15ece:	2800      	cmp	r0, #0
   15ed0:	d0ee      	beq.n	15eb0 <le_adv_set_random_addr.isra.0+0x30>
}
   15ed2:	b003      	add	sp, #12
   15ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15ed8:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   15eda:	bf48      	it	mi
   15edc:	f043 0302 	orrmi.w	r3, r3, #2
   15ee0:	e7ec      	b.n	15ebc <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   15ee2:	074b      	lsls	r3, r1, #29
   15ee4:	d510      	bpl.n	15f08 <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15ee6:	4e12      	ldr	r6, [pc, #72]	; (15f30 <le_adv_set_random_addr.isra.0+0xb0>)
   15ee8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   15eec:	00e7      	lsls	r7, r4, #3
   15eee:	5cf3      	ldrb	r3, [r6, r3]
   15ef0:	2b01      	cmp	r3, #1
   15ef2:	d105      	bne.n	15f00 <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
   15ef4:	2007      	movs	r0, #7
   15ef6:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   15efa:	4430      	add	r0, r6
   15efc:	f7ff ff92 	bl	15e24 <set_random_address>
			*own_addr_type = id_addr->type;
   15f00:	1b3c      	subs	r4, r7, r4
   15f02:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   15f04:	702b      	strb	r3, [r5, #0]
		if (err) {
   15f06:	e7e4      	b.n	15ed2 <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   15f08:	2106      	movs	r1, #6
   15f0a:	4668      	mov	r0, sp
   15f0c:	f005 f8de 	bl	1b0cc <bt_rand>
	if (err) {
   15f10:	b940      	cbnz	r0, 15f24 <le_adv_set_random_addr.isra.0+0xa4>
	BT_ADDR_SET_NRPA(&nrpa);
   15f12:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   15f16:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   15f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15f1c:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   15f20:	f7ff ff80 	bl	15e24 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   15f24:	2301      	movs	r3, #1
   15f26:	e7ed      	b.n	15f04 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
   15f28:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15f2c:	e7d1      	b.n	15ed2 <le_adv_set_random_addr.isra.0+0x52>
   15f2e:	bf00      	nop
   15f30:	200003c8 	.word	0x200003c8

00015f34 <hci_set_ad>:
{
   15f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f38:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15f3a:	2120      	movs	r1, #32
{
   15f3c:	4682      	mov	sl, r0
   15f3e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15f40:	f7ff fe96 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   15f44:	4606      	mov	r6, r0
   15f46:	2800      	cmp	r0, #0
   15f48:	d05c      	beq.n	16004 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   15f4a:	2120      	movs	r1, #32
   15f4c:	3008      	adds	r0, #8
   15f4e:	f009 fa72 	bl	1f436 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   15f52:	2220      	movs	r2, #32
   15f54:	2100      	movs	r1, #0
   15f56:	4681      	mov	r9, r0
   15f58:	f008 f889 	bl	1e06e <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   15f5c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   15f60:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   15f64:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   15f66:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   15f68:	f8d4 8000 	ldr.w	r8, [r4]
   15f6c:	2300      	movs	r3, #0
   15f6e:	6862      	ldr	r2, [r4, #4]
   15f70:	4293      	cmp	r3, r2
   15f72:	d30d      	bcc.n	15f90 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   15f74:	9b00      	ldr	r3, [sp, #0]
   15f76:	3408      	adds	r4, #8
   15f78:	429c      	cmp	r4, r3
   15f7a:	d1f5      	bne.n	15f68 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15f7c:	2200      	movs	r2, #0
   15f7e:	4631      	mov	r1, r6
   15f80:	4650      	mov	r0, sl
	*data_len = set_data_len;
   15f82:	f889 5000 	strb.w	r5, [r9]
}
   15f86:	b003      	add	sp, #12
   15f88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15f8c:	f7ff bea8 	b.w	15ce0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   15f90:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   15f94:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   15f98:	1ca8      	adds	r0, r5, #2
   15f9a:	1881      	adds	r1, r0, r2
   15f9c:	291f      	cmp	r1, #31
   15f9e:	d91a      	bls.n	15fd6 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   15fa0:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   15fa4:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   15fa8:	d101      	bne.n	15fae <hci_set_ad+0x7a>
   15faa:	2a00      	cmp	r2, #0
   15fac:	dc11      	bgt.n	15fd2 <hci_set_ad+0x9e>
   15fae:	4b17      	ldr	r3, [pc, #92]	; (1600c <hci_set_ad+0xd8>)
   15fb0:	4917      	ldr	r1, [pc, #92]	; (16010 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   15fb2:	4818      	ldr	r0, [pc, #96]	; (16014 <hci_set_ad+0xe0>)
   15fb4:	1ac9      	subs	r1, r1, r3
   15fb6:	08c9      	lsrs	r1, r1, #3
   15fb8:	0189      	lsls	r1, r1, #6
   15fba:	f041 0101 	orr.w	r1, r1, #1
   15fbe:	f007 fa1c 	bl	1d3fa <log_0>
		net_buf_unref(buf);
   15fc2:	4630      	mov	r0, r6
   15fc4:	f003 ffde 	bl	19f84 <net_buf_unref>
					return -EINVAL;
   15fc8:	f06f 0015 	mvn.w	r0, #21
}
   15fcc:	b003      	add	sp, #12
   15fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   15fd2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   15fd6:	b2d7      	uxtb	r7, r2
   15fd8:	1c79      	adds	r1, r7, #1
   15fda:	f80b 1005 	strb.w	r1, [fp, r5]
   15fde:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   15fe0:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   15fe2:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   15fe6:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   15fea:	f8d8 1004 	ldr.w	r1, [r8, #4]
   15fee:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   15ff0:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   15ff2:	f008 f811 	bl	1e018 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   15ff6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   15ff8:	443d      	add	r5, r7
   15ffa:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   15ffc:	3301      	adds	r3, #1
   15ffe:	f108 0808 	add.w	r8, r8, #8
   16002:	e7b4      	b.n	15f6e <hci_set_ad+0x3a>
		return -ENOBUFS;
   16004:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16008:	e7e0      	b.n	15fcc <hci_set_ad+0x98>
   1600a:	bf00      	nop
   1600c:	00020308 	.word	0x00020308
   16010:	00020328 	.word	0x00020328
   16014:	00021590 	.word	0x00021590

00016018 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   16018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1601c:	b087      	sub	sp, #28
   1601e:	4606      	mov	r6, r0
   16020:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   16024:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   16028:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1602c:	460c      	mov	r4, r1
   1602e:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   16030:	2100      	movs	r1, #0
   16032:	2210      	movs	r2, #16
   16034:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   16036:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
   16038:	f008 f819 	bl	1e06e <memset>
	if (use_name) {
   1603c:	f1b8 0f00 	cmp.w	r8, #0
   16040:	d00e      	beq.n	16060 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
   16042:	bbb4      	cbnz	r4, 160b2 <le_adv_update.constprop.0+0x9a>
   16044:	2d00      	cmp	r5, #0
   16046:	d13f      	bne.n	160c8 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
   16048:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 160fc <le_adv_update.constprop.0+0xe4>
   1604c:	4658      	mov	r0, fp
   1604e:	f007 ffb7 	bl	1dfc0 <strlen>
   16052:	2309      	movs	r3, #9
   16054:	f88d 3000 	strb.w	r3, [sp]
   16058:	f88d 0001 	strb.w	r0, [sp, #1]
   1605c:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   16060:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   16064:	f1b8 0f00 	cmp.w	r8, #0
   16068:	d030      	beq.n	160cc <le_adv_update.constprop.0+0xb4>
   1606a:	f1ba 0f00 	cmp.w	sl, #0
   1606e:	d12d      	bne.n	160cc <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
   16070:	2301      	movs	r3, #1
			d[1].data = &data;
   16072:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   16076:	9305      	str	r3, [sp, #20]
			d_len = 2;
   16078:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1607a:	a902      	add	r1, sp, #8
   1607c:	f242 0008 	movw	r0, #8200	; 0x2008
   16080:	f7ff ff58 	bl	15f34 <hci_set_ad>
		if (err) {
   16084:	4604      	mov	r4, r0
   16086:	b938      	cbnz	r0, 16098 <le_adv_update.constprop.0+0x80>
	if (scannable) {
   16088:	f1ba 0f00 	cmp.w	sl, #0
   1608c:	d120      	bne.n	160d0 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1608e:	2104      	movs	r1, #4
   16090:	f106 0010 	add.w	r0, r6, #16
   16094:	f008 f8b3 	bl	1e1fe <atomic_or>
}
   16098:	4620      	mov	r0, r4
   1609a:	b007      	add	sp, #28
   1609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   160a0:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   160a4:	3a08      	subs	r2, #8
   160a6:	2a01      	cmp	r2, #1
   160a8:	d925      	bls.n	160f6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   160aa:	3301      	adds	r3, #1
   160ac:	429f      	cmp	r7, r3
   160ae:	d1f7      	bne.n	160a0 <le_adv_update.constprop.0+0x88>
   160b0:	e7c8      	b.n	16044 <le_adv_update.constprop.0+0x2c>
   160b2:	2300      	movs	r3, #0
   160b4:	e7fa      	b.n	160ac <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   160b6:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   160ba:	3a08      	subs	r2, #8
   160bc:	2a01      	cmp	r2, #1
   160be:	d91a      	bls.n	160f6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   160c0:	3301      	adds	r3, #1
   160c2:	4599      	cmp	r9, r3
   160c4:	d1f7      	bne.n	160b6 <le_adv_update.constprop.0+0x9e>
   160c6:	e7bf      	b.n	16048 <le_adv_update.constprop.0+0x30>
   160c8:	2300      	movs	r3, #0
   160ca:	e7fa      	b.n	160c2 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
   160cc:	2201      	movs	r2, #1
   160ce:	e7d4      	b.n	1607a <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
   160d0:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
   160d4:	2201      	movs	r2, #1
   160d6:	f1b8 0f00 	cmp.w	r8, #0
   160da:	d003      	beq.n	160e4 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
   160dc:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   160de:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   160e2:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   160e4:	a902      	add	r1, sp, #8
   160e6:	f242 0009 	movw	r0, #8201	; 0x2009
   160ea:	f7ff ff23 	bl	15f34 <hci_set_ad>
		if (err) {
   160ee:	2800      	cmp	r0, #0
   160f0:	d0cd      	beq.n	1608e <le_adv_update.constprop.0+0x76>
   160f2:	4604      	mov	r4, r0
   160f4:	e7d0      	b.n	16098 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
   160f6:	f06f 0415 	mvn.w	r4, #21
   160fa:	e7cd      	b.n	16098 <le_adv_update.constprop.0+0x80>
   160fc:	00020aeb 	.word	0x00020aeb

00016100 <set_le_adv_enable_legacy>:
{
   16100:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   16102:	4606      	mov	r6, r0
   16104:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   16106:	f242 000a 	movw	r0, #8202	; 0x200a
   1610a:	2101      	movs	r1, #1
   1610c:	f7ff fdb0 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   16110:	4604      	mov	r4, r0
   16112:	b1e8      	cbz	r0, 16150 <set_le_adv_enable_legacy+0x50>
	if (enable) {
   16114:	3008      	adds	r0, #8
   16116:	b1cd      	cbz	r5, 1614c <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
   16118:	2101      	movs	r1, #1
   1611a:	f009 f99b 	bl	1f454 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
   1611e:	3610      	adds	r6, #16
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
   16120:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
   16122:	4620      	mov	r0, r4
   16124:	9302      	str	r3, [sp, #8]
	state->target = target;
   16126:	9601      	str	r6, [sp, #4]
	state->val = val;
   16128:	f88d 500c 	strb.w	r5, [sp, #12]
   1612c:	f003 fe76 	bl	19e1c <net_buf_id>
   16130:	4b09      	ldr	r3, [pc, #36]	; (16158 <set_le_adv_enable_legacy+0x58>)
   16132:	220c      	movs	r2, #12
   16134:	fb02 3000 	mla	r0, r2, r0, r3
   16138:	ab01      	add	r3, sp, #4
   1613a:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1613c:	2200      	movs	r2, #0
   1613e:	4621      	mov	r1, r4
   16140:	f242 000a 	movw	r0, #8202	; 0x200a
   16144:	f7ff fdcc 	bl	15ce0 <bt_hci_cmd_send_sync>
}
   16148:	b004      	add	sp, #16
   1614a:	bd70      	pop	{r4, r5, r6, pc}
   1614c:	4629      	mov	r1, r5
   1614e:	e7e4      	b.n	1611a <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
   16150:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16154:	e7f8      	b.n	16148 <set_le_adv_enable_legacy+0x48>
   16156:	bf00      	nop
   16158:	2000254c 	.word	0x2000254c

0001615c <bt_send>:
	return bt_dev.drv->send(buf);
   1615c:	4b02      	ldr	r3, [pc, #8]	; (16168 <bt_send+0xc>)
   1615e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   16162:	691b      	ldr	r3, [r3, #16]
   16164:	4718      	bx	r3
   16166:	bf00      	nop
   16168:	200003c8 	.word	0x200003c8

0001616c <bt_hci_cmd_send>:
{
   1616c:	b538      	push	{r3, r4, r5, lr}
   1616e:	4605      	mov	r5, r0
	if (!buf) {
   16170:	460c      	mov	r4, r1
   16172:	b919      	cbnz	r1, 1617c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   16174:	f7ff fd7c 	bl	15c70 <bt_hci_cmd_create>
		if (!buf) {
   16178:	4604      	mov	r4, r0
   1617a:	b1f0      	cbz	r0, 161ba <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1617c:	f640 4335 	movw	r3, #3125	; 0xc35
   16180:	429d      	cmp	r5, r3
   16182:	d114      	bne.n	161ae <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
   16184:	4620      	mov	r0, r4
   16186:	f7ff ffe9 	bl	1615c <bt_send>
		if (err) {
   1618a:	4605      	mov	r5, r0
   1618c:	b168      	cbz	r0, 161aa <bt_hci_cmd_send+0x3e>
   1618e:	4b0c      	ldr	r3, [pc, #48]	; (161c0 <bt_hci_cmd_send+0x54>)
   16190:	4a0c      	ldr	r2, [pc, #48]	; (161c4 <bt_hci_cmd_send+0x58>)
   16192:	1ad2      	subs	r2, r2, r3
   16194:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   16196:	0192      	lsls	r2, r2, #6
   16198:	4601      	mov	r1, r0
   1619a:	f042 0201 	orr.w	r2, r2, #1
   1619e:	480a      	ldr	r0, [pc, #40]	; (161c8 <bt_hci_cmd_send+0x5c>)
   161a0:	f007 f938 	bl	1d414 <log_1>
			net_buf_unref(buf);
   161a4:	4620      	mov	r0, r4
   161a6:	f003 feed 	bl	19f84 <net_buf_unref>
}
   161aa:	4628      	mov	r0, r5
   161ac:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   161ae:	4807      	ldr	r0, [pc, #28]	; (161cc <bt_hci_cmd_send+0x60>)
   161b0:	4621      	mov	r1, r4
   161b2:	f009 f90d 	bl	1f3d0 <net_buf_put>
	return 0;
   161b6:	2500      	movs	r5, #0
   161b8:	e7f7      	b.n	161aa <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   161ba:	f06f 0536 	mvn.w	r5, #54	; 0x36
   161be:	e7f4      	b.n	161aa <bt_hci_cmd_send+0x3e>
   161c0:	00020308 	.word	0x00020308
   161c4:	00020328 	.word	0x00020328
   161c8:	000215a9 	.word	0x000215a9
   161cc:	200004dc 	.word	0x200004dc

000161d0 <conn_auto_initiate>:
{
   161d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   161d2:	7a83      	ldrb	r3, [r0, #10]
   161d4:	2b07      	cmp	r3, #7
{
   161d6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   161d8:	d11e      	bne.n	16218 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   161da:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   161dc:	4630      	mov	r0, r6
   161de:	f008 f802 	bl	1e1e6 <atomic_get>
   161e2:	0483      	lsls	r3, r0, #18
   161e4:	d41a      	bmi.n	1621c <conn_auto_initiate+0x4c>
   161e6:	78e3      	ldrb	r3, [r4, #3]
   161e8:	b123      	cbz	r3, 161f4 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   161ea:	4b31      	ldr	r3, [pc, #196]	; (162b0 <conn_auto_initiate+0xe0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   161ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   161f0:	071d      	lsls	r5, r3, #28
   161f2:	d513      	bpl.n	1621c <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   161f4:	2102      	movs	r1, #2
   161f6:	f242 0016 	movw	r0, #8214	; 0x2016
   161fa:	f7ff fd39 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   161fe:	4605      	mov	r5, r0
   16200:	b160      	cbz	r0, 1621c <conn_auto_initiate+0x4c>
	return net_buf_simple_add(&buf->b, len);
   16202:	2102      	movs	r1, #2
   16204:	3008      	adds	r0, #8
   16206:	f009 f916 	bl	1f436 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1620a:	8823      	ldrh	r3, [r4, #0]
   1620c:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   1620e:	4629      	mov	r1, r5
   16210:	f242 0016 	movw	r0, #8214	; 0x2016
   16214:	f7ff ffaa 	bl	1616c <bt_hci_cmd_send>
}
   16218:	b004      	add	sp, #16
   1621a:	bd70      	pop	{r4, r5, r6, pc}
   1621c:	4630      	mov	r0, r6
   1621e:	f007 ffe2 	bl	1e1e6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16222:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   16226:	4d22      	ldr	r5, [pc, #136]	; (162b0 <conn_auto_initiate+0xe0>)
   16228:	f3c0 3100 	ubfx	r1, r0, #12, #1
   1622c:	d11a      	bne.n	16264 <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   1622e:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
   16232:	07d8      	lsls	r0, r3, #31
   16234:	d516      	bpl.n	16264 <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16236:	2302      	movs	r3, #2
   16238:	9100      	str	r1, [sp, #0]
   1623a:	461a      	mov	r2, r3
   1623c:	4620      	mov	r0, r4
   1623e:	f008 f865 	bl	1e30c <bt_le_set_phy>
		if (!err) {
   16242:	4601      	mov	r1, r0
   16244:	b920      	cbnz	r0, 16250 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16246:	2180      	movs	r1, #128	; 0x80
   16248:	4630      	mov	r0, r6
   1624a:	f007 ffd8 	bl	1e1fe <atomic_or>
			return;
   1624e:	e7e3      	b.n	16218 <conn_auto_initiate+0x48>
   16250:	4a18      	ldr	r2, [pc, #96]	; (162b4 <conn_auto_initiate+0xe4>)
   16252:	4b19      	ldr	r3, [pc, #100]	; (162b8 <conn_auto_initiate+0xe8>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   16254:	4819      	ldr	r0, [pc, #100]	; (162bc <conn_auto_initiate+0xec>)
   16256:	1ad2      	subs	r2, r2, r3
   16258:	08d2      	lsrs	r2, r2, #3
   1625a:	0192      	lsls	r2, r2, #6
   1625c:	f042 0201 	orr.w	r2, r2, #1
   16260:	f007 f8d8 	bl	1d414 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16264:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
   16268:	069a      	lsls	r2, r3, #26
   1626a:	d5d5      	bpl.n	16218 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1626c:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
   16270:	689b      	ldr	r3, [r3, #8]
   16272:	079b      	lsls	r3, r3, #30
   16274:	d5d0      	bpl.n	16218 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16276:	f10d 010e 	add.w	r1, sp, #14
   1627a:	a803      	add	r0, sp, #12
   1627c:	f7ff fda8 	bl	15dd0 <hci_le_read_max_data_len>
			if (!err) {
   16280:	2800      	cmp	r0, #0
   16282:	d1c9      	bne.n	16218 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
   16284:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   16288:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1628c:	4620      	mov	r0, r4
   1628e:	f008 f820 	bl	1e2d2 <bt_le_set_data_len>
				if (err) {
   16292:	4601      	mov	r1, r0
   16294:	2800      	cmp	r0, #0
   16296:	d0bf      	beq.n	16218 <conn_auto_initiate+0x48>
   16298:	4b07      	ldr	r3, [pc, #28]	; (162b8 <conn_auto_initiate+0xe8>)
   1629a:	4a06      	ldr	r2, [pc, #24]	; (162b4 <conn_auto_initiate+0xe4>)
					BT_ERR("Failed to set data len (%d)", err);
   1629c:	4808      	ldr	r0, [pc, #32]	; (162c0 <conn_auto_initiate+0xf0>)
   1629e:	1ad2      	subs	r2, r2, r3
   162a0:	08d2      	lsrs	r2, r2, #3
   162a2:	0192      	lsls	r2, r2, #6
   162a4:	f042 0201 	orr.w	r2, r2, #1
   162a8:	f007 f8b4 	bl	1d414 <log_1>
		}
   162ac:	e7b4      	b.n	16218 <conn_auto_initiate+0x48>
   162ae:	bf00      	nop
   162b0:	200003c8 	.word	0x200003c8
   162b4:	00020328 	.word	0x00020328
   162b8:	00020308 	.word	0x00020308
   162bc:	000215cb 	.word	0x000215cb
   162c0:	000215e5 	.word	0x000215e5

000162c4 <le_phy_update_complete>:
{
   162c4:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   162c6:	6883      	ldr	r3, [r0, #8]
   162c8:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   162cc:	4628      	mov	r0, r5
   162ce:	f001 fbb1 	bl	17a34 <bt_conn_lookup_handle>
	if (!conn) {
   162d2:	4604      	mov	r4, r0
   162d4:	b960      	cbnz	r0, 162f0 <le_phy_update_complete+0x2c>
   162d6:	4b11      	ldr	r3, [pc, #68]	; (1631c <le_phy_update_complete+0x58>)
   162d8:	4a11      	ldr	r2, [pc, #68]	; (16320 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   162da:	4812      	ldr	r0, [pc, #72]	; (16324 <le_phy_update_complete+0x60>)
   162dc:	1ad2      	subs	r2, r2, r3
   162de:	08d2      	lsrs	r2, r2, #3
   162e0:	0192      	lsls	r2, r2, #6
   162e2:	4629      	mov	r1, r5
   162e4:	f042 0201 	orr.w	r2, r2, #1
}
   162e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   162ec:	f007 b892 	b.w	1d414 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   162f0:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   162f2:	f06f 0180 	mvn.w	r1, #128	; 0x80
   162f6:	4628      	mov	r0, r5
   162f8:	f007 ff90 	bl	1e21c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   162fc:	0603      	lsls	r3, r0, #24
   162fe:	d507      	bpl.n	16310 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16304:	4628      	mov	r0, r5
   16306:	f007 ff7a 	bl	1e1fe <atomic_or>
		conn_auto_initiate(conn);
   1630a:	4620      	mov	r0, r4
   1630c:	f7ff ff60 	bl	161d0 <conn_auto_initiate>
	bt_conn_unref(conn);
   16310:	4620      	mov	r0, r4
}
   16312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   16316:	f008 b8ee 	b.w	1e4f6 <bt_conn_unref>
   1631a:	bf00      	nop
   1631c:	00020308 	.word	0x00020308
   16320:	00020328 	.word	0x00020328
   16324:	000212ca 	.word	0x000212ca

00016328 <le_remote_feat_complete>:
{
   16328:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1632a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1632c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16330:	4630      	mov	r0, r6
   16332:	f001 fb7f 	bl	17a34 <bt_conn_lookup_handle>
	if (!conn) {
   16336:	4604      	mov	r4, r0
   16338:	b960      	cbnz	r0, 16354 <le_remote_feat_complete+0x2c>
   1633a:	4a10      	ldr	r2, [pc, #64]	; (1637c <le_remote_feat_complete+0x54>)
   1633c:	4b10      	ldr	r3, [pc, #64]	; (16380 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1633e:	4811      	ldr	r0, [pc, #68]	; (16384 <le_remote_feat_complete+0x5c>)
   16340:	1ad2      	subs	r2, r2, r3
   16342:	08d2      	lsrs	r2, r2, #3
   16344:	0192      	lsls	r2, r2, #6
   16346:	4631      	mov	r1, r6
   16348:	f042 0201 	orr.w	r2, r2, #1
}
   1634c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16350:	f007 b860 	b.w	1d414 <log_1>
	if (!evt->status) {
   16354:	782b      	ldrb	r3, [r5, #0]
   16356:	b923      	cbnz	r3, 16362 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   16358:	2208      	movs	r2, #8
   1635a:	1ce9      	adds	r1, r5, #3
   1635c:	30ac      	adds	r0, #172	; 0xac
   1635e:	f007 fe5b 	bl	1e018 <memcpy>
   16362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   16366:	1d20      	adds	r0, r4, #4
   16368:	f007 ff49 	bl	1e1fe <atomic_or>
	conn_auto_initiate(conn);
   1636c:	4620      	mov	r0, r4
   1636e:	f7ff ff2f 	bl	161d0 <conn_auto_initiate>
	bt_conn_unref(conn);
   16372:	4620      	mov	r0, r4
}
   16374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   16378:	f008 b8bd 	b.w	1e4f6 <bt_conn_unref>
   1637c:	00020328 	.word	0x00020328
   16380:	00020308 	.word	0x00020308
   16384:	000212ca 	.word	0x000212ca

00016388 <le_conn_param_neg_reply>:
{
   16388:	b570      	push	{r4, r5, r6, lr}
   1638a:	4606      	mov	r6, r0
   1638c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1638e:	f242 0021 	movw	r0, #8225	; 0x2021
   16392:	2103      	movs	r1, #3
   16394:	f7ff fc6c 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   16398:	4604      	mov	r4, r0
   1639a:	b958      	cbnz	r0, 163b4 <le_conn_param_neg_reply+0x2c>
   1639c:	490c      	ldr	r1, [pc, #48]	; (163d0 <le_conn_param_neg_reply+0x48>)
   1639e:	4b0d      	ldr	r3, [pc, #52]	; (163d4 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   163a0:	480d      	ldr	r0, [pc, #52]	; (163d8 <le_conn_param_neg_reply+0x50>)
   163a2:	1ac9      	subs	r1, r1, r3
   163a4:	08c9      	lsrs	r1, r1, #3
   163a6:	0189      	lsls	r1, r1, #6
}
   163a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   163ac:	f041 0101 	orr.w	r1, r1, #1
   163b0:	f007 b823 	b.w	1d3fa <log_0>
   163b4:	2103      	movs	r1, #3
   163b6:	3008      	adds	r0, #8
   163b8:	f009 f83d 	bl	1f436 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   163bc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   163be:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   163c0:	4621      	mov	r1, r4
   163c2:	f242 0021 	movw	r0, #8225	; 0x2021
}
   163c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   163ca:	f7ff becf 	b.w	1616c <bt_hci_cmd_send>
   163ce:	bf00      	nop
   163d0:	00020328 	.word	0x00020328
   163d4:	00020308 	.word	0x00020308
   163d8:	00021601 	.word	0x00021601

000163dc <le_conn_param_req>:
{
   163dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   163de:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   163e0:	78d9      	ldrb	r1, [r3, #3]
   163e2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   163e4:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   163e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   163ea:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   163ee:	7959      	ldrb	r1, [r3, #5]
   163f0:	791a      	ldrb	r2, [r3, #4]
   163f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   163f6:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   163fa:	799a      	ldrb	r2, [r3, #6]
   163fc:	79d9      	ldrb	r1, [r3, #7]
   163fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16402:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16406:	7a1a      	ldrb	r2, [r3, #8]
   16408:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1640a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1640c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16410:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16412:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   16416:	f001 fb0d 	bl	17a34 <bt_conn_lookup_handle>
	if (!conn) {
   1641a:	4606      	mov	r6, r0
   1641c:	b980      	cbnz	r0, 16440 <le_conn_param_req+0x64>
   1641e:	4b20      	ldr	r3, [pc, #128]	; (164a0 <le_conn_param_req+0xc4>)
   16420:	4a20      	ldr	r2, [pc, #128]	; (164a4 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16422:	4821      	ldr	r0, [pc, #132]	; (164a8 <le_conn_param_req+0xcc>)
   16424:	1ad2      	subs	r2, r2, r3
   16426:	08d2      	lsrs	r2, r2, #3
   16428:	0192      	lsls	r2, r2, #6
   1642a:	4621      	mov	r1, r4
   1642c:	f042 0201 	orr.w	r2, r2, #1
   16430:	f006 fff0 	bl	1d414 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16434:	2102      	movs	r1, #2
   16436:	4620      	mov	r0, r4
   16438:	f7ff ffa6 	bl	16388 <le_conn_param_neg_reply>
}
   1643c:	b003      	add	sp, #12
   1643e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   16440:	4669      	mov	r1, sp
   16442:	f001 f955 	bl	176f0 <le_param_req>
   16446:	b938      	cbnz	r0, 16458 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16448:	211e      	movs	r1, #30
   1644a:	4620      	mov	r0, r4
   1644c:	f7ff ff9c 	bl	16388 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16450:	4630      	mov	r0, r6
   16452:	f008 f850 	bl	1e4f6 <bt_conn_unref>
   16456:	e7f1      	b.n	1643c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16458:	210e      	movs	r1, #14
   1645a:	f242 0020 	movw	r0, #8224	; 0x2020
   1645e:	f7ff fc07 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   16462:	4605      	mov	r5, r0
   16464:	2800      	cmp	r0, #0
   16466:	d0f3      	beq.n	16450 <le_conn_param_req+0x74>
   16468:	210e      	movs	r1, #14
   1646a:	3008      	adds	r0, #8
   1646c:	f008 ffe3 	bl	1f436 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   16470:	220e      	movs	r2, #14
   16472:	4604      	mov	r4, r0
   16474:	2100      	movs	r1, #0
   16476:	f007 fdfa 	bl	1e06e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1647a:	f8bd 3000 	ldrh.w	r3, [sp]
   1647e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16480:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   16484:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16486:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1648a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1648c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   16490:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16492:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16494:	4629      	mov	r1, r5
   16496:	f242 0020 	movw	r0, #8224	; 0x2020
   1649a:	f7ff fe67 	bl	1616c <bt_hci_cmd_send>
   1649e:	e7d7      	b.n	16450 <le_conn_param_req+0x74>
   164a0:	00020308 	.word	0x00020308
   164a4:	00020328 	.word	0x00020328
   164a8:	000212ca 	.word	0x000212ca

000164ac <hci_tx_thread>:
{
   164ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164b0:	4d51      	ldr	r5, [pc, #324]	; (165f8 <hci_tx_thread+0x14c>)
   164b2:	4b52      	ldr	r3, [pc, #328]	; (165fc <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   164b4:	f8df 914c 	ldr.w	r9, [pc, #332]	; 16604 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   164b8:	f8df a174 	ldr.w	sl, [pc, #372]	; 16630 <hci_tx_thread+0x184>
   164bc:	1aed      	subs	r5, r5, r3
   164be:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   164c0:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   164c4:	484e      	ldr	r0, [pc, #312]	; (16600 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   164c6:	f36f 3310 	bfc	r3, #12, #5
   164ca:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   164ce:	f001 fa47 	bl	17960 <bt_conn_prepare_events>
   164d2:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   164d4:	484b      	ldr	r0, [pc, #300]	; (16604 <hci_tx_thread+0x158>)
   164d6:	f04f 32ff 	mov.w	r2, #4294967295
   164da:	f04f 33ff 	mov.w	r3, #4294967295
   164de:	4639      	mov	r1, r7
   164e0:	f006 fa74 	bl	1c9cc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   164e4:	b160      	cbz	r0, 16500 <hci_tx_thread+0x54>
   164e6:	4948      	ldr	r1, [pc, #288]	; (16608 <hci_tx_thread+0x15c>)
   164e8:	4848      	ldr	r0, [pc, #288]	; (1660c <hci_tx_thread+0x160>)
   164ea:	f241 4371 	movw	r3, #5233	; 0x1471
   164ee:	4652      	mov	r2, sl
   164f0:	f006 fb5a 	bl	1cba8 <printk>
   164f4:	4040      	eors	r0, r0
   164f6:	f380 8811 	msr	BASEPRI, r0
   164fa:	f04f 0003 	mov.w	r0, #3
   164fe:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   16500:	4e43      	ldr	r6, [pc, #268]	; (16610 <hci_tx_thread+0x164>)
{
   16502:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16604 <hci_tx_thread+0x158>
   16506:	f106 0be0 	add.w	fp, r6, #224	; 0xe0
	for (; count; ev++, count--) {
   1650a:	b917      	cbnz	r7, 16512 <hci_tx_thread+0x66>
	z_impl_k_yield();
   1650c:	f005 fe3c 	bl	1c188 <z_impl_k_yield>
	while (1) {
   16510:	e7d6      	b.n	164c0 <hci_tx_thread+0x14>
		switch (ev->state) {
   16512:	f8d8 100c 	ldr.w	r1, [r8, #12]
   16516:	f3c1 3104 	ubfx	r1, r1, #12, #5
   1651a:	2901      	cmp	r1, #1
   1651c:	d959      	bls.n	165d2 <hci_tx_thread+0x126>
   1651e:	2904      	cmp	r1, #4
   16520:	d163      	bne.n	165ea <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16522:	f898 300c 	ldrb.w	r3, [r8, #12]
   16526:	2b00      	cmp	r3, #0
   16528:	d157      	bne.n	165da <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1652a:	483a      	ldr	r0, [pc, #232]	; (16614 <hci_tx_thread+0x168>)
   1652c:	2200      	movs	r2, #0
   1652e:	2300      	movs	r3, #0
   16530:	f008 ff30 	bl	1f394 <net_buf_get>
	BT_ASSERT(buf);
   16534:	4604      	mov	r4, r0
   16536:	b960      	cbnz	r0, 16552 <hci_tx_thread+0xa6>
   16538:	4937      	ldr	r1, [pc, #220]	; (16618 <hci_tx_thread+0x16c>)
   1653a:	4834      	ldr	r0, [pc, #208]	; (1660c <hci_tx_thread+0x160>)
   1653c:	f241 430e 	movw	r3, #5134	; 0x140e
   16540:	4652      	mov	r2, sl
   16542:	f006 fb31 	bl	1cba8 <printk>
   16546:	4040      	eors	r0, r0
   16548:	f380 8811 	msr	BASEPRI, r0
   1654c:	f04f 0003 	mov.w	r0, #3
   16550:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   16552:	f04f 33ff 	mov.w	r3, #4294967295
   16556:	f04f 32ff 	mov.w	r2, #4294967295
   1655a:	4658      	mov	r0, fp
   1655c:	f005 feb0 	bl	1c2c0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   16560:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   16564:	b163      	cbz	r3, 16580 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   16566:	01a9      	lsls	r1, r5, #6
   16568:	482c      	ldr	r0, [pc, #176]	; (1661c <hci_tx_thread+0x170>)
   1656a:	f041 0101 	orr.w	r1, r1, #1
   1656e:	f006 ff44 	bl	1d3fa <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   16572:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
   16576:	f003 fd05 	bl	19f84 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1657a:	2300      	movs	r3, #0
   1657c:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
   16580:	4620      	mov	r0, r4
   16582:	f008 ff32 	bl	1f3ea <net_buf_ref>
   16586:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
	err = bt_send(buf);
   1658a:	4620      	mov	r0, r4
   1658c:	f7ff fde6 	bl	1615c <bt_send>
	if (err) {
   16590:	4601      	mov	r1, r0
   16592:	b1f0      	cbz	r0, 165d2 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   16594:	01aa      	lsls	r2, r5, #6
   16596:	4822      	ldr	r0, [pc, #136]	; (16620 <hci_tx_thread+0x174>)
   16598:	f042 0201 	orr.w	r2, r2, #1
   1659c:	f006 ff3a 	bl	1d414 <log_1>
	z_impl_k_sem_give(sem);
   165a0:	4820      	ldr	r0, [pc, #128]	; (16624 <hci_tx_thread+0x178>)
   165a2:	f005 fe67 	bl	1c274 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   165a6:	4620      	mov	r0, r4
   165a8:	f003 fc38 	bl	19e1c <net_buf_id>
   165ac:	4b1e      	ldr	r3, [pc, #120]	; (16628 <hci_tx_thread+0x17c>)
   165ae:	220c      	movs	r2, #12
   165b0:	fb02 3000 	mla	r0, r2, r0, r3
   165b4:	211f      	movs	r1, #31
   165b6:	8840      	ldrh	r0, [r0, #2]
   165b8:	4622      	mov	r2, r4
   165ba:	f7ff f893 	bl	156e4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   165be:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
   165c2:	f003 fcdf 	bl	19f84 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   165c6:	2300      	movs	r3, #0
		net_buf_unref(buf);
   165c8:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   165ca:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
		net_buf_unref(buf);
   165ce:	f003 fcd9 	bl	19f84 <net_buf_unref>
	for (; count; ev++, count--) {
   165d2:	f108 0814 	add.w	r8, r8, #20
   165d6:	3f01      	subs	r7, #1
   165d8:	e797      	b.n	1650a <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   165da:	2b01      	cmp	r3, #1
   165dc:	d1f9      	bne.n	165d2 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   165de:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   165e2:	3834      	subs	r0, #52	; 0x34
   165e4:	f001 fc64 	bl	17eb0 <bt_conn_process_tx>
   165e8:	e7f3      	b.n	165d2 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   165ea:	01aa      	lsls	r2, r5, #6
   165ec:	480f      	ldr	r0, [pc, #60]	; (1662c <hci_tx_thread+0x180>)
   165ee:	f042 0202 	orr.w	r2, r2, #2
   165f2:	f006 ff0f 	bl	1d414 <log_1>
   165f6:	e7ec      	b.n	165d2 <hci_tx_thread+0x126>
   165f8:	00020328 	.word	0x00020328
   165fc:	00020308 	.word	0x00020308
   16600:	20000548 	.word	0x20000548
   16604:	20000534 	.word	0x20000534
   16608:	0002152b 	.word	0x0002152b
   1660c:	00021453 	.word	0x00021453
   16610:	200003c8 	.word	0x200003c8
   16614:	200004dc 	.word	0x200004dc
   16618:	000211ab 	.word	0x000211ab
   1661c:	0002161b 	.word	0x0002161b
   16620:	000215a9 	.word	0x000215a9
   16624:	200004a8 	.word	0x200004a8
   16628:	2000254c 	.word	0x2000254c
   1662c:	00021636 	.word	0x00021636
   16630:	00021406 	.word	0x00021406

00016634 <hci_event_prio>:
{
   16634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16638:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1663a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1663e:	4630      	mov	r0, r6
   16640:	f008 ff30 	bl	1f4a4 <net_buf_simple_headroom>
	state->len = buf->len;
   16644:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16648:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   1664c:	4605      	mov	r5, r0
   1664e:	d80c      	bhi.n	1666a <hci_event_prio+0x36>
   16650:	4a1c      	ldr	r2, [pc, #112]	; (166c4 <hci_event_prio+0x90>)
   16652:	491d      	ldr	r1, [pc, #116]	; (166c8 <hci_event_prio+0x94>)
   16654:	481d      	ldr	r0, [pc, #116]	; (166cc <hci_event_prio+0x98>)
   16656:	f641 03ae 	movw	r3, #6318	; 0x18ae
   1665a:	f006 faa5 	bl	1cba8 <printk>
   1665e:	4040      	eors	r0, r0
   16660:	f380 8811 	msr	BASEPRI, r0
   16664:	f04f 0003 	mov.w	r0, #3
   16668:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1666a:	2102      	movs	r1, #2
   1666c:	4630      	mov	r0, r6
   1666e:	f008 ff09 	bl	1f484 <net_buf_simple_pull_mem>
   16672:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16674:	7800      	ldrb	r0, [r0, #0]
   16676:	f007 fd95 	bl	1e1a4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1667a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1667c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1667e:	d40c      	bmi.n	1669a <hci_event_prio+0x66>
   16680:	4a10      	ldr	r2, [pc, #64]	; (166c4 <hci_event_prio+0x90>)
   16682:	4913      	ldr	r1, [pc, #76]	; (166d0 <hci_event_prio+0x9c>)
   16684:	4811      	ldr	r0, [pc, #68]	; (166cc <hci_event_prio+0x98>)
   16686:	f641 03b2 	movw	r3, #6322	; 0x18b2
   1668a:	f006 fa8d 	bl	1cba8 <printk>
   1668e:	4040      	eors	r0, r0
   16690:	f380 8811 	msr	BASEPRI, r0
   16694:	f04f 0003 	mov.w	r0, #3
   16698:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1669a:	2305      	movs	r3, #5
   1669c:	4a0d      	ldr	r2, [pc, #52]	; (166d4 <hci_event_prio+0xa0>)
   1669e:	7838      	ldrb	r0, [r7, #0]
   166a0:	4621      	mov	r1, r4
   166a2:	f7ff f899 	bl	157d8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   166a6:	07b3      	lsls	r3, r6, #30
   166a8:	d507      	bpl.n	166ba <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   166aa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   166ac:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   166b0:	fa10 f585 	uxtah	r5, r0, r5
   166b4:	60a5      	str	r5, [r4, #8]
}
   166b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   166ba:	4620      	mov	r0, r4
}
   166bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   166c0:	f003 bc60 	b.w	19f84 <net_buf_unref>
   166c4:	00021406 	.word	0x00021406
   166c8:	0002143a 	.word	0x0002143a
   166cc:	00021453 	.word	0x00021453
   166d0:	00021657 	.word	0x00021657
   166d4:	000206ac 	.word	0x000206ac

000166d8 <bt_recv>:
{
   166d8:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   166da:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   166dc:	2901      	cmp	r1, #1
{
   166de:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   166e0:	d007      	beq.n	166f2 <bt_recv+0x1a>
   166e2:	2903      	cmp	r1, #3
   166e4:	d113      	bne.n	1670e <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   166e6:	4812      	ldr	r0, [pc, #72]	; (16730 <bt_recv+0x58>)
   166e8:	4629      	mov	r1, r5
   166ea:	f008 fe71 	bl	1f3d0 <net_buf_put>
		return 0;
   166ee:	2000      	movs	r0, #0
   166f0:	e00c      	b.n	1670c <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   166f2:	6883      	ldr	r3, [r0, #8]
   166f4:	7818      	ldrb	r0, [r3, #0]
   166f6:	f007 fd55 	bl	1e1a4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   166fa:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   166fc:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   166fe:	d502      	bpl.n	16706 <bt_recv+0x2e>
			hci_event_prio(buf);
   16700:	4628      	mov	r0, r5
   16702:	f7ff ff97 	bl	16634 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16706:	f014 0002 	ands.w	r0, r4, #2
   1670a:	d1ec      	bne.n	166e6 <bt_recv+0xe>
}
   1670c:	bd38      	pop	{r3, r4, r5, pc}
   1670e:	4b09      	ldr	r3, [pc, #36]	; (16734 <bt_recv+0x5c>)
   16710:	4a09      	ldr	r2, [pc, #36]	; (16738 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16712:	480a      	ldr	r0, [pc, #40]	; (1673c <bt_recv+0x64>)
   16714:	1ad2      	subs	r2, r2, r3
   16716:	08d2      	lsrs	r2, r2, #3
   16718:	0192      	lsls	r2, r2, #6
   1671a:	f042 0201 	orr.w	r2, r2, #1
   1671e:	f006 fe79 	bl	1d414 <log_1>
		net_buf_unref(buf);
   16722:	4628      	mov	r0, r5
   16724:	f003 fc2e 	bl	19f84 <net_buf_unref>
		return -EINVAL;
   16728:	f06f 0015 	mvn.w	r0, #21
   1672c:	e7ee      	b.n	1670c <bt_recv+0x34>
   1672e:	bf00      	nop
   16730:	200004c4 	.word	0x200004c4
   16734:	00020308 	.word	0x00020308
   16738:	00020328 	.word	0x00020328
   1673c:	00021670 	.word	0x00021670

00016740 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   16740:	4a08      	ldr	r2, [pc, #32]	; (16764 <bt_hci_driver_register+0x24>)
{
   16742:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   16744:	f8d2 012c 	ldr.w	r0, [r2, #300]	; 0x12c
   16748:	b930      	cbnz	r0, 16758 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1674a:	68d9      	ldr	r1, [r3, #12]
   1674c:	b139      	cbz	r1, 1675e <bt_hci_driver_register+0x1e>
   1674e:	6919      	ldr	r1, [r3, #16]
   16750:	b129      	cbz	r1, 1675e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   16752:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
	return 0;
   16756:	4770      	bx	lr
		return -EALREADY;
   16758:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1675c:	4770      	bx	lr
		return -EINVAL;
   1675e:	f06f 0015 	mvn.w	r0, #21
}
   16762:	4770      	bx	lr
   16764:	200003c8 	.word	0x200003c8

00016768 <bt_finalize_init>:
{
   16768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1676c:	4c2b      	ldr	r4, [pc, #172]	; (1681c <bt_finalize_init+0xb4>)
   1676e:	4d2c      	ldr	r5, [pc, #176]	; (16820 <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16770:	4e2c      	ldr	r6, [pc, #176]	; (16824 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
   16772:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1683c <bt_finalize_init+0xd4>
{
   16776:	b087      	sub	sp, #28
   16778:	2102      	movs	r1, #2
   1677a:	f104 0094 	add.w	r0, r4, #148	; 0x94
   1677e:	f007 fd3e 	bl	1e1fe <atomic_or>
   16782:	4b29      	ldr	r3, [pc, #164]	; (16828 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16784:	4929      	ldr	r1, [pc, #164]	; (1682c <bt_finalize_init+0xc4>)
   16786:	1aed      	subs	r5, r5, r3
   16788:	79e3      	ldrb	r3, [r4, #7]
   1678a:	4620      	mov	r0, r4
   1678c:	2b01      	cmp	r3, #1
   1678e:	bf88      	it	hi
   16790:	460e      	movhi	r6, r1
   16792:	f7fe fd4f 	bl	15234 <bt_addr_le_str_real>
   16796:	f7fc ff33 	bl	13600 <log_strdup>
   1679a:	08ed      	lsrs	r5, r5, #3
   1679c:	01ad      	lsls	r5, r5, #6
   1679e:	f045 0703 	orr.w	r7, r5, #3
   167a2:	4602      	mov	r2, r0
   167a4:	4631      	mov	r1, r6
   167a6:	4822      	ldr	r0, [pc, #136]	; (16830 <bt_finalize_init+0xc8>)
   167a8:	463b      	mov	r3, r7
   167aa:	f006 fe47 	bl	1d43c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   167ae:	46a0      	mov	r8, r4
   167b0:	2601      	movs	r6, #1
   167b2:	79e3      	ldrb	r3, [r4, #7]
   167b4:	429e      	cmp	r6, r3
   167b6:	f108 0807 	add.w	r8, r8, #7
   167ba:	db22      	blt.n	16802 <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   167bc:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
   167c0:	4630      	mov	r0, r6
   167c2:	f7fe fe13 	bl	153ec <ver_str>
   167c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   167c8:	9304      	str	r3, [sp, #16]
   167ca:	f045 0503 	orr.w	r5, r5, #3
   167ce:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   167d0:	9305      	str	r3, [sp, #20]
   167d2:	e9cd 0602 	strd	r0, r6, [sp, #8]
   167d6:	462b      	mov	r3, r5
   167d8:	a902      	add	r1, sp, #8
   167da:	2204      	movs	r2, #4
   167dc:	4815      	ldr	r0, [pc, #84]	; (16834 <bt_finalize_init+0xcc>)
   167de:	f006 fe62 	bl	1d4a6 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   167e2:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
   167e6:	4630      	mov	r0, r6
   167e8:	f7fe fe00 	bl	153ec <ver_str>
   167ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   167ee:	f8ad 5000 	strh.w	r5, [sp]
   167f2:	4601      	mov	r1, r0
   167f4:	4632      	mov	r2, r6
   167f6:	4810      	ldr	r0, [pc, #64]	; (16838 <bt_finalize_init+0xd0>)
   167f8:	f006 fe39 	bl	1d46e <log_3>
}
   167fc:	b007      	add	sp, #28
   167fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   16802:	4640      	mov	r0, r8
   16804:	f7fe fd16 	bl	15234 <bt_addr_le_str_real>
   16808:	f7fc fefa 	bl	13600 <log_strdup>
   1680c:	4631      	mov	r1, r6
   1680e:	4602      	mov	r2, r0
   16810:	463b      	mov	r3, r7
   16812:	4648      	mov	r0, r9
   16814:	f006 fe12 	bl	1d43c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   16818:	3601      	adds	r6, #1
   1681a:	e7ca      	b.n	167b2 <bt_finalize_init+0x4a>
   1681c:	200003c8 	.word	0x200003c8
   16820:	00020328 	.word	0x00020328
   16824:	00020b9d 	.word	0x00020b9d
   16828:	00020308 	.word	0x00020308
   1682c:	00021684 	.word	0x00021684
   16830:	00021688 	.word	0x00021688
   16834:	000216a8 	.word	0x000216a8
   16838:	000216e6 	.word	0x000216e6
   1683c:	00021697 	.word	0x00021697

00016840 <bt_get_name>:
}
   16840:	4800      	ldr	r0, [pc, #0]	; (16844 <bt_get_name+0x4>)
   16842:	4770      	bx	lr
   16844:	00020aeb 	.word	0x00020aeb

00016848 <bt_id_get>:
{
   16848:	b538      	push	{r3, r4, r5, lr}
   1684a:	460d      	mov	r5, r1
	size_t to_copy = MIN(*count, bt_dev.id_count);
   1684c:	4905      	ldr	r1, [pc, #20]	; (16864 <bt_id_get+0x1c>)
   1684e:	682b      	ldr	r3, [r5, #0]
   16850:	79cc      	ldrb	r4, [r1, #7]
   16852:	429c      	cmp	r4, r3
   16854:	bf28      	it	cs
   16856:	461c      	movcs	r4, r3
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
   16858:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1685c:	f007 fbdc 	bl	1e018 <memcpy>
	*count = to_copy;
   16860:	602c      	str	r4, [r5, #0]
}
   16862:	bd38      	pop	{r3, r4, r5, pc}
   16864:	200003c8 	.word	0x200003c8

00016868 <bt_id_create>:
{
   16868:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1686a:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1686c:	4605      	mov	r5, r0
   1686e:	b918      	cbnz	r0, 16878 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   16870:	b344      	cbz	r4, 168c4 <bt_id_create+0x5c>
		return -EINVAL;
   16872:	f06f 0415 	mvn.w	r4, #21
   16876:	e022      	b.n	168be <bt_id_create+0x56>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16878:	2300      	movs	r3, #0
   1687a:	4669      	mov	r1, sp
   1687c:	9300      	str	r3, [sp, #0]
   1687e:	f8cd 3003 	str.w	r3, [sp, #3]
   16882:	f007 fcb9 	bl	1e1f8 <bt_addr_le_cmp>
   16886:	2800      	cmp	r0, #0
   16888:	d0f2      	beq.n	16870 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1688a:	782b      	ldrb	r3, [r5, #0]
   1688c:	2b01      	cmp	r3, #1
   1688e:	d104      	bne.n	1689a <bt_id_create+0x32>
   16890:	79ab      	ldrb	r3, [r5, #6]
   16892:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16896:	2bc0      	cmp	r3, #192	; 0xc0
   16898:	d00a      	beq.n	168b0 <bt_id_create+0x48>
   1689a:	4b11      	ldr	r3, [pc, #68]	; (168e0 <bt_id_create+0x78>)
   1689c:	4911      	ldr	r1, [pc, #68]	; (168e4 <bt_id_create+0x7c>)
			BT_ERR("Only static random identity address supported");
   1689e:	4812      	ldr	r0, [pc, #72]	; (168e8 <bt_id_create+0x80>)
   168a0:	1ac9      	subs	r1, r1, r3
   168a2:	08c9      	lsrs	r1, r1, #3
   168a4:	0189      	lsls	r1, r1, #6
   168a6:	f041 0101 	orr.w	r1, r1, #1
   168aa:	f006 fda6 	bl	1d3fa <log_0>
			return -EINVAL;
   168ae:	e7e0      	b.n	16872 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   168b0:	4628      	mov	r0, r5
   168b2:	f7fe fdb7 	bl	15424 <id_find>
   168b6:	2800      	cmp	r0, #0
   168b8:	dbda      	blt.n	16870 <bt_id_create+0x8>
			return -EALREADY;
   168ba:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   168be:	4620      	mov	r0, r4
   168c0:	b003      	add	sp, #12
   168c2:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   168c4:	4b09      	ldr	r3, [pc, #36]	; (168ec <bt_id_create+0x84>)
   168c6:	79dc      	ldrb	r4, [r3, #7]
   168c8:	2c01      	cmp	r4, #1
   168ca:	d006      	beq.n	168da <bt_id_create+0x72>
	new_id = bt_dev.id_count++;
   168cc:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   168ce:	4629      	mov	r1, r5
   168d0:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   168d2:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   168d4:	f7ff f898 	bl	15a08 <id_create.isra.0>
	return new_id;
   168d8:	e7f1      	b.n	168be <bt_id_create+0x56>
		return -ENOMEM;
   168da:	f06f 040b 	mvn.w	r4, #11
   168de:	e7ee      	b.n	168be <bt_id_create+0x56>
   168e0:	00020308 	.word	0x00020308
   168e4:	00020328 	.word	0x00020328
   168e8:	0002170d 	.word	0x0002170d
   168ec:	200003c8 	.word	0x200003c8

000168f0 <bt_setup_public_id_addr>:
{
   168f0:	b570      	push	{r4, r5, r6, lr}
   168f2:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   168f4:	aa01      	add	r2, sp, #4
   168f6:	2100      	movs	r1, #0
   168f8:	f241 0009 	movw	r0, #4105	; 0x1009
   168fc:	f7ff f9f0 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16900:	4e1f      	ldr	r6, [pc, #124]	; (16980 <bt_setup_public_id_addr+0x90>)
   16902:	4604      	mov	r4, r0
   16904:	b168      	cbz	r0, 16922 <bt_setup_public_id_addr+0x32>
   16906:	491f      	ldr	r1, [pc, #124]	; (16984 <bt_setup_public_id_addr+0x94>)
   16908:	4b1f      	ldr	r3, [pc, #124]	; (16988 <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
   1690a:	4820      	ldr	r0, [pc, #128]	; (1698c <bt_setup_public_id_addr+0x9c>)
   1690c:	1ac9      	subs	r1, r1, r3
   1690e:	08c9      	lsrs	r1, r1, #3
   16910:	0189      	lsls	r1, r1, #6
   16912:	f041 0102 	orr.w	r1, r1, #2
   16916:	f006 fd70 	bl	1d3fa <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1691a:	2300      	movs	r3, #0
   1691c:	71f3      	strb	r3, [r6, #7]
}
   1691e:	b006      	add	sp, #24
   16920:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16922:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16924:	689d      	ldr	r5, [r3, #8]
   16926:	9004      	str	r0, [sp, #16]
   16928:	3501      	adds	r5, #1
   1692a:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
   1692e:	2206      	movs	r2, #6
   16930:	a904      	add	r1, sp, #16
   16932:	4628      	mov	r0, r5
   16934:	f007 fb60 	bl	1dff8 <memcmp>
   16938:	b918      	cbnz	r0, 16942 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
   1693a:	9801      	ldr	r0, [sp, #4]
   1693c:	f003 fb22 	bl	19f84 <net_buf_unref>
   16940:	e7eb      	b.n	1691a <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   16942:	f04f 33ff 	mov.w	r3, #4294967295
   16946:	2206      	movs	r2, #6
   16948:	a902      	add	r1, sp, #8
   1694a:	4628      	mov	r0, r5
   1694c:	9302      	str	r3, [sp, #8]
   1694e:	f8ad 300c 	strh.w	r3, [sp, #12]
   16952:	f007 fb51 	bl	1dff8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16956:	2800      	cmp	r0, #0
   16958:	d0ef      	beq.n	1693a <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
   1695a:	4629      	mov	r1, r5
   1695c:	2206      	movs	r2, #6
   1695e:	f10d 0011 	add.w	r0, sp, #17
   16962:	f007 fb59 	bl	1e018 <memcpy>
	net_buf_unref(rsp);
   16966:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   16968:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   1696c:	f003 fb0a 	bl	19f84 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   16970:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   16972:	a904      	add	r1, sp, #16
   16974:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
   16976:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   16978:	f7ff f846 	bl	15a08 <id_create.isra.0>
   1697c:	e7cf      	b.n	1691e <bt_setup_public_id_addr+0x2e>
   1697e:	bf00      	nop
   16980:	200003c8 	.word	0x200003c8
   16984:	00020328 	.word	0x00020328
   16988:	00020308 	.word	0x00020308
   1698c:	0002173b 	.word	0x0002173b

00016990 <bt_read_static_addr>:
{
   16990:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16994:	4b25      	ldr	r3, [pc, #148]	; (16a2c <bt_read_static_addr+0x9c>)
   16996:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   1699a:	f014 0401 	ands.w	r4, r4, #1
{
   1699e:	4607      	mov	r7, r0
   169a0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   169a2:	d10a      	bne.n	169ba <bt_read_static_addr+0x2a>
   169a4:	4922      	ldr	r1, [pc, #136]	; (16a30 <bt_read_static_addr+0xa0>)
   169a6:	4b23      	ldr	r3, [pc, #140]	; (16a34 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   169a8:	4823      	ldr	r0, [pc, #140]	; (16a38 <bt_read_static_addr+0xa8>)
   169aa:	1ac9      	subs	r1, r1, r3
   169ac:	08c9      	lsrs	r1, r1, #3
   169ae:	0189      	lsls	r1, r1, #6
   169b0:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
   169b4:	f006 fd21 	bl	1d3fa <log_0>
   169b8:	e012      	b.n	169e0 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   169ba:	aa01      	add	r2, sp, #4
   169bc:	2100      	movs	r1, #0
   169be:	f64f 4009 	movw	r0, #64521	; 0xfc09
   169c2:	f7ff f98d 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   169c6:	4605      	mov	r5, r0
   169c8:	b170      	cbz	r0, 169e8 <bt_read_static_addr+0x58>
   169ca:	4b1a      	ldr	r3, [pc, #104]	; (16a34 <bt_read_static_addr+0xa4>)
   169cc:	4918      	ldr	r1, [pc, #96]	; (16a30 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   169ce:	481b      	ldr	r0, [pc, #108]	; (16a3c <bt_read_static_addr+0xac>)
   169d0:	1ac9      	subs	r1, r1, r3
   169d2:	08c9      	lsrs	r1, r1, #3
   169d4:	0189      	lsls	r1, r1, #6
   169d6:	f041 0102 	orr.w	r1, r1, #2
   169da:	f006 fd0e 	bl	1d3fa <log_0>
		return 0;
   169de:	2400      	movs	r4, #0
}
   169e0:	4620      	mov	r0, r4
   169e2:	b002      	add	sp, #8
   169e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   169e8:	9b01      	ldr	r3, [sp, #4]
   169ea:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   169ec:	785c      	ldrb	r4, [r3, #1]
   169ee:	42b4      	cmp	r4, r6
   169f0:	bf28      	it	cs
   169f2:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   169f4:	f04f 0816 	mov.w	r8, #22
   169f8:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   169fa:	42a5      	cmp	r5, r4
   169fc:	db0d      	blt.n	16a1a <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   169fe:	9801      	ldr	r0, [sp, #4]
   16a00:	f003 fac0 	bl	19f84 <net_buf_unref>
	if (!cnt) {
   16a04:	2c00      	cmp	r4, #0
   16a06:	d1eb      	bne.n	169e0 <bt_read_static_addr+0x50>
   16a08:	4909      	ldr	r1, [pc, #36]	; (16a30 <bt_read_static_addr+0xa0>)
   16a0a:	4b0a      	ldr	r3, [pc, #40]	; (16a34 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   16a0c:	480c      	ldr	r0, [pc, #48]	; (16a40 <bt_read_static_addr+0xb0>)
   16a0e:	1ac9      	subs	r1, r1, r3
   16a10:	08c9      	lsrs	r1, r1, #3
   16a12:	0189      	lsls	r1, r1, #6
   16a14:	f041 0102 	orr.w	r1, r1, #2
   16a18:	e7cc      	b.n	169b4 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   16a1a:	fb08 7005 	mla	r0, r8, r5, r7
   16a1e:	2216      	movs	r2, #22
   16a20:	4631      	mov	r1, r6
   16a22:	f007 faf9 	bl	1e018 <memcpy>
	for (i = 0; i < cnt; i++) {
   16a26:	3501      	adds	r5, #1
   16a28:	e7e7      	b.n	169fa <bt_read_static_addr+0x6a>
   16a2a:	bf00      	nop
   16a2c:	200003c8 	.word	0x200003c8
   16a30:	00020328 	.word	0x00020328
   16a34:	00020308 	.word	0x00020308
   16a38:	00021759 	.word	0x00021759
   16a3c:	00021785 	.word	0x00021785
   16a40:	000217a5 	.word	0x000217a5

00016a44 <bt_setup_random_id_addr>:
{
   16a44:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   16a46:	4d14      	ldr	r5, [pc, #80]	; (16a98 <bt_setup_random_id_addr+0x54>)
   16a48:	79ec      	ldrb	r4, [r5, #7]
{
   16a4a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   16a4c:	b9f4      	cbnz	r4, 16a8c <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   16a4e:	2101      	movs	r1, #1
   16a50:	a802      	add	r0, sp, #8
   16a52:	f7ff ff9d 	bl	16990 <bt_read_static_addr>
   16a56:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   16a58:	b1c0      	cbz	r0, 16a8c <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   16a5a:	2716      	movs	r7, #22
   16a5c:	e00f      	b.n	16a7e <bt_setup_random_id_addr+0x3a>
   16a5e:	ab02      	add	r3, sp, #8
   16a60:	fb07 3106 	mla	r1, r7, r6, r3
   16a64:	2206      	movs	r2, #6
   16a66:	f10d 0001 	add.w	r0, sp, #1
   16a6a:	f007 fad5 	bl	1e018 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   16a6e:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   16a70:	4669      	mov	r1, sp
   16a72:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   16a74:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   16a78:	f7fe ffc6 	bl	15a08 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16a7c:	3401      	adds	r4, #1
   16a7e:	79eb      	ldrb	r3, [r5, #7]
   16a80:	b2e6      	uxtb	r6, r4
   16a82:	42b3      	cmp	r3, r6
   16a84:	d8eb      	bhi.n	16a5e <bt_setup_random_id_addr+0x1a>
			return 0;
   16a86:	2000      	movs	r0, #0
}
   16a88:	b009      	add	sp, #36	; 0x24
   16a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   16a8c:	2100      	movs	r1, #0
   16a8e:	4608      	mov	r0, r1
   16a90:	f7ff feea 	bl	16868 <bt_id_create>
   16a94:	e7f8      	b.n	16a88 <bt_setup_random_id_addr+0x44>
   16a96:	bf00      	nop
   16a98:	200003c8 	.word	0x200003c8

00016a9c <hci_init>:
{
   16a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16a9e:	4d41      	ldr	r5, [pc, #260]	; (16ba4 <hci_init+0x108>)
   16aa0:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
   16aa4:	6899      	ldr	r1, [r3, #8]
   16aa6:	f011 0101 	ands.w	r1, r1, #1
{
   16aaa:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16aac:	d11f      	bne.n	16aee <hci_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   16aae:	aa03      	add	r2, sp, #12
   16ab0:	f640 4003 	movw	r0, #3075	; 0xc03
   16ab4:	f7ff f914 	bl	15ce0 <bt_hci_cmd_send_sync>
		if (err) {
   16ab8:	4604      	mov	r4, r0
   16aba:	2800      	cmp	r0, #0
   16abc:	d16e      	bne.n	16b9c <hci_init+0x100>
		hci_reset_complete(rsp);
   16abe:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
   16ac0:	689b      	ldr	r3, [r3, #8]
	if (status) {
   16ac2:	781b      	ldrb	r3, [r3, #0]
   16ac4:	b983      	cbnz	r3, 16ae8 <hci_init+0x4c>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   16ac6:	f105 0394 	add.w	r3, r5, #148	; 0x94
   16aca:	4618      	mov	r0, r3
   16acc:	f007 fb8b 	bl	1e1e6 <atomic_get>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16ad0:	f3bf 8f5b 	dmb	ish
   16ad4:	f000 0005 	and.w	r0, r0, #5
   16ad8:	e853 2f00 	ldrex	r2, [r3]
   16adc:	e843 0100 	strex	r1, r0, [r3]
   16ae0:	2900      	cmp	r1, #0
   16ae2:	d1f9      	bne.n	16ad8 <hci_init+0x3c>
   16ae4:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   16ae8:	9803      	ldr	r0, [sp, #12]
   16aea:	f003 fa4b 	bl	19f84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   16aee:	aa03      	add	r2, sp, #12
   16af0:	2100      	movs	r1, #0
   16af2:	f241 0003 	movw	r0, #4099	; 0x1003
   16af6:	f7ff f8f3 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16afa:	4604      	mov	r4, r0
   16afc:	2800      	cmp	r0, #0
   16afe:	d14d      	bne.n	16b9c <hci_init+0x100>
	read_local_features_complete(rsp);
   16b00:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16b02:	4829      	ldr	r0, [pc, #164]	; (16ba8 <hci_init+0x10c>)
   16b04:	6899      	ldr	r1, [r3, #8]
   16b06:	2208      	movs	r2, #8
   16b08:	3101      	adds	r1, #1
   16b0a:	f007 fa85 	bl	1e018 <memcpy>
	net_buf_unref(rsp);
   16b0e:	9803      	ldr	r0, [sp, #12]
   16b10:	f003 fa38 	bl	19f84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   16b14:	4621      	mov	r1, r4
   16b16:	aa03      	add	r2, sp, #12
   16b18:	f241 0001 	movw	r0, #4097	; 0x1001
   16b1c:	f7ff f8e0 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16b20:	4604      	mov	r4, r0
   16b22:	2800      	cmp	r0, #0
   16b24:	d13a      	bne.n	16b9c <hci_init+0x100>
	read_local_ver_complete(rsp);
   16b26:	9803      	ldr	r0, [sp, #12]
   16b28:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   16b2a:	785a      	ldrb	r2, [r3, #1]
   16b2c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   16b30:	78d9      	ldrb	r1, [r3, #3]
   16b32:	789a      	ldrb	r2, [r3, #2]
   16b34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16b38:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   16b3a:	791a      	ldrb	r2, [r3, #4]
   16b3c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   16b40:	7a19      	ldrb	r1, [r3, #8]
   16b42:	79da      	ldrb	r2, [r3, #7]
   16b44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16b48:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   16b4a:	795a      	ldrb	r2, [r3, #5]
   16b4c:	799b      	ldrb	r3, [r3, #6]
   16b4e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   16b52:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   16b54:	f003 fa16 	bl	19f84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   16b58:	4621      	mov	r1, r4
   16b5a:	aa03      	add	r2, sp, #12
   16b5c:	f241 0002 	movw	r0, #4098	; 0x1002
   16b60:	f7ff f8be 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16b64:	4604      	mov	r4, r0
   16b66:	b9c8      	cbnz	r0, 16b9c <hci_init+0x100>
	read_supported_commands_complete(rsp);
   16b68:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   16b6a:	4810      	ldr	r0, [pc, #64]	; (16bac <hci_init+0x110>)
   16b6c:	6899      	ldr	r1, [r3, #8]
   16b6e:	2240      	movs	r2, #64	; 0x40
   16b70:	3101      	adds	r1, #1
   16b72:	f007 fa51 	bl	1e018 <memcpy>
	net_buf_unref(rsp);
   16b76:	9803      	ldr	r0, [sp, #12]
   16b78:	f003 fa04 	bl	19f84 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   16b7c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   16b80:	065e      	lsls	r6, r3, #25
   16b82:	d41b      	bmi.n	16bbc <hci_init+0x120>
   16b84:	4b0a      	ldr	r3, [pc, #40]	; (16bb0 <hci_init+0x114>)
   16b86:	490b      	ldr	r1, [pc, #44]	; (16bb4 <hci_init+0x118>)
		BT_ERR("Non-LE capable controller detected!");
   16b88:	480b      	ldr	r0, [pc, #44]	; (16bb8 <hci_init+0x11c>)
   16b8a:	1ac9      	subs	r1, r1, r3
   16b8c:	08c9      	lsrs	r1, r1, #3
   16b8e:	0189      	lsls	r1, r1, #6
   16b90:	f041 0101 	orr.w	r1, r1, #1
   16b94:	f006 fc31 	bl	1d3fa <log_0>
		return -ENODEV;
   16b98:	f06f 0412 	mvn.w	r4, #18
}
   16b9c:	4620      	mov	r0, r4
   16b9e:	b009      	add	sp, #36	; 0x24
   16ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ba2:	bf00      	nop
   16ba4:	200003c8 	.word	0x200003c8
   16ba8:	20000404 	.word	0x20000404
   16bac:	2000040c 	.word	0x2000040c
   16bb0:	00020308 	.word	0x00020308
   16bb4:	00020328 	.word	0x00020328
   16bb8:	000217ce 	.word	0x000217ce
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   16bbc:	4621      	mov	r1, r4
   16bbe:	aa03      	add	r2, sp, #12
   16bc0:	f242 0003 	movw	r0, #8195	; 0x2003
   16bc4:	f7ff f88c 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16bc8:	4604      	mov	r4, r0
   16bca:	2800      	cmp	r0, #0
   16bcc:	d1e6      	bne.n	16b9c <hci_init+0x100>
	read_le_features_complete(rsp);
   16bce:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   16bd0:	48c1      	ldr	r0, [pc, #772]	; (16ed8 <hci_init+0x43c>)
   16bd2:	6899      	ldr	r1, [r3, #8]
   16bd4:	2208      	movs	r2, #8
   16bd6:	3101      	adds	r1, #1
   16bd8:	f007 fa1e 	bl	1e018 <memcpy>
	net_buf_unref(rsp);
   16bdc:	9803      	ldr	r0, [sp, #12]
   16bde:	f003 f9d1 	bl	19f84 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   16be2:	4621      	mov	r1, r4
   16be4:	aa03      	add	r2, sp, #12
   16be6:	f242 0002 	movw	r0, #8194	; 0x2002
   16bea:	f7ff f879 	bl	15ce0 <bt_hci_cmd_send_sync>
		if (err) {
   16bee:	4604      	mov	r4, r0
   16bf0:	2800      	cmp	r0, #0
   16bf2:	d1d3      	bne.n	16b9c <hci_init+0x100>
		le_read_buffer_size_complete(rsp);
   16bf4:	9b03      	ldr	r3, [sp, #12]
   16bf6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   16bf8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16bfc:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
   16c00:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   16c02:	b121      	cbz	r1, 16c0e <hci_init+0x172>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   16c04:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16c06:	48b5      	ldr	r0, [pc, #724]	; (16edc <hci_init+0x440>)
   16c08:	4611      	mov	r1, r2
   16c0a:	f008 ffe8 	bl	1fbde <z_impl_k_sem_init>
		net_buf_unref(rsp);
   16c0e:	9803      	ldr	r0, [sp, #12]
   16c10:	f003 f9b8 	bl	19f84 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   16c14:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   16c18:	f016 0620 	ands.w	r6, r6, #32
   16c1c:	f000 80de 	beq.w	16ddc <hci_init+0x340>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   16c20:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   16c24:	071c      	lsls	r4, r3, #28
   16c26:	d511      	bpl.n	16c4c <hci_init+0x1b0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   16c28:	aa03      	add	r2, sp, #12
   16c2a:	2100      	movs	r1, #0
   16c2c:	f242 001c 	movw	r0, #8220	; 0x201c
   16c30:	f7ff f856 	bl	15ce0 <bt_hci_cmd_send_sync>
		if (err) {
   16c34:	4604      	mov	r4, r0
   16c36:	2800      	cmp	r0, #0
   16c38:	d1b0      	bne.n	16b9c <hci_init+0x100>
		le_read_supp_states_complete(rsp);
   16c3a:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   16c3c:	6883      	ldr	r3, [r0, #8]
   16c3e:	f853 2f01 	ldr.w	r2, [r3, #1]!
   16c42:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   16c44:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
   16c48:	f003 f99c 	bl	19f84 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   16c4c:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
   16c50:	0698      	lsls	r0, r3, #26
   16c52:	d524      	bpl.n	16c9e <hci_init+0x202>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16c54:	a902      	add	r1, sp, #8
   16c56:	f10d 0006 	add.w	r0, sp, #6
   16c5a:	f7ff f8b9 	bl	15dd0 <hci_le_read_max_data_len>
		if (err) {
   16c5e:	4604      	mov	r4, r0
   16c60:	2800      	cmp	r0, #0
   16c62:	d19b      	bne.n	16b9c <hci_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   16c64:	2104      	movs	r1, #4
   16c66:	f242 0024 	movw	r0, #8228	; 0x2024
   16c6a:	f7ff f801 	bl	15c70 <bt_hci_cmd_create>
		if (!buf) {
   16c6e:	4606      	mov	r6, r0
   16c70:	2800      	cmp	r0, #0
   16c72:	f000 80ba 	beq.w	16dea <hci_init+0x34e>
	return net_buf_simple_add(&buf->b, len);
   16c76:	2104      	movs	r1, #4
   16c78:	3008      	adds	r0, #8
   16c7a:	f008 fbdc 	bl	1f436 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   16c7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16c82:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   16c84:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   16c88:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   16c8a:	4622      	mov	r2, r4
   16c8c:	4631      	mov	r1, r6
   16c8e:	f242 0024 	movw	r0, #8228	; 0x2024
   16c92:	f7ff f825 	bl	15ce0 <bt_hci_cmd_send_sync>
		if (err) {
   16c96:	4604      	mov	r4, r0
   16c98:	2800      	cmp	r0, #0
   16c9a:	f47f af7f 	bne.w	16b9c <hci_init+0x100>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   16c9e:	2108      	movs	r1, #8
   16ca0:	f242 0001 	movw	r0, #8193	; 0x2001
   16ca4:	f7fe ffe4 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   16ca8:	4604      	mov	r4, r0
   16caa:	2800      	cmp	r0, #0
   16cac:	f000 809d 	beq.w	16dea <hci_init+0x34e>
   16cb0:	2108      	movs	r1, #8
   16cb2:	4408      	add	r0, r1
   16cb4:	f008 fbbf 	bl	1f436 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   16cb8:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   16cbc:	f012 0f02 	tst.w	r2, #2
   16cc0:	bf14      	ite	ne
   16cc2:	232f      	movne	r3, #47	; 0x2f
   16cc4:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   16cc6:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   16cc8:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   16ccc:	bf48      	it	mi
   16cce:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   16cd2:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   16cd6:	bf18      	it	ne
   16cd8:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   16cdc:	2200      	movs	r2, #0
   16cde:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   16ce0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   16ce4:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   16ce6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   16ce8:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   16cea:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   16cec:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   16cee:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   16cf0:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   16cf2:	4621      	mov	r1, r4
   16cf4:	f242 0001 	movw	r0, #8193	; 0x2001
   16cf8:	f7fe fff2 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16cfc:	4604      	mov	r4, r0
   16cfe:	2800      	cmp	r0, #0
   16d00:	f47f af4c 	bne.w	16b9c <hci_init+0x100>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   16d04:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   16d08:	069a      	lsls	r2, r3, #26
   16d0a:	d41e      	bmi.n	16d4a <hci_init+0x2ae>
	if (bt_dev.le.acl_mtu) {
   16d0c:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
   16d10:	b9d9      	cbnz	r1, 16d4a <hci_init+0x2ae>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   16d12:	aa03      	add	r2, sp, #12
   16d14:	f241 0005 	movw	r0, #4101	; 0x1005
   16d18:	f7fe ffe2 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16d1c:	4604      	mov	r4, r0
   16d1e:	2800      	cmp	r0, #0
   16d20:	f47f af3c 	bne.w	16b9c <hci_init+0x100>
	if (bt_dev.le.acl_mtu) {
   16d24:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
   16d28:	b963      	cbnz	r3, 16d44 <hci_init+0x2a8>
	read_buffer_size_complete(rsp);
   16d2a:	9b03      	ldr	r3, [sp, #12]
   16d2c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   16d2e:	785a      	ldrb	r2, [r3, #1]
   16d30:	7899      	ldrb	r1, [r3, #2]
   16d32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16d36:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   16d3a:	889a      	ldrh	r2, [r3, #4]
   16d3c:	4867      	ldr	r0, [pc, #412]	; (16edc <hci_init+0x440>)
   16d3e:	4611      	mov	r1, r2
   16d40:	f008 ff4d 	bl	1fbde <z_impl_k_sem_init>
	net_buf_unref(rsp);
   16d44:	9803      	ldr	r0, [sp, #12]
   16d46:	f003 f91d 	bl	19f84 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   16d4a:	2108      	movs	r1, #8
   16d4c:	f640 4001 	movw	r0, #3073	; 0xc01
   16d50:	f7fe ff8e 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   16d54:	4604      	mov	r4, r0
   16d56:	2800      	cmp	r0, #0
   16d58:	d047      	beq.n	16dea <hci_init+0x34e>
   16d5a:	2108      	movs	r1, #8
   16d5c:	4408      	add	r0, r1
   16d5e:	f008 fb6a 	bl	1f436 <net_buf_simple_add>
	dst[0] = val;
   16d62:	2310      	movs	r3, #16
   16d64:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   16d66:	2388      	movs	r3, #136	; 0x88
   16d68:	7043      	strb	r3, [r0, #1]
   16d6a:	2302      	movs	r3, #2
	dst[0] = val;
   16d6c:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   16d6e:	70c3      	strb	r3, [r0, #3]
   16d70:	2320      	movs	r3, #32
	dst[0] = val;
   16d72:	7082      	strb	r2, [r0, #2]
   16d74:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   16d76:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   16d78:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   16d7a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   16d7c:	4621      	mov	r1, r4
   16d7e:	f640 4001 	movw	r0, #3073	; 0xc01
   16d82:	f7fe ffad 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16d86:	4604      	mov	r4, r0
   16d88:	2800      	cmp	r0, #0
   16d8a:	f47f af07 	bne.w	16b9c <hci_init+0x100>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   16d8e:	4601      	mov	r1, r0
   16d90:	aa02      	add	r2, sp, #8
   16d92:	f64f 4001 	movw	r0, #64513	; 0xfc01
   16d96:	f7fe ffa3 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16d9a:	4e51      	ldr	r6, [pc, #324]	; (16ee0 <hci_init+0x444>)
   16d9c:	4b51      	ldr	r3, [pc, #324]	; (16ee4 <hci_init+0x448>)
   16d9e:	1af6      	subs	r6, r6, r3
   16da0:	08f6      	lsrs	r6, r6, #3
   16da2:	01b6      	lsls	r6, r6, #6
   16da4:	b3b0      	cbz	r0, 16e14 <hci_init+0x378>
		BT_WARN("Vendor HCI extensions not available");
   16da6:	4850      	ldr	r0, [pc, #320]	; (16ee8 <hci_init+0x44c>)
   16da8:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
   16dac:	f006 fb25 	bl	1d3fa <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16db0:	79eb      	ldrb	r3, [r5, #7]
   16db2:	2b00      	cmp	r3, #0
   16db4:	f47f aef2 	bne.w	16b9c <hci_init+0x100>
		bt_setup_public_id_addr();
   16db8:	f7ff fd9a 	bl	168f0 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16dbc:	79eb      	ldrb	r3, [r5, #7]
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	f47f aeec 	bne.w	16b9c <hci_init+0x100>
		err = bt_setup_random_id_addr();
   16dc4:	f7ff fe3e 	bl	16a44 <bt_setup_random_id_addr>
		if (err) {
   16dc8:	4604      	mov	r4, r0
   16dca:	2800      	cmp	r0, #0
   16dcc:	f000 80af 	beq.w	16f2e <hci_init+0x492>
			BT_ERR("Unable to set identity address");
   16dd0:	4846      	ldr	r0, [pc, #280]	; (16eec <hci_init+0x450>)
   16dd2:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
   16dd6:	f006 fb10 	bl	1d3fa <log_0>
			return err;
   16dda:	e6df      	b.n	16b9c <hci_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   16ddc:	2102      	movs	r1, #2
   16dde:	f640 406d 	movw	r0, #3181	; 0xc6d
   16de2:	f7fe ff45 	bl	15c70 <bt_hci_cmd_create>
		if (!buf) {
   16de6:	4604      	mov	r4, r0
   16de8:	b910      	cbnz	r0, 16df0 <hci_init+0x354>
		return -ENOBUFS;
   16dea:	f06f 0436 	mvn.w	r4, #54	; 0x36
   16dee:	e6d5      	b.n	16b9c <hci_init+0x100>
   16df0:	2102      	movs	r1, #2
   16df2:	3008      	adds	r0, #8
   16df4:	f008 fb1f 	bl	1f436 <net_buf_simple_add>
		cp_le->le = 0x01;
   16df8:	2301      	movs	r3, #1
   16dfa:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   16dfc:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   16dfe:	4621      	mov	r1, r4
   16e00:	4632      	mov	r2, r6
   16e02:	f640 406d 	movw	r0, #3181	; 0xc6d
   16e06:	f7fe ff6b 	bl	15ce0 <bt_hci_cmd_send_sync>
		if (err) {
   16e0a:	4604      	mov	r4, r0
   16e0c:	2800      	cmp	r0, #0
   16e0e:	f43f af07 	beq.w	16c20 <hci_init+0x184>
   16e12:	e6c3      	b.n	16b9c <hci_init+0x100>
	rp.info = (void *)rsp->data;
   16e14:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   16e16:	4836      	ldr	r0, [pc, #216]	; (16ef0 <hci_init+0x454>)
	rp.info = (void *)rsp->data;
   16e18:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   16e1a:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   16e1e:	2a03      	cmp	r2, #3
		return plat_str[platform];
   16e20:	bf96      	itet	ls
   16e22:	4934      	ldrls	r1, [pc, #208]	; (16ef4 <hci_init+0x458>)
	return "unknown";
   16e24:	4934      	ldrhi	r1, [pc, #208]	; (16ef8 <hci_init+0x45c>)
		return plat_str[platform];
   16e26:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   16e2a:	f046 0303 	orr.w	r3, r6, #3
   16e2e:	f006 fb05 	bl	1d43c <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   16e32:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   16e36:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   16e3a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
   16e3c:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   16e40:	d12e      	bne.n	16ea0 <hci_init+0x404>
	if (variant < ARRAY_SIZE(nordic_str)) {
   16e42:	2a03      	cmp	r2, #3
   16e44:	d82c      	bhi.n	16ea0 <hci_init+0x404>
		return nordic_str[variant];
   16e46:	492d      	ldr	r1, [pc, #180]	; (16efc <hci_init+0x460>)
   16e48:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   16e4c:	482c      	ldr	r0, [pc, #176]	; (16f00 <hci_init+0x464>)
   16e4e:	f006 faf5 	bl	1d43c <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   16e52:	797a      	ldrb	r2, [r7, #5]
   16e54:	482b      	ldr	r0, [pc, #172]	; (16f04 <hci_init+0x468>)
	if (variant < ARRAY_SIZE(var_str)) {
   16e56:	2a03      	cmp	r2, #3
		return var_str[variant];
   16e58:	bf96      	itet	ls
   16e5a:	492b      	ldrls	r1, [pc, #172]	; (16f08 <hci_init+0x46c>)
	return "unknown";
   16e5c:	4926      	ldrhi	r1, [pc, #152]	; (16ef8 <hci_init+0x45c>)
		return var_str[variant];
   16e5e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   16e62:	e9cd 1203 	strd	r1, r2, [sp, #12]
   16e66:	79ba      	ldrb	r2, [r7, #6]
   16e68:	9205      	str	r2, [sp, #20]
   16e6a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   16e6e:	9206      	str	r2, [sp, #24]
   16e70:	f8d7 2009 	ldr.w	r2, [r7, #9]
   16e74:	9207      	str	r2, [sp, #28]
   16e76:	f046 0303 	orr.w	r3, r6, #3
   16e7a:	2205      	movs	r2, #5
   16e7c:	a903      	add	r1, sp, #12
   16e7e:	f006 fb12 	bl	1d4a6 <log_n>
	net_buf_unref(rsp);
   16e82:	9802      	ldr	r0, [sp, #8]
   16e84:	f003 f87e 	bl	19f84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   16e88:	aa02      	add	r2, sp, #8
   16e8a:	2100      	movs	r1, #0
   16e8c:	f64f 4002 	movw	r0, #64514	; 0xfc02
   16e90:	f7fe ff26 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   16e94:	4607      	mov	r7, r0
   16e96:	b128      	cbz	r0, 16ea4 <hci_init+0x408>
		BT_WARN("Failed to read supported vendor commands");
   16e98:	481c      	ldr	r0, [pc, #112]	; (16f0c <hci_init+0x470>)
   16e9a:	f046 0102 	orr.w	r1, r6, #2
   16e9e:	e785      	b.n	16dac <hci_init+0x310>
		return "unknown";
   16ea0:	4915      	ldr	r1, [pc, #84]	; (16ef8 <hci_init+0x45c>)
   16ea2:	e7d3      	b.n	16e4c <hci_init+0x3b0>
	rp.cmds = (void *)rsp->data;
   16ea4:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   16ea6:	481a      	ldr	r0, [pc, #104]	; (16f10 <hci_init+0x474>)
   16ea8:	6899      	ldr	r1, [r3, #8]
   16eaa:	2202      	movs	r2, #2
   16eac:	3101      	adds	r1, #1
   16eae:	f007 f8b3 	bl	1e018 <memcpy>
	net_buf_unref(rsp);
   16eb2:	9802      	ldr	r0, [sp, #8]
   16eb4:	f003 f866 	bl	19f84 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   16eb8:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   16ebc:	075b      	lsls	r3, r3, #29
   16ebe:	f57f af77 	bpl.w	16db0 <hci_init+0x314>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   16ec2:	aa02      	add	r2, sp, #8
   16ec4:	4639      	mov	r1, r7
   16ec6:	f64f 4003 	movw	r0, #64515	; 0xfc03
   16eca:	f7fe ff09 	bl	15ce0 <bt_hci_cmd_send_sync>
		if (err) {
   16ece:	b318      	cbz	r0, 16f18 <hci_init+0x47c>
			BT_WARN("Failed to read supported vendor features");
   16ed0:	4810      	ldr	r0, [pc, #64]	; (16f14 <hci_init+0x478>)
   16ed2:	f046 0102 	orr.w	r1, r6, #2
   16ed6:	e769      	b.n	16dac <hci_init+0x310>
   16ed8:	20000460 	.word	0x20000460
   16edc:	20000490 	.word	0x20000490
   16ee0:	00020328 	.word	0x00020328
   16ee4:	00020308 	.word	0x00020308
   16ee8:	000217f2 	.word	0x000217f2
   16eec:	000218c6 	.word	0x000218c6
   16ef0:	00021816 	.word	0x00021816
   16ef4:	0002069c 	.word	0x0002069c
   16ef8:	0002129a 	.word	0x0002129a
   16efc:	0002066c 	.word	0x0002066c
   16f00:	0002182f 	.word	0x0002182f
   16f04:	00021847 	.word	0x00021847
   16f08:	000206d4 	.word	0x000206d4
   16f0c:	00021874 	.word	0x00021874
   16f10:	2000044d 	.word	0x2000044d
   16f14:	0002189d 	.word	0x0002189d
		rp.feat = (void *)rsp->data;
   16f18:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   16f1a:	480a      	ldr	r0, [pc, #40]	; (16f44 <hci_init+0x4a8>)
   16f1c:	6899      	ldr	r1, [r3, #8]
   16f1e:	2201      	movs	r2, #1
   16f20:	4411      	add	r1, r2
   16f22:	f007 f879 	bl	1e018 <memcpy>
		net_buf_unref(rsp);
   16f26:	9802      	ldr	r0, [sp, #8]
   16f28:	f003 f82c 	bl	19f84 <net_buf_unref>
   16f2c:	e740      	b.n	16db0 <hci_init+0x314>
		err = set_random_address(&bt_dev.id_addr[0].a);
   16f2e:	4806      	ldr	r0, [pc, #24]	; (16f48 <hci_init+0x4ac>)
   16f30:	f7fe ff78 	bl	15e24 <set_random_address>
		if (err) {
   16f34:	4604      	mov	r4, r0
   16f36:	2800      	cmp	r0, #0
   16f38:	f43f ae30 	beq.w	16b9c <hci_init+0x100>
			BT_ERR("Unable to set random address");
   16f3c:	4803      	ldr	r0, [pc, #12]	; (16f4c <hci_init+0x4b0>)
   16f3e:	f046 0101 	orr.w	r1, r6, #1
   16f42:	e748      	b.n	16dd6 <hci_init+0x33a>
   16f44:	2000044c 	.word	0x2000044c
   16f48:	200003c9 	.word	0x200003c9
   16f4c:	000218e5 	.word	0x000218e5

00016f50 <bt_enable>:
{
   16f50:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   16f54:	4d3d      	ldr	r5, [pc, #244]	; (1704c <bt_enable+0xfc>)
   16f56:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
{
   16f5a:	b088      	sub	sp, #32
   16f5c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   16f5e:	b97b      	cbnz	r3, 16f80 <bt_enable+0x30>
   16f60:	4b3b      	ldr	r3, [pc, #236]	; (17050 <bt_enable+0x100>)
   16f62:	493c      	ldr	r1, [pc, #240]	; (17054 <bt_enable+0x104>)
		BT_ERR("No HCI driver registered");
   16f64:	483c      	ldr	r0, [pc, #240]	; (17058 <bt_enable+0x108>)
   16f66:	1ac9      	subs	r1, r1, r3
   16f68:	08c9      	lsrs	r1, r1, #3
   16f6a:	0189      	lsls	r1, r1, #6
   16f6c:	f041 0101 	orr.w	r1, r1, #1
   16f70:	f006 fa43 	bl	1d3fa <log_0>
		return -ENODEV;
   16f74:	f06f 0412 	mvn.w	r4, #18
}
   16f78:	4620      	mov	r0, r4
   16f7a:	b008      	add	sp, #32
   16f7c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16f80:	2101      	movs	r1, #1
   16f82:	f105 0094 	add.w	r0, r5, #148	; 0x94
   16f86:	f007 f93a 	bl	1e1fe <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16f8a:	f010 0401 	ands.w	r4, r0, #1
   16f8e:	d15a      	bne.n	17046 <bt_enable+0xf6>
	ready_cb = cb;
   16f90:	4b32      	ldr	r3, [pc, #200]	; (1705c <bt_enable+0x10c>)
   16f92:	f04f 0800 	mov.w	r8, #0
   16f96:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   16f98:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16f9c:	f06f 0308 	mvn.w	r3, #8
   16fa0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16fa4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16fa8:	e9cd 4400 	strd	r4, r4, [sp]
   16fac:	4b2c      	ldr	r3, [pc, #176]	; (17060 <bt_enable+0x110>)
   16fae:	492d      	ldr	r1, [pc, #180]	; (17064 <bt_enable+0x114>)
   16fb0:	9404      	str	r4, [sp, #16]
   16fb2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   16fb6:	482c      	ldr	r0, [pc, #176]	; (17068 <bt_enable+0x118>)
   16fb8:	f005 f9f6 	bl	1c3a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   16fbc:	492b      	ldr	r1, [pc, #172]	; (1706c <bt_enable+0x11c>)
   16fbe:	482a      	ldr	r0, [pc, #168]	; (17068 <bt_enable+0x118>)
   16fc0:	f008 fe27 	bl	1fc12 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16fc4:	f06f 0307 	mvn.w	r3, #7
   16fc8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16fcc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16fd0:	e9cd 4400 	strd	r4, r4, [sp]
   16fd4:	4b26      	ldr	r3, [pc, #152]	; (17070 <bt_enable+0x120>)
   16fd6:	4927      	ldr	r1, [pc, #156]	; (17074 <bt_enable+0x124>)
   16fd8:	9404      	str	r4, [sp, #16]
   16fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16fde:	4826      	ldr	r0, [pc, #152]	; (17078 <bt_enable+0x128>)
   16fe0:	f005 f9e2 	bl	1c3a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   16fe4:	4925      	ldr	r1, [pc, #148]	; (1707c <bt_enable+0x12c>)
   16fe6:	4824      	ldr	r0, [pc, #144]	; (17078 <bt_enable+0x128>)
   16fe8:	f008 fe13 	bl	1fc12 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   16fec:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
   16ff0:	68db      	ldr	r3, [r3, #12]
   16ff2:	4798      	blx	r3
	if (err) {
   16ff4:	4604      	mov	r4, r0
   16ff6:	b158      	cbz	r0, 17010 <bt_enable+0xc0>
   16ff8:	4b15      	ldr	r3, [pc, #84]	; (17050 <bt_enable+0x100>)
   16ffa:	4a16      	ldr	r2, [pc, #88]	; (17054 <bt_enable+0x104>)
   16ffc:	1ad2      	subs	r2, r2, r3
   16ffe:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   17000:	0192      	lsls	r2, r2, #6
   17002:	4601      	mov	r1, r0
   17004:	f042 0201 	orr.w	r2, r2, #1
   17008:	481d      	ldr	r0, [pc, #116]	; (17080 <bt_enable+0x130>)
   1700a:	f006 fa03 	bl	1d414 <log_1>
		return err;
   1700e:	e7b3      	b.n	16f78 <bt_enable+0x28>
	if (!cb) {
   17010:	b966      	cbnz	r6, 1702c <bt_enable+0xdc>
	err = hci_init();
   17012:	f7ff fd43 	bl	16a9c <hci_init>
	if (err) {
   17016:	4604      	mov	r4, r0
   17018:	2800      	cmp	r0, #0
   1701a:	d1ad      	bne.n	16f78 <bt_enable+0x28>
		err = bt_conn_init();
   1701c:	f000 ffbc 	bl	17f98 <bt_conn_init>
		if (err) {
   17020:	4604      	mov	r4, r0
   17022:	2800      	cmp	r0, #0
   17024:	d1a8      	bne.n	16f78 <bt_enable+0x28>
	bt_finalize_init();
   17026:	f7ff fb9f 	bl	16768 <bt_finalize_init>
	return 0;
   1702a:	e7a5      	b.n	16f78 <bt_enable+0x28>
   1702c:	2101      	movs	r1, #1
   1702e:	f105 0090 	add.w	r0, r5, #144	; 0x90
   17032:	f007 f8e4 	bl	1e1fe <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   17036:	07c3      	lsls	r3, r0, #31
   17038:	d49e      	bmi.n	16f78 <bt_enable+0x28>
		k_queue_append(&work_q->queue, work);
   1703a:	4812      	ldr	r0, [pc, #72]	; (17084 <bt_enable+0x134>)
   1703c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   17040:	f008 fc81 	bl	1f946 <k_queue_append>
   17044:	e798      	b.n	16f78 <bt_enable+0x28>
		return -EALREADY;
   17046:	f06f 0444 	mvn.w	r4, #68	; 0x44
   1704a:	e795      	b.n	16f78 <bt_enable+0x28>
   1704c:	200003c8 	.word	0x200003c8
   17050:	00020308 	.word	0x00020308
   17054:	00020328 	.word	0x00020328
   17058:	00021902 	.word	0x00021902
   1705c:	20002564 	.word	0x20002564
   17060:	000164ad 	.word	0x000164ad
   17064:	20003740 	.word	0x20003740
   17068:	20001d90 	.word	0x20001d90
   1706c:	0002191b 	.word	0x0002191b
   17070:	0001585d 	.word	0x0001585d
   17074:	20003320 	.word	0x20003320
   17078:	20001d08 	.word	0x20001d08
   1707c:	00021921 	.word	0x00021921
   17080:	00021927 	.word	0x00021927
   17084:	200022f0 	.word	0x200022f0

00017088 <init_work>:
{
   17088:	b510      	push	{r4, lr}
	err = hci_init();
   1708a:	f7ff fd07 	bl	16a9c <hci_init>
	if (err) {
   1708e:	4604      	mov	r4, r0
   17090:	b928      	cbnz	r0, 1709e <init_work+0x16>
		err = bt_conn_init();
   17092:	f000 ff81 	bl	17f98 <bt_conn_init>
		if (err) {
   17096:	4604      	mov	r4, r0
   17098:	b908      	cbnz	r0, 1709e <init_work+0x16>
	bt_finalize_init();
   1709a:	f7ff fb65 	bl	16768 <bt_finalize_init>
	if (ready_cb) {
   1709e:	4b04      	ldr	r3, [pc, #16]	; (170b0 <init_work+0x28>)
   170a0:	681b      	ldr	r3, [r3, #0]
   170a2:	b11b      	cbz	r3, 170ac <init_work+0x24>
		ready_cb(err);
   170a4:	4620      	mov	r0, r4
}
   170a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   170aa:	4718      	bx	r3
}
   170ac:	bd10      	pop	{r4, pc}
   170ae:	bf00      	nop
   170b0:	20002564 	.word	0x20002564

000170b4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   170b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   170b8:	690d      	ldr	r5, [r1, #16]
{
   170ba:	b08f      	sub	sp, #60	; 0x3c
   170bc:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   170be:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   170c0:	ebb5 0b03 	subs.w	fp, r5, r3
{
   170c4:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   170c6:	4883      	ldr	r0, [pc, #524]	; (172d4 <bt_le_adv_start_legacy+0x220>)
	struct bt_conn *conn = NULL;
   170c8:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   170ca:	bf18      	it	ne
   170cc:	f04f 0b01 	movne.w	fp, #1
{
   170d0:	460c      	mov	r4, r1
   170d2:	4691      	mov	r9, r2
   170d4:	f007 f887 	bl	1e1e6 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   170d8:	0787      	lsls	r7, r0, #30
   170da:	f140 80ed 	bpl.w	172b8 <bt_le_adv_start_legacy+0x204>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   170de:	4608      	mov	r0, r1
   170e0:	f7fe f9b8 	bl	15454 <valid_adv_param>
   170e4:	4607      	mov	r7, r0
   170e6:	2800      	cmp	r0, #0
   170e8:	f000 80e9 	beq.w	172be <bt_le_adv_start_legacy+0x20a>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   170ec:	f106 0810 	add.w	r8, r6, #16
   170f0:	4640      	mov	r0, r8
   170f2:	f007 f878 	bl	1e1e6 <atomic_get>
   170f6:	f3c0 1180 	ubfx	r1, r0, #6, #1
   170fa:	0640      	lsls	r0, r0, #25
   170fc:	f100 80e2 	bmi.w	172c4 <bt_le_adv_start_legacy+0x210>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   17100:	220f      	movs	r2, #15
   17102:	a80a      	add	r0, sp, #40	; 0x28
   17104:	9105      	str	r1, [sp, #20]
   17106:	f006 ffb2 	bl	1e06e <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1710a:	68a3      	ldr	r3, [r4, #8]
   1710c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   17110:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   17112:	68e3      	ldr	r3, [r4, #12]
   17114:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   17118:	f007 f856 	bl	1e1c8 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   1711c:	7832      	ldrb	r2, [r6, #0]
   1711e:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   17120:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17122:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   17126:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   17128:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   1712c:	d004      	beq.n	17138 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1712e:	4869      	ldr	r0, [pc, #420]	; (172d4 <bt_le_adv_start_legacy+0x220>)
   17130:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17134:	f007 f872 	bl	1e21c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
   17138:	4b67      	ldr	r3, [pc, #412]	; (172d8 <bt_le_adv_start_legacy+0x224>)
	adv->id = param->id;
   1713a:	7820      	ldrb	r0, [r4, #0]
   1713c:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1713e:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   17142:	465a      	mov	r2, fp
   17144:	6861      	ldr	r1, [r4, #4]
   17146:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1714a:	f7fe fe99 	bl	15e80 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   1714e:	4683      	mov	fp, r0
   17150:	2800      	cmp	r0, #0
   17152:	d16f      	bne.n	17234 <bt_le_adv_start_legacy+0x180>
		return err;
	}

	if (dir_adv) {
   17154:	f106 0009 	add.w	r0, r6, #9
   17158:	2d00      	cmp	r5, #0
   1715a:	d048      	beq.n	171ee <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1715c:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1715e:	f007 f848 	bl	1e1f2 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17162:	6860      	ldr	r0, [r4, #4]
   17164:	07c1      	lsls	r1, r0, #31
   17166:	d54a      	bpl.n	171fe <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
   17168:	2d00      	cmp	r5, #0
   1716a:	d045      	beq.n	171f8 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   1716c:	f010 0f10 	tst.w	r0, #16
   17170:	bf14      	ite	ne
   17172:	2304      	movne	r3, #4
   17174:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   17176:	6921      	ldr	r1, [r4, #16]
   17178:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1717c:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   17180:	f007 f837 	bl	1e1f2 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   17184:	210f      	movs	r1, #15
   17186:	f242 0006 	movw	r0, #8198	; 0x2006
   1718a:	f7fe fd71 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   1718e:	4683      	mov	fp, r0
   17190:	2800      	cmp	r0, #0
   17192:	f000 809a 	beq.w	172ca <bt_le_adv_start_legacy+0x216>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17196:	220f      	movs	r2, #15
   17198:	a90a      	add	r1, sp, #40	; 0x28
   1719a:	3008      	adds	r0, #8
   1719c:	f008 f951 	bl	1f442 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   171a0:	2200      	movs	r2, #0
   171a2:	4659      	mov	r1, fp
   171a4:	f242 0006 	movw	r0, #8198	; 0x2006
   171a8:	f7fe fd9a 	bl	15ce0 <bt_hci_cmd_send_sync>
	if (err) {
   171ac:	2800      	cmp	r0, #0
   171ae:	f040 808f 	bne.w	172d0 <bt_le_adv_start_legacy+0x21c>
		return err;
	}

	if (!dir_adv) {
   171b2:	b37d      	cbz	r5, 17214 <bt_le_adv_start_legacy+0x160>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   171b4:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   171b6:	07da      	lsls	r2, r3, #31
   171b8:	d440      	bmi.n	1723c <bt_le_adv_start_legacy+0x188>
	return set_le_adv_enable_legacy(adv, enable);
   171ba:	2101      	movs	r1, #1
   171bc:	4630      	mov	r0, r6
   171be:	f7fe ff9f 	bl	16100 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   171c2:	4683      	mov	fp, r0
   171c4:	2800      	cmp	r0, #0
   171c6:	d070      	beq.n	172aa <bt_le_adv_start_legacy+0x1f6>
   171c8:	4b44      	ldr	r3, [pc, #272]	; (172dc <bt_le_adv_start_legacy+0x228>)
   171ca:	4945      	ldr	r1, [pc, #276]	; (172e0 <bt_le_adv_start_legacy+0x22c>)
		BT_ERR("Failed to start advertiser");
   171cc:	4845      	ldr	r0, [pc, #276]	; (172e4 <bt_le_adv_start_legacy+0x230>)
   171ce:	1ac9      	subs	r1, r1, r3
   171d0:	08c9      	lsrs	r1, r1, #3
   171d2:	0189      	lsls	r1, r1, #6
   171d4:	f041 0101 	orr.w	r1, r1, #1
   171d8:	f006 f90f 	bl	1d3fa <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   171dc:	9807      	ldr	r0, [sp, #28]
   171de:	b348      	cbz	r0, 17234 <bt_le_adv_start_legacy+0x180>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   171e0:	2100      	movs	r1, #0
   171e2:	f000 fc33 	bl	17a4c <bt_conn_set_state>
			bt_conn_unref(conn);
   171e6:	9807      	ldr	r0, [sp, #28]
   171e8:	f007 f985 	bl	1e4f6 <bt_conn_unref>
   171ec:	e022      	b.n	17234 <bt_le_adv_start_legacy+0x180>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   171ee:	9508      	str	r5, [sp, #32]
   171f0:	a908      	add	r1, sp, #32
   171f2:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   171f6:	e7b2      	b.n	1715e <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
   171f8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   171fc:	e7c2      	b.n	17184 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   171fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17200:	b933      	cbnz	r3, 17210 <bt_le_adv_start_legacy+0x15c>
   17202:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   17206:	f1c7 0303 	rsb	r3, r7, #3
   1720a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1720e:	e7b9      	b.n	17184 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   17210:	2701      	movs	r7, #1
   17212:	e7f8      	b.n	17206 <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17214:	6863      	ldr	r3, [r4, #4]
   17216:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1721a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1721e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17220:	9300      	str	r3, [sp, #0]
   17222:	4652      	mov	r2, sl
   17224:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17226:	4649      	mov	r1, r9
   17228:	4630      	mov	r0, r6
   1722a:	f7fe fef5 	bl	16018 <le_adv_update.constprop.0>
		if (err) {
   1722e:	4683      	mov	fp, r0
   17230:	2800      	cmp	r0, #0
   17232:	d0bf      	beq.n	171b4 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   17234:	4658      	mov	r0, fp
   17236:	b00f      	add	sp, #60	; 0x3c
   17238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   1723c:	a907      	add	r1, sp, #28
   1723e:	4630      	mov	r0, r6
   17240:	f7fe fc94 	bl	15b6c <le_adv_start_add_conn>
		if (err) {
   17244:	4683      	mov	fp, r0
   17246:	2800      	cmp	r0, #0
   17248:	d0b7      	beq.n	171ba <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
   1724a:	f110 0f0c 	cmn.w	r0, #12
   1724e:	d1f1      	bne.n	17234 <bt_le_adv_start_legacy+0x180>
   17250:	2d00      	cmp	r5, #0
   17252:	d1ef      	bne.n	17234 <bt_le_adv_start_legacy+0x180>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   17254:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   17256:	079b      	lsls	r3, r3, #30
   17258:	d4ec      	bmi.n	17234 <bt_le_adv_start_legacy+0x180>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1725a:	6860      	ldr	r0, [r4, #4]
   1725c:	f080 0002 	eor.w	r0, r0, #2
   17260:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   17264:	f00b 0201 	and.w	r2, fp, #1
   17268:	210c      	movs	r1, #12
   1726a:	4640      	mov	r0, r8
   1726c:	f006 ffe5 	bl	1e23a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   17270:	6862      	ldr	r2, [r4, #4]
   17272:	2107      	movs	r1, #7
   17274:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   17278:	4640      	mov	r0, r8
   1727a:	f006 ffde 	bl	1e23a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1727e:	6862      	ldr	r2, [r4, #4]
   17280:	2108      	movs	r1, #8
   17282:	f002 0201 	and.w	r2, r2, #1
   17286:	4640      	mov	r0, r8
   17288:	f006 ffd7 	bl	1e23a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1728c:	463a      	mov	r2, r7
   1728e:	2109      	movs	r1, #9
   17290:	4640      	mov	r0, r8
   17292:	f006 ffd2 	bl	1e23a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   17296:	6862      	ldr	r2, [r4, #4]
   17298:	210b      	movs	r1, #11
   1729a:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1729e:	4640      	mov	r0, r8
   172a0:	f006 ffcb 	bl	1e23a <atomic_set_bit_to>
	return 0;
   172a4:	f04f 0b00 	mov.w	fp, #0
   172a8:	e7c4      	b.n	17234 <bt_le_adv_start_legacy+0x180>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   172aa:	9807      	ldr	r0, [sp, #28]
   172ac:	b108      	cbz	r0, 172b2 <bt_le_adv_start_legacy+0x1fe>
		bt_conn_unref(conn);
   172ae:	f007 f922 	bl	1e4f6 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   172b2:	2d00      	cmp	r5, #0
   172b4:	d1d6      	bne.n	17264 <bt_le_adv_start_legacy+0x1b0>
   172b6:	e7d0      	b.n	1725a <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
   172b8:	f06f 0b0a 	mvn.w	fp, #10
   172bc:	e7ba      	b.n	17234 <bt_le_adv_start_legacy+0x180>
		return -EINVAL;
   172be:	f06f 0b15 	mvn.w	fp, #21
   172c2:	e7b7      	b.n	17234 <bt_le_adv_start_legacy+0x180>
		return -EALREADY;
   172c4:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   172c8:	e7b4      	b.n	17234 <bt_le_adv_start_legacy+0x180>
		return -ENOBUFS;
   172ca:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   172ce:	e7b1      	b.n	17234 <bt_le_adv_start_legacy+0x180>
   172d0:	4683      	mov	fp, r0
   172d2:	e7af      	b.n	17234 <bt_le_adv_start_legacy+0x180>
   172d4:	2000045c 	.word	0x2000045c
   172d8:	200003c8 	.word	0x200003c8
   172dc:	00020308 	.word	0x00020308
   172e0:	00020328 	.word	0x00020328
   172e4:	00021943 	.word	0x00021943

000172e8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   172e8:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   172ea:	9c04      	ldr	r4, [sp, #16]
   172ec:	e9cd 3400 	strd	r3, r4, [sp]
   172f0:	4613      	mov	r3, r2
   172f2:	460a      	mov	r2, r1
   172f4:	4601      	mov	r1, r0
   172f6:	4802      	ldr	r0, [pc, #8]	; (17300 <bt_le_adv_start+0x18>)
   172f8:	f7ff fedc 	bl	170b4 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   172fc:	b002      	add	sp, #8
   172fe:	bd10      	pop	{r4, pc}
   17300:	200003e0 	.word	0x200003e0

00017304 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   17304:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17306:	4818      	ldr	r0, [pc, #96]	; (17368 <bt_le_adv_resume+0x64>)
   17308:	f006 ff6d 	bl	1e1e6 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1730c:	04c1      	lsls	r1, r0, #19
   1730e:	d529      	bpl.n	17364 <bt_le_adv_resume+0x60>
   17310:	4815      	ldr	r0, [pc, #84]	; (17368 <bt_le_adv_resume+0x64>)
   17312:	f006 ff68 	bl	1e1e6 <atomic_get>
   17316:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17318:	f3c0 1480 	ubfx	r4, r0, #6, #1
   1731c:	d422      	bmi.n	17364 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1731e:	4812      	ldr	r0, [pc, #72]	; (17368 <bt_le_adv_resume+0x64>)
   17320:	f006 ff61 	bl	1e1e6 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17324:	05c3      	lsls	r3, r0, #23
   17326:	d51d      	bpl.n	17364 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   17328:	4810      	ldr	r0, [pc, #64]	; (1736c <bt_le_adv_resume+0x68>)
   1732a:	a901      	add	r1, sp, #4
   1732c:	f7fe fc1e 	bl	15b6c <le_adv_start_add_conn>
	if (err) {
   17330:	b9c0      	cbnz	r0, 17364 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   17332:	480e      	ldr	r0, [pc, #56]	; (1736c <bt_le_adv_resume+0x68>)
   17334:	2101      	movs	r1, #1
   17336:	f7fe fee3 	bl	16100 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   1733a:	b150      	cbz	r0, 17352 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1733c:	4621      	mov	r1, r4
   1733e:	9801      	ldr	r0, [sp, #4]
   17340:	f000 fb84 	bl	17a4c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17344:	4808      	ldr	r0, [pc, #32]	; (17368 <bt_le_adv_resume+0x64>)
   17346:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1734a:	f006 ff67 	bl	1e21c <atomic_and>
	return (old & mask) != 0;
   1734e:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   17352:	9801      	ldr	r0, [sp, #4]
   17354:	f007 f8cf 	bl	1e4f6 <bt_conn_unref>
	if (persist_paused) {
   17358:	b124      	cbz	r4, 17364 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1735a:	4803      	ldr	r0, [pc, #12]	; (17368 <bt_le_adv_resume+0x64>)
   1735c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17360:	f006 ff4d 	bl	1e1fe <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   17364:	b002      	add	sp, #8
   17366:	bd10      	pop	{r4, pc}
   17368:	200003f0 	.word	0x200003f0
   1736c:	200003e0 	.word	0x200003e0

00017370 <enh_conn_complete>:
{
   17370:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
   17374:	7805      	ldrb	r5, [r0, #0]
{
   17376:	4604      	mov	r4, r0
	if (evt->status) {
   17378:	b365      	cbz	r5, 173d4 <enh_conn_complete+0x64>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1737a:	2d3c      	cmp	r5, #60	; 0x3c
   1737c:	d11e      	bne.n	173bc <enh_conn_complete+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1737e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17382:	4858      	ldr	r0, [pc, #352]	; (174e4 <enh_conn_complete+0x174>)
   17384:	f006 ff4a 	bl	1e21c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   17388:	2000      	movs	r0, #0
   1738a:	f7fe fb1f 	bl	159cc <find_pending_connect.part.0>
		if (!conn) {
   1738e:	4604      	mov	r4, r0
   17390:	b960      	cbnz	r0, 173ac <enh_conn_complete+0x3c>
   17392:	4955      	ldr	r1, [pc, #340]	; (174e8 <enh_conn_complete+0x178>)
   17394:	4b55      	ldr	r3, [pc, #340]	; (174ec <enh_conn_complete+0x17c>)
			BT_ERR("No pending slave connection");
   17396:	4856      	ldr	r0, [pc, #344]	; (174f0 <enh_conn_complete+0x180>)
   17398:	1ac9      	subs	r1, r1, r3
   1739a:	08c9      	lsrs	r1, r1, #3
   1739c:	0189      	lsls	r1, r1, #6
   1739e:	f041 0101 	orr.w	r1, r1, #1
   173a2:	f006 f82a 	bl	1d3fa <log_0>
}
   173a6:	b004      	add	sp, #16
   173a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   173ac:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   173ae:	2100      	movs	r1, #0
   173b0:	f000 fb4c 	bl	17a4c <bt_conn_set_state>
		bt_conn_unref(conn);
   173b4:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   173b6:	f007 f89e 	bl	1e4f6 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   173ba:	e7f4      	b.n	173a6 <enh_conn_complete+0x36>
   173bc:	4b4b      	ldr	r3, [pc, #300]	; (174ec <enh_conn_complete+0x17c>)
   173be:	4a4a      	ldr	r2, [pc, #296]	; (174e8 <enh_conn_complete+0x178>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   173c0:	484c      	ldr	r0, [pc, #304]	; (174f4 <enh_conn_complete+0x184>)
   173c2:	1ad2      	subs	r2, r2, r3
   173c4:	08d2      	lsrs	r2, r2, #3
   173c6:	0192      	lsls	r2, r2, #6
   173c8:	f042 0202 	orr.w	r2, r2, #2
   173cc:	4629      	mov	r1, r5
   173ce:	f006 f821 	bl	1d414 <log_1>
		return;
   173d2:	e7e8      	b.n	173a6 <enh_conn_complete+0x36>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   173d4:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   173d6:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   173da:	3b02      	subs	r3, #2
   173dc:	1d06      	adds	r6, r0, #4
   173de:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   173e0:	fa1f f788 	uxth.w	r7, r8
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   173e4:	4631      	mov	r1, r6
   173e6:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   173e8:	d836      	bhi.n	17458 <enh_conn_complete+0xe8>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   173ea:	f006 ff02 	bl	1e1f2 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   173ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
   173f2:	2206      	movs	r2, #6
   173f4:	3b02      	subs	r3, #2
   173f6:	f104 0111 	add.w	r1, r4, #17
   173fa:	f10d 0001 	add.w	r0, sp, #1
   173fe:	f88d 3008 	strb.w	r3, [sp, #8]
   17402:	f006 fe09 	bl	1e018 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   17406:	2301      	movs	r3, #1
   17408:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1740c:	78e3      	ldrb	r3, [r4, #3]
   1740e:	2b01      	cmp	r3, #1
   17410:	d10c      	bne.n	1742c <enh_conn_complete+0xbc>
   17412:	a802      	add	r0, sp, #8
   17414:	f7fe fada 	bl	159cc <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17418:	78e3      	ldrb	r3, [r4, #3]
   1741a:	2b01      	cmp	r3, #1
   1741c:	4605      	mov	r5, r0
   1741e:	d104      	bne.n	1742a <enh_conn_complete+0xba>
   17420:	4830      	ldr	r0, [pc, #192]	; (174e4 <enh_conn_complete+0x174>)
   17422:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17426:	f006 fef9 	bl	1e21c <atomic_and>
	if (!conn) {
   1742a:	b9e5      	cbnz	r5, 17466 <enh_conn_complete+0xf6>
   1742c:	4a2f      	ldr	r2, [pc, #188]	; (174ec <enh_conn_complete+0x17c>)
   1742e:	4c2e      	ldr	r4, [pc, #184]	; (174e8 <enh_conn_complete+0x178>)
		BT_ERR("No pending conn for peer %s",
   17430:	4630      	mov	r0, r6
   17432:	1aa4      	subs	r4, r4, r2
   17434:	f7fd fefe 	bl	15234 <bt_addr_le_str_real>
   17438:	f7fc f8e2 	bl	13600 <log_strdup>
   1743c:	08e4      	lsrs	r4, r4, #3
   1743e:	01a4      	lsls	r4, r4, #6
   17440:	f044 0401 	orr.w	r4, r4, #1
   17444:	4601      	mov	r1, r0
   17446:	4622      	mov	r2, r4
   17448:	482b      	ldr	r0, [pc, #172]	; (174f8 <enh_conn_complete+0x188>)
   1744a:	f005 ffe3 	bl	1d414 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1744e:	211f      	movs	r1, #31
   17450:	4638      	mov	r0, r7
   17452:	f006 ff03 	bl	1e25c <bt_hci_disconnect>
		return;
   17456:	e7a6      	b.n	173a6 <enh_conn_complete+0x36>
		bt_addr_le_copy(&id_addr,
   17458:	f006 fecb 	bl	1e1f2 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   1745c:	4631      	mov	r1, r6
   1745e:	4668      	mov	r0, sp
   17460:	f006 fec7 	bl	1e1f2 <bt_addr_le_copy>
   17464:	e7d2      	b.n	1740c <enh_conn_complete+0x9c>
	conn->handle = handle;
   17466:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   17468:	a902      	add	r1, sp, #8
	conn->handle = handle;
   1746a:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1746e:	f006 fec0 	bl	1e1f2 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   17472:	7e22      	ldrb	r2, [r4, #24]
   17474:	7de3      	ldrb	r3, [r4, #23]
   17476:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1747a:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1747e:	7ea2      	ldrb	r2, [r4, #26]
   17480:	7e63      	ldrb	r3, [r4, #25]
   17482:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17486:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1748a:	7ee3      	ldrb	r3, [r4, #27]
   1748c:	7f22      	ldrb	r2, [r4, #28]
   1748e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17492:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   17496:	78e3      	ldrb	r3, [r4, #3]
   17498:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   1749a:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1749c:	2b01      	cmp	r3, #1
	conn->err = 0U;
   1749e:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   174a0:	d116      	bne.n	174d0 <enh_conn_complete+0x160>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   174a2:	4669      	mov	r1, sp
   174a4:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   174a8:	f006 fea3 	bl	1e1f2 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   174ac:	7a29      	ldrb	r1, [r5, #8]
   174ae:	4e13      	ldr	r6, [pc, #76]	; (174fc <enh_conn_complete+0x18c>)
   174b0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   174b4:	4431      	add	r1, r6
   174b6:	f105 0096 	add.w	r0, r5, #150	; 0x96
   174ba:	f006 fe9a 	bl	1e1f2 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   174be:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
   174c2:	4622      	mov	r2, r4
   174c4:	f001 0340 	and.w	r3, r1, #64	; 0x40
   174c8:	4313      	orrs	r3, r2
   174ca:	d001      	beq.n	174d0 <enh_conn_complete+0x160>
			bt_le_adv_resume();
   174cc:	f7ff ff1a 	bl	17304 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   174d0:	2107      	movs	r1, #7
   174d2:	4628      	mov	r0, r5
   174d4:	f000 faba 	bl	17a4c <bt_conn_set_state>
	conn_auto_initiate(conn);
   174d8:	4628      	mov	r0, r5
   174da:	f7fe fe79 	bl	161d0 <conn_auto_initiate>
	bt_conn_unref(conn);
   174de:	4628      	mov	r0, r5
   174e0:	e769      	b.n	173b6 <enh_conn_complete+0x46>
   174e2:	bf00      	nop
   174e4:	200003f0 	.word	0x200003f0
   174e8:	00020328 	.word	0x00020328
   174ec:	00020308 	.word	0x00020308
   174f0:	0002195e 	.word	0x0002195e
   174f4:	0002197a 	.word	0x0002197a
   174f8:	00021993 	.word	0x00021993
   174fc:	200003c8 	.word	0x200003c8

00017500 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   17500:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17502:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   17506:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   17508:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1750a:	4801      	ldr	r0, [pc, #4]	; (17510 <tx_free+0x10>)
   1750c:	f008 ba1b 	b.w	1f946 <k_queue_append>
   17510:	200007c8 	.word	0x200007c8

00017514 <notify_connected>:
{
   17514:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   17516:	4b09      	ldr	r3, [pc, #36]	; (1753c <notify_connected+0x28>)
   17518:	681d      	ldr	r5, [r3, #0]
{
   1751a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1751c:	7a61      	ldrb	r1, [r4, #9]
   1751e:	b92d      	cbnz	r5, 1752c <notify_connected+0x18>
	if (!conn->err) {
   17520:	b951      	cbnz	r1, 17538 <notify_connected+0x24>
		bt_gatt_connected(conn);
   17522:	4620      	mov	r0, r4
}
   17524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   17528:	f002 bbe8 	b.w	19cfc <bt_gatt_connected>
		if (cb->connected) {
   1752c:	682b      	ldr	r3, [r5, #0]
   1752e:	b10b      	cbz	r3, 17534 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   17530:	4620      	mov	r0, r4
   17532:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17534:	692d      	ldr	r5, [r5, #16]
   17536:	e7f1      	b.n	1751c <notify_connected+0x8>
}
   17538:	bd38      	pop	{r3, r4, r5, pc}
   1753a:	bf00      	nop
   1753c:	20002568 	.word	0x20002568

00017540 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   17540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   17544:	694d      	ldr	r5, [r1, #20]
{
   17546:	4604      	mov	r4, r0
   17548:	460e      	mov	r6, r1
   1754a:	4691      	mov	r9, r2
   1754c:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1754e:	f04f 33ff 	mov.w	r3, #4294967295
   17552:	4845      	ldr	r0, [pc, #276]	; (17668 <send_frag+0x128>)
   17554:	f04f 32ff 	mov.w	r2, #4294967295
   17558:	f004 feb2 	bl	1c2c0 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   1755c:	7aa3      	ldrb	r3, [r4, #10]
   1755e:	2b07      	cmp	r3, #7
   17560:	d151      	bne.n	17606 <send_frag+0xc6>
	__asm__ volatile(
   17562:	f04f 0340 	mov.w	r3, #64	; 0x40
   17566:	f3ef 8211 	mrs	r2, BASEPRI
   1756a:	f383 8811 	msr	BASEPRI, r3
   1756e:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   17572:	2d00      	cmp	r5, #0
   17574:	d059      	beq.n	1762a <send_frag+0xea>
	parent->next = child;
   17576:	2300      	movs	r3, #0
   17578:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1757a:	69a3      	ldr	r3, [r4, #24]
   1757c:	2b00      	cmp	r3, #0
   1757e:	d151      	bne.n	17624 <send_frag+0xe4>
	list->head = node;
   17580:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   17584:	f382 8811 	msr	BASEPRI, r2
   17588:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1758c:	2104      	movs	r1, #4
   1758e:	f106 0008 	add.w	r0, r6, #8
   17592:	f007 ff67 	bl	1f464 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   17596:	8823      	ldrh	r3, [r4, #0]
   17598:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   1759c:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   175a0:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   175a2:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   175a6:	3b04      	subs	r3, #4
   175a8:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   175aa:	2302      	movs	r3, #2
   175ac:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   175ae:	4630      	mov	r0, r6
   175b0:	f7fe fdd4 	bl	1615c <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   175b4:	4601      	mov	r1, r0
   175b6:	2800      	cmp	r0, #0
   175b8:	d053      	beq.n	17662 <send_frag+0x122>
   175ba:	4b2c      	ldr	r3, [pc, #176]	; (1766c <send_frag+0x12c>)
   175bc:	4a2c      	ldr	r2, [pc, #176]	; (17670 <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
   175be:	482d      	ldr	r0, [pc, #180]	; (17674 <send_frag+0x134>)
   175c0:	1ad2      	subs	r2, r2, r3
   175c2:	08d2      	lsrs	r2, r2, #3
   175c4:	0192      	lsls	r2, r2, #6
   175c6:	f042 0201 	orr.w	r2, r2, #1
   175ca:	f005 ff23 	bl	1d414 <log_1>
	__asm__ volatile(
   175ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   175d2:	f3ef 8111 	mrs	r1, BASEPRI
   175d6:	f383 8811 	msr	BASEPRI, r3
   175da:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   175de:	2d00      	cmp	r5, #0
   175e0:	d039      	beq.n	17656 <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   175e2:	6963      	ldr	r3, [r4, #20]
   175e4:	2200      	movs	r2, #0
   175e6:	b153      	cbz	r3, 175fe <send_frag+0xbe>
   175e8:	429d      	cmp	r5, r3
   175ea:	d131      	bne.n	17650 <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   175ec:	682b      	ldr	r3, [r5, #0]
   175ee:	bb4a      	cbnz	r2, 17644 <send_frag+0x104>
   175f0:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   175f2:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   175f4:	4295      	cmp	r5, r2
   175f6:	d100      	bne.n	175fa <send_frag+0xba>
	list->tail = node;
   175f8:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   175fa:	2300      	movs	r3, #0
   175fc:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   175fe:	f381 8811 	msr	BASEPRI, r1
   17602:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   17606:	4818      	ldr	r0, [pc, #96]	; (17668 <send_frag+0x128>)
   17608:	f004 fe34 	bl	1c274 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   1760c:	b115      	cbz	r5, 17614 <send_frag+0xd4>
		tx_free(tx);
   1760e:	4628      	mov	r0, r5
   17610:	f7ff ff76 	bl	17500 <tx_free>
	}

	if (always_consume) {
   17614:	b11f      	cbz	r7, 1761e <send_frag+0xde>
		net_buf_unref(buf);
   17616:	4630      	mov	r0, r6
   17618:	f002 fcb4 	bl	19f84 <net_buf_unref>
	}
	return false;
   1761c:	2700      	movs	r7, #0
}
   1761e:	4638      	mov	r0, r7
   17620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17624:	601d      	str	r5, [r3, #0]
	list->tail = node;
   17626:	61a5      	str	r5, [r4, #24]
}
   17628:	e7ac      	b.n	17584 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   1762a:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1762c:	b133      	cbz	r3, 1763c <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   1762e:	f103 080c 	add.w	r8, r3, #12
   17632:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   17634:	3301      	adds	r3, #1
   17636:	f8c8 3000 	str.w	r3, [r8]
   1763a:	e7a3      	b.n	17584 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   1763c:	69e3      	ldr	r3, [r4, #28]
   1763e:	f104 081c 	add.w	r8, r4, #28
   17642:	e7f7      	b.n	17634 <send_frag+0xf4>
	parent->next = child;
   17644:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   17646:	69a3      	ldr	r3, [r4, #24]
   17648:	429d      	cmp	r5, r3
	list->tail = node;
   1764a:	bf08      	it	eq
   1764c:	61a2      	streq	r2, [r4, #24]
}
   1764e:	e7d4      	b.n	175fa <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17650:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17652:	681b      	ldr	r3, [r3, #0]
   17654:	e7c7      	b.n	175e6 <send_frag+0xa6>
			(*pending_no_cb)--;
   17656:	f8d8 3000 	ldr.w	r3, [r8]
   1765a:	3b01      	subs	r3, #1
   1765c:	f8c8 3000 	str.w	r3, [r8]
   17660:	e7cd      	b.n	175fe <send_frag+0xbe>
	return true;
   17662:	2701      	movs	r7, #1
   17664:	e7db      	b.n	1761e <send_frag+0xde>
   17666:	bf00      	nop
   17668:	20000490 	.word	0x20000490
   1766c:	00020308 	.word	0x00020308
   17670:	00020318 	.word	0x00020318
   17674:	000215a9 	.word	0x000215a9

00017678 <bt_conn_get_pkts>:
}
   17678:	4800      	ldr	r0, [pc, #0]	; (1767c <bt_conn_get_pkts+0x4>)
   1767a:	4770      	bx	lr
   1767c:	20000490 	.word	0x20000490

00017680 <notify_le_param_updated>:
{
   17680:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17682:	f3bf 8f5b 	dmb	ish
   17686:	6842      	ldr	r2, [r0, #4]
   17688:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1768c:	0592      	lsls	r2, r2, #22
{
   1768e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   17690:	f100 0304 	add.w	r3, r0, #4
   17694:	d519      	bpl.n	176ca <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   17696:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1769a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   1769e:	4291      	cmp	r1, r2
   176a0:	d813      	bhi.n	176ca <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   176a2:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   176a6:	4291      	cmp	r1, r2
   176a8:	d30f      	bcc.n	176ca <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
   176aa:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   176ae:	4291      	cmp	r1, r2
   176b0:	d10b      	bne.n	176ca <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   176b2:	f3bf 8f5b 	dmb	ish
   176b6:	e853 2f00 	ldrex	r2, [r3]
   176ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   176be:	e843 2100 	strex	r1, r2, [r3]
   176c2:	2900      	cmp	r1, #0
   176c4:	d1f7      	bne.n	176b6 <notify_le_param_updated+0x36>
   176c6:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   176ca:	4b08      	ldr	r3, [pc, #32]	; (176ec <notify_le_param_updated+0x6c>)
   176cc:	681d      	ldr	r5, [r3, #0]
   176ce:	b905      	cbnz	r5, 176d2 <notify_le_param_updated+0x52>
}
   176d0:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   176d2:	68ee      	ldr	r6, [r5, #12]
   176d4:	b13e      	cbz	r6, 176e6 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   176d6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   176da:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   176de:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   176e2:	4620      	mov	r0, r4
   176e4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   176e6:	692d      	ldr	r5, [r5, #16]
   176e8:	e7f1      	b.n	176ce <notify_le_param_updated+0x4e>
   176ea:	bf00      	nop
   176ec:	20002568 	.word	0x20002568

000176f0 <le_param_req>:
{
   176f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176f2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   176f4:	4608      	mov	r0, r1
{
   176f6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   176f8:	f006 fdcb 	bl	1e292 <bt_le_conn_params_valid>
   176fc:	4604      	mov	r4, r0
   176fe:	b910      	cbnz	r0, 17706 <le_param_req+0x16>
		return false;
   17700:	2400      	movs	r4, #0
}
   17702:	4620      	mov	r0, r4
   17704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   17706:	4b09      	ldr	r3, [pc, #36]	; (1772c <le_param_req+0x3c>)
   17708:	681e      	ldr	r6, [r3, #0]
   1770a:	2e00      	cmp	r6, #0
   1770c:	d0f9      	beq.n	17702 <le_param_req+0x12>
		if (!cb->le_param_req) {
   1770e:	68b3      	ldr	r3, [r6, #8]
   17710:	b90b      	cbnz	r3, 17716 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   17712:	6936      	ldr	r6, [r6, #16]
   17714:	e7f9      	b.n	1770a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   17716:	4629      	mov	r1, r5
   17718:	4638      	mov	r0, r7
   1771a:	4798      	blx	r3
   1771c:	2800      	cmp	r0, #0
   1771e:	d0ef      	beq.n	17700 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   17720:	4628      	mov	r0, r5
   17722:	f006 fdb6 	bl	1e292 <bt_le_conn_params_valid>
   17726:	2800      	cmp	r0, #0
   17728:	d1f3      	bne.n	17712 <le_param_req+0x22>
   1772a:	e7e9      	b.n	17700 <le_param_req+0x10>
   1772c:	20002568 	.word	0x20002568

00017730 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   17730:	b570      	push	{r4, r5, r6, lr}
   17732:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   17734:	f100 0634 	add.w	r6, r0, #52	; 0x34
   17738:	2200      	movs	r2, #0
   1773a:	2300      	movs	r3, #0
   1773c:	4630      	mov	r0, r6
   1773e:	f007 fe29 	bl	1f394 <net_buf_get>
   17742:	4605      	mov	r5, r0
   17744:	b958      	cbnz	r0, 1775e <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
   17746:	4620      	mov	r0, r4
   17748:	f006 fe91 	bl	1e46e <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1774c:	f104 0158 	add.w	r1, r4, #88	; 0x58
   17750:	4807      	ldr	r0, [pc, #28]	; (17770 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   17752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17756:	2200      	movs	r2, #0
   17758:	2300      	movs	r3, #0
   1775a:	f004 bee9 	b.w	1c530 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   1775e:	6968      	ldr	r0, [r5, #20]
   17760:	b108      	cbz	r0, 17766 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
   17762:	f7ff fecd 	bl	17500 <tx_free>
		net_buf_unref(buf);
   17766:	4628      	mov	r0, r5
   17768:	f002 fc0c 	bl	19f84 <net_buf_unref>
   1776c:	e7e4      	b.n	17738 <conn_cleanup+0x8>
   1776e:	bf00      	nop
   17770:	200022f0 	.word	0x200022f0

00017774 <bt_conn_recv>:
{
   17774:	b570      	push	{r4, r5, r6, lr}
   17776:	4616      	mov	r6, r2
   17778:	4604      	mov	r4, r0
   1777a:	460d      	mov	r5, r1
	tx_notify(conn);
   1777c:	f006 fe29 	bl	1e3d2 <tx_notify>
	switch (flags) {
   17780:	2e01      	cmp	r6, #1
   17782:	d02e      	beq.n	177e2 <bt_conn_recv+0x6e>
   17784:	2e02      	cmp	r6, #2
   17786:	d15b      	bne.n	17840 <bt_conn_recv+0xcc>
		if (conn->rx) {
   17788:	6923      	ldr	r3, [r4, #16]
   1778a:	b163      	cbz	r3, 177a6 <bt_conn_recv+0x32>
   1778c:	4b37      	ldr	r3, [pc, #220]	; (1786c <bt_conn_recv+0xf8>)
   1778e:	4938      	ldr	r1, [pc, #224]	; (17870 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
   17790:	4838      	ldr	r0, [pc, #224]	; (17874 <bt_conn_recv+0x100>)
   17792:	1ac9      	subs	r1, r1, r3
   17794:	08c9      	lsrs	r1, r1, #3
   17796:	0189      	lsls	r1, r1, #6
   17798:	f041 0101 	orr.w	r1, r1, #1
   1779c:	f005 fe2d 	bl	1d3fa <log_0>
			bt_conn_reset_rx_state(conn);
   177a0:	4620      	mov	r0, r4
   177a2:	f006 fe64 	bl	1e46e <bt_conn_reset_rx_state>
		conn->rx = buf;
   177a6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   177a8:	6923      	ldr	r3, [r4, #16]
   177aa:	8999      	ldrh	r1, [r3, #12]
   177ac:	2901      	cmp	r1, #1
   177ae:	d95b      	bls.n	17868 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   177b0:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   177b2:	7845      	ldrb	r5, [r0, #1]
   177b4:	7802      	ldrb	r2, [r0, #0]
   177b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   177ba:	3204      	adds	r2, #4
   177bc:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   177be:	428a      	cmp	r2, r1
   177c0:	d852      	bhi.n	17868 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
   177c2:	d249      	bcs.n	17858 <bt_conn_recv+0xe4>
   177c4:	4829      	ldr	r0, [pc, #164]	; (1786c <bt_conn_recv+0xf8>)
   177c6:	4b2a      	ldr	r3, [pc, #168]	; (17870 <bt_conn_recv+0xfc>)
   177c8:	1a1b      	subs	r3, r3, r0
   177ca:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   177cc:	019b      	lsls	r3, r3, #6
   177ce:	482a      	ldr	r0, [pc, #168]	; (17878 <bt_conn_recv+0x104>)
   177d0:	f043 0301 	orr.w	r3, r3, #1
   177d4:	f005 fe32 	bl	1d43c <log_2>
		bt_conn_reset_rx_state(conn);
   177d8:	4620      	mov	r0, r4
}
   177da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   177de:	f006 be46 	b.w	1e46e <bt_conn_reset_rx_state>
		if (!conn->rx) {
   177e2:	6920      	ldr	r0, [r4, #16]
   177e4:	b968      	cbnz	r0, 17802 <bt_conn_recv+0x8e>
   177e6:	4922      	ldr	r1, [pc, #136]	; (17870 <bt_conn_recv+0xfc>)
   177e8:	4b20      	ldr	r3, [pc, #128]	; (1786c <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
   177ea:	4824      	ldr	r0, [pc, #144]	; (1787c <bt_conn_recv+0x108>)
   177ec:	1ac9      	subs	r1, r1, r3
   177ee:	08c9      	lsrs	r1, r1, #3
   177f0:	0189      	lsls	r1, r1, #6
   177f2:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   177f6:	f005 fe00 	bl	1d3fa <log_0>
			bt_conn_reset_rx_state(conn);
   177fa:	4620      	mov	r0, r4
   177fc:	f006 fe37 	bl	1e46e <bt_conn_reset_rx_state>
   17800:	e001      	b.n	17806 <bt_conn_recv+0x92>
		if (!buf->len) {
   17802:	89ae      	ldrh	r6, [r5, #12]
   17804:	b926      	cbnz	r6, 17810 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   17806:	4628      	mov	r0, r5
}
   17808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1780c:	f002 bbba 	b.w	19f84 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   17810:	3008      	adds	r0, #8
   17812:	f007 fe4b 	bl	1f4ac <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17816:	4286      	cmp	r6, r0
   17818:	d908      	bls.n	1782c <bt_conn_recv+0xb8>
   1781a:	4915      	ldr	r1, [pc, #84]	; (17870 <bt_conn_recv+0xfc>)
   1781c:	4b13      	ldr	r3, [pc, #76]	; (1786c <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
   1781e:	4818      	ldr	r0, [pc, #96]	; (17880 <bt_conn_recv+0x10c>)
   17820:	1ac9      	subs	r1, r1, r3
   17822:	08c9      	lsrs	r1, r1, #3
   17824:	0189      	lsls	r1, r1, #6
   17826:	f041 0101 	orr.w	r1, r1, #1
   1782a:	e7e4      	b.n	177f6 <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1782c:	6920      	ldr	r0, [r4, #16]
   1782e:	89aa      	ldrh	r2, [r5, #12]
   17830:	68a9      	ldr	r1, [r5, #8]
   17832:	3008      	adds	r0, #8
   17834:	f007 fe05 	bl	1f442 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17838:	4628      	mov	r0, r5
   1783a:	f002 fba3 	bl	19f84 <net_buf_unref>
		break;
   1783e:	e7b3      	b.n	177a8 <bt_conn_recv+0x34>
   17840:	4a0a      	ldr	r2, [pc, #40]	; (1786c <bt_conn_recv+0xf8>)
   17842:	4b0b      	ldr	r3, [pc, #44]	; (17870 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   17844:	480f      	ldr	r0, [pc, #60]	; (17884 <bt_conn_recv+0x110>)
   17846:	1a9b      	subs	r3, r3, r2
   17848:	08db      	lsrs	r3, r3, #3
   1784a:	019b      	lsls	r3, r3, #6
   1784c:	f043 0201 	orr.w	r2, r3, #1
   17850:	4631      	mov	r1, r6
   17852:	f005 fddf 	bl	1d414 <log_1>
		bt_conn_reset_rx_state(conn);
   17856:	e7d0      	b.n	177fa <bt_conn_recv+0x86>
	conn->rx = NULL;
   17858:	2200      	movs	r2, #0
   1785a:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1785c:	4620      	mov	r0, r4
   1785e:	4619      	mov	r1, r3
}
   17860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   17864:	f000 bcf0 	b.w	18248 <bt_l2cap_recv>
}
   17868:	bd70      	pop	{r4, r5, r6, pc}
   1786a:	bf00      	nop
   1786c:	00020308 	.word	0x00020308
   17870:	00020318 	.word	0x00020318
   17874:	000219af 	.word	0x000219af
   17878:	00021a2f 	.word	0x00021a2f
   1787c:	000219cc 	.word	0x000219cc
   17880:	000219ea 	.word	0x000219ea
   17884:	00021a11 	.word	0x00021a11

00017888 <bt_conn_send_cb>:
{
   17888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1788c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1788e:	7a83      	ldrb	r3, [r0, #10]
   17890:	2b07      	cmp	r3, #7
{
   17892:	4606      	mov	r6, r0
   17894:	460d      	mov	r5, r1
   17896:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   17898:	d00f      	beq.n	178ba <bt_conn_send_cb+0x32>
   1789a:	4b2a      	ldr	r3, [pc, #168]	; (17944 <bt_conn_send_cb+0xbc>)
   1789c:	492a      	ldr	r1, [pc, #168]	; (17948 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
   1789e:	482b      	ldr	r0, [pc, #172]	; (1794c <bt_conn_send_cb+0xc4>)
   178a0:	1ac9      	subs	r1, r1, r3
   178a2:	08c9      	lsrs	r1, r1, #3
   178a4:	0189      	lsls	r1, r1, #6
   178a6:	f041 0101 	orr.w	r1, r1, #1
   178aa:	f005 fda6 	bl	1d3fa <log_0>
		net_buf_unref(buf);
   178ae:	4628      	mov	r0, r5
   178b0:	f002 fb68 	bl	19f84 <net_buf_unref>
			return -ENOTCONN;
   178b4:	f06f 0038 	mvn.w	r0, #56	; 0x38
   178b8:	e020      	b.n	178fc <bt_conn_send_cb+0x74>
	if (cb) {
   178ba:	2a00      	cmp	r2, #0
   178bc:	d040      	beq.n	17940 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
   178be:	f004 fcd3 	bl	1c268 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   178c2:	4b23      	ldr	r3, [pc, #140]	; (17950 <bt_conn_send_cb+0xc8>)
   178c4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   178c6:	4823      	ldr	r0, [pc, #140]	; (17954 <bt_conn_send_cb+0xcc>)
   178c8:	bf07      	ittee	eq
   178ca:	2200      	moveq	r2, #0
   178cc:	2300      	moveq	r3, #0
   178ce:	f04f 32ff 	movne.w	r2, #4294967295
   178d2:	f04f 33ff 	movne.w	r3, #4294967295
   178d6:	f004 f8fb 	bl	1bad0 <z_impl_k_queue_get>
   178da:	4604      	mov	r4, r0
		if (!tx) {
   178dc:	b980      	cbnz	r0, 17900 <bt_conn_send_cb+0x78>
   178de:	4b19      	ldr	r3, [pc, #100]	; (17944 <bt_conn_send_cb+0xbc>)
   178e0:	4919      	ldr	r1, [pc, #100]	; (17948 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
   178e2:	481d      	ldr	r0, [pc, #116]	; (17958 <bt_conn_send_cb+0xd0>)
   178e4:	1ac9      	subs	r1, r1, r3
   178e6:	08c9      	lsrs	r1, r1, #3
   178e8:	0189      	lsls	r1, r1, #6
   178ea:	f041 0101 	orr.w	r1, r1, #1
   178ee:	f005 fd84 	bl	1d3fa <log_0>
			net_buf_unref(buf);
   178f2:	4628      	mov	r0, r5
   178f4:	f002 fb46 	bl	19f84 <net_buf_unref>
			return -ENOBUFS;
   178f8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   178fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   17900:	7ab3      	ldrb	r3, [r6, #10]
   17902:	2b07      	cmp	r3, #7
   17904:	d010      	beq.n	17928 <bt_conn_send_cb+0xa0>
   17906:	4b0f      	ldr	r3, [pc, #60]	; (17944 <bt_conn_send_cb+0xbc>)
   17908:	490f      	ldr	r1, [pc, #60]	; (17948 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
   1790a:	4814      	ldr	r0, [pc, #80]	; (1795c <bt_conn_send_cb+0xd4>)
   1790c:	1ac9      	subs	r1, r1, r3
   1790e:	08c9      	lsrs	r1, r1, #3
   17910:	0189      	lsls	r1, r1, #6
   17912:	f041 0102 	orr.w	r1, r1, #2
   17916:	f005 fd70 	bl	1d3fa <log_0>
			net_buf_unref(buf);
   1791a:	4628      	mov	r0, r5
   1791c:	f002 fb32 	bl	19f84 <net_buf_unref>
			tx_free(tx);
   17920:	4620      	mov	r0, r4
   17922:	f7ff fded 	bl	17500 <tx_free>
   17926:	e7c5      	b.n	178b4 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
   17928:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1792a:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1792e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   17930:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   17932:	f106 0034 	add.w	r0, r6, #52	; 0x34
   17936:	4629      	mov	r1, r5
   17938:	f007 fd4a 	bl	1f3d0 <net_buf_put>
	return 0;
   1793c:	2000      	movs	r0, #0
   1793e:	e7dd      	b.n	178fc <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
   17940:	614a      	str	r2, [r1, #20]
   17942:	e7f6      	b.n	17932 <bt_conn_send_cb+0xaa>
   17944:	00020308 	.word	0x00020308
   17948:	00020318 	.word	0x00020318
   1794c:	00021a4a 	.word	0x00021a4a
   17950:	20002308 	.word	0x20002308
   17954:	200007c8 	.word	0x200007c8
   17958:	00021a59 	.word	0x00021a59
   1795c:	00021a77 	.word	0x00021a77

00017960 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   17960:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   17962:	4b1b      	ldr	r3, [pc, #108]	; (179d0 <bt_conn_prepare_events+0x70>)
   17964:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17966:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   17968:	609a      	str	r2, [r3, #8]
{
   1796a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1796c:	f008 fb9e 	bl	200ac <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17970:	f3bf 8f5b 	dmb	ish
   17974:	4b17      	ldr	r3, [pc, #92]	; (179d4 <bt_conn_prepare_events+0x74>)
   17976:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1797a:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   1797e:	f104 0014 	add.w	r0, r4, #20
   17982:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   17984:	b90a      	cbnz	r2, 1798a <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   17986:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   17988:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1798a:	7a9a      	ldrb	r2, [r3, #10]
   1798c:	b99a      	cbnz	r2, 179b6 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1798e:	f3bf 8f5b 	dmb	ish
   17992:	1d1a      	adds	r2, r3, #4
   17994:	e852 5f00 	ldrex	r5, [r2]
   17998:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   1799c:	e842 ce00 	strex	lr, ip, [r2]
   179a0:	f1be 0f00 	cmp.w	lr, #0
   179a4:	d1f6      	bne.n	17994 <bt_conn_prepare_events+0x34>
   179a6:	f3bf 8f5b 	dmb	ish
   179aa:	066a      	lsls	r2, r5, #25
   179ac:	d503      	bpl.n	179b6 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   179ae:	4618      	mov	r0, r3
   179b0:	f7ff febe 	bl	17730 <conn_cleanup>
   179b4:	e7e7      	b.n	17986 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   179b6:	7a8b      	ldrb	r3, [r1, #10]
   179b8:	2b07      	cmp	r3, #7
   179ba:	d1e4      	bne.n	17986 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   179bc:	4b06      	ldr	r3, [pc, #24]	; (179d8 <bt_conn_prepare_events+0x78>)
   179be:	2200      	movs	r2, #0
   179c0:	2104      	movs	r1, #4
   179c2:	f008 fb73 	bl	200ac <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   179c6:	2301      	movs	r3, #1
   179c8:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   179cc:	2002      	movs	r0, #2
	return ev_count;
   179ce:	e7db      	b.n	17988 <bt_conn_prepare_events+0x28>
   179d0:	20000570 	.word	0x20000570
   179d4:	20001e18 	.word	0x20001e18
   179d8:	20001e4c 	.word	0x20001e4c

000179dc <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   179dc:	b570      	push	{r4, r5, r6, lr}
   179de:	4606      	mov	r6, r0
   179e0:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   179e2:	4810      	ldr	r0, [pc, #64]	; (17a24 <bt_conn_add_le+0x48>)
   179e4:	2101      	movs	r1, #1
   179e6:	f006 fd1a 	bl	1e41e <bt_conn_new>
	if (!conn) {
   179ea:	4604      	mov	r4, r0
   179ec:	b1b8      	cbz	r0, 17a1e <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   179ee:	2230      	movs	r2, #48	; 0x30
   179f0:	2100      	movs	r1, #0
   179f2:	3058      	adds	r0, #88	; 0x58
   179f4:	f006 fb3b 	bl	1e06e <memset>
   179f8:	4b0b      	ldr	r3, [pc, #44]	; (17a28 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   179fa:	4a0c      	ldr	r2, [pc, #48]	; (17a2c <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   179fc:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   179fe:	2300      	movs	r3, #0
   17a00:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   17a04:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   17a06:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
   17a08:	2207      	movs	r2, #7
   17a0a:	4629      	mov	r1, r5
   17a0c:	f104 0088 	add.w	r0, r4, #136	; 0x88
   17a10:	f006 fb02 	bl	1e018 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   17a14:	2301      	movs	r3, #1
   17a16:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   17a18:	4b05      	ldr	r3, [pc, #20]	; (17a30 <bt_conn_add_le+0x54>)
   17a1a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   17a1e:	4620      	mov	r0, r4
   17a20:	bd70      	pop	{r4, r5, r6, pc}
   17a22:	bf00      	nop
   17a24:	20001e18 	.word	0x20001e18
   17a28:	00017d55 	.word	0x00017d55
   17a2c:	0001e419 	.word	0x0001e419
   17a30:	00280018 	.word	0x00280018

00017a34 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   17a34:	4602      	mov	r2, r0
   17a36:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   17a38:	2101      	movs	r1, #1
   17a3a:	4803      	ldr	r0, [pc, #12]	; (17a48 <bt_conn_lookup_handle+0x14>)
   17a3c:	f006 fd72 	bl	1e524 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   17a40:	2800      	cmp	r0, #0
   17a42:	bf38      	it	cc
   17a44:	2000      	movcc	r0, #0
   17a46:	bd08      	pop	{r3, pc}
   17a48:	20001e18 	.word	0x20001e18

00017a4c <bt_conn_set_state>:
{
   17a4c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   17a4e:	7a86      	ldrb	r6, [r0, #10]
   17a50:	428e      	cmp	r6, r1
{
   17a52:	4604      	mov	r4, r0
   17a54:	460d      	mov	r5, r1
	if (conn->state == state) {
   17a56:	d112      	bne.n	17a7e <bt_conn_set_state+0x32>
   17a58:	4b68      	ldr	r3, [pc, #416]	; (17bfc <bt_conn_set_state+0x1b0>)
   17a5a:	4a69      	ldr	r2, [pc, #420]	; (17c00 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
   17a5c:	4869      	ldr	r0, [pc, #420]	; (17c04 <bt_conn_set_state+0x1b8>)
   17a5e:	2e08      	cmp	r6, #8
   17a60:	eba2 0203 	sub.w	r2, r2, r3
   17a64:	bf96      	itet	ls
   17a66:	4b68      	ldrls	r3, [pc, #416]	; (17c08 <bt_conn_set_state+0x1bc>)
   17a68:	4968      	ldrhi	r1, [pc, #416]	; (17c0c <bt_conn_set_state+0x1c0>)
   17a6a:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   17a6e:	08d2      	lsrs	r2, r2, #3
   17a70:	0192      	lsls	r2, r2, #6
   17a72:	f042 0202 	orr.w	r2, r2, #2
}
   17a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   17a7a:	f005 bccb 	b.w	1d414 <log_1>
	conn->state = state;
   17a7e:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   17a80:	b90e      	cbnz	r6, 17a86 <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
   17a82:	f006 fd1d 	bl	1e4c0 <bt_conn_ref>
	switch (conn->state) {
   17a86:	7aa3      	ldrb	r3, [r4, #10]
   17a88:	2b08      	cmp	r3, #8
   17a8a:	f200 80ac 	bhi.w	17be6 <bt_conn_set_state+0x19a>
   17a8e:	e8df f003 	tbb	[pc, r3]
   17a92:	053e      	.short	0x053e
   17a94:	b4b4b4b4 	.word	0xb4b4b4b4
   17a98:	1cb4      	.short	0x1cb4
   17a9a:	b4          	.byte	0xb4
   17a9b:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   17a9c:	4d5c      	ldr	r5, [pc, #368]	; (17c10 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
   17a9e:	2600      	movs	r6, #0
	__asm__ volatile(
   17aa0:	f04f 0340 	mov.w	r3, #64	; 0x40
   17aa4:	f3ef 8211 	mrs	r2, BASEPRI
   17aa8:	f383 8811 	msr	BASEPRI, r3
   17aac:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   17ab0:	69e3      	ldr	r3, [r4, #28]
   17ab2:	2b00      	cmp	r3, #0
   17ab4:	d078      	beq.n	17ba8 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
   17ab6:	3b01      	subs	r3, #1
   17ab8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17aba:	f382 8811 	msr	BASEPRI, r2
   17abe:	f3bf 8f6f 	isb	sy
   17ac2:	4628      	mov	r0, r5
   17ac4:	f004 fbd6 	bl	1c274 <z_impl_k_sem_give>
}
   17ac8:	e7ea      	b.n	17aa0 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17aca:	78a3      	ldrb	r3, [r4, #2]
   17acc:	2b04      	cmp	r3, #4
   17ace:	f000 8094 	beq.w	17bfa <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
   17ad2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   17ad6:	f007 ff2a 	bl	1f92e <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   17ada:	2100      	movs	r1, #0
   17adc:	484d      	ldr	r0, [pc, #308]	; (17c14 <bt_conn_set_state+0x1c8>)
   17ade:	f004 ffd1 	bl	1ca84 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   17ae2:	2300      	movs	r3, #0
	list->tail = NULL;
   17ae4:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
   17ae8:	4620      	mov	r0, r4
   17aea:	f000 fadd 	bl	180a8 <bt_l2cap_connected>
		notify_connected(conn);
   17aee:	4620      	mov	r0, r4
   17af0:	f7ff fd10 	bl	17514 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17af4:	78e3      	ldrb	r3, [r4, #3]
   17af6:	2b01      	cmp	r3, #1
   17af8:	d17f      	bne.n	17bfa <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17afa:	f104 0158 	add.w	r1, r4, #88	; 0x58
   17afe:	4846      	ldr	r0, [pc, #280]	; (17c18 <bt_conn_set_state+0x1cc>)
}
   17b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17b04:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   17b08:	2300      	movs	r3, #0
   17b0a:	f004 bd11 	b.w	1c530 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17b0e:	78a3      	ldrb	r3, [r4, #2]
   17b10:	2b04      	cmp	r3, #4
   17b12:	d104      	bne.n	17b1e <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
   17b14:	4620      	mov	r0, r4
}
   17b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   17b1a:	f006 bcec 	b.w	1e4f6 <bt_conn_unref>
		switch (old_state) {
   17b1e:	2e08      	cmp	r6, #8
   17b20:	d86b      	bhi.n	17bfa <bt_conn_set_state+0x1ae>
   17b22:	a301      	add	r3, pc, #4	; (adr r3, 17b28 <bt_conn_set_state+0xdc>)
   17b24:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17b28:	00017b95 	.word	0x00017b95
   17b2c:	00017b4d 	.word	0x00017b4d
   17b30:	00017b87 	.word	0x00017b87
   17b34:	00017b15 	.word	0x00017b15
   17b38:	00017b15 	.word	0x00017b15
   17b3c:	00017b87 	.word	0x00017b87
   17b40:	00017b87 	.word	0x00017b87
   17b44:	00017b95 	.word	0x00017b95
   17b48:	00017b95 	.word	0x00017b95
			tx_notify(conn);
   17b4c:	4620      	mov	r0, r4
   17b4e:	f006 fc40 	bl	1e3d2 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   17b52:	78a3      	ldrb	r3, [r4, #2]
   17b54:	2b01      	cmp	r3, #1
   17b56:	d103      	bne.n	17b60 <bt_conn_set_state+0x114>
				k_delayed_work_cancel(&conn->deferred_work);
   17b58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17b5c:	f008 f8c1 	bl	1fce2 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17b60:	f3bf 8f5b 	dmb	ish
   17b64:	3404      	adds	r4, #4
   17b66:	e854 3f00 	ldrex	r3, [r4]
   17b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17b6e:	e844 3200 	strex	r2, r3, [r4]
   17b72:	2a00      	cmp	r2, #0
   17b74:	d1f7      	bne.n	17b66 <bt_conn_set_state+0x11a>
   17b76:	f3bf 8f5b 	dmb	ish
   17b7a:	4826      	ldr	r0, [pc, #152]	; (17c14 <bt_conn_set_state+0x1c8>)
}
   17b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17b80:	2100      	movs	r1, #0
   17b82:	f004 bf7f 	b.w	1ca84 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   17b86:	7a63      	ldrb	r3, [r4, #9]
   17b88:	2b00      	cmp	r3, #0
   17b8a:	d0c3      	beq.n	17b14 <bt_conn_set_state+0xc8>
				notify_connected(conn);
   17b8c:	4620      	mov	r0, r4
   17b8e:	f7ff fcc1 	bl	17514 <notify_connected>
   17b92:	e7bf      	b.n	17b14 <bt_conn_set_state+0xc8>
   17b94:	4a1a      	ldr	r2, [pc, #104]	; (17c00 <bt_conn_set_state+0x1b4>)
   17b96:	4b19      	ldr	r3, [pc, #100]	; (17bfc <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
   17b98:	4820      	ldr	r0, [pc, #128]	; (17c1c <bt_conn_set_state+0x1d0>)
   17b9a:	1ad2      	subs	r2, r2, r3
   17b9c:	08d2      	lsrs	r2, r2, #3
   17b9e:	0192      	lsls	r2, r2, #6
   17ba0:	f042 0202 	orr.w	r2, r2, #2
   17ba4:	4629      	mov	r1, r5
   17ba6:	e766      	b.n	17a76 <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   17ba8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   17baa:	b128      	cbz	r0, 17bb8 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17bac:	69a1      	ldr	r1, [r4, #24]
   17bae:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   17bb0:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17bb2:	4288      	cmp	r0, r1
	list->tail = node;
   17bb4:	bf08      	it	eq
   17bb6:	61a3      	streq	r3, [r4, #24]
   17bb8:	f382 8811 	msr	BASEPRI, r2
   17bbc:	f3bf 8f6f 	isb	sy
		if (!node) {
   17bc0:	b1d8      	cbz	r0, 17bfa <bt_conn_set_state+0x1ae>
	__asm__ volatile(
   17bc2:	f04f 0240 	mov.w	r2, #64	; 0x40
   17bc6:	f3ef 8311 	mrs	r3, BASEPRI
   17bca:	f382 8811 	msr	BASEPRI, r2
   17bce:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   17bd2:	68c2      	ldr	r2, [r0, #12]
   17bd4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   17bd6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   17bd8:	f383 8811 	msr	BASEPRI, r3
   17bdc:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   17be0:	f7ff fc8e 	bl	17500 <tx_free>
   17be4:	e76d      	b.n	17ac2 <bt_conn_set_state+0x76>
   17be6:	4a06      	ldr	r2, [pc, #24]	; (17c00 <bt_conn_set_state+0x1b4>)
   17be8:	4b04      	ldr	r3, [pc, #16]	; (17bfc <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
   17bea:	480d      	ldr	r0, [pc, #52]	; (17c20 <bt_conn_set_state+0x1d4>)
   17bec:	1ad2      	subs	r2, r2, r3
   17bee:	08d2      	lsrs	r2, r2, #3
   17bf0:	0192      	lsls	r2, r2, #6
   17bf2:	f042 0202 	orr.w	r2, r2, #2
   17bf6:	4629      	mov	r1, r5
   17bf8:	e73d      	b.n	17a76 <bt_conn_set_state+0x2a>
}
   17bfa:	bd70      	pop	{r4, r5, r6, pc}
   17bfc:	00020308 	.word	0x00020308
   17c00:	00020318 	.word	0x00020318
   17c04:	00021aa7 	.word	0x00021aa7
   17c08:	000206e4 	.word	0x000206e4
   17c0c:	00021a9d 	.word	0x00021a9d
   17c10:	20000490 	.word	0x20000490
   17c14:	20000570 	.word	0x20000570
   17c18:	200022f0 	.word	0x200022f0
   17c1c:	00021ab8 	.word	0x00021ab8
   17c20:	00021acf 	.word	0x00021acf

00017c24 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   17c24:	b570      	push	{r4, r5, r6, lr}
   17c26:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17c28:	480c      	ldr	r0, [pc, #48]	; (17c5c <bt_conn_lookup_addr_le+0x38>)
{
   17c2a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17c2c:	f006 fc48 	bl	1e4c0 <bt_conn_ref>

		if (!conn) {
   17c30:	4604      	mov	r4, r0
   17c32:	b128      	cbz	r0, 17c40 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17c34:	7883      	ldrb	r3, [r0, #2]
   17c36:	2b01      	cmp	r3, #1
   17c38:	d004      	beq.n	17c44 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   17c3a:	f006 fc5c 	bl	1e4f6 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   17c3e:	2400      	movs	r4, #0
}
   17c40:	4620      	mov	r0, r4
   17c42:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   17c44:	4629      	mov	r1, r5
   17c46:	4632      	mov	r2, r6
   17c48:	f006 fc1a 	bl	1e480 <bt_conn_is_peer_addr_le>
   17c4c:	4605      	mov	r5, r0
   17c4e:	2800      	cmp	r0, #0
   17c50:	d1f6      	bne.n	17c40 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   17c52:	4620      	mov	r0, r4
   17c54:	f006 fc4f 	bl	1e4f6 <bt_conn_unref>
	return NULL;
   17c58:	462c      	mov	r4, r5
			continue;
   17c5a:	e7f1      	b.n	17c40 <bt_conn_lookup_addr_le+0x1c>
   17c5c:	20001e18 	.word	0x20001e18

00017c60 <bt_conn_exists_le>:
{
   17c60:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   17c62:	f7ff ffdf 	bl	17c24 <bt_conn_lookup_addr_le>
	if (conn) {
   17c66:	4604      	mov	r4, r0
   17c68:	b1a0      	cbz	r0, 17c94 <bt_conn_exists_le+0x34>
   17c6a:	4b0b      	ldr	r3, [pc, #44]	; (17c98 <bt_conn_exists_le+0x38>)
   17c6c:	4a0b      	ldr	r2, [pc, #44]	; (17c9c <bt_conn_exists_le+0x3c>)
   17c6e:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   17c70:	7a83      	ldrb	r3, [r0, #10]
   17c72:	480b      	ldr	r0, [pc, #44]	; (17ca0 <bt_conn_exists_le+0x40>)
   17c74:	2b08      	cmp	r3, #8
   17c76:	bf96      	itet	ls
   17c78:	490a      	ldrls	r1, [pc, #40]	; (17ca4 <bt_conn_exists_le+0x44>)
   17c7a:	490b      	ldrhi	r1, [pc, #44]	; (17ca8 <bt_conn_exists_le+0x48>)
   17c7c:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   17c80:	08d2      	lsrs	r2, r2, #3
   17c82:	0192      	lsls	r2, r2, #6
   17c84:	f042 0202 	orr.w	r2, r2, #2
   17c88:	f005 fbc4 	bl	1d414 <log_1>
		bt_conn_unref(conn);
   17c8c:	4620      	mov	r0, r4
   17c8e:	f006 fc32 	bl	1e4f6 <bt_conn_unref>
		return true;
   17c92:	2001      	movs	r0, #1
}
   17c94:	bd10      	pop	{r4, pc}
   17c96:	bf00      	nop
   17c98:	00020308 	.word	0x00020308
   17c9c:	00020318 	.word	0x00020318
   17ca0:	00021aeb 	.word	0x00021aeb
   17ca4:	000206e4 	.word	0x000206e4
   17ca8:	00021a9d 	.word	0x00021a9d

00017cac <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   17cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cae:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17cb0:	480f      	ldr	r0, [pc, #60]	; (17cf0 <bt_conn_lookup_state_le+0x44>)
{
   17cb2:	460e      	mov	r6, r1
   17cb4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17cb6:	f006 fc03 	bl	1e4c0 <bt_conn_ref>

		if (!conn) {
   17cba:	4604      	mov	r4, r0
   17cbc:	b1b0      	cbz	r0, 17cec <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17cbe:	7883      	ldrb	r3, [r0, #2]
   17cc0:	2b01      	cmp	r3, #1
   17cc2:	d003      	beq.n	17ccc <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
   17cc4:	f006 fbfc 	bl	1e4c0 <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
   17cc8:	2400      	movs	r4, #0
			continue;
   17cca:	e00f      	b.n	17cec <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   17ccc:	b146      	cbz	r6, 17ce0 <bt_conn_lookup_state_le+0x34>
   17cce:	4632      	mov	r2, r6
   17cd0:	4629      	mov	r1, r5
   17cd2:	f006 fbd5 	bl	1e480 <bt_conn_is_peer_addr_le>
   17cd6:	b918      	cbnz	r0, 17ce0 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
   17cd8:	4620      	mov	r0, r4
   17cda:	f006 fc0c 	bl	1e4f6 <bt_conn_unref>
   17cde:	e7f3      	b.n	17cc8 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
   17ce0:	7aa3      	ldrb	r3, [r4, #10]
   17ce2:	42bb      	cmp	r3, r7
   17ce4:	d1f8      	bne.n	17cd8 <bt_conn_lookup_state_le+0x2c>
   17ce6:	7a23      	ldrb	r3, [r4, #8]
   17ce8:	42ab      	cmp	r3, r5
   17cea:	d1f5      	bne.n	17cd8 <bt_conn_lookup_state_le+0x2c>
}
   17cec:	4620      	mov	r0, r4
   17cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17cf0:	20001e18 	.word	0x20001e18

00017cf4 <send_conn_le_param_update>:
{
   17cf4:	b538      	push	{r3, r4, r5, lr}
   17cf6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   17cf8:	4608      	mov	r0, r1
{
   17cfa:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17cfc:	f006 fac9 	bl	1e292 <bt_le_conn_params_valid>
   17d00:	b318      	cbz	r0, 17d4a <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17d02:	4b13      	ldr	r3, [pc, #76]	; (17d50 <send_conn_le_param_update+0x5c>)
   17d04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   17d08:	0799      	lsls	r1, r3, #30
   17d0a:	d407      	bmi.n	17d1c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   17d0c:	78e3      	ldrb	r3, [r4, #3]
   17d0e:	b183      	cbz	r3, 17d32 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   17d10:	4629      	mov	r1, r5
   17d12:	4620      	mov	r0, r4
}
   17d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   17d18:	f000 bace 	b.w	182b8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17d1c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   17d20:	079a      	lsls	r2, r3, #30
   17d22:	d5f3      	bpl.n	17d0c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d24:	f3bf 8f5b 	dmb	ish
   17d28:	6863      	ldr	r3, [r4, #4]
   17d2a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17d2e:	055b      	lsls	r3, r3, #21
   17d30:	d4ec      	bmi.n	17d0c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   17d32:	4629      	mov	r1, r5
   17d34:	4620      	mov	r0, r4
   17d36:	f006 fc17 	bl	1e568 <bt_conn_le_conn_update>
		if (rc == 0) {
   17d3a:	b928      	cbnz	r0, 17d48 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   17d3c:	88ab      	ldrh	r3, [r5, #4]
   17d3e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   17d42:	88eb      	ldrh	r3, [r5, #6]
   17d44:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   17d48:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17d4a:	f06f 0015 	mvn.w	r0, #21
   17d4e:	e7fb      	b.n	17d48 <send_conn_le_param_update+0x54>
   17d50:	200003c8 	.word	0x200003c8

00017d54 <deferred_work>:
{
   17d54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   17d56:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   17d5a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   17d5c:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   17d60:	b993      	cbnz	r3, 17d88 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   17d62:	4630      	mov	r0, r6
   17d64:	f006 fc61 	bl	1e62a <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   17d68:	4b1f      	ldr	r3, [pc, #124]	; (17de8 <deferred_work+0x94>)
   17d6a:	681d      	ldr	r5, [r3, #0]
   17d6c:	b925      	cbnz	r5, 17d78 <deferred_work+0x24>
		bt_conn_unref(conn);
   17d6e:	4630      	mov	r0, r6
   17d70:	f006 fbc1 	bl	1e4f6 <bt_conn_unref>
}
   17d74:	b002      	add	sp, #8
   17d76:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   17d78:	686b      	ldr	r3, [r5, #4]
   17d7a:	b11b      	cbz	r3, 17d84 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   17d7c:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   17d80:	4630      	mov	r0, r6
   17d82:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17d84:	692d      	ldr	r5, [r5, #16]
   17d86:	e7f1      	b.n	17d6c <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   17d88:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   17d8c:	2b01      	cmp	r3, #1
   17d8e:	d1f1      	bne.n	17d74 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17d90:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   17d94:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   17d98:	e855 3f00 	ldrex	r3, [r5]
   17d9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   17da0:	e845 2100 	strex	r1, r2, [r5]
   17da4:	2900      	cmp	r1, #0
   17da6:	d1f7      	bne.n	17d98 <deferred_work+0x44>
   17da8:	f3bf 8f5b 	dmb	ish
   17dac:	059b      	lsls	r3, r3, #22
   17dae:	d514      	bpl.n	17dda <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17db0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17db2:	9300      	str	r3, [sp, #0]
   17db4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   17db6:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   17db8:	4669      	mov	r1, sp
   17dba:	4630      	mov	r0, r6
   17dbc:	f7ff ff9a 	bl	17cf4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17dc0:	f3bf 8f5b 	dmb	ish
   17dc4:	e855 3f00 	ldrex	r3, [r5]
   17dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17dcc:	e845 3200 	strex	r2, r3, [r5]
   17dd0:	2a00      	cmp	r2, #0
   17dd2:	d1f7      	bne.n	17dc4 <deferred_work+0x70>
   17dd4:	f3bf 8f5b 	dmb	ish
   17dd8:	e7cc      	b.n	17d74 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   17dda:	4a04      	ldr	r2, [pc, #16]	; (17dec <deferred_work+0x98>)
   17ddc:	6810      	ldr	r0, [r2, #0]
   17dde:	6851      	ldr	r1, [r2, #4]
   17de0:	466b      	mov	r3, sp
   17de2:	c303      	stmia	r3!, {r0, r1}
   17de4:	e7e8      	b.n	17db8 <deferred_work+0x64>
   17de6:	bf00      	nop
   17de8:	20002568 	.word	0x20002568
   17dec:	00020448 	.word	0x00020448

00017df0 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   17df0:	b538      	push	{r3, r4, r5, lr}
   17df2:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   17df4:	490c      	ldr	r1, [pc, #48]	; (17e28 <bt_conn_create_pdu_timeout+0x38>)
   17df6:	2800      	cmp	r0, #0
   17df8:	bf08      	it	eq
   17dfa:	4608      	moveq	r0, r1
   17dfc:	f007 fac5 	bl	1f38a <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   17e00:	4604      	mov	r4, r0
   17e02:	b958      	cbnz	r0, 17e1c <bt_conn_create_pdu_timeout+0x2c>
   17e04:	4909      	ldr	r1, [pc, #36]	; (17e2c <bt_conn_create_pdu_timeout+0x3c>)
   17e06:	4b0a      	ldr	r3, [pc, #40]	; (17e30 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
   17e08:	480a      	ldr	r0, [pc, #40]	; (17e34 <bt_conn_create_pdu_timeout+0x44>)
   17e0a:	1ac9      	subs	r1, r1, r3
   17e0c:	08c9      	lsrs	r1, r1, #3
   17e0e:	0189      	lsls	r1, r1, #6
   17e10:	f041 0102 	orr.w	r1, r1, #2
   17e14:	f005 faf1 	bl	1d3fa <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   17e18:	4620      	mov	r0, r4
   17e1a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   17e1c:	1d29      	adds	r1, r5, #4
   17e1e:	3008      	adds	r0, #8
   17e20:	f007 fad2 	bl	1f3c8 <net_buf_simple_reserve>
	return buf;
   17e24:	e7f8      	b.n	17e18 <bt_conn_create_pdu_timeout+0x28>
   17e26:	bf00      	nop
   17e28:	200007e0 	.word	0x200007e0
   17e2c:	00020318 	.word	0x00020318
   17e30:	00020308 	.word	0x00020308
   17e34:	00021b0e 	.word	0x00021b0e

00017e38 <bt_conn_create_frag_timeout>:
{
   17e38:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   17e3a:	4801      	ldr	r0, [pc, #4]	; (17e40 <bt_conn_create_frag_timeout+0x8>)
   17e3c:	f7ff bfd8 	b.w	17df0 <bt_conn_create_pdu_timeout>
   17e40:	20000830 	.word	0x20000830

00017e44 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   17e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e48:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   17e4a:	f04f 33ff 	mov.w	r3, #4294967295
   17e4e:	f04f 32ff 	mov.w	r2, #4294967295
   17e52:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   17e54:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   17e56:	f7ff ffef 	bl	17e38 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   17e5a:	7833      	ldrb	r3, [r6, #0]
   17e5c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   17e5e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17e60:	f04f 0600 	mov.w	r6, #0
   17e64:	d005      	beq.n	17e72 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   17e66:	f002 f88d 	bl	19f84 <net_buf_unref>
		return NULL;
   17e6a:	4635      	mov	r5, r6
}
   17e6c:	4628      	mov	r0, r5
   17e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   17e72:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   17e74:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   17e78:	4e0c      	ldr	r6, [pc, #48]	; (17eac <create_frag.isra.0+0x68>)
   17e7a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17e7c:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   17e80:	f007 fb14 	bl	1f4ac <net_buf_simple_tailroom>
   17e84:	4580      	cmp	r8, r0
   17e86:	d20c      	bcs.n	17ea2 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   17e88:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17e8c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   17e90:	4632      	mov	r2, r6
   17e92:	4638      	mov	r0, r7
   17e94:	f007 fad5 	bl	1f442 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   17e98:	4631      	mov	r1, r6
   17e9a:	4620      	mov	r0, r4
   17e9c:	f007 faea 	bl	1f474 <net_buf_simple_pull>
   17ea0:	e7e4      	b.n	17e6c <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   17ea2:	4638      	mov	r0, r7
   17ea4:	f007 fb02 	bl	1f4ac <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17ea8:	b286      	uxth	r6, r0
   17eaa:	e7ef      	b.n	17e8c <create_frag.isra.0+0x48>
   17eac:	200003c8 	.word	0x200003c8

00017eb0 <bt_conn_process_tx>:
{
   17eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17eb2:	7a83      	ldrb	r3, [r0, #10]
{
   17eb4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   17eb6:	b993      	cbnz	r3, 17ede <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17eb8:	f3bf 8f5b 	dmb	ish
   17ebc:	1d03      	adds	r3, r0, #4
   17ebe:	e853 2f00 	ldrex	r2, [r3]
   17ec2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   17ec6:	e843 1400 	strex	r4, r1, [r3]
   17eca:	2c00      	cmp	r4, #0
   17ecc:	d1f7      	bne.n	17ebe <bt_conn_process_tx+0xe>
   17ece:	f3bf 8f5b 	dmb	ish
   17ed2:	0653      	lsls	r3, r2, #25
   17ed4:	d503      	bpl.n	17ede <bt_conn_process_tx+0x2e>
}
   17ed6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   17eda:	f7ff bc29 	b.w	17730 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   17ede:	2200      	movs	r2, #0
   17ee0:	2300      	movs	r3, #0
   17ee2:	f105 0034 	add.w	r0, r5, #52	; 0x34
   17ee6:	f007 fa55 	bl	1f394 <net_buf_get>
	BT_ASSERT(buf);
   17eea:	4604      	mov	r4, r0
   17eec:	b960      	cbnz	r0, 17f08 <bt_conn_process_tx+0x58>
   17eee:	4a20      	ldr	r2, [pc, #128]	; (17f70 <bt_conn_process_tx+0xc0>)
   17ef0:	4920      	ldr	r1, [pc, #128]	; (17f74 <bt_conn_process_tx+0xc4>)
   17ef2:	4821      	ldr	r0, [pc, #132]	; (17f78 <bt_conn_process_tx+0xc8>)
   17ef4:	f240 535f 	movw	r3, #1375	; 0x55f
   17ef8:	f004 fe56 	bl	1cba8 <printk>
   17efc:	4040      	eors	r0, r0
   17efe:	f380 8811 	msr	BASEPRI, r0
   17f02:	f04f 0003 	mov.w	r0, #3
   17f06:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   17f08:	4f1c      	ldr	r7, [pc, #112]	; (17f7c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   17f0a:	89a1      	ldrh	r1, [r4, #12]
   17f0c:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
   17f10:	4291      	cmp	r1, r2
   17f12:	d807      	bhi.n	17f24 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   17f14:	2300      	movs	r3, #0
   17f16:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   17f18:	4621      	mov	r1, r4
   17f1a:	4628      	mov	r0, r5
   17f1c:	f7ff fb10 	bl	17540 <send_frag>
	if (!send_buf(conn, buf)) {
   17f20:	b140      	cbz	r0, 17f34 <bt_conn_process_tx+0x84>
}
   17f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   17f24:	f105 060a 	add.w	r6, r5, #10
   17f28:	4621      	mov	r1, r4
   17f2a:	4630      	mov	r0, r6
   17f2c:	f7ff ff8a 	bl	17e44 <create_frag.isra.0>
	if (!frag) {
   17f30:	4601      	mov	r1, r0
   17f32:	b920      	cbnz	r0, 17f3e <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   17f34:	4620      	mov	r0, r4
}
   17f36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   17f3a:	f002 b823 	b.w	19f84 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   17f3e:	2301      	movs	r3, #1
   17f40:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17f42:	4628      	mov	r0, r5
   17f44:	f7ff fafc 	bl	17540 <send_frag>
   17f48:	2800      	cmp	r0, #0
   17f4a:	d0f3      	beq.n	17f34 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   17f4c:	89a2      	ldrh	r2, [r4, #12]
   17f4e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
   17f52:	429a      	cmp	r2, r3
   17f54:	d802      	bhi.n	17f5c <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   17f56:	2300      	movs	r3, #0
   17f58:	2203      	movs	r2, #3
   17f5a:	e7dd      	b.n	17f18 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   17f5c:	4621      	mov	r1, r4
   17f5e:	4630      	mov	r0, r6
   17f60:	f7ff ff70 	bl	17e44 <create_frag.isra.0>
		if (!frag) {
   17f64:	4601      	mov	r1, r0
   17f66:	2800      	cmp	r0, #0
   17f68:	d0e4      	beq.n	17f34 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17f6a:	2301      	movs	r3, #1
   17f6c:	461a      	mov	r2, r3
   17f6e:	e7e8      	b.n	17f42 <bt_conn_process_tx+0x92>
   17f70:	00021b37 	.word	0x00021b37
   17f74:	000211ab 	.word	0x000211ab
   17f78:	00021453 	.word	0x00021453
   17f7c:	200003c8 	.word	0x200003c8

00017f80 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   17f80:	4b03      	ldr	r3, [pc, #12]	; (17f90 <bt_conn_index+0x10>)
   17f82:	1ac0      	subs	r0, r0, r3
   17f84:	4b03      	ldr	r3, [pc, #12]	; (17f94 <bt_conn_index+0x14>)
   17f86:	1180      	asrs	r0, r0, #6
   17f88:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   17f8a:	b2c0      	uxtb	r0, r0
   17f8c:	4770      	bx	lr
   17f8e:	bf00      	nop
   17f90:	20001e18 	.word	0x20001e18
   17f94:	aaaaaaab 	.word	0xaaaaaaab

00017f98 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   17f98:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   17f9a:	490b      	ldr	r1, [pc, #44]	; (17fc8 <bt_conn_init+0x30>)
   17f9c:	480b      	ldr	r0, [pc, #44]	; (17fcc <bt_conn_init+0x34>)
   17f9e:	f007 fcd2 	bl	1f946 <k_queue_append>
   17fa2:	490b      	ldr	r1, [pc, #44]	; (17fd0 <bt_conn_init+0x38>)
   17fa4:	4809      	ldr	r0, [pc, #36]	; (17fcc <bt_conn_init+0x34>)
   17fa6:	f007 fcce 	bl	1f946 <k_queue_append>
   17faa:	490a      	ldr	r1, [pc, #40]	; (17fd4 <bt_conn_init+0x3c>)
   17fac:	4807      	ldr	r0, [pc, #28]	; (17fcc <bt_conn_init+0x34>)
   17fae:	f007 fcca 	bl	1f946 <k_queue_append>
	}

	bt_att_init();
   17fb2:	f006 fe8b 	bl	1eccc <bt_att_init>

	err = bt_smp_init();
   17fb6:	f007 f9e5 	bl	1f384 <bt_smp_init>
	if (err) {
   17fba:	4604      	mov	r4, r0
   17fbc:	b908      	cbnz	r0, 17fc2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   17fbe:	f006 fb86 	bl	1e6ce <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17fc2:	4620      	mov	r0, r4
   17fc4:	bd10      	pop	{r4, pc}
   17fc6:	bf00      	nop
   17fc8:	2000256c 	.word	0x2000256c
   17fcc:	200007c8 	.word	0x200007c8
   17fd0:	2000257c 	.word	0x2000257c
   17fd4:	2000258c 	.word	0x2000258c

00017fd8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   17fd8:	4a0b      	ldr	r2, [pc, #44]	; (18008 <l2cap_accept+0x30>)
{
   17fda:	b508      	push	{r3, lr}
   17fdc:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   17fde:	6810      	ldr	r0, [r2, #0]
   17fe0:	b918      	cbnz	r0, 17fea <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   17fe2:	4b0a      	ldr	r3, [pc, #40]	; (1800c <l2cap_accept+0x34>)
   17fe4:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   17fe6:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   17fe8:	bd08      	pop	{r3, pc}
   17fea:	4909      	ldr	r1, [pc, #36]	; (18010 <l2cap_accept+0x38>)
   17fec:	4a09      	ldr	r2, [pc, #36]	; (18014 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   17fee:	480a      	ldr	r0, [pc, #40]	; (18018 <l2cap_accept+0x40>)
   17ff0:	1a52      	subs	r2, r2, r1
   17ff2:	08d2      	lsrs	r2, r2, #3
   17ff4:	0192      	lsls	r2, r2, #6
   17ff6:	f042 0201 	orr.w	r2, r2, #1
   17ffa:	4619      	mov	r1, r3
   17ffc:	f005 fa0a 	bl	1d414 <log_1>
	return -ENOMEM;
   18000:	f06f 000b 	mvn.w	r0, #11
   18004:	e7f0      	b.n	17fe8 <l2cap_accept+0x10>
   18006:	bf00      	nop
   18008:	20001ed8 	.word	0x20001ed8
   1800c:	00020728 	.word	0x00020728
   18010:	00020308 	.word	0x00020308
   18014:	00020330 	.word	0x00020330
   18018:	00021bc4 	.word	0x00021bc4

0001801c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1801e:	4605      	mov	r5, r0
   18020:	460f      	mov	r7, r1
   18022:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   18024:	2300      	movs	r3, #0
   18026:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1802a:	2104      	movs	r1, #4
   1802c:	2000      	movs	r0, #0
   1802e:	f7ff fedf 	bl	17df0 <bt_conn_create_pdu_timeout>
	if (!buf) {
   18032:	4604      	mov	r4, r0
   18034:	b960      	cbnz	r0, 18050 <l2cap_create_le_sig_pdu.isra.0+0x34>
   18036:	4a0a      	ldr	r2, [pc, #40]	; (18060 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   18038:	4b0a      	ldr	r3, [pc, #40]	; (18064 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1803a:	480b      	ldr	r0, [pc, #44]	; (18068 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   1803c:	1ad2      	subs	r2, r2, r3
   1803e:	08d2      	lsrs	r2, r2, #3
   18040:	0192      	lsls	r2, r2, #6
   18042:	f042 0201 	orr.w	r2, r2, #1
   18046:	4629      	mov	r1, r5
   18048:	f005 f9e4 	bl	1d414 <log_1>
}
   1804c:	4620      	mov	r0, r4
   1804e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   18050:	2104      	movs	r1, #4
   18052:	3008      	adds	r0, #8
   18054:	f007 f9ef 	bl	1f436 <net_buf_simple_add>
	hdr->code = code;
   18058:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1805a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1805c:	8046      	strh	r6, [r0, #2]
	return buf;
   1805e:	e7f5      	b.n	1804c <l2cap_create_le_sig_pdu.isra.0+0x30>
   18060:	00020330 	.word	0x00020330
   18064:	00020308 	.word	0x00020308
   18068:	00021beb 	.word	0x00021beb

0001806c <l2cap_rtx_timeout>:
{
   1806c:	b538      	push	{r3, r4, r5, lr}
   1806e:	4a0b      	ldr	r2, [pc, #44]	; (1809c <l2cap_rtx_timeout+0x30>)
   18070:	4b0b      	ldr	r3, [pc, #44]	; (180a0 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   18072:	4604      	mov	r4, r0
   18074:	1ad2      	subs	r2, r2, r3
   18076:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   1807a:	480a      	ldr	r0, [pc, #40]	; (180a4 <l2cap_rtx_timeout+0x38>)
   1807c:	08d2      	lsrs	r2, r2, #3
   1807e:	0192      	lsls	r2, r2, #6
   18080:	4621      	mov	r1, r4
   18082:	f042 0201 	orr.w	r2, r2, #1
   18086:	f005 f9c5 	bl	1d414 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1808a:	4628      	mov	r0, r5
   1808c:	4621      	mov	r1, r4
   1808e:	f006 fa95 	bl	1e5bc <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   18092:	4620      	mov	r0, r4
}
   18094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   18098:	f006 bab2 	b.w	1e600 <bt_l2cap_chan_del>
   1809c:	00020330 	.word	0x00020330
   180a0:	00020308 	.word	0x00020308
   180a4:	00021c13 	.word	0x00021c13

000180a8 <bt_l2cap_connected>:
{
   180a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   180ac:	4e2a      	ldr	r6, [pc, #168]	; (18158 <bt_l2cap_connected+0xb0>)
   180ae:	4f2b      	ldr	r7, [pc, #172]	; (1815c <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   180b0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 18160 <bt_l2cap_connected+0xb8>
{
   180b4:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   180b6:	42be      	cmp	r6, r7
   180b8:	d302      	bcc.n	180c0 <bt_l2cap_connected+0x18>
}
   180ba:	b003      	add	sp, #12
   180bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   180c0:	6873      	ldr	r3, [r6, #4]
   180c2:	a901      	add	r1, sp, #4
   180c4:	4628      	mov	r0, r5
   180c6:	4798      	blx	r3
   180c8:	2800      	cmp	r0, #0
   180ca:	db40      	blt.n	1814e <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
   180cc:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   180ce:	8833      	ldrh	r3, [r6, #0]
   180d0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   180d4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   180d8:	2230      	movs	r2, #48	; 0x30
   180da:	2100      	movs	r1, #0
   180dc:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   180e0:	f8d6 9008 	ldr.w	r9, [r6, #8]
   180e4:	f005 ffc3 	bl	1e06e <memset>
   180e8:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   180ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
   180f0:	2200      	movs	r2, #0
   180f2:	f3bf 8f5b 	dmb	ish
   180f6:	e853 1f00 	ldrex	r1, [r3]
   180fa:	e843 2000 	strex	r0, r2, [r3]
   180fe:	2800      	cmp	r0, #0
   18100:	d1f9      	bne.n	180f6 <bt_l2cap_connected+0x4e>
   18102:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   18106:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
   18108:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
   1810a:	f104 0308 	add.w	r3, r4, #8
   1810e:	bb02      	cbnz	r2, 18152 <bt_l2cap_connected+0xaa>
	list->head = node;
   18110:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
   18114:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   18116:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   18118:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1811a:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   1811e:	681b      	ldr	r3, [r3, #0]
   18120:	b103      	cbz	r3, 18124 <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
   18122:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18124:	9b01      	ldr	r3, [sp, #4]
   18126:	f3bf 8f5b 	dmb	ish
   1812a:	3340      	adds	r3, #64	; 0x40
   1812c:	e853 2f00 	ldrex	r2, [r3]
   18130:	f042 0201 	orr.w	r2, r2, #1
   18134:	e843 2100 	strex	r1, r2, [r3]
   18138:	2900      	cmp	r1, #0
   1813a:	d1f7      	bne.n	1812c <bt_l2cap_connected+0x84>
   1813c:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18140:	9801      	ldr	r0, [sp, #4]
   18142:	6843      	ldr	r3, [r0, #4]
   18144:	699b      	ldr	r3, [r3, #24]
   18146:	b113      	cbz	r3, 1814e <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
   18148:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1814c:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1814e:	360c      	adds	r6, #12
   18150:	e7b1      	b.n	180b6 <bt_l2cap_connected+0xe>
	parent->next = child;
   18152:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18154:	652b      	str	r3, [r5, #80]	; 0x50
}
   18156:	e7dd      	b.n	18114 <bt_l2cap_connected+0x6c>
   18158:	000202cc 	.word	0x000202cc
   1815c:	000202f0 	.word	0x000202f0
   18160:	0001806d 	.word	0x0001806d

00018164 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   18164:	898b      	ldrh	r3, [r1, #12]
   18166:	2b03      	cmp	r3, #3
{
   18168:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1816a:	4606      	mov	r6, r0
   1816c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1816e:	d80a      	bhi.n	18186 <l2cap_recv+0x22>
   18170:	492e      	ldr	r1, [pc, #184]	; (1822c <l2cap_recv+0xc8>)
   18172:	4b2f      	ldr	r3, [pc, #188]	; (18230 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
   18174:	482f      	ldr	r0, [pc, #188]	; (18234 <l2cap_recv+0xd0>)
   18176:	1ac9      	subs	r1, r1, r3
   18178:	08c9      	lsrs	r1, r1, #3
   1817a:	0189      	lsls	r1, r1, #6
   1817c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   18180:	f005 f93b 	bl	1d3fa <log_0>
		return 0;
   18184:	e013      	b.n	181ae <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   18186:	2104      	movs	r1, #4
   18188:	f105 0008 	add.w	r0, r5, #8
   1818c:	f007 f97a 	bl	1f484 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18190:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   18192:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   18194:	428a      	cmp	r2, r1
   18196:	4604      	mov	r4, r0
   18198:	d00c      	beq.n	181b4 <l2cap_recv+0x50>
   1819a:	4825      	ldr	r0, [pc, #148]	; (18230 <l2cap_recv+0xcc>)
   1819c:	4b23      	ldr	r3, [pc, #140]	; (1822c <l2cap_recv+0xc8>)
   1819e:	1a1b      	subs	r3, r3, r0
   181a0:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   181a2:	019b      	lsls	r3, r3, #6
   181a4:	4824      	ldr	r0, [pc, #144]	; (18238 <l2cap_recv+0xd4>)
   181a6:	f043 0301 	orr.w	r3, r3, #1
   181aa:	f005 f947 	bl	1d43c <log_2>
}
   181ae:	2000      	movs	r0, #0
   181b0:	b002      	add	sp, #8
   181b2:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   181b4:	7843      	ldrb	r3, [r0, #1]
   181b6:	b943      	cbnz	r3, 181ca <l2cap_recv+0x66>
   181b8:	491c      	ldr	r1, [pc, #112]	; (1822c <l2cap_recv+0xc8>)
   181ba:	4b1d      	ldr	r3, [pc, #116]	; (18230 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   181bc:	481f      	ldr	r0, [pc, #124]	; (1823c <l2cap_recv+0xd8>)
   181be:	1ac9      	subs	r1, r1, r3
   181c0:	08c9      	lsrs	r1, r1, #3
   181c2:	0189      	lsls	r1, r1, #6
   181c4:	f041 0101 	orr.w	r1, r1, #1
   181c8:	e7da      	b.n	18180 <l2cap_recv+0x1c>
	switch (hdr->code) {
   181ca:	7801      	ldrb	r1, [r0, #0]
   181cc:	2901      	cmp	r1, #1
   181ce:	d0ee      	beq.n	181ae <l2cap_recv+0x4a>
   181d0:	2913      	cmp	r1, #19
   181d2:	d10a      	bne.n	181ea <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   181d4:	2a01      	cmp	r2, #1
   181d6:	d8ea      	bhi.n	181ae <l2cap_recv+0x4a>
   181d8:	4914      	ldr	r1, [pc, #80]	; (1822c <l2cap_recv+0xc8>)
   181da:	4b15      	ldr	r3, [pc, #84]	; (18230 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
   181dc:	4818      	ldr	r0, [pc, #96]	; (18240 <l2cap_recv+0xdc>)
   181de:	1ac9      	subs	r1, r1, r3
   181e0:	08c9      	lsrs	r1, r1, #3
   181e2:	0189      	lsls	r1, r1, #6
   181e4:	f041 0101 	orr.w	r1, r1, #1
   181e8:	e7ca      	b.n	18180 <l2cap_recv+0x1c>
   181ea:	4b11      	ldr	r3, [pc, #68]	; (18230 <l2cap_recv+0xcc>)
   181ec:	4a0f      	ldr	r2, [pc, #60]	; (1822c <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   181ee:	4815      	ldr	r0, [pc, #84]	; (18244 <l2cap_recv+0xe0>)
   181f0:	1ad2      	subs	r2, r2, r3
   181f2:	08d2      	lsrs	r2, r2, #3
   181f4:	0192      	lsls	r2, r2, #6
   181f6:	f042 0202 	orr.w	r2, r2, #2
   181fa:	f005 f90b 	bl	1d414 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   181fe:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   18200:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18202:	2202      	movs	r2, #2
   18204:	2001      	movs	r0, #1
   18206:	f7ff ff09 	bl	1801c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1820a:	4604      	mov	r4, r0
   1820c:	2800      	cmp	r0, #0
   1820e:	d0ce      	beq.n	181ae <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   18210:	2102      	movs	r1, #2
   18212:	3008      	adds	r0, #8
   18214:	f007 f90f 	bl	1f436 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18218:	2300      	movs	r3, #0
   1821a:	7003      	strb	r3, [r0, #0]
   1821c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1821e:	4622      	mov	r2, r4
   18220:	9300      	str	r3, [sp, #0]
   18222:	2105      	movs	r1, #5
   18224:	4628      	mov	r0, r5
   18226:	f006 fa19 	bl	1e65c <bt_l2cap_send_cb>
}
   1822a:	e7c0      	b.n	181ae <l2cap_recv+0x4a>
   1822c:	00020330 	.word	0x00020330
   18230:	00020308 	.word	0x00020308
   18234:	00021c23 	.word	0x00021c23
   18238:	00021c41 	.word	0x00021c41
   1823c:	00021c62 	.word	0x00021c62
   18240:	00021c83 	.word	0x00021c83
   18244:	00021c9f 	.word	0x00021c9f

00018248 <bt_l2cap_recv>:
{
   18248:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1824a:	898b      	ldrh	r3, [r1, #12]
   1824c:	2b03      	cmp	r3, #3
{
   1824e:	4605      	mov	r5, r0
   18250:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18252:	d80e      	bhi.n	18272 <bt_l2cap_recv+0x2a>
   18254:	4914      	ldr	r1, [pc, #80]	; (182a8 <bt_l2cap_recv+0x60>)
   18256:	4b15      	ldr	r3, [pc, #84]	; (182ac <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   18258:	4815      	ldr	r0, [pc, #84]	; (182b0 <bt_l2cap_recv+0x68>)
   1825a:	1ac9      	subs	r1, r1, r3
   1825c:	08c9      	lsrs	r1, r1, #3
   1825e:	0189      	lsls	r1, r1, #6
   18260:	f041 0101 	orr.w	r1, r1, #1
   18264:	f005 f8c9 	bl	1d3fa <log_0>
	net_buf_unref(buf);
   18268:	4620      	mov	r0, r4
}
   1826a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1826e:	f001 be89 	b.w	19f84 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   18272:	2104      	movs	r1, #4
   18274:	f104 0008 	add.w	r0, r4, #8
   18278:	f007 f904 	bl	1f484 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1827c:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1827e:	4628      	mov	r0, r5
   18280:	f006 fa15 	bl	1e6ae <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18284:	b950      	cbnz	r0, 1829c <bt_l2cap_recv+0x54>
   18286:	4b09      	ldr	r3, [pc, #36]	; (182ac <bt_l2cap_recv+0x64>)
   18288:	4a07      	ldr	r2, [pc, #28]	; (182a8 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   1828a:	480a      	ldr	r0, [pc, #40]	; (182b4 <bt_l2cap_recv+0x6c>)
   1828c:	1ad2      	subs	r2, r2, r3
   1828e:	08d2      	lsrs	r2, r2, #3
   18290:	0192      	lsls	r2, r2, #6
   18292:	f042 0202 	orr.w	r2, r2, #2
   18296:	f005 f8bd 	bl	1d414 <log_1>
		net_buf_unref(buf);
   1829a:	e7e5      	b.n	18268 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   1829c:	6843      	ldr	r3, [r0, #4]
   1829e:	4621      	mov	r1, r4
   182a0:	691b      	ldr	r3, [r3, #16]
   182a2:	4798      	blx	r3
   182a4:	e7e0      	b.n	18268 <bt_l2cap_recv+0x20>
   182a6:	bf00      	nop
   182a8:	00020330 	.word	0x00020330
   182ac:	00020308 	.word	0x00020308
   182b0:	00021cbd 	.word	0x00021cbd
   182b4:	00021cda 	.word	0x00021cda

000182b8 <bt_l2cap_update_conn_param>:
{
   182b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   182ba:	4b15      	ldr	r3, [pc, #84]	; (18310 <bt_l2cap_update_conn_param+0x58>)
   182bc:	781a      	ldrb	r2, [r3, #0]
   182be:	3201      	adds	r2, #1
	if (!ident) {
   182c0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   182c4:	bf08      	it	eq
   182c6:	2201      	moveq	r2, #1
   182c8:	701a      	strb	r2, [r3, #0]
{
   182ca:	4605      	mov	r5, r0
   182cc:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   182ce:	2208      	movs	r2, #8
   182d0:	7819      	ldrb	r1, [r3, #0]
   182d2:	2012      	movs	r0, #18
   182d4:	f7ff fea2 	bl	1801c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   182d8:	4606      	mov	r6, r0
   182da:	b1b0      	cbz	r0, 1830a <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   182dc:	2108      	movs	r1, #8
   182de:	4408      	add	r0, r1
   182e0:	f007 f8a9 	bl	1f436 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   182e4:	8822      	ldrh	r2, [r4, #0]
   182e6:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   182e8:	8862      	ldrh	r2, [r4, #2]
   182ea:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   182ec:	88a2      	ldrh	r2, [r4, #4]
   182ee:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   182f0:	88e2      	ldrh	r2, [r4, #6]
   182f2:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   182f4:	2400      	movs	r4, #0
   182f6:	9400      	str	r4, [sp, #0]
   182f8:	4623      	mov	r3, r4
   182fa:	4632      	mov	r2, r6
   182fc:	2105      	movs	r1, #5
   182fe:	4628      	mov	r0, r5
   18300:	f006 f9ac 	bl	1e65c <bt_l2cap_send_cb>
	return 0;
   18304:	4620      	mov	r0, r4
}
   18306:	b002      	add	sp, #8
   18308:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1830a:	f06f 000b 	mvn.w	r0, #11
   1830e:	e7fa      	b.n	18306 <bt_l2cap_update_conn_param+0x4e>
   18310:	20002b8c 	.word	0x20002b8c

00018314 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   18314:	4b02      	ldr	r3, [pc, #8]	; (18320 <att_cfm_sent+0xc>)
   18316:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   1831a:	f006 ba06 	b.w	1e72a <att_sent>
   1831e:	bf00      	nop
   18320:	0001e9ed 	.word	0x0001e9ed

00018324 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   18324:	4b02      	ldr	r3, [pc, #8]	; (18330 <att_rsp_sent+0xc>)
   18326:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   1832a:	f006 b9fe 	b.w	1e72a <att_sent>
   1832e:	bf00      	nop
   18330:	0001e9d1 	.word	0x0001e9d1

00018334 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   18334:	4b02      	ldr	r3, [pc, #8]	; (18340 <att_req_sent+0xc>)
   18336:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   1833a:	f006 b9f6 	b.w	1e72a <att_sent>
   1833e:	bf00      	nop
   18340:	00018781 	.word	0x00018781

00018344 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   18344:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18346:	3808      	subs	r0, #8
   18348:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1834a:	a901      	add	r1, sp, #4
   1834c:	4802      	ldr	r0, [pc, #8]	; (18358 <bt_att_released+0x14>)
   1834e:	f003 fad3 	bl	1b8f8 <k_mem_slab_free>
}
   18352:	b003      	add	sp, #12
   18354:	f85d fb04 	ldr.w	pc, [sp], #4
   18358:	2000071c 	.word	0x2000071c

0001835c <read_group_cb>:
{
   1835c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18360:	4606      	mov	r6, r0
   18362:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18364:	f04f 0800 	mov.w	r8, #0
   18368:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1836c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1836e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18370:	f88d 8008 	strb.w	r8, [sp, #8]
   18374:	a902      	add	r1, sp, #8
{
   18376:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18378:	f8ad 300a 	strh.w	r3, [sp, #10]
   1837c:	f005 feb2 	bl	1e0e4 <bt_uuid_cmp>
   18380:	b1a0      	cbz	r0, 183ac <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18382:	f642 0301 	movw	r3, #10241	; 0x2801
   18386:	6830      	ldr	r0, [r6, #0]
   18388:	f88d 800c 	strb.w	r8, [sp, #12]
   1838c:	a903      	add	r1, sp, #12
   1838e:	f8ad 300e 	strh.w	r3, [sp, #14]
   18392:	f005 fea7 	bl	1e0e4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18396:	b148      	cbz	r0, 183ac <read_group_cb+0x50>
		if (data->group &&
   18398:	6923      	ldr	r3, [r4, #16]
   1839a:	b11b      	cbz	r3, 183a4 <read_group_cb+0x48>
   1839c:	885a      	ldrh	r2, [r3, #2]
   1839e:	42aa      	cmp	r2, r5
   183a0:	d200      	bcs.n	183a4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   183a2:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   183a4:	2001      	movs	r0, #1
}
   183a6:	b004      	add	sp, #16
   183a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   183ac:	6861      	ldr	r1, [r4, #4]
   183ae:	6830      	ldr	r0, [r6, #0]
   183b0:	f005 fe98 	bl	1e0e4 <bt_uuid_cmp>
   183b4:	b110      	cbz	r0, 183bc <read_group_cb+0x60>
		data->group = NULL;
   183b6:	2300      	movs	r3, #0
   183b8:	6123      	str	r3, [r4, #16]
   183ba:	e7f3      	b.n	183a4 <read_group_cb+0x48>
	if (data->rsp->len &&
   183bc:	68e3      	ldr	r3, [r4, #12]
   183be:	68a0      	ldr	r0, [r4, #8]
   183c0:	781a      	ldrb	r2, [r3, #0]
   183c2:	b13a      	cbz	r2, 183d4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   183c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   183c8:	8981      	ldrh	r1, [r0, #12]
   183ca:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   183cc:	4293      	cmp	r3, r2
   183ce:	da01      	bge.n	183d4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   183d0:	2000      	movs	r0, #0
   183d2:	e7e8      	b.n	183a6 <read_group_cb+0x4a>
   183d4:	2104      	movs	r1, #4
   183d6:	3008      	adds	r0, #8
   183d8:	f007 f82d 	bl	1f436 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   183dc:	4b09      	ldr	r3, [pc, #36]	; (18404 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   183de:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   183e0:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   183e2:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   183e4:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   183e6:	4631      	mov	r1, r6
   183e8:	9300      	str	r3, [sp, #0]
   183ea:	9401      	str	r4, [sp, #4]
   183ec:	2300      	movs	r3, #0
   183ee:	4638      	mov	r0, r7
   183f0:	f006 f9eb 	bl	1e7ca <att_chan_read>
	if (read < 0) {
   183f4:	2800      	cmp	r0, #0
   183f6:	dbeb      	blt.n	183d0 <read_group_cb+0x74>
	if (!data->group) {
   183f8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   183fa:	3800      	subs	r0, #0
   183fc:	bf18      	it	ne
   183fe:	2001      	movne	r0, #1
   18400:	e7d1      	b.n	183a6 <read_group_cb+0x4a>
   18402:	bf00      	nop
   18404:	0001e979 	.word	0x0001e979

00018408 <read_type_cb>:
{
   18408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1840c:	f8d2 8000 	ldr.w	r8, [r2]
{
   18410:	4606      	mov	r6, r0
   18412:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18414:	6800      	ldr	r0, [r0, #0]
   18416:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   18418:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   1841c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1841e:	f005 fe61 	bl	1e0e4 <bt_uuid_cmp>
   18422:	4607      	mov	r7, r0
   18424:	2800      	cmp	r0, #0
   18426:	d13e      	bne.n	184a6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18428:	4628      	mov	r0, r5
   1842a:	2215      	movs	r2, #21
   1842c:	4631      	mov	r1, r6
   1842e:	f006 ff2e 	bl	1f28e <bt_gatt_check_perm>
   18432:	4605      	mov	r5, r0
   18434:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18436:	b148      	cbz	r0, 1844c <read_type_cb+0x44>
		if (data->rsp->len) {
   18438:	68e3      	ldr	r3, [r4, #12]
   1843a:	781b      	ldrb	r3, [r3, #0]
   1843c:	b923      	cbnz	r3, 18448 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1843e:	2500      	movs	r5, #0
}
   18440:	4628      	mov	r0, r5
   18442:	b003      	add	sp, #12
   18444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   18448:	7527      	strb	r7, [r4, #20]
   1844a:	e7f8      	b.n	1843e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1844c:	68a0      	ldr	r0, [r4, #8]
   1844e:	f006 ffd0 	bl	1f3f2 <net_buf_frag_last>
   18452:	2102      	movs	r1, #2
   18454:	3008      	adds	r0, #8
   18456:	f006 ffee 	bl	1f436 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1845a:	4b14      	ldr	r3, [pc, #80]	; (184ac <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1845c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1845e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   18460:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18464:	4631      	mov	r1, r6
   18466:	9300      	str	r3, [sp, #0]
   18468:	9401      	str	r4, [sp, #4]
   1846a:	462b      	mov	r3, r5
   1846c:	4640      	mov	r0, r8
   1846e:	f006 f9ac 	bl	1e7ca <att_chan_read>
	if (read < 0) {
   18472:	2800      	cmp	r0, #0
   18474:	da07      	bge.n	18486 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   18476:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1847a:	bf26      	itte	cs
   1847c:	4240      	negcs	r0, r0
   1847e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   18480:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   18482:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18484:	e7dc      	b.n	18440 <read_type_cb+0x38>
	if (!data->item) {
   18486:	6923      	ldr	r3, [r4, #16]
   18488:	2b00      	cmp	r3, #0
   1848a:	d0d8      	beq.n	1843e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1848c:	68a0      	ldr	r0, [r4, #8]
   1848e:	f006 f944 	bl	1e71a <net_buf_frags_len>
   18492:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18496:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18498:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1849a:	7818      	ldrb	r0, [r3, #0]
   1849c:	4285      	cmp	r5, r0
   1849e:	bf94      	ite	ls
   184a0:	2500      	movls	r5, #0
   184a2:	2501      	movhi	r5, #1
   184a4:	e7cc      	b.n	18440 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   184a6:	2501      	movs	r5, #1
   184a8:	e7ca      	b.n	18440 <read_type_cb+0x38>
   184aa:	bf00      	nop
   184ac:	0001e737 	.word	0x0001e737

000184b0 <find_type_cb>:
{
   184b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   184b4:	f8d2 9000 	ldr.w	r9, [r2]
{
   184b8:	b091      	sub	sp, #68	; 0x44
   184ba:	4607      	mov	r7, r0
   184bc:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   184be:	2500      	movs	r5, #0
   184c0:	f642 0301 	movw	r3, #10241	; 0x2801
   184c4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   184c6:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   184ca:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   184ce:	a90b      	add	r1, sp, #44	; 0x2c
{
   184d0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   184d2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   184d6:	f005 fe05 	bl	1e0e4 <bt_uuid_cmp>
   184da:	2800      	cmp	r0, #0
   184dc:	d066      	beq.n	185ac <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   184de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   184e2:	6838      	ldr	r0, [r7, #0]
   184e4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   184e8:	a90b      	add	r1, sp, #44	; 0x2c
   184ea:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   184ee:	f005 fdf9 	bl	1e0e4 <bt_uuid_cmp>
   184f2:	b138      	cbz	r0, 18504 <find_type_cb+0x54>
		if (data->group &&
   184f4:	68a3      	ldr	r3, [r4, #8]
   184f6:	b11b      	cbz	r3, 18500 <find_type_cb+0x50>
   184f8:	885a      	ldrh	r2, [r3, #2]
   184fa:	42b2      	cmp	r2, r6
   184fc:	d200      	bcs.n	18500 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   184fe:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18500:	2001      	movs	r0, #1
   18502:	e009      	b.n	18518 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18504:	6861      	ldr	r1, [r4, #4]
   18506:	4608      	mov	r0, r1
   18508:	f006 f907 	bl	1e71a <net_buf_frags_len>
   1850c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   18510:	1a1b      	subs	r3, r3, r0
   18512:	2b03      	cmp	r3, #3
   18514:	d803      	bhi.n	1851e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   18516:	2000      	movs	r0, #0
}
   18518:	b011      	add	sp, #68	; 0x44
   1851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1851e:	4608      	mov	r0, r1
   18520:	f006 ff67 	bl	1f3f2 <net_buf_frag_last>
   18524:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   18526:	6860      	ldr	r0, [r4, #4]
   18528:	f006 f8f7 	bl	1e71a <net_buf_frags_len>
   1852c:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   18530:	f105 0b08 	add.w	fp, r5, #8
   18534:	ebaa 0a00 	sub.w	sl, sl, r0
   18538:	4658      	mov	r0, fp
   1853a:	f006 ffb7 	bl	1f4ac <net_buf_simple_tailroom>
   1853e:	4582      	cmp	sl, r0
   18540:	d237      	bcs.n	185b2 <find_type_cb+0x102>
   18542:	6860      	ldr	r0, [r4, #4]
   18544:	f006 f8e9 	bl	1e71a <net_buf_frags_len>
   18548:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1854c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1854e:	b970      	cbnz	r0, 1856e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18550:	6863      	ldr	r3, [r4, #4]
   18552:	7998      	ldrb	r0, [r3, #6]
   18554:	f001 fc5a 	bl	19e0c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18558:	2200      	movs	r2, #0
   1855a:	2300      	movs	r3, #0
   1855c:	f006 ff15 	bl	1f38a <net_buf_alloc_fixed>
		if (!frag) {
   18560:	4605      	mov	r5, r0
   18562:	2800      	cmp	r0, #0
   18564:	d0d7      	beq.n	18516 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   18566:	4601      	mov	r1, r0
   18568:	6860      	ldr	r0, [r4, #4]
   1856a:	f006 ff53 	bl	1f414 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1856e:	2300      	movs	r3, #0
   18570:	9300      	str	r3, [sp, #0]
   18572:	f8d7 9004 	ldr.w	r9, [r7, #4]
   18576:	4639      	mov	r1, r7
   18578:	2310      	movs	r3, #16
   1857a:	aa02      	add	r2, sp, #8
   1857c:	4640      	mov	r0, r8
   1857e:	47c8      	blx	r9
	if (read < 0) {
   18580:	1e07      	subs	r7, r0, #0
   18582:	db13      	blt.n	185ac <find_type_cb+0xfc>
	if (read != data->value_len) {
   18584:	7c22      	ldrb	r2, [r4, #16]
   18586:	68e0      	ldr	r0, [r4, #12]
   18588:	42ba      	cmp	r2, r7
   1858a:	d037      	beq.n	185fc <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1858c:	4601      	mov	r1, r0
   1858e:	a80b      	add	r0, sp, #44	; 0x2c
   18590:	f005 fdd2 	bl	1e138 <bt_uuid_create>
   18594:	b988      	cbnz	r0, 185ba <find_type_cb+0x10a>
   18596:	4a1b      	ldr	r2, [pc, #108]	; (18604 <find_type_cb+0x154>)
   18598:	4b1b      	ldr	r3, [pc, #108]	; (18608 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1859a:	7c21      	ldrb	r1, [r4, #16]
   1859c:	481b      	ldr	r0, [pc, #108]	; (1860c <find_type_cb+0x15c>)
   1859e:	1ad2      	subs	r2, r2, r3
   185a0:	08d2      	lsrs	r2, r2, #3
   185a2:	0192      	lsls	r2, r2, #6
   185a4:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   185a8:	f004 ff34 	bl	1d414 <log_1>
	data->group = NULL;
   185ac:	2300      	movs	r3, #0
   185ae:	60a3      	str	r3, [r4, #8]
   185b0:	e7a6      	b.n	18500 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   185b2:	4658      	mov	r0, fp
   185b4:	f006 ff7a 	bl	1f4ac <net_buf_simple_tailroom>
   185b8:	e7c9      	b.n	1854e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   185ba:	b2fa      	uxtb	r2, r7
   185bc:	a902      	add	r1, sp, #8
   185be:	a806      	add	r0, sp, #24
   185c0:	f005 fdba 	bl	1e138 <bt_uuid_create>
   185c4:	b948      	cbnz	r0, 185da <find_type_cb+0x12a>
   185c6:	4a0f      	ldr	r2, [pc, #60]	; (18604 <find_type_cb+0x154>)
   185c8:	4b0f      	ldr	r3, [pc, #60]	; (18608 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   185ca:	4811      	ldr	r0, [pc, #68]	; (18610 <find_type_cb+0x160>)
   185cc:	1ad2      	subs	r2, r2, r3
   185ce:	08d2      	lsrs	r2, r2, #3
   185d0:	0192      	lsls	r2, r2, #6
   185d2:	f042 0202 	orr.w	r2, r2, #2
   185d6:	4639      	mov	r1, r7
   185d8:	e7e6      	b.n	185a8 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   185da:	a906      	add	r1, sp, #24
   185dc:	a80b      	add	r0, sp, #44	; 0x2c
   185de:	f005 fd81 	bl	1e0e4 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   185e2:	2800      	cmp	r0, #0
   185e4:	d1e2      	bne.n	185ac <find_type_cb+0xfc>
	data->err = 0x00;
   185e6:	2300      	movs	r3, #0
   185e8:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   185ea:	2104      	movs	r1, #4
   185ec:	f105 0008 	add.w	r0, r5, #8
   185f0:	f006 ff21 	bl	1f436 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   185f4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   185f6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   185f8:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   185fa:	e781      	b.n	18500 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   185fc:	a902      	add	r1, sp, #8
   185fe:	f005 fcfb 	bl	1dff8 <memcmp>
   18602:	e7ee      	b.n	185e2 <find_type_cb+0x132>
   18604:	00020308 	.word	0x00020308
   18608:	00020308 	.word	0x00020308
   1860c:	00021d0f 	.word	0x00021d0f
   18610:	00021d2e 	.word	0x00021d2e

00018614 <chan_send>:
{
   18614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18618:	688b      	ldr	r3, [r1, #8]
   1861a:	781b      	ldrb	r3, [r3, #0]
   1861c:	2bd2      	cmp	r3, #210	; 0xd2
{
   1861e:	4605      	mov	r5, r0
   18620:	460c      	mov	r4, r1
   18622:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18624:	d116      	bne.n	18654 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   18626:	6803      	ldr	r3, [r0, #0]
   18628:	6818      	ldr	r0, [r3, #0]
   1862a:	f006 fea8 	bl	1f37e <bt_smp_sign>
		if (err) {
   1862e:	4606      	mov	r6, r0
   18630:	b180      	cbz	r0, 18654 <chan_send+0x40>
   18632:	4928      	ldr	r1, [pc, #160]	; (186d4 <chan_send+0xc0>)
   18634:	4b28      	ldr	r3, [pc, #160]	; (186d8 <chan_send+0xc4>)
			BT_ERR("Error signing data");
   18636:	4829      	ldr	r0, [pc, #164]	; (186dc <chan_send+0xc8>)
   18638:	1ac9      	subs	r1, r1, r3
   1863a:	08c9      	lsrs	r1, r1, #3
   1863c:	0189      	lsls	r1, r1, #6
   1863e:	f041 0101 	orr.w	r1, r1, #1
   18642:	f004 feda 	bl	1d3fa <log_0>
		net_buf_unref(buf);
   18646:	4620      	mov	r0, r4
   18648:	f001 fc9c 	bl	19f84 <net_buf_unref>
}
   1864c:	4630      	mov	r0, r6
   1864e:	b003      	add	sp, #12
   18650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   18654:	f104 0008 	add.w	r0, r4, #8
   18658:	f006 ff24 	bl	1f4a4 <net_buf_simple_headroom>
	state->len = buf->len;
   1865c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   18660:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   18662:	f1b9 0f00 	cmp.w	r9, #0
   18666:	d10a      	bne.n	1867e <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
   18668:	68a3      	ldr	r3, [r4, #8]
   1866a:	7818      	ldrb	r0, [r3, #0]
   1866c:	f006 f875 	bl	1e75a <att_op_get_type>
   18670:	1e43      	subs	r3, r0, #1
   18672:	b2db      	uxtb	r3, r3
   18674:	2b04      	cmp	r3, #4
   18676:	bf9c      	itt	ls
   18678:	4a19      	ldrls	r2, [pc, #100]	; (186e0 <chan_send+0xcc>)
   1867a:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1867e:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   18680:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18684:	4620      	mov	r0, r4
   18686:	681e      	ldr	r6, [r3, #0]
   18688:	f006 feaf 	bl	1f3ea <net_buf_ref>
   1868c:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
   18690:	4b14      	ldr	r3, [pc, #80]	; (186e4 <chan_send+0xd0>)
   18692:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18694:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   18696:	d019      	beq.n	186cc <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
   18698:	4b13      	ldr	r3, [pc, #76]	; (186e8 <chan_send+0xd4>)
   1869a:	4299      	cmp	r1, r3
   1869c:	d018      	beq.n	186d0 <chan_send+0xbc>
		return att_sent;
   1869e:	f8df c05c 	ldr.w	ip, [pc, #92]	; 186fc <chan_send+0xe8>
   186a2:	4b12      	ldr	r3, [pc, #72]	; (186ec <chan_send+0xd8>)
   186a4:	4812      	ldr	r0, [pc, #72]	; (186f0 <chan_send+0xdc>)
   186a6:	4561      	cmp	r1, ip
   186a8:	bf18      	it	ne
   186aa:	4603      	movne	r3, r0
				&chan->chan.chan);
   186ac:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   186ae:	4630      	mov	r0, r6
   186b0:	9500      	str	r5, [sp, #0]
   186b2:	2104      	movs	r1, #4
   186b4:	f005 ffd2 	bl	1e65c <bt_l2cap_send_cb>
	if (!err) {
   186b8:	4606      	mov	r6, r0
   186ba:	2800      	cmp	r0, #0
   186bc:	d0c3      	beq.n	18646 <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
   186be:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   186c0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   186c4:	fa10 f787 	uxtah	r7, r0, r7
   186c8:	60a7      	str	r7, [r4, #8]
}
   186ca:	e7bf      	b.n	1864c <chan_send+0x38>
		return att_rsp_sent;
   186cc:	4b09      	ldr	r3, [pc, #36]	; (186f4 <chan_send+0xe0>)
   186ce:	e7ed      	b.n	186ac <chan_send+0x98>
		return att_cfm_sent;
   186d0:	4b09      	ldr	r3, [pc, #36]	; (186f8 <chan_send+0xe4>)
   186d2:	e7eb      	b.n	186ac <chan_send+0x98>
   186d4:	00020308 	.word	0x00020308
   186d8:	00020308 	.word	0x00020308
   186dc:	00021d4d 	.word	0x00021d4d
   186e0:	00020748 	.word	0x00020748
   186e4:	0001e9d1 	.word	0x0001e9d1
   186e8:	0001e9ed 	.word	0x0001e9ed
   186ec:	00018335 	.word	0x00018335
   186f0:	0001e72b 	.word	0x0001e72b
   186f4:	00018325 	.word	0x00018325
   186f8:	00018315 	.word	0x00018315
   186fc:	00018781 	.word	0x00018781

00018700 <att_get>:
{
   18700:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18702:	7a83      	ldrb	r3, [r0, #10]
   18704:	2b07      	cmp	r3, #7
   18706:	d00b      	beq.n	18720 <att_get+0x20>
   18708:	4918      	ldr	r1, [pc, #96]	; (1876c <att_get+0x6c>)
   1870a:	4b19      	ldr	r3, [pc, #100]	; (18770 <att_get+0x70>)
		BT_WARN("Not connected");
   1870c:	4819      	ldr	r0, [pc, #100]	; (18774 <att_get+0x74>)
   1870e:	1ac9      	subs	r1, r1, r3
   18710:	08c9      	lsrs	r1, r1, #3
   18712:	0189      	lsls	r1, r1, #6
   18714:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   18718:	f004 fe6f 	bl	1d3fa <log_0>
		return NULL;
   1871c:	2400      	movs	r4, #0
   1871e:	e00e      	b.n	1873e <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18720:	2104      	movs	r1, #4
   18722:	f005 ffc4 	bl	1e6ae <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18726:	4604      	mov	r4, r0
   18728:	b958      	cbnz	r0, 18742 <att_get+0x42>
   1872a:	4910      	ldr	r1, [pc, #64]	; (1876c <att_get+0x6c>)
   1872c:	4b10      	ldr	r3, [pc, #64]	; (18770 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   1872e:	4812      	ldr	r0, [pc, #72]	; (18778 <att_get+0x78>)
   18730:	1ac9      	subs	r1, r1, r3
   18732:	08c9      	lsrs	r1, r1, #3
   18734:	0189      	lsls	r1, r1, #6
   18736:	f041 0101 	orr.w	r1, r1, #1
   1873a:	f004 fe5e 	bl	1d3fa <log_0>
}
   1873e:	4620      	mov	r0, r4
   18740:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18742:	f3bf 8f5b 	dmb	ish
   18746:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1874a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1874e:	075b      	lsls	r3, r3, #29
   18750:	d508      	bpl.n	18764 <att_get+0x64>
   18752:	4906      	ldr	r1, [pc, #24]	; (1876c <att_get+0x6c>)
   18754:	4b06      	ldr	r3, [pc, #24]	; (18770 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   18756:	4809      	ldr	r0, [pc, #36]	; (1877c <att_get+0x7c>)
   18758:	1ac9      	subs	r1, r1, r3
   1875a:	08c9      	lsrs	r1, r1, #3
   1875c:	0189      	lsls	r1, r1, #6
   1875e:	f041 0102 	orr.w	r1, r1, #2
   18762:	e7d9      	b.n	18718 <att_get+0x18>
	return att_chan->att;
   18764:	f850 4c08 	ldr.w	r4, [r0, #-8]
   18768:	e7e9      	b.n	1873e <att_get+0x3e>
   1876a:	bf00      	nop
   1876c:	00020308 	.word	0x00020308
   18770:	00020308 	.word	0x00020308
   18774:	00021d60 	.word	0x00021d60
   18778:	00021d6e 	.word	0x00021d6e
   1877c:	00021d89 	.word	0x00021d89

00018780 <chan_req_sent>:
	if (chan->req) {
   18780:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   18784:	b13b      	cbz	r3, 18796 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18786:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   1878a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1878e:	4802      	ldr	r0, [pc, #8]	; (18798 <chan_req_sent+0x18>)
   18790:	2300      	movs	r3, #0
   18792:	f003 becd 	b.w	1c530 <k_delayed_work_submit_to_queue>
}
   18796:	4770      	bx	lr
   18798:	200022f0 	.word	0x200022f0

0001879c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1879c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1879e:	2300      	movs	r3, #0
{
   187a0:	4606      	mov	r6, r0
   187a2:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   187a4:	482c      	ldr	r0, [pc, #176]	; (18858 <bt_att_accept+0xbc>)
   187a6:	2200      	movs	r2, #0
   187a8:	4669      	mov	r1, sp
   187aa:	f003 f873 	bl	1b894 <k_mem_slab_alloc>
   187ae:	4604      	mov	r4, r0
   187b0:	b178      	cbz	r0, 187d2 <bt_att_accept+0x36>
   187b2:	4a2a      	ldr	r2, [pc, #168]	; (1885c <bt_att_accept+0xc0>)
   187b4:	4b2a      	ldr	r3, [pc, #168]	; (18860 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
   187b6:	482b      	ldr	r0, [pc, #172]	; (18864 <bt_att_accept+0xc8>)
   187b8:	1ad2      	subs	r2, r2, r3
   187ba:	08d2      	lsrs	r2, r2, #3
   187bc:	0192      	lsls	r2, r2, #6
   187be:	f042 0201 	orr.w	r2, r2, #1
   187c2:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   187c4:	f004 fe26 	bl	1d414 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   187c8:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   187cc:	4620      	mov	r0, r4
   187ce:	b003      	add	sp, #12
   187d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   187d2:	4601      	mov	r1, r0
   187d4:	222c      	movs	r2, #44	; 0x2c
   187d6:	9800      	ldr	r0, [sp, #0]
   187d8:	f005 fc49 	bl	1e06e <memset>
	att->conn = conn;
   187dc:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   187de:	4822      	ldr	r0, [pc, #136]	; (18868 <bt_att_accept+0xcc>)
	list->tail = NULL;
   187e0:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   187e2:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   187e6:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   187ea:	2200      	movs	r2, #0
   187ec:	2300      	movs	r3, #0
   187ee:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   187f0:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   187f2:	f003 f84f 	bl	1b894 <k_mem_slab_alloc>
   187f6:	4604      	mov	r4, r0
   187f8:	b148      	cbz	r0, 1880e <bt_att_accept+0x72>
   187fa:	4a18      	ldr	r2, [pc, #96]	; (1885c <bt_att_accept+0xc0>)
   187fc:	4b18      	ldr	r3, [pc, #96]	; (18860 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   187fe:	6829      	ldr	r1, [r5, #0]
   18800:	481a      	ldr	r0, [pc, #104]	; (1886c <bt_att_accept+0xd0>)
   18802:	1ad2      	subs	r2, r2, r3
   18804:	08d2      	lsrs	r2, r2, #3
   18806:	0192      	lsls	r2, r2, #6
   18808:	f042 0201 	orr.w	r2, r2, #1
   1880c:	e7da      	b.n	187c4 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   1880e:	4601      	mov	r1, r0
   18810:	f44f 7298 	mov.w	r2, #304	; 0x130
   18814:	9801      	ldr	r0, [sp, #4]
   18816:	f005 fc2a 	bl	1e06e <memset>
	chan->chan.chan.ops = &ops;
   1881a:	9801      	ldr	r0, [sp, #4]
   1881c:	4b14      	ldr	r3, [pc, #80]	; (18870 <bt_att_accept+0xd4>)
   1881e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   18820:	30c8      	adds	r0, #200	; 0xc8
   18822:	f007 f884 	bl	1f92e <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   18826:	9801      	ldr	r0, [sp, #4]
   18828:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
   1882c:	2203      	movs	r2, #3
   1882e:	4611      	mov	r1, r2
   18830:	f007 f9d5 	bl	1fbde <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18834:	9b01      	ldr	r3, [sp, #4]
   18836:	f3bf 8f5b 	dmb	ish
   1883a:	33c0      	adds	r3, #192	; 0xc0
   1883c:	e853 2f00 	ldrex	r2, [r3]
   18840:	e843 4100 	strex	r1, r4, [r3]
   18844:	2900      	cmp	r1, #0
   18846:	d1f9      	bne.n	1883c <bt_att_accept+0xa0>
   18848:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1884c:	9b01      	ldr	r3, [sp, #4]
   1884e:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   18852:	603b      	str	r3, [r7, #0]
	return 0;
   18854:	e7ba      	b.n	187cc <bt_att_accept+0x30>
   18856:	bf00      	nop
   18858:	20000700 	.word	0x20000700
   1885c:	00020308 	.word	0x00020308
   18860:	00020308 	.word	0x00020308
   18864:	00021dad 	.word	0x00021dad
   18868:	2000071c 	.word	0x2000071c
   1886c:	00021dd2 	.word	0x00021dd2
   18870:	20000580 	.word	0x20000580

00018874 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   18874:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   18876:	4a07      	ldr	r2, [pc, #28]	; (18894 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   18878:	4604      	mov	r4, r0
   1887a:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   1887c:	f7ff feca 	bl	18614 <chan_send>
	if (err) {
   18880:	b130      	cbz	r0, 18890 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   18882:	4629      	mov	r1, r5
   18884:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   18888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1888c:	f006 bda0 	b.w	1f3d0 <net_buf_put>
}
   18890:	bd38      	pop	{r3, r4, r5, pc}
   18892:	bf00      	nop
   18894:	0001e9d1 	.word	0x0001e9d1

00018898 <bt_att_connected>:
{
   18898:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1889a:	2104      	movs	r1, #4
{
   1889c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1889e:	6800      	ldr	r0, [r0, #0]
   188a0:	f005 fef5 	bl	1e68e <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   188a4:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   188a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   188aa:	b91b      	cbnz	r3, 188b4 <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
   188ac:	f105 000c 	add.w	r0, r5, #12
   188b0:	f007 f83d 	bl	1f92e <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   188b4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   188b6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
   188ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   188bc:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
   188c0:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   188c2:	b902      	cbnz	r2, 188c6 <bt_att_connected+0x2e>
	list->tail = node;
   188c4:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   188c6:	f3bf 8f5b 	dmb	ish
   188ca:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   188ce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   188d2:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   188d4:	bf5e      	ittt	pl
   188d6:	2317      	movpl	r3, #23
   188d8:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   188dc:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   188e0:	2230      	movs	r2, #48	; 0x30
   188e2:	2100      	movs	r1, #0
   188e4:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   188e8:	f005 fbc1 	bl	1e06e <memset>
   188ec:	4b01      	ldr	r3, [pc, #4]	; (188f4 <bt_att_connected+0x5c>)
   188ee:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
   188f2:	bd38      	pop	{r3, r4, r5, pc}
   188f4:	00019235 	.word	0x00019235

000188f8 <att_write_cmd>:
{
   188f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   188fa:	4604      	mov	r4, r0
   188fc:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   188fe:	f101 0008 	add.w	r0, r1, #8
   18902:	460d      	mov	r5, r1
   18904:	f006 fdc6 	bl	1f494 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18908:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1890a:	68af      	ldr	r7, [r5, #8]
   1890c:	89ad      	ldrh	r5, [r5, #12]
   1890e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18910:	2100      	movs	r1, #0
   18912:	6818      	ldr	r0, [r3, #0]
   18914:	f006 fcde 	bl	1f2d4 <bt_gatt_change_aware>
   18918:	b320      	cbz	r0, 18964 <att_write_cmd+0x6c>
	if (!handle) {
   1891a:	b32e      	cbz	r6, 18968 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   1891c:	2218      	movs	r2, #24
   1891e:	2100      	movs	r1, #0
   18920:	4668      	mov	r0, sp
   18922:	f005 fba4 	bl	1e06e <memset>
	data.conn = chan->att->conn;
   18926:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18928:	4a10      	ldr	r2, [pc, #64]	; (1896c <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   1892a:	681b      	ldr	r3, [r3, #0]
   1892c:	9300      	str	r3, [sp, #0]
	data.req = req;
   1892e:	2300      	movs	r3, #0
   18930:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   18934:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18938:	2301      	movs	r3, #1
   1893a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1893e:	4631      	mov	r1, r6
   18940:	466b      	mov	r3, sp
   18942:	4630      	mov	r0, r6
	data.value = value;
   18944:	9703      	str	r7, [sp, #12]
	data.len = len;
   18946:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1894a:	f005 ff33 	bl	1e7b4 <bt_gatt_foreach_attr>
	if (data.err) {
   1894e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18952:	b923      	cbnz	r3, 1895e <att_write_cmd+0x66>
	if (data.buf) {
   18954:	9901      	ldr	r1, [sp, #4]
   18956:	b111      	cbz	r1, 1895e <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18958:	4620      	mov	r0, r4
   1895a:	f7ff ff8b 	bl	18874 <bt_att_chan_send_rsp.constprop.0>
   1895e:	2000      	movs	r0, #0
}
   18960:	b007      	add	sp, #28
   18962:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18964:	2012      	movs	r0, #18
   18966:	e7fb      	b.n	18960 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   18968:	2001      	movs	r0, #1
   1896a:	e7f9      	b.n	18960 <att_write_cmd+0x68>
   1896c:	0001ead1 	.word	0x0001ead1

00018970 <bt_att_chan_create_pdu>:
{
   18970:	b538      	push	{r3, r4, r5, lr}
   18972:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18974:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   18978:	3201      	adds	r2, #1
   1897a:	428a      	cmp	r2, r1
   1897c:	d90c      	bls.n	18998 <bt_att_chan_create_pdu+0x28>
   1897e:	481a      	ldr	r0, [pc, #104]	; (189e8 <bt_att_chan_create_pdu+0x78>)
   18980:	4b1a      	ldr	r3, [pc, #104]	; (189ec <bt_att_chan_create_pdu+0x7c>)
   18982:	1a1b      	subs	r3, r3, r0
   18984:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18986:	019b      	lsls	r3, r3, #6
   18988:	4819      	ldr	r0, [pc, #100]	; (189f0 <bt_att_chan_create_pdu+0x80>)
   1898a:	f043 0302 	orr.w	r3, r3, #2
   1898e:	f004 fd55 	bl	1d43c <log_2>
		return NULL;
   18992:	2400      	movs	r4, #0
}
   18994:	4620      	mov	r0, r4
   18996:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   18998:	4628      	mov	r0, r5
   1899a:	f005 fede 	bl	1e75a <att_op_get_type>
   1899e:	2802      	cmp	r0, #2
   189a0:	d001      	beq.n	189a6 <bt_att_chan_create_pdu+0x36>
   189a2:	2804      	cmp	r0, #4
   189a4:	d114      	bne.n	189d0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   189a6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   189aa:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   189ac:	2100      	movs	r1, #0
   189ae:	4608      	mov	r0, r1
   189b0:	f005 fe51 	bl	1e656 <bt_l2cap_create_pdu_timeout>
   189b4:	4604      	mov	r4, r0
	if (!buf) {
   189b6:	b980      	cbnz	r0, 189da <bt_att_chan_create_pdu+0x6a>
   189b8:	4b0b      	ldr	r3, [pc, #44]	; (189e8 <bt_att_chan_create_pdu+0x78>)
   189ba:	4a0c      	ldr	r2, [pc, #48]	; (189ec <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   189bc:	480d      	ldr	r0, [pc, #52]	; (189f4 <bt_att_chan_create_pdu+0x84>)
   189be:	1ad2      	subs	r2, r2, r3
   189c0:	08d2      	lsrs	r2, r2, #3
   189c2:	0192      	lsls	r2, r2, #6
   189c4:	f042 0201 	orr.w	r2, r2, #1
   189c8:	4629      	mov	r1, r5
   189ca:	f004 fd23 	bl	1d414 <log_1>
		return NULL;
   189ce:	e7e1      	b.n	18994 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   189d0:	f04f 32ff 	mov.w	r2, #4294967295
   189d4:	f04f 33ff 	mov.w	r3, #4294967295
   189d8:	e7e8      	b.n	189ac <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   189da:	2101      	movs	r1, #1
   189dc:	3008      	adds	r0, #8
   189de:	f006 fd2a 	bl	1f436 <net_buf_simple_add>
	hdr->code = op;
   189e2:	7005      	strb	r5, [r0, #0]
	return buf;
   189e4:	e7d6      	b.n	18994 <bt_att_chan_create_pdu+0x24>
   189e6:	bf00      	nop
   189e8:	00020308 	.word	0x00020308
   189ec:	00020308 	.word	0x00020308
   189f0:	00021df7 	.word	0x00021df7
   189f4:	00021beb 	.word	0x00021beb

000189f8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   189f8:	898b      	ldrh	r3, [r1, #12]
{
   189fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   189fe:	4604      	mov	r4, r0
   18a00:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   18a02:	b963      	cbnz	r3, 18a1e <bt_att_recv+0x26>
   18a04:	494c      	ldr	r1, [pc, #304]	; (18b38 <bt_att_recv+0x140>)
   18a06:	4b4d      	ldr	r3, [pc, #308]	; (18b3c <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   18a08:	484d      	ldr	r0, [pc, #308]	; (18b40 <bt_att_recv+0x148>)
   18a0a:	1ac9      	subs	r1, r1, r3
   18a0c:	08c9      	lsrs	r1, r1, #3
   18a0e:	0189      	lsls	r1, r1, #6
   18a10:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   18a14:	f004 fcf1 	bl	1d3fa <log_0>
}
   18a18:	2000      	movs	r0, #0
   18a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   18a1e:	2101      	movs	r1, #1
   18a20:	f108 0008 	add.w	r0, r8, #8
   18a24:	f006 fd2e 	bl	1f484 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   18a28:	f854 3c08 	ldr.w	r3, [r4, #-8]
   18a2c:	4605      	mov	r5, r0
   18a2e:	2b00      	cmp	r3, #0
   18a30:	d0f2      	beq.n	18a18 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   18a32:	4a44      	ldr	r2, [pc, #272]	; (18b44 <bt_att_recv+0x14c>)
   18a34:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18a36:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18a3a:	2300      	movs	r3, #0
   18a3c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   18a3e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   18a42:	4288      	cmp	r0, r1
   18a44:	d11d      	bne.n	18a82 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   18a46:	00d8      	lsls	r0, r3, #3
   18a48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18a4c:	789f      	ldrb	r7, [r3, #2]
   18a4e:	2f01      	cmp	r7, #1
   18a50:	d132      	bne.n	18ab8 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18a52:	f3bf 8f5b 	dmb	ish
   18a56:	34b8      	adds	r4, #184	; 0xb8
   18a58:	e854 3f00 	ldrex	r3, [r4]
   18a5c:	f043 0201 	orr.w	r2, r3, #1
   18a60:	e844 2100 	strex	r1, r2, [r4]
   18a64:	2900      	cmp	r1, #0
   18a66:	d1f7      	bne.n	18a58 <bt_att_recv+0x60>
   18a68:	f3bf 8f5b 	dmb	ish
   18a6c:	07da      	lsls	r2, r3, #31
   18a6e:	d53d      	bpl.n	18aec <bt_att_recv+0xf4>
   18a70:	4931      	ldr	r1, [pc, #196]	; (18b38 <bt_att_recv+0x140>)
   18a72:	4b32      	ldr	r3, [pc, #200]	; (18b3c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   18a74:	4834      	ldr	r0, [pc, #208]	; (18b48 <bt_att_recv+0x150>)
   18a76:	1ac9      	subs	r1, r1, r3
   18a78:	08c9      	lsrs	r1, r1, #3
   18a7a:	0189      	lsls	r1, r1, #6
   18a7c:	f041 0102 	orr.w	r1, r1, #2
   18a80:	e7c8      	b.n	18a14 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18a82:	3301      	adds	r3, #1
   18a84:	2b0d      	cmp	r3, #13
   18a86:	d1da      	bne.n	18a3e <bt_att_recv+0x46>
   18a88:	4b2c      	ldr	r3, [pc, #176]	; (18b3c <bt_att_recv+0x144>)
   18a8a:	4a2b      	ldr	r2, [pc, #172]	; (18b38 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   18a8c:	482f      	ldr	r0, [pc, #188]	; (18b4c <bt_att_recv+0x154>)
   18a8e:	1ad2      	subs	r2, r2, r3
   18a90:	08d2      	lsrs	r2, r2, #3
   18a92:	0192      	lsls	r2, r2, #6
   18a94:	f042 0202 	orr.w	r2, r2, #2
   18a98:	f004 fcbc 	bl	1d414 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   18a9c:	7829      	ldrb	r1, [r5, #0]
   18a9e:	4608      	mov	r0, r1
   18aa0:	f005 fe5b 	bl	1e75a <att_op_get_type>
   18aa4:	2800      	cmp	r0, #0
   18aa6:	d0b7      	beq.n	18a18 <bt_att_recv+0x20>
	if (!req) {
   18aa8:	2900      	cmp	r1, #0
   18aaa:	d0b5      	beq.n	18a18 <bt_att_recv+0x20>
   18aac:	2306      	movs	r3, #6
   18aae:	2200      	movs	r2, #0
   18ab0:	4630      	mov	r0, r6
   18ab2:	f006 f8a7 	bl	1ec04 <send_err_rsp.part.0>
   18ab6:	e7af      	b.n	18a18 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   18ab8:	2f05      	cmp	r7, #5
   18aba:	d117      	bne.n	18aec <bt_att_recv+0xf4>
   18abc:	f3bf 8f5b 	dmb	ish
   18ac0:	34b8      	adds	r4, #184	; 0xb8
   18ac2:	e854 3f00 	ldrex	r3, [r4]
   18ac6:	f043 0202 	orr.w	r2, r3, #2
   18aca:	e844 2100 	strex	r1, r2, [r4]
   18ace:	2900      	cmp	r1, #0
   18ad0:	d1f7      	bne.n	18ac2 <bt_att_recv+0xca>
   18ad2:	f3bf 8f5b 	dmb	ish
   18ad6:	079b      	lsls	r3, r3, #30
   18ad8:	d508      	bpl.n	18aec <bt_att_recv+0xf4>
   18ada:	4917      	ldr	r1, [pc, #92]	; (18b38 <bt_att_recv+0x140>)
   18adc:	4b17      	ldr	r3, [pc, #92]	; (18b3c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   18ade:	481c      	ldr	r0, [pc, #112]	; (18b50 <bt_att_recv+0x158>)
   18ae0:	1ac9      	subs	r1, r1, r3
   18ae2:	08c9      	lsrs	r1, r1, #3
   18ae4:	0189      	lsls	r1, r1, #6
   18ae6:	f041 0102 	orr.w	r1, r1, #2
   18aea:	e793      	b.n	18a14 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   18aec:	eb0c 0300 	add.w	r3, ip, r0
   18af0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   18af4:	785a      	ldrb	r2, [r3, #1]
   18af6:	428a      	cmp	r2, r1
   18af8:	d90e      	bls.n	18b18 <bt_att_recv+0x120>
   18afa:	4a10      	ldr	r2, [pc, #64]	; (18b3c <bt_att_recv+0x144>)
   18afc:	4b0e      	ldr	r3, [pc, #56]	; (18b38 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   18afe:	4815      	ldr	r0, [pc, #84]	; (18b54 <bt_att_recv+0x15c>)
   18b00:	1a9b      	subs	r3, r3, r2
   18b02:	08db      	lsrs	r3, r3, #3
   18b04:	019b      	lsls	r3, r3, #6
   18b06:	782a      	ldrb	r2, [r5, #0]
   18b08:	f043 0301 	orr.w	r3, r3, #1
   18b0c:	f004 fc96 	bl	1d43c <log_2>
	if (handler->type == ATT_REQUEST && err) {
   18b10:	2f01      	cmp	r7, #1
   18b12:	d181      	bne.n	18a18 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   18b14:	2304      	movs	r3, #4
   18b16:	e00a      	b.n	18b2e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   18b18:	685b      	ldr	r3, [r3, #4]
   18b1a:	4641      	mov	r1, r8
   18b1c:	4630      	mov	r0, r6
   18b1e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   18b20:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   18b22:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   18b24:	f47f af78 	bne.w	18a18 <bt_att_recv+0x20>
   18b28:	2800      	cmp	r0, #0
   18b2a:	f43f af75 	beq.w	18a18 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   18b2e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   18b30:	2900      	cmp	r1, #0
   18b32:	f43f af71 	beq.w	18a18 <bt_att_recv+0x20>
   18b36:	e7ba      	b.n	18aae <bt_att_recv+0xb6>
   18b38:	00020308 	.word	0x00020308
   18b3c:	00020308 	.word	0x00020308
   18b40:	00021e1c 	.word	0x00021e1c
   18b44:	0002075c 	.word	0x0002075c
   18b48:	00021e37 	.word	0x00021e37
   18b4c:	00021e91 	.word	0x00021e91
   18b50:	00021e53 	.word	0x00021e53
   18b54:	00021e72 	.word	0x00021e72

00018b58 <att_write_req>:
{
   18b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18b5c:	4604      	mov	r4, r0
   18b5e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   18b60:	f101 0008 	add.w	r0, r1, #8
   18b64:	460d      	mov	r5, r1
   18b66:	f006 fc95 	bl	1f494 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18b6a:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   18b6c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   18b70:	89ad      	ldrh	r5, [r5, #12]
   18b72:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18b74:	2101      	movs	r1, #1
   18b76:	6818      	ldr	r0, [r3, #0]
   18b78:	f006 fbac 	bl	1f2d4 <bt_gatt_change_aware>
   18b7c:	2800      	cmp	r0, #0
   18b7e:	d03f      	beq.n	18c00 <att_write_req+0xa8>
	if (!handle) {
   18b80:	2e00      	cmp	r6, #0
   18b82:	d03f      	beq.n	18c04 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   18b84:	2218      	movs	r2, #24
   18b86:	2100      	movs	r1, #0
   18b88:	4668      	mov	r0, sp
   18b8a:	f005 fa70 	bl	1e06e <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18b8e:	2200      	movs	r2, #0
   18b90:	2113      	movs	r1, #19
   18b92:	4620      	mov	r0, r4
   18b94:	f7ff feec 	bl	18970 <bt_att_chan_create_pdu>
   18b98:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   18b9a:	b378      	cbz	r0, 18bfc <att_write_req+0xa4>
	data.conn = chan->att->conn;
   18b9c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18b9e:	4a1a      	ldr	r2, [pc, #104]	; (18c08 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   18ba0:	681b      	ldr	r3, [r3, #0]
   18ba2:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18ba4:	2301      	movs	r3, #1
   18ba6:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   18baa:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   18bae:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18bb0:	466b      	mov	r3, sp
   18bb2:	4631      	mov	r1, r6
   18bb4:	4630      	mov	r0, r6
	data.len = len;
   18bb6:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   18bba:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   18bbe:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   18bc2:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18bc6:	f005 fdf5 	bl	1e7b4 <bt_gatt_foreach_attr>
	if (data.err) {
   18bca:	f89d 5014 	ldrb.w	r5, [sp, #20]
   18bce:	b175      	cbz	r5, 18bee <att_write_req+0x96>
			net_buf_unref(data.buf);
   18bd0:	9801      	ldr	r0, [sp, #4]
   18bd2:	f001 f9d7 	bl	19f84 <net_buf_unref>
	if (!req) {
   18bd6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18bda:	4632      	mov	r2, r6
   18bdc:	4641      	mov	r1, r8
   18bde:	4620      	mov	r0, r4
   18be0:	f006 f810 	bl	1ec04 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   18be4:	463d      	mov	r5, r7
}
   18be6:	4628      	mov	r0, r5
   18be8:	b007      	add	sp, #28
   18bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   18bee:	9901      	ldr	r1, [sp, #4]
   18bf0:	2900      	cmp	r1, #0
   18bf2:	d0f8      	beq.n	18be6 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18bf4:	4620      	mov	r0, r4
   18bf6:	f7ff fe3d 	bl	18874 <bt_att_chan_send_rsp.constprop.0>
   18bfa:	e7f4      	b.n	18be6 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   18bfc:	250e      	movs	r5, #14
   18bfe:	e7f2      	b.n	18be6 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18c00:	2512      	movs	r5, #18
   18c02:	e7f0      	b.n	18be6 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   18c04:	2501      	movs	r5, #1
   18c06:	e7ee      	b.n	18be6 <att_write_req+0x8e>
   18c08:	0001ead1 	.word	0x0001ead1

00018c0c <bt_att_create_pdu>:
{
   18c0c:	b570      	push	{r4, r5, r6, lr}
   18c0e:	460e      	mov	r6, r1
   18c10:	4615      	mov	r5, r2
	att = att_get(conn);
   18c12:	f7ff fd75 	bl	18700 <att_get>
	if (!att) {
   18c16:	b1c0      	cbz	r0, 18c4a <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18c18:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
   18c1a:	1c69      	adds	r1, r5, #1
   18c1c:	b15b      	cbz	r3, 18c36 <bt_att_create_pdu+0x2a>
   18c1e:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   18c22:	d008      	beq.n	18c36 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18c24:	681b      	ldr	r3, [r3, #0]
   18c26:	b10b      	cbz	r3, 18c2c <bt_att_create_pdu+0x20>
   18c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18c2c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
   18c30:	4291      	cmp	r1, r2
   18c32:	d90c      	bls.n	18c4e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18c34:	b98b      	cbnz	r3, 18c5a <bt_att_create_pdu+0x4e>
   18c36:	4a0e      	ldr	r2, [pc, #56]	; (18c70 <bt_att_create_pdu+0x64>)
   18c38:	4b0e      	ldr	r3, [pc, #56]	; (18c74 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   18c3a:	480f      	ldr	r0, [pc, #60]	; (18c78 <bt_att_create_pdu+0x6c>)
   18c3c:	1ad2      	subs	r2, r2, r3
   18c3e:	08d2      	lsrs	r2, r2, #3
   18c40:	0192      	lsls	r2, r2, #6
   18c42:	f042 0202 	orr.w	r2, r2, #2
   18c46:	f004 fbe5 	bl	1d414 <log_1>
}
   18c4a:	2000      	movs	r0, #0
   18c4c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   18c4e:	462a      	mov	r2, r5
   18c50:	4631      	mov	r1, r6
}
   18c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   18c56:	f7ff be8b 	b.w	18970 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18c5a:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
   18c5e:	d004      	beq.n	18c6a <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18c60:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18c64:	b10c      	cbz	r4, 18c6a <bt_att_create_pdu+0x5e>
   18c66:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
   18c6a:	4618      	mov	r0, r3
   18c6c:	4623      	mov	r3, r4
   18c6e:	e7dd      	b.n	18c2c <bt_att_create_pdu+0x20>
   18c70:	00020308 	.word	0x00020308
   18c74:	00020308 	.word	0x00020308
   18c78:	00021eab 	.word	0x00021eab

00018c7c <att_read_group_req>:
{
   18c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18c80:	7b0c      	ldrb	r4, [r1, #12]
   18c82:	3c04      	subs	r4, #4
   18c84:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   18c86:	2c02      	cmp	r4, #2
{
   18c88:	4605      	mov	r5, r0
   18c8a:	b08c      	sub	sp, #48	; 0x30
   18c8c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18c8e:	d001      	beq.n	18c94 <att_read_group_req+0x18>
   18c90:	2c10      	cmp	r4, #16
   18c92:	d16e      	bne.n	18d72 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   18c94:	2104      	movs	r1, #4
   18c96:	3008      	adds	r0, #8
   18c98:	f006 fbf4 	bl	1f484 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18c9c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   18ca0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18ca2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18ca4:	1d01      	adds	r1, r0, #4
   18ca6:	4622      	mov	r2, r4
   18ca8:	4640      	mov	r0, r8
   18caa:	f005 fa45 	bl	1e138 <bt_uuid_create>
   18cae:	2800      	cmp	r0, #0
   18cb0:	d061      	beq.n	18d76 <att_read_group_req+0xfa>
	if (!start || !end) {
   18cb2:	2e00      	cmp	r6, #0
   18cb4:	d03a      	beq.n	18d2c <att_read_group_req+0xb0>
   18cb6:	2400      	movs	r4, #0
   18cb8:	2f00      	cmp	r7, #0
   18cba:	d036      	beq.n	18d2a <att_read_group_req+0xae>
	if (start > end) {
   18cbc:	42be      	cmp	r6, r7
   18cbe:	d835      	bhi.n	18d2c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18cc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18cc4:	a901      	add	r1, sp, #4
   18cc6:	4640      	mov	r0, r8
   18cc8:	f88d 4004 	strb.w	r4, [sp, #4]
   18ccc:	f8ad 3006 	strh.w	r3, [sp, #6]
   18cd0:	f005 fa08 	bl	1e0e4 <bt_uuid_cmp>
   18cd4:	2800      	cmp	r0, #0
   18cd6:	d134      	bne.n	18d42 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   18cd8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   18cda:	2214      	movs	r2, #20
   18cdc:	2100      	movs	r1, #0
   18cde:	a807      	add	r0, sp, #28
   18ce0:	f005 f9c5 	bl	1e06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   18ce4:	2201      	movs	r2, #1
   18ce6:	2111      	movs	r1, #17
   18ce8:	4620      	mov	r0, r4
   18cea:	f7ff ff8f 	bl	18c0c <bt_att_create_pdu>
   18cee:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   18cf0:	2800      	cmp	r0, #0
   18cf2:	d040      	beq.n	18d76 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   18cf4:	2101      	movs	r1, #1
   18cf6:	3008      	adds	r0, #8
	data.uuid = uuid;
   18cf8:	e9cd 5807 	strd	r5, r8, [sp, #28]
   18cfc:	f006 fb9b 	bl	1f436 <net_buf_simple_add>
	data.rsp->len = 0U;
   18d00:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18d04:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18d06:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   18d08:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18d0c:	4a1b      	ldr	r2, [pc, #108]	; (18d7c <att_read_group_req+0x100>)
	data.group = NULL;
   18d0e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18d12:	4639      	mov	r1, r7
   18d14:	4630      	mov	r0, r6
   18d16:	f005 fd4d 	bl	1e7b4 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   18d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18d1c:	781c      	ldrb	r4, [r3, #0]
   18d1e:	bb1c      	cbnz	r4, 18d68 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   18d20:	9809      	ldr	r0, [sp, #36]	; 0x24
   18d22:	f001 f92f 	bl	19f84 <net_buf_unref>
	if (!req) {
   18d26:	230a      	movs	r3, #10
   18d28:	e018      	b.n	18d5c <att_read_group_req+0xe0>
			*err = 0U;
   18d2a:	463e      	mov	r6, r7
	if (!req) {
   18d2c:	2301      	movs	r3, #1
   18d2e:	4632      	mov	r2, r6
   18d30:	2110      	movs	r1, #16
   18d32:	4628      	mov	r0, r5
   18d34:	f005 ff66 	bl	1ec04 <send_err_rsp.part.0>
		return 0;
   18d38:	2400      	movs	r4, #0
}
   18d3a:	4620      	mov	r0, r4
   18d3c:	b00c      	add	sp, #48	; 0x30
   18d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   18d42:	f642 0301 	movw	r3, #10241	; 0x2801
   18d46:	a907      	add	r1, sp, #28
   18d48:	4640      	mov	r0, r8
   18d4a:	f88d 401c 	strb.w	r4, [sp, #28]
   18d4e:	f8ad 301e 	strh.w	r3, [sp, #30]
   18d52:	f005 f9c7 	bl	1e0e4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18d56:	2800      	cmp	r0, #0
   18d58:	d0be      	beq.n	18cd8 <att_read_group_req+0x5c>
	if (!req) {
   18d5a:	2310      	movs	r3, #16
   18d5c:	4632      	mov	r2, r6
   18d5e:	2110      	movs	r1, #16
   18d60:	4628      	mov	r0, r5
   18d62:	f005 ff4f 	bl	1ec04 <send_err_rsp.part.0>
		return 0;
   18d66:	e7e8      	b.n	18d3a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18d68:	9909      	ldr	r1, [sp, #36]	; 0x24
   18d6a:	4628      	mov	r0, r5
   18d6c:	f7ff fd82 	bl	18874 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18d70:	e7e2      	b.n	18d38 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   18d72:	2404      	movs	r4, #4
   18d74:	e7e1      	b.n	18d3a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   18d76:	240e      	movs	r4, #14
   18d78:	e7df      	b.n	18d3a <att_read_group_req+0xbe>
   18d7a:	bf00      	nop
   18d7c:	0001835d 	.word	0x0001835d

00018d80 <att_read_mult_req>:
{
   18d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18d84:	6886      	ldr	r6, [r0, #8]
{
   18d86:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   18d88:	2210      	movs	r2, #16
{
   18d8a:	4604      	mov	r4, r0
   18d8c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   18d8e:	4668      	mov	r0, sp
   18d90:	2100      	movs	r1, #0
   18d92:	f005 f96c 	bl	1e06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18d96:	2200      	movs	r2, #0
   18d98:	210f      	movs	r1, #15
   18d9a:	4630      	mov	r0, r6
   18d9c:	f7ff ff36 	bl	18c0c <bt_att_create_pdu>
   18da0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18da2:	b358      	cbz	r0, 18dfc <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18da4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 18e00 <att_read_mult_req+0x80>
	data.chan = chan;
   18da8:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   18daa:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18dae:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18db2:	89ab      	ldrh	r3, [r5, #12]
   18db4:	2b01      	cmp	r3, #1
   18db6:	d804      	bhi.n	18dc2 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18db8:	9902      	ldr	r1, [sp, #8]
   18dba:	4620      	mov	r0, r4
   18dbc:	f7ff fd5a 	bl	18874 <bt_att_chan_send_rsp.constprop.0>
   18dc0:	e018      	b.n	18df4 <att_read_mult_req+0x74>
   18dc2:	4638      	mov	r0, r7
   18dc4:	f006 fb66 	bl	1f494 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18dc8:	466b      	mov	r3, sp
   18dca:	464a      	mov	r2, r9
   18dcc:	4601      	mov	r1, r0
   18dce:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18dd0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18dd4:	f005 fcee 	bl	1e7b4 <bt_gatt_foreach_attr>
		if (data.err) {
   18dd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18ddc:	2b00      	cmp	r3, #0
   18dde:	d0e8      	beq.n	18db2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   18de0:	9802      	ldr	r0, [sp, #8]
   18de2:	f001 f8cf 	bl	19f84 <net_buf_unref>
	if (!req) {
   18de6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18dea:	4632      	mov	r2, r6
   18dec:	210e      	movs	r1, #14
   18dee:	4620      	mov	r0, r4
   18df0:	f005 ff08 	bl	1ec04 <send_err_rsp.part.0>
	return 0;
   18df4:	2000      	movs	r0, #0
}
   18df6:	b005      	add	sp, #20
   18df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   18dfc:	200e      	movs	r0, #14
   18dfe:	e7fa      	b.n	18df6 <att_read_mult_req+0x76>
   18e00:	0001ebb1 	.word	0x0001ebb1

00018e04 <att_read_rsp>:
{
   18e04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18e08:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   18e0c:	4605      	mov	r5, r0
   18e0e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18e10:	4640      	mov	r0, r8
   18e12:	2101      	movs	r1, #1
{
   18e14:	4614      	mov	r4, r2
   18e16:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   18e18:	f006 fa5c 	bl	1f2d4 <bt_gatt_change_aware>
   18e1c:	b388      	cbz	r0, 18e82 <att_read_rsp+0x7e>
	if (!handle) {
   18e1e:	b396      	cbz	r6, 18e86 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   18e20:	2210      	movs	r2, #16
   18e22:	2100      	movs	r1, #0
   18e24:	4668      	mov	r0, sp
   18e26:	f005 f922 	bl	1e06e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   18e2a:	2200      	movs	r2, #0
   18e2c:	4621      	mov	r1, r4
   18e2e:	4640      	mov	r0, r8
   18e30:	f7ff feec 	bl	18c0c <bt_att_create_pdu>
   18e34:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18e36:	b340      	cbz	r0, 18e8a <att_read_rsp+0x86>
	data.offset = offset;
   18e38:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18e3c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18e40:	2301      	movs	r3, #1
   18e42:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18e46:	4a12      	ldr	r2, [pc, #72]	; (18e90 <att_read_rsp+0x8c>)
	data.chan = chan;
   18e48:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18e4a:	466b      	mov	r3, sp
   18e4c:	4631      	mov	r1, r6
   18e4e:	4630      	mov	r0, r6
   18e50:	f005 fcb0 	bl	1e7b4 <bt_gatt_foreach_attr>
	if (data.err) {
   18e54:	f89d 400c 	ldrb.w	r4, [sp, #12]
   18e58:	b174      	cbz	r4, 18e78 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   18e5a:	9802      	ldr	r0, [sp, #8]
   18e5c:	f001 f892 	bl	19f84 <net_buf_unref>
	if (!req) {
   18e60:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18e64:	4632      	mov	r2, r6
   18e66:	4639      	mov	r1, r7
   18e68:	4628      	mov	r0, r5
   18e6a:	f005 fecb 	bl	1ec04 <send_err_rsp.part.0>
		return 0;
   18e6e:	2400      	movs	r4, #0
}
   18e70:	4620      	mov	r0, r4
   18e72:	b004      	add	sp, #16
   18e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18e78:	9902      	ldr	r1, [sp, #8]
   18e7a:	4628      	mov	r0, r5
   18e7c:	f7ff fcfa 	bl	18874 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18e80:	e7f6      	b.n	18e70 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18e82:	2412      	movs	r4, #18
   18e84:	e7f4      	b.n	18e70 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   18e86:	2401      	movs	r4, #1
   18e88:	e7f2      	b.n	18e70 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   18e8a:	240e      	movs	r4, #14
   18e8c:	e7f0      	b.n	18e70 <att_read_rsp+0x6c>
   18e8e:	bf00      	nop
   18e90:	0001ebb1 	.word	0x0001ebb1

00018e94 <att_read_type_req>:
{
   18e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18e98:	7b0c      	ldrb	r4, [r1, #12]
   18e9a:	3c04      	subs	r4, #4
   18e9c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   18e9e:	2c02      	cmp	r4, #2
{
   18ea0:	4605      	mov	r5, r0
   18ea2:	b08c      	sub	sp, #48	; 0x30
   18ea4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18ea6:	d001      	beq.n	18eac <att_read_type_req+0x18>
   18ea8:	2c10      	cmp	r4, #16
   18eaa:	d14f      	bne.n	18f4c <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   18eac:	2104      	movs	r1, #4
   18eae:	3008      	adds	r0, #8
   18eb0:	f006 fae8 	bl	1f484 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18eb4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   18eb8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18eba:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18ebc:	1d01      	adds	r1, r0, #4
   18ebe:	4622      	mov	r2, r4
   18ec0:	4640      	mov	r0, r8
   18ec2:	f005 f939 	bl	1e138 <bt_uuid_create>
   18ec6:	b188      	cbz	r0, 18eec <att_read_type_req+0x58>
	if (!start || !end) {
   18ec8:	b19e      	cbz	r6, 18ef2 <att_read_type_req+0x5e>
   18eca:	b18f      	cbz	r7, 18ef0 <att_read_type_req+0x5c>
	if (start > end) {
   18ecc:	42b7      	cmp	r7, r6
   18ece:	d310      	bcc.n	18ef2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   18ed0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   18ed2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   18ed4:	2100      	movs	r1, #0
   18ed6:	eb0d 0002 	add.w	r0, sp, r2
   18eda:	f005 f8c8 	bl	1e06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18ede:	2201      	movs	r2, #1
   18ee0:	2109      	movs	r1, #9
   18ee2:	4620      	mov	r0, r4
   18ee4:	f7ff fe92 	bl	18c0c <bt_att_create_pdu>
   18ee8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   18eea:	b968      	cbnz	r0, 18f08 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   18eec:	240e      	movs	r4, #14
   18eee:	e007      	b.n	18f00 <att_read_type_req+0x6c>
			*err = 0U;
   18ef0:	463e      	mov	r6, r7
	if (!req) {
   18ef2:	2301      	movs	r3, #1
   18ef4:	4632      	mov	r2, r6
   18ef6:	2108      	movs	r1, #8
   18ef8:	4628      	mov	r0, r5
   18efa:	f005 fe83 	bl	1ec04 <send_err_rsp.part.0>
		return 0;
   18efe:	2400      	movs	r4, #0
}
   18f00:	4620      	mov	r0, r4
   18f02:	b00c      	add	sp, #48	; 0x30
   18f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   18f08:	2101      	movs	r1, #1
   18f0a:	3008      	adds	r0, #8
	data.uuid = uuid;
   18f0c:	e9cd 5806 	strd	r5, r8, [sp, #24]
   18f10:	f006 fa91 	bl	1f436 <net_buf_simple_add>
	data.rsp->len = 0U;
   18f14:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18f18:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18f1a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18f1c:	4a0c      	ldr	r2, [pc, #48]	; (18f50 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   18f1e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18f22:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18f24:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18f28:	4630      	mov	r0, r6
   18f2a:	ab06      	add	r3, sp, #24
   18f2c:	f005 fc42 	bl	1e7b4 <bt_gatt_foreach_attr>
	if (data.err) {
   18f30:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   18f34:	b12c      	cbz	r4, 18f42 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   18f36:	9808      	ldr	r0, [sp, #32]
   18f38:	f001 f824 	bl	19f84 <net_buf_unref>
	if (!req) {
   18f3c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18f40:	e7d8      	b.n	18ef4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18f42:	9908      	ldr	r1, [sp, #32]
   18f44:	4628      	mov	r0, r5
   18f46:	f7ff fc95 	bl	18874 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   18f4a:	e7d9      	b.n	18f00 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   18f4c:	2404      	movs	r4, #4
   18f4e:	e7d7      	b.n	18f00 <att_read_type_req+0x6c>
   18f50:	00018409 	.word	0x00018409

00018f54 <att_find_type_req>:
{
   18f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18f58:	4688      	mov	r8, r1
   18f5a:	b086      	sub	sp, #24
   18f5c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   18f5e:	2106      	movs	r1, #6
   18f60:	f108 0008 	add.w	r0, r8, #8
   18f64:	f006 fa8e 	bl	1f484 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   18f68:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   18f6a:	b317      	cbz	r7, 18fb2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   18f6c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   18f70:	f1b9 0f00 	cmp.w	r9, #0
   18f74:	d01c      	beq.n	18fb0 <att_find_type_req+0x5c>
	if (start > end) {
   18f76:	454f      	cmp	r7, r9
   18f78:	d81b      	bhi.n	18fb2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   18f7a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18f7c:	f8ad 3002 	strh.w	r3, [sp, #2]
   18f80:	2400      	movs	r4, #0
   18f82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18f86:	a901      	add	r1, sp, #4
   18f88:	4668      	mov	r0, sp
	value = buf->data;
   18f8a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18f8e:	f88d 4000 	strb.w	r4, [sp]
   18f92:	f88d 4004 	strb.w	r4, [sp, #4]
   18f96:	f8ad 3006 	strh.w	r3, [sp, #6]
   18f9a:	f005 f8a3 	bl	1e0e4 <bt_uuid_cmp>
   18f9e:	4606      	mov	r6, r0
   18fa0:	b190      	cbz	r0, 18fc8 <att_find_type_req+0x74>
	if (!req) {
   18fa2:	230a      	movs	r3, #10
   18fa4:	463a      	mov	r2, r7
   18fa6:	2106      	movs	r1, #6
   18fa8:	4628      	mov	r0, r5
   18faa:	f005 fe2b 	bl	1ec04 <send_err_rsp.part.0>
		return 0;
   18fae:	e007      	b.n	18fc0 <att_find_type_req+0x6c>
			*err = 0U;
   18fb0:	464f      	mov	r7, r9
	if (!req) {
   18fb2:	2301      	movs	r3, #1
   18fb4:	463a      	mov	r2, r7
   18fb6:	2106      	movs	r1, #6
   18fb8:	4628      	mov	r0, r5
   18fba:	f005 fe23 	bl	1ec04 <send_err_rsp.part.0>
		return 0;
   18fbe:	2400      	movs	r4, #0
}
   18fc0:	4620      	mov	r0, r4
   18fc2:	b006      	add	sp, #24
   18fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18fc8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   18fcc:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   18fd0:	4601      	mov	r1, r0
   18fd2:	2214      	movs	r2, #20
   18fd4:	a801      	add	r0, sp, #4
   18fd6:	f005 f84a 	bl	1e06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18fda:	4632      	mov	r2, r6
   18fdc:	2107      	movs	r1, #7
   18fde:	4640      	mov	r0, r8
   18fe0:	f7ff fe14 	bl	18c0c <bt_att_create_pdu>
   18fe4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18fe6:	b1d8      	cbz	r0, 19020 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18fe8:	230a      	movs	r3, #10
   18fea:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18fee:	4a0d      	ldr	r2, [pc, #52]	; (19024 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   18ff0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18ff4:	ab01      	add	r3, sp, #4
   18ff6:	4649      	mov	r1, r9
   18ff8:	4638      	mov	r0, r7
	data.value = value;
   18ffa:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   18ffe:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19000:	f005 fbd8 	bl	1e7b4 <bt_gatt_foreach_attr>
	if (data.err) {
   19004:	f89d 4015 	ldrb.w	r4, [sp, #21]
   19008:	b12c      	cbz	r4, 19016 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1900a:	9802      	ldr	r0, [sp, #8]
   1900c:	f000 ffba 	bl	19f84 <net_buf_unref>
	if (!req) {
   19010:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19014:	e7ce      	b.n	18fb4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19016:	9902      	ldr	r1, [sp, #8]
   19018:	4628      	mov	r0, r5
   1901a:	f7ff fc2b 	bl	18874 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1901e:	e7cf      	b.n	18fc0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19020:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19022:	e7cd      	b.n	18fc0 <att_find_type_req+0x6c>
   19024:	000184b1 	.word	0x000184b1

00019028 <att_find_info_req>:
{
   19028:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1902a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1902c:	881e      	ldrh	r6, [r3, #0]
{
   1902e:	b085      	sub	sp, #20
   19030:	4605      	mov	r5, r0
	if (!start || !end) {
   19032:	b19e      	cbz	r6, 1905c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19034:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   19036:	b184      	cbz	r4, 1905a <att_find_info_req+0x32>
	if (start > end) {
   19038:	42b4      	cmp	r4, r6
   1903a:	d30f      	bcc.n	1905c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1903c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1903e:	2210      	movs	r2, #16
   19040:	2100      	movs	r1, #0
   19042:	4668      	mov	r0, sp
   19044:	f005 f813 	bl	1e06e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19048:	2200      	movs	r2, #0
   1904a:	2105      	movs	r1, #5
   1904c:	4638      	mov	r0, r7
   1904e:	f7ff fddd 	bl	18c0c <bt_att_create_pdu>
   19052:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19054:	b958      	cbnz	r0, 1906e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19056:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19058:	e007      	b.n	1906a <att_find_info_req+0x42>
			*err = 0U;
   1905a:	4626      	mov	r6, r4
	if (!req) {
   1905c:	2301      	movs	r3, #1
   1905e:	4632      	mov	r2, r6
   19060:	2104      	movs	r1, #4
   19062:	4628      	mov	r0, r5
   19064:	f005 fdce 	bl	1ec04 <send_err_rsp.part.0>
	return 0;
   19068:	2000      	movs	r0, #0
}
   1906a:	b005      	add	sp, #20
   1906c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1906e:	4621      	mov	r1, r4
   19070:	4a08      	ldr	r2, [pc, #32]	; (19094 <att_find_info_req+0x6c>)
	data.chan = chan;
   19072:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19074:	466b      	mov	r3, sp
   19076:	4630      	mov	r0, r6
   19078:	f005 fb9c 	bl	1e7b4 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1907c:	9c02      	ldr	r4, [sp, #8]
   1907e:	b924      	cbnz	r4, 1908a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   19080:	9801      	ldr	r0, [sp, #4]
   19082:	f000 ff7f 	bl	19f84 <net_buf_unref>
	if (!req) {
   19086:	230a      	movs	r3, #10
   19088:	e7e9      	b.n	1905e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1908a:	9901      	ldr	r1, [sp, #4]
   1908c:	4628      	mov	r0, r5
   1908e:	f7ff fbf1 	bl	18874 <bt_att_chan_send_rsp.constprop.0>
   19092:	e7e9      	b.n	19068 <att_find_info_req+0x40>
   19094:	0001e8e1 	.word	0x0001e8e1

00019098 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19098:	b513      	push	{r0, r1, r4, lr}
   1909a:	4602      	mov	r2, r0
   1909c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1909e:	4808      	ldr	r0, [pc, #32]	; (190c0 <bt_att_req_alloc+0x28>)
   190a0:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   190a2:	2400      	movs	r4, #0
   190a4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   190a6:	f002 fbf5 	bl	1b894 <k_mem_slab_alloc>
   190aa:	4601      	mov	r1, r0
   190ac:	b930      	cbnz	r0, 190bc <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   190ae:	9801      	ldr	r0, [sp, #4]
   190b0:	2218      	movs	r2, #24
   190b2:	f004 ffdc 	bl	1e06e <memset>

	return req;
   190b6:	9801      	ldr	r0, [sp, #4]
}
   190b8:	b002      	add	sp, #8
   190ba:	bd10      	pop	{r4, pc}
		return NULL;
   190bc:	4620      	mov	r0, r4
   190be:	e7fb      	b.n	190b8 <bt_att_req_alloc+0x20>
   190c0:	20000738 	.word	0x20000738

000190c4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   190c4:	b507      	push	{r0, r1, r2, lr}
   190c6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   190c8:	a901      	add	r1, sp, #4
   190ca:	4803      	ldr	r0, [pc, #12]	; (190d8 <bt_att_req_free+0x14>)
   190cc:	f002 fc14 	bl	1b8f8 <k_mem_slab_free>
}
   190d0:	b003      	add	sp, #12
   190d2:	f85d fb04 	ldr.w	pc, [sp], #4
   190d6:	bf00      	nop
   190d8:	20000738 	.word	0x20000738

000190dc <att_handle_rsp>:
{
   190dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190e0:	4605      	mov	r5, r0
   190e2:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
   190e4:	30e0      	adds	r0, #224	; 0xe0
{
   190e6:	4689      	mov	r9, r1
   190e8:	4692      	mov	sl, r2
   190ea:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
   190ec:	f006 fdf9 	bl	1fce2 <k_delayed_work_cancel>
	if (!chan->req) {
   190f0:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
   190f4:	bb64      	cbnz	r4, 19150 <att_handle_rsp+0x74>
   190f6:	4932      	ldr	r1, [pc, #200]	; (191c0 <att_handle_rsp+0xe4>)
   190f8:	4b32      	ldr	r3, [pc, #200]	; (191c4 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
   190fa:	4833      	ldr	r0, [pc, #204]	; (191c8 <att_handle_rsp+0xec>)
   190fc:	1ac9      	subs	r1, r1, r3
   190fe:	08c9      	lsrs	r1, r1, #3
   19100:	0189      	lsls	r1, r1, #6
   19102:	f041 0102 	orr.w	r1, r1, #2
   19106:	f004 f978 	bl	1d3fa <log_0>
	att_process(chan->att);
   1910a:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
   1910e:	f10b 0004 	add.w	r0, fp, #4
   19112:	f005 fadd 	bl	1e6d0 <sys_slist_get>
	if (!node) {
   19116:	4607      	mov	r7, r0
   19118:	2800      	cmp	r0, #0
   1911a:	d039      	beq.n	19190 <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1911c:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
   19120:	b15a      	cbz	r2, 1913a <att_handle_rsp+0x5e>
   19122:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
   19126:	d008      	beq.n	1913a <att_handle_rsp+0x5e>
   19128:	6816      	ldr	r6, [r2, #0]
   1912a:	b10e      	cbz	r6, 19130 <att_handle_rsp+0x54>
   1912c:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   19130:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
   19134:	b33a      	cbz	r2, 19186 <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19136:	2e00      	cmp	r6, #0
   19138:	d137      	bne.n	191aa <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
   1913a:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
   1913e:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   19140:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
   19144:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
   19148:	bb12      	cbnz	r2, 19190 <att_handle_rsp+0xb4>
	list->tail = node;
   1914a:	f8cb 7008 	str.w	r7, [fp, #8]
}
   1914e:	e01f      	b.n	19190 <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
   19150:	4b1e      	ldr	r3, [pc, #120]	; (191cc <att_handle_rsp+0xf0>)
   19152:	429c      	cmp	r4, r3
   19154:	d103      	bne.n	1915e <att_handle_rsp+0x82>
		chan->req = NULL;
   19156:	2400      	movs	r4, #0
   19158:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
   1915c:	e7d5      	b.n	1910a <att_handle_rsp+0x2e>
	if (chan->req->buf) {
   1915e:	6920      	ldr	r0, [r4, #16]
   19160:	b128      	cbz	r0, 1916e <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
   19162:	f000 ff0f 	bl	19f84 <net_buf_unref>
		chan->req->buf = NULL;
   19166:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1916a:	2200      	movs	r2, #0
   1916c:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
   1916e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	chan->req->func = NULL;
   19172:	2600      	movs	r6, #0
	func = chan->req->func;
   19174:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
   19176:	6943      	ldr	r3, [r0, #20]
	chan->req->func = NULL;
   19178:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   1917a:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
   1917c:	f005 fda8 	bl	1ecd0 <att_req_destroy>
	chan->req = NULL;
   19180:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
   19184:	e7c1      	b.n	1910a <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   19186:	4639      	mov	r1, r7
   19188:	f005 fc64 	bl	1ea54 <bt_att_chan_req_send>
   1918c:	2800      	cmp	r0, #0
   1918e:	dbd2      	blt.n	19136 <att_handle_rsp+0x5a>
	if (func) {
   19190:	b13c      	cbz	r4, 191a2 <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
   19192:	9b03      	ldr	r3, [sp, #12]
   19194:	6828      	ldr	r0, [r5, #0]
   19196:	9300      	str	r3, [sp, #0]
   19198:	6800      	ldr	r0, [r0, #0]
   1919a:	4653      	mov	r3, sl
   1919c:	464a      	mov	r2, r9
   1919e:	4641      	mov	r1, r8
   191a0:	47a0      	blx	r4
}
   191a2:	2000      	movs	r0, #0
   191a4:	b005      	add	sp, #20
   191a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   191aa:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
   191ae:	d004      	beq.n	191ba <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   191b0:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   191b4:	b10a      	cbz	r2, 191ba <att_handle_rsp+0xde>
   191b6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
   191ba:	4630      	mov	r0, r6
   191bc:	4616      	mov	r6, r2
   191be:	e7b7      	b.n	19130 <att_handle_rsp+0x54>
   191c0:	00020308 	.word	0x00020308
   191c4:	00020308 	.word	0x00020308
   191c8:	00021ec6 	.word	0x00021ec6
   191cc:	2000259c 	.word	0x2000259c

000191d0 <att_reset>:
{
   191d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   191d2:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   191d4:	9803      	ldr	r0, [sp, #12]
   191d6:	2200      	movs	r2, #0
   191d8:	2300      	movs	r3, #0
   191da:	300c      	adds	r0, #12
   191dc:	f006 f8da 	bl	1f394 <net_buf_get>
   191e0:	b948      	cbnz	r0, 191f6 <att_reset+0x26>
	att->conn = NULL;
   191e2:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   191e4:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
   191e6:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   191e8:	b945      	cbnz	r5, 191fc <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   191ea:	4811      	ldr	r0, [pc, #68]	; (19230 <att_reset+0x60>)
   191ec:	a903      	add	r1, sp, #12
   191ee:	f002 fb83 	bl	1b8f8 <k_mem_slab_free>
}
   191f2:	b004      	add	sp, #16
   191f4:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   191f6:	f000 fec5 	bl	19f84 <net_buf_unref>
   191fa:	e7eb      	b.n	191d4 <att_reset+0x4>
	return node->next;
   191fc:	682c      	ldr	r4, [r5, #0]
   191fe:	2c00      	cmp	r4, #0
   19200:	bf38      	it	cc
   19202:	2400      	movcc	r4, #0
		if (req->func) {
   19204:	686e      	ldr	r6, [r5, #4]
   19206:	b136      	cbz	r6, 19216 <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   19208:	696b      	ldr	r3, [r5, #20]
   1920a:	9300      	str	r3, [sp, #0]
   1920c:	2300      	movs	r3, #0
   1920e:	461a      	mov	r2, r3
   19210:	210e      	movs	r1, #14
   19212:	4618      	mov	r0, r3
   19214:	47b0      	blx	r6
		att_req_destroy(req);
   19216:	4628      	mov	r0, r5
   19218:	f005 fd5a 	bl	1ecd0 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1921c:	2c00      	cmp	r4, #0
   1921e:	d0e4      	beq.n	191ea <att_reset+0x1a>
   19220:	6823      	ldr	r3, [r4, #0]
   19222:	2b00      	cmp	r3, #0
   19224:	bf38      	it	cc
   19226:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19228:	4625      	mov	r5, r4
   1922a:	461c      	mov	r4, r3
   1922c:	e7ea      	b.n	19204 <att_reset+0x34>
   1922e:	bf00      	nop
   19230:	20000700 	.word	0x20000700

00019234 <att_timeout>:
   19234:	4b0e      	ldr	r3, [pc, #56]	; (19270 <att_timeout+0x3c>)
   19236:	490f      	ldr	r1, [pc, #60]	; (19274 <att_timeout+0x40>)
{
   19238:	b570      	push	{r4, r5, r6, lr}
   1923a:	1ac9      	subs	r1, r1, r3
	struct bt_att *att = chan->att;
   1923c:	4605      	mov	r5, r0
   1923e:	08c9      	lsrs	r1, r1, #3
   19240:	f855 6de0 	ldr.w	r6, [r5, #-224]!
	BT_ERR("ATT Timeout");
   19244:	0189      	lsls	r1, r1, #6
   19246:	f041 0101 	orr.w	r1, r1, #1
{
   1924a:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1924c:	480a      	ldr	r0, [pc, #40]	; (19278 <att_timeout+0x44>)
   1924e:	f004 f8d4 	bl	1d3fa <log_0>
	att_chan_detach(chan);
   19252:	4628      	mov	r0, r5
   19254:	f005 fd50 	bl	1ecf8 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   19258:	6a75      	ldr	r5, [r6, #36]	; 0x24
   1925a:	b945      	cbnz	r5, 1926e <att_timeout+0x3a>
	att_reset(att);
   1925c:	4630      	mov	r0, r6
   1925e:	f7ff ffb7 	bl	191d0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   19262:	f854 0cd8 	ldr.w	r0, [r4, #-216]
   19266:	f000 fd7f 	bl	19d68 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1926a:	f844 5cd8 	str.w	r5, [r4, #-216]
}
   1926e:	bd70      	pop	{r4, r5, r6, pc}
   19270:	00020308 	.word	0x00020308
   19274:	00020308 	.word	0x00020308
   19278:	00021edd 	.word	0x00021edd

0001927c <gatt_send.constprop.0>:
	if (params->destroy && (params->_ref == 0)) {
		params->destroy(params);
	}
}

static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   1927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19280:	4606      	mov	r6, r0
   19282:	4688      	mov	r8, r1
   19284:	4617      	mov	r7, r2
		     bt_att_func_t func, void *params,
		     bt_att_destroy_t destroy)
{
	int err;

	if (params) {
   19286:	461c      	mov	r4, r3
   19288:	b34b      	cbz	r3, 192de <gatt_send.constprop.0+0x62>
		struct bt_att_req *req;

		/* Allocate new request */
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1928a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1928e:	2100      	movs	r1, #0
   19290:	f7ff ff02 	bl	19098 <bt_att_req_alloc>
		if (!req) {
   19294:	4605      	mov	r5, r0
   19296:	b920      	cbnz	r0, 192a2 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   19298:	f06f 040b 	mvn.w	r4, #11
	if (err) {
		BT_ERR("Error sending ATT PDU: %d", err);
	}

	return err;
}
   1929c:	4620      	mov	r0, r4
   1929e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   192a2:	2300      	movs	r3, #0
		req->user_data = params;
   192a4:	6144      	str	r4, [r0, #20]
		req->buf = buf;
   192a6:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   192aa:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   192ac:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   192ae:	4601      	mov	r1, r0
   192b0:	4630      	mov	r0, r6
   192b2:	f005 fdb0 	bl	1ee16 <bt_att_req_send>
		if (err) {
   192b6:	4604      	mov	r4, r0
   192b8:	2800      	cmp	r0, #0
   192ba:	d0ef      	beq.n	1929c <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   192bc:	4628      	mov	r0, r5
   192be:	f7ff ff01 	bl	190c4 <bt_att_req_free>
	if (err) {
   192c2:	2c00      	cmp	r4, #0
   192c4:	d0ea      	beq.n	1929c <gatt_send.constprop.0+0x20>
   192c6:	4b08      	ldr	r3, [pc, #32]	; (192e8 <gatt_send.constprop.0+0x6c>)
   192c8:	4a08      	ldr	r2, [pc, #32]	; (192ec <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
   192ca:	4809      	ldr	r0, [pc, #36]	; (192f0 <gatt_send.constprop.0+0x74>)
   192cc:	1ad2      	subs	r2, r2, r3
   192ce:	08d2      	lsrs	r2, r2, #3
   192d0:	0192      	lsls	r2, r2, #6
   192d2:	f042 0201 	orr.w	r2, r2, #1
   192d6:	4621      	mov	r1, r4
   192d8:	f004 f89c 	bl	1d414 <log_1>
   192dc:	e7de      	b.n	1929c <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   192de:	461a      	mov	r2, r3
   192e0:	f005 fd45 	bl	1ed6e <bt_att_send>
   192e4:	4604      	mov	r4, r0
   192e6:	e7ec      	b.n	192c2 <gatt_send.constprop.0+0x46>
   192e8:	00020308 	.word	0x00020308
   192ec:	00020320 	.word	0x00020320
   192f0:	00021ef0 	.word	0x00021ef0

000192f4 <gatt_indicate>:

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
   192f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   192f8:	4614      	mov	r4, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
   192fa:	8a92      	ldrh	r2, [r2, #20]
{
   192fc:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   192fe:	3202      	adds	r2, #2
   19300:	211d      	movs	r1, #29
{
   19302:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   19304:	f7ff fc82 	bl	18c0c <bt_att_create_pdu>
	if (!buf) {
   19308:	4605      	mov	r5, r0
   1930a:	b1e8      	cbz	r0, 19348 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   1930c:	f100 0808 	add.w	r8, r0, #8
   19310:	2102      	movs	r1, #2
   19312:	4640      	mov	r0, r8
   19314:	f006 f88f 	bl	1f436 <net_buf_simple_add>
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
	ind->handle = sys_cpu_to_le16(handle);
   19318:	4606      	mov	r6, r0
   1931a:	8aa1      	ldrh	r1, [r4, #20]
   1931c:	f826 9b02 	strh.w	r9, [r6], #2
   19320:	4640      	mov	r0, r8
   19322:	f006 f888 	bl	1f436 <net_buf_simple_add>

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);
   19326:	8aa2      	ldrh	r2, [r4, #20]
   19328:	6921      	ldr	r1, [r4, #16]
   1932a:	4630      	mov	r0, r6
   1932c:	f004 fe74 	bl	1e018 <memcpy>

	if (!params->func) {
   19330:	68a3      	ldr	r3, [r4, #8]
   19332:	b933      	cbnz	r3, 19342 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   19334:	461a      	mov	r2, r3
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   19336:	4629      	mov	r1, r5
   19338:	4638      	mov	r0, r7
}
   1933a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   1933e:	f7ff bf9d 	b.w	1927c <gatt_send.constprop.0>
   19342:	4a08      	ldr	r2, [pc, #32]	; (19364 <gatt_indicate+0x70>)
   19344:	4623      	mov	r3, r4
   19346:	e7f6      	b.n	19336 <gatt_indicate+0x42>
   19348:	4b07      	ldr	r3, [pc, #28]	; (19368 <gatt_indicate+0x74>)
   1934a:	4908      	ldr	r1, [pc, #32]	; (1936c <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
   1934c:	4808      	ldr	r0, [pc, #32]	; (19370 <gatt_indicate+0x7c>)
   1934e:	1ac9      	subs	r1, r1, r3
   19350:	08c9      	lsrs	r1, r1, #3
   19352:	0189      	lsls	r1, r1, #6
   19354:	f041 0102 	orr.w	r1, r1, #2
   19358:	f004 f84f 	bl	1d3fa <log_0>
}
   1935c:	f06f 000b 	mvn.w	r0, #11
   19360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19364:	0001ee97 	.word	0x0001ee97
   19368:	00020308 	.word	0x00020308
   1936c:	00020320 	.word	0x00020320
   19370:	00021f0a 	.word	0x00021f0a

00019374 <find_sc_cfg>:
{
   19374:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   19376:	4c06      	ldr	r4, [pc, #24]	; (19390 <find_sc_cfg+0x1c>)
   19378:	7823      	ldrb	r3, [r4, #0]
   1937a:	4283      	cmp	r3, r0
   1937c:	d104      	bne.n	19388 <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
   1937e:	2207      	movs	r2, #7
   19380:	1c60      	adds	r0, r4, #1
   19382:	f004 fe39 	bl	1dff8 <memcmp>
   19386:	b108      	cbz	r0, 1938c <find_sc_cfg+0x18>
	return NULL;
   19388:	2000      	movs	r0, #0
}
   1938a:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1938c:	4620      	mov	r0, r4
   1938e:	e7fc      	b.n	1938a <find_sc_cfg+0x16>
   19390:	200026ba 	.word	0x200026ba

00019394 <find_cf_cfg>:
{
   19394:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19396:	4d0d      	ldr	r5, [pc, #52]	; (193cc <find_cf_cfg+0x38>)
		if (!conn) {
   19398:	4604      	mov	r4, r0
   1939a:	b968      	cbnz	r0, 193b8 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1939c:	9000      	str	r0, [sp, #0]
   1939e:	2207      	movs	r2, #7
   193a0:	f8cd 0003 	str.w	r0, [sp, #3]
   193a4:	4669      	mov	r1, sp
   193a6:	1c68      	adds	r0, r5, #1
   193a8:	f004 fe26 	bl	1dff8 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   193ac:	2800      	cmp	r0, #0
   193ae:	bf08      	it	eq
   193b0:	462c      	moveq	r4, r5
}
   193b2:	4620      	mov	r0, r4
   193b4:	b003      	add	sp, #12
   193b6:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   193b8:	462a      	mov	r2, r5
   193ba:	f812 1b01 	ldrb.w	r1, [r2], #1
   193be:	f005 f85f 	bl	1e480 <bt_conn_is_peer_addr_le>
   193c2:	2800      	cmp	r0, #0
	return NULL;
   193c4:	bf14      	ite	ne
   193c6:	462c      	movne	r4, r5
   193c8:	2400      	moveq	r4, #0
   193ca:	e7f2      	b.n	193b2 <find_cf_cfg+0x1e>
   193cc:	200025b4 	.word	0x200025b4

000193d0 <bt_gatt_attr_write_ccc>:
{
   193d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   193d4:	461f      	mov	r7, r3
   193d6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   193da:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   193de:	4606      	mov	r6, r0
   193e0:	4688      	mov	r8, r1
	if (offset) {
   193e2:	2b00      	cmp	r3, #0
   193e4:	d153      	bne.n	1948e <bt_gatt_attr_write_ccc+0xbe>
	if (!len || len > sizeof(uint16_t)) {
   193e6:	1e7b      	subs	r3, r7, #1
   193e8:	2b01      	cmp	r3, #1
   193ea:	d853      	bhi.n	19494 <bt_gatt_attr_write_ccc+0xc4>
	if (len < sizeof(uint16_t)) {
   193ec:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   193ee:	7815      	ldrb	r5, [r2, #0]
   193f0:	bf18      	it	ne
   193f2:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   193f4:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   193f6:	bf0c      	ite	eq
   193f8:	b2ad      	uxtheq	r5, r5
   193fa:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   193fe:	f005 fdd2 	bl	1efa6 <find_ccc_cfg>
	if (!cfg) {
   19402:	4604      	mov	r4, r0
   19404:	b9f0      	cbnz	r0, 19444 <bt_gatt_attr_write_ccc+0x74>
		if (!value) {
   19406:	b91d      	cbnz	r5, 19410 <bt_gatt_attr_write_ccc+0x40>
			return len;
   19408:	4638      	mov	r0, r7
}
   1940a:	b003      	add	sp, #12
   1940c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   19410:	4649      	mov	r1, r9
   19412:	f005 fdc8 	bl	1efa6 <find_ccc_cfg>
		if (!cfg) {
   19416:	4604      	mov	r4, r0
   19418:	b960      	cbnz	r0, 19434 <bt_gatt_attr_write_ccc+0x64>
   1941a:	4b20      	ldr	r3, [pc, #128]	; (1949c <bt_gatt_attr_write_ccc+0xcc>)
   1941c:	4920      	ldr	r1, [pc, #128]	; (194a0 <bt_gatt_attr_write_ccc+0xd0>)
			BT_WARN("No space to store CCC cfg");
   1941e:	4821      	ldr	r0, [pc, #132]	; (194a4 <bt_gatt_attr_write_ccc+0xd4>)
   19420:	1ac9      	subs	r1, r1, r3
   19422:	08c9      	lsrs	r1, r1, #3
   19424:	0189      	lsls	r1, r1, #6
   19426:	f041 0102 	orr.w	r1, r1, #2
   1942a:	f003 ffe6 	bl	1d3fa <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1942e:	f06f 0010 	mvn.w	r0, #16
   19432:	e7ea      	b.n	1940a <bt_gatt_attr_write_ccc+0x3a>
	memcpy(dst, src, sizeof(*dst));
   19434:	2207      	movs	r2, #7
   19436:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1943a:	3001      	adds	r0, #1
   1943c:	f004 fdec 	bl	1e018 <memcpy>
		cfg->id = conn->id;
   19440:	7a33      	ldrb	r3, [r6, #8]
   19442:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   19444:	f8d9 3010 	ldr.w	r3, [r9, #16]
   19448:	b9ab      	cbnz	r3, 19476 <bt_gatt_attr_write_ccc+0xa6>
	if (cfg->value != ccc->value) {
   1944a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1944e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   19450:	42ab      	cmp	r3, r5
   19452:	d003      	beq.n	1945c <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   19454:	4649      	mov	r1, r9
   19456:	4640      	mov	r0, r8
   19458:	f005 fd13 	bl	1ee82 <gatt_ccc_changed>
	if (!value) {
   1945c:	2d00      	cmp	r5, #0
   1945e:	d1d3      	bne.n	19408 <bt_gatt_attr_write_ccc+0x38>
   19460:	2207      	movs	r2, #7
   19462:	4669      	mov	r1, sp
   19464:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19466:	9500      	str	r5, [sp, #0]
   19468:	f8cd 5003 	str.w	r5, [sp, #3]
   1946c:	f004 fdd4 	bl	1e018 <memcpy>
	cfg->id = 0U;
   19470:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   19472:	8125      	strh	r5, [r4, #8]
}
   19474:	e7c8      	b.n	19408 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   19476:	462a      	mov	r2, r5
   19478:	4641      	mov	r1, r8
   1947a:	4630      	mov	r0, r6
   1947c:	4798      	blx	r3
		if (write < 0) {
   1947e:	2800      	cmp	r0, #0
   19480:	dbc3      	blt.n	1940a <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   19482:	3801      	subs	r0, #1
   19484:	2801      	cmp	r0, #1
   19486:	d9e0      	bls.n	1944a <bt_gatt_attr_write_ccc+0x7a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19488:	f06f 000d 	mvn.w	r0, #13
   1948c:	e7bd      	b.n	1940a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1948e:	f06f 0006 	mvn.w	r0, #6
   19492:	e7ba      	b.n	1940a <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19494:	f06f 000c 	mvn.w	r0, #12
   19498:	e7b7      	b.n	1940a <bt_gatt_attr_write_ccc+0x3a>
   1949a:	bf00      	nop
   1949c:	00020308 	.word	0x00020308
   194a0:	00020320 	.word	0x00020320
   194a4:	00021f31 	.word	0x00021f31

000194a8 <sc_indicate_rsp>:
{
   194a8:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   194aa:	4915      	ldr	r1, [pc, #84]	; (19500 <sc_indicate_rsp+0x58>)
   194ac:	f3bf 8f5b 	dmb	ish
   194b0:	4604      	mov	r4, r0
   194b2:	f101 0350 	add.w	r3, r1, #80	; 0x50
   194b6:	e853 2f00 	ldrex	r2, [r3]
   194ba:	f022 0202 	bic.w	r2, r2, #2
   194be:	e843 2000 	strex	r0, r2, [r3]
   194c2:	2800      	cmp	r0, #0
   194c4:	d1f7      	bne.n	194b6 <sc_indicate_rsp+0xe>
   194c6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   194ca:	f3bf 8f5b 	dmb	ish
   194ce:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   194d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   194d4:	07da      	lsls	r2, r3, #31
   194d6:	d505      	bpl.n	194e4 <sc_indicate_rsp+0x3c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   194d8:	480a      	ldr	r0, [pc, #40]	; (19504 <sc_indicate_rsp+0x5c>)
   194da:	2200      	movs	r2, #0
   194dc:	2300      	movs	r3, #0
   194de:	3120      	adds	r1, #32
   194e0:	f003 f826 	bl	1c530 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   194e4:	4620      	mov	r0, r4
   194e6:	f7ff ff55 	bl	19394 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   194ea:	b140      	cbz	r0, 194fe <sc_indicate_rsp+0x56>
   194ec:	7a03      	ldrb	r3, [r0, #8]
   194ee:	07db      	lsls	r3, r3, #31
   194f0:	d505      	bpl.n	194fe <sc_indicate_rsp+0x56>
}
   194f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   194f6:	2100      	movs	r1, #0
   194f8:	300c      	adds	r0, #12
   194fa:	f005 bd38 	b.w	1ef6e <atomic_set_bit>
}
   194fe:	bd10      	pop	{r4, pc}
   19500:	20001fc0 	.word	0x20001fc0
   19504:	200022f0 	.word	0x200022f0

00019508 <gatt_notify>:
{
   19508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1950c:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1950e:	8992      	ldrh	r2, [r2, #12]
{
   19510:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   19512:	3202      	adds	r2, #2
   19514:	211b      	movs	r1, #27
{
   19516:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   19518:	f7ff fb78 	bl	18c0c <bt_att_create_pdu>
	if (!buf) {
   1951c:	4605      	mov	r5, r0
   1951e:	b1c8      	cbz	r0, 19554 <gatt_notify+0x4c>
   19520:	f100 0908 	add.w	r9, r0, #8
   19524:	2102      	movs	r1, #2
   19526:	4648      	mov	r0, r9
   19528:	f005 ff85 	bl	1f436 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1952c:	4606      	mov	r6, r0
   1952e:	89a1      	ldrh	r1, [r4, #12]
   19530:	f826 8b02 	strh.w	r8, [r6], #2
   19534:	4648      	mov	r0, r9
   19536:	f005 ff7e 	bl	1f436 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1953a:	89a2      	ldrh	r2, [r4, #12]
   1953c:	68a1      	ldr	r1, [r4, #8]
   1953e:	4630      	mov	r0, r6
   19540:	f004 fd6a 	bl	1e018 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   19544:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   19548:	4629      	mov	r1, r5
   1954a:	4638      	mov	r0, r7
}
   1954c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   19550:	f005 bc0d 	b.w	1ed6e <bt_att_send>
   19554:	4b06      	ldr	r3, [pc, #24]	; (19570 <gatt_notify+0x68>)
   19556:	4907      	ldr	r1, [pc, #28]	; (19574 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
   19558:	4807      	ldr	r0, [pc, #28]	; (19578 <gatt_notify+0x70>)
   1955a:	1ac9      	subs	r1, r1, r3
   1955c:	08c9      	lsrs	r1, r1, #3
   1955e:	0189      	lsls	r1, r1, #6
   19560:	f041 0102 	orr.w	r1, r1, #2
   19564:	f003 ff49 	bl	1d3fa <log_0>
}
   19568:	f06f 000b 	mvn.w	r0, #11
   1956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19570:	00020308 	.word	0x00020308
   19574:	00020320 	.word	0x00020320
   19578:	00021f4b 	.word	0x00021f4b

0001957c <cf_write>:
{
   1957c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19580:	461f      	mov	r7, r3
   19582:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   19586:	2b01      	cmp	r3, #1
{
   19588:	4680      	mov	r8, r0
   1958a:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   1958c:	d848      	bhi.n	19620 <cf_write+0xa4>
	if (offset + len > sizeof(cfg->data)) {
   1958e:	443b      	add	r3, r7
   19590:	2b01      	cmp	r3, #1
   19592:	463d      	mov	r5, r7
   19594:	dc47      	bgt.n	19626 <cf_write+0xaa>
	cfg = find_cf_cfg(conn);
   19596:	f7ff fefd 	bl	19394 <find_cf_cfg>
	if (!cfg) {
   1959a:	4604      	mov	r4, r0
   1959c:	b990      	cbnz	r0, 195c4 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1959e:	f7ff fef9 	bl	19394 <find_cf_cfg>
	if (!cfg) {
   195a2:	4604      	mov	r4, r0
   195a4:	b970      	cbnz	r0, 195c4 <cf_write+0x48>
   195a6:	4b23      	ldr	r3, [pc, #140]	; (19634 <cf_write+0xb8>)
   195a8:	4923      	ldr	r1, [pc, #140]	; (19638 <cf_write+0xbc>)
		BT_WARN("No space to store Client Supported Features");
   195aa:	4824      	ldr	r0, [pc, #144]	; (1963c <cf_write+0xc0>)
   195ac:	1ac9      	subs	r1, r1, r3
   195ae:	08c9      	lsrs	r1, r1, #3
   195b0:	0189      	lsls	r1, r1, #6
   195b2:	f041 0102 	orr.w	r1, r1, #2
   195b6:	f003 ff20 	bl	1d3fa <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   195ba:	f06f 0510 	mvn.w	r5, #16
}
   195be:	4628      	mov	r0, r5
   195c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
   195c4:	4632      	mov	r2, r6
   195c6:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   195ca:	4562      	cmp	r2, ip
   195cc:	d115      	bne.n	195fa <cf_write+0x7e>
	for (i = 0U; i < len && i < last_byte; i++) {
   195ce:	b12f      	cbz	r7, 195dc <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   195d0:	7833      	ldrb	r3, [r6, #0]
   195d2:	7a22      	ldrb	r2, [r4, #8]
   195d4:	f003 0307 	and.w	r3, r3, #7
   195d8:	4313      	orrs	r3, r2
   195da:	7223      	strb	r3, [r4, #8]
   195dc:	f108 0188 	add.w	r1, r8, #136	; 0x88
   195e0:	2207      	movs	r2, #7
   195e2:	1c60      	adds	r0, r4, #1
   195e4:	f004 fd18 	bl	1e018 <memcpy>
	cfg->id = conn->id;
   195e8:	4620      	mov	r0, r4
   195ea:	f898 3008 	ldrb.w	r3, [r8, #8]
   195ee:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   195f2:	2100      	movs	r1, #0
   195f4:	f005 fcbb 	bl	1ef6e <atomic_set_bit>
	return len;
   195f8:	e7e1      	b.n	195be <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   195fa:	f812 1b01 	ldrb.w	r1, [r2], #1
   195fe:	7a20      	ldrb	r0, [r4, #8]
   19600:	2300      	movs	r3, #0
   19602:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
   19604:	fa21 fe03 	lsr.w	lr, r1, r3
   19608:	f01e 0f01 	tst.w	lr, #1
   1960c:	d004      	beq.n	19618 <cf_write+0x9c>
   1960e:	fa20 fe03 	lsr.w	lr, r0, r3
   19612:	f01e 0f01 	tst.w	lr, #1
   19616:	d109      	bne.n	1962c <cf_write+0xb0>
		for (bit = 0U; bit <= last_bit; bit++) {
   19618:	3301      	adds	r3, #1
   1961a:	2b03      	cmp	r3, #3
   1961c:	d1f2      	bne.n	19604 <cf_write+0x88>
   1961e:	e7d4      	b.n	195ca <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19620:	f06f 0506 	mvn.w	r5, #6
   19624:	e7cb      	b.n	195be <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19626:	f06f 050c 	mvn.w	r5, #12
   1962a:	e7c8      	b.n	195be <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1962c:	f06f 0512 	mvn.w	r5, #18
   19630:	e7c5      	b.n	195be <cf_write+0x42>
   19632:	bf00      	nop
   19634:	00020308 	.word	0x00020308
   19638:	00020320 	.word	0x00020320
   1963c:	00021f74 	.word	0x00021f74

00019640 <read_ppcp>:
{
   19640:	b513      	push	{r0, r1, r4, lr}
   19642:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   19646:	4c0b      	ldr	r4, [pc, #44]	; (19674 <read_ppcp+0x34>)
{
   19648:	4610      	mov	r0, r2
	if (offset > value_len) {
   1964a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1964c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   19650:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   19654:	d80b      	bhi.n	1966e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   19656:	f1c1 0408 	rsb	r4, r1, #8
   1965a:	429c      	cmp	r4, r3
   1965c:	bfa8      	it	ge
   1965e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   19660:	4622      	mov	r2, r4
   19662:	4469      	add	r1, sp
   19664:	f004 fcd8 	bl	1e018 <memcpy>
}
   19668:	4620      	mov	r0, r4
   1966a:	b002      	add	sp, #8
   1966c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1966e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   19672:	e7f9      	b.n	19668 <read_ppcp+0x28>
   19674:	00280018 	.word	0x00280018

00019678 <sc_save>:
{
   19678:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1967c:	4680      	mov	r8, r0
   1967e:	460f      	mov	r7, r1
   19680:	4616      	mov	r6, r2
   19682:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19684:	f7ff fe76 	bl	19374 <find_sc_cfg>
	if (!cfg) {
   19688:	4604      	mov	r4, r0
   1968a:	b9d0      	cbnz	r0, 196c2 <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1968c:	4669      	mov	r1, sp
   1968e:	9000      	str	r0, [sp, #0]
   19690:	f8cd 0003 	str.w	r0, [sp, #3]
   19694:	f7ff fe6e 	bl	19374 <find_sc_cfg>
		if (!cfg) {
   19698:	4604      	mov	r4, r0
   1969a:	b960      	cbnz	r0, 196b6 <sc_save+0x3e>
   1969c:	4910      	ldr	r1, [pc, #64]	; (196e0 <sc_save+0x68>)
   1969e:	4b11      	ldr	r3, [pc, #68]	; (196e4 <sc_save+0x6c>)
			BT_ERR("unable to save SC: no cfg left");
   196a0:	4811      	ldr	r0, [pc, #68]	; (196e8 <sc_save+0x70>)
   196a2:	1ac9      	subs	r1, r1, r3
   196a4:	08c9      	lsrs	r1, r1, #3
   196a6:	0189      	lsls	r1, r1, #6
   196a8:	f041 0101 	orr.w	r1, r1, #1
   196ac:	f003 fea5 	bl	1d3fa <log_0>
}
   196b0:	b002      	add	sp, #8
   196b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   196b6:	f800 8b01 	strb.w	r8, [r0], #1
   196ba:	2207      	movs	r2, #7
   196bc:	4639      	mov	r1, r7
   196be:	f004 fcab 	bl	1e018 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   196c2:	8922      	ldrh	r2, [r4, #8]
   196c4:	8963      	ldrh	r3, [r4, #10]
   196c6:	b91a      	cbnz	r2, 196d0 <sc_save+0x58>
   196c8:	b923      	cbnz	r3, 196d4 <sc_save+0x5c>
		cfg->data.start = start;
   196ca:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   196cc:	8165      	strh	r5, [r4, #10]
   196ce:	e7ef      	b.n	196b0 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   196d0:	4296      	cmp	r6, r2
   196d2:	d302      	bcc.n	196da <sc_save+0x62>
   196d4:	429d      	cmp	r5, r3
   196d6:	d9eb      	bls.n	196b0 <sc_save+0x38>
   196d8:	e7f8      	b.n	196cc <sc_save+0x54>
		*start = new_start;
   196da:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   196dc:	e7fa      	b.n	196d4 <sc_save+0x5c>
   196de:	bf00      	nop
   196e0:	00020320 	.word	0x00020320
   196e4:	00020308 	.word	0x00020308
   196e8:	00021fa0 	.word	0x00021fa0

000196ec <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
   196ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   196ee:	4b2e      	ldr	r3, [pc, #184]	; (197a8 <notify_cb+0xbc>)
{
   196f0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   196f2:	6882      	ldr	r2, [r0, #8]
   196f4:	429a      	cmp	r2, r3
{
   196f6:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   196f8:	d12e      	bne.n	19758 <notify_cb+0x6c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   196fa:	68c7      	ldr	r7, [r0, #12]

	/* Save Service Changed data if peer is not connected */
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   196fc:	4b2b      	ldr	r3, [pc, #172]	; (197ac <notify_cb+0xc0>)
   196fe:	429f      	cmp	r7, r3
   19700:	d11a      	bne.n	19738 <notify_cb+0x4c>
	return memcmp(a, b, sizeof(*a));
   19702:	4d2b      	ldr	r5, [pc, #172]	; (197b0 <notify_cb+0xc4>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
			struct gatt_sc_cfg *cfg = &sc_cfg[i];
			struct bt_conn *conn;

			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   19704:	2300      	movs	r3, #0
   19706:	2207      	movs	r2, #7
   19708:	4669      	mov	r1, sp
   1970a:	1c68      	adds	r0, r5, #1
   1970c:	9300      	str	r3, [sp, #0]
   1970e:	f8cd 3003 	str.w	r3, [sp, #3]
   19712:	f004 fc71 	bl	1dff8 <memcmp>
   19716:	b178      	cbz	r0, 19738 <notify_cb+0x4c>
				continue;
			}

			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   19718:	4629      	mov	r1, r5
   1971a:	2207      	movs	r2, #7
   1971c:	f811 0b01 	ldrb.w	r0, [r1], #1
   19720:	f7fe fac4 	bl	17cac <bt_conn_lookup_state_le>
						       BT_CONN_CONNECTED);
			if (!conn) {
   19724:	b9d8      	cbnz	r0, 1975e <notify_cb+0x72>
				struct sc_data *sc;

				sc = (struct sc_data *)data->ind_params->data;
   19726:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   19728:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   1972a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1972c:	f811 0b01 	ldrb.w	r0, [r1], #1
   19730:	8853      	ldrh	r3, [r2, #2]
   19732:	8812      	ldrh	r2, [r2, #0]
   19734:	f7ff ffa0 	bl	19678 <sc_save>
		int err;

		/* Check if config value matches data type since consolidated
		 * value may be for a different peer.
		 */
		if (cfg->value != data->type) {
   19738:	893a      	ldrh	r2, [r7, #8]
   1973a:	89a3      	ldrh	r3, [r4, #12]
   1973c:	429a      	cmp	r2, r3
   1973e:	d10b      	bne.n	19758 <notify_cb+0x6c>
			continue;
		}

		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19740:	4639      	mov	r1, r7
   19742:	f811 0b01 	ldrb.w	r0, [r1], #1
   19746:	f7fe fa6d 	bl	17c24 <bt_conn_lookup_addr_le>
		if (!conn) {
   1974a:	4605      	mov	r5, r0
   1974c:	b120      	cbz	r0, 19758 <notify_cb+0x6c>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
   1974e:	7a83      	ldrb	r3, [r0, #10]
   19750:	2b07      	cmp	r3, #7
   19752:	d007      	beq.n	19764 <notify_cb+0x78>
			continue;
		}

		/* Confirm match if cfg is managed by application */
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
			bt_conn_unref(conn);
   19754:	f004 fecf 	bl	1e4f6 <bt_conn_unref>
		}

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
   19758:	2001      	movs	r0, #1
}
   1975a:	b003      	add	sp, #12
   1975c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1975e:	f004 feca 	bl	1e4f6 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19762:	e7e9      	b.n	19738 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   19764:	697b      	ldr	r3, [r7, #20]
   19766:	b123      	cbz	r3, 19772 <notify_cb+0x86>
   19768:	4631      	mov	r1, r6
   1976a:	4798      	blx	r3
   1976c:	b908      	cbnz	r0, 19772 <notify_cb+0x86>
			bt_conn_unref(conn);
   1976e:	4628      	mov	r0, r5
   19770:	e7f0      	b.n	19754 <notify_cb+0x68>
		if (data->type == BT_GATT_CCC_INDICATE) {
   19772:	89a3      	ldrh	r3, [r4, #12]
   19774:	88a1      	ldrh	r1, [r4, #4]
   19776:	6922      	ldr	r2, [r4, #16]
   19778:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1977a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1977c:	d110      	bne.n	197a0 <notify_cb+0xb4>
			err = gatt_indicate(conn, data->handle,
   1977e:	f7ff fdb9 	bl	192f4 <gatt_indicate>
			if (err == 0) {
   19782:	4606      	mov	r6, r0
   19784:	b918      	cbnz	r0, 1978e <notify_cb+0xa2>
				data->ind_params->_ref++;
   19786:	6922      	ldr	r2, [r4, #16]
   19788:	7d93      	ldrb	r3, [r2, #22]
   1978a:	3301      	adds	r3, #1
   1978c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1978e:	4628      	mov	r0, r5
   19790:	f004 feb1 	bl	1e4f6 <bt_conn_unref>
		if (err < 0) {
   19794:	2e00      	cmp	r6, #0
   19796:	f04f 0000 	mov.w	r0, #0
   1979a:	dbde      	blt.n	1975a <notify_cb+0x6e>
		data->err = 0;
   1979c:	60a0      	str	r0, [r4, #8]
   1979e:	e7db      	b.n	19758 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   197a0:	f7ff feb2 	bl	19508 <gatt_notify>
   197a4:	4606      	mov	r6, r0
   197a6:	e7f2      	b.n	1978e <notify_cb+0xa2>
   197a8:	000193d1 	.word	0x000193d1
   197ac:	200005d0 	.word	0x200005d0
   197b0:	200026ba 	.word	0x200026ba

000197b4 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   197b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   197b8:	4b24      	ldr	r3, [pc, #144]	; (1984c <disconnected_cb+0x98>)
{
   197ba:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   197bc:	6882      	ldr	r2, [r0, #8]
   197be:	429a      	cmp	r2, r3
{
   197c0:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   197c2:	d102      	bne.n	197ca <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   197c4:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   197c6:	8963      	ldrh	r3, [r4, #10]
   197c8:	bb13      	cbnz	r3, 19810 <disconnected_cb+0x5c>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   197ca:	2001      	movs	r0, #1
   197cc:	b002      	add	sp, #8
   197ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   197d2:	f105 0888 	add.w	r8, r5, #136	; 0x88
   197d6:	7a28      	ldrb	r0, [r5, #8]
   197d8:	4641      	mov	r1, r8
   197da:	f004 fdbd 	bl	1e358 <bt_addr_le_is_bonded>
   197de:	b988      	cbnz	r0, 19804 <disconnected_cb+0x50>
				if (ccc == &sc_ccc) {
   197e0:	4b1b      	ldr	r3, [pc, #108]	; (19850 <disconnected_cb+0x9c>)
   197e2:	429c      	cmp	r4, r3
   197e4:	d102      	bne.n	197ec <disconnected_cb+0x38>
					sc_clear(conn);
   197e6:	4628      	mov	r0, r5
   197e8:	f005 fcbc 	bl	1f164 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   197ec:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   197ee:	2207      	movs	r2, #7
   197f0:	4669      	mov	r1, sp
   197f2:	4630      	mov	r0, r6
   197f4:	9500      	str	r5, [sp, #0]
   197f6:	f8cd 5003 	str.w	r5, [sp, #3]
   197fa:	f004 fc0d 	bl	1e018 <memcpy>
	cfg->id = 0U;
   197fe:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   19800:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   19802:	e01a      	b.n	1983a <disconnected_cb+0x86>
   19804:	2207      	movs	r2, #7
   19806:	4641      	mov	r1, r8
   19808:	4630      	mov	r0, r6
   1980a:	f004 fc05 	bl	1e018 <memcpy>
   1980e:	e014      	b.n	1983a <disconnected_cb+0x86>
		if (!cfg->value) {
   19810:	8923      	ldrh	r3, [r4, #8]
   19812:	b193      	cbz	r3, 1983a <disconnected_cb+0x86>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19814:	4626      	mov	r6, r4
   19816:	4628      	mov	r0, r5
   19818:	f816 1b01 	ldrb.w	r1, [r6], #1
   1981c:	4632      	mov	r2, r6
   1981e:	f004 fe2f 	bl	1e480 <bt_conn_is_peer_addr_le>
   19822:	2800      	cmp	r0, #0
   19824:	d1d5      	bne.n	197d2 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19826:	7820      	ldrb	r0, [r4, #0]
   19828:	4631      	mov	r1, r6
   1982a:	f7fe f9fb 	bl	17c24 <bt_conn_lookup_addr_le>
			if (tmp) {
   1982e:	b120      	cbz	r0, 1983a <disconnected_cb+0x86>
				if (tmp->state == BT_CONN_CONNECTED) {
   19830:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   19832:	f004 fe60 	bl	1e4f6 <bt_conn_unref>
	if (!value_used) {
   19836:	2d07      	cmp	r5, #7
   19838:	d0c7      	beq.n	197ca <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1983a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1983c:	2100      	movs	r1, #0
   1983e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   19840:	2b00      	cmp	r3, #0
   19842:	d0c2      	beq.n	197ca <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   19844:	4638      	mov	r0, r7
   19846:	4798      	blx	r3
   19848:	e7bf      	b.n	197ca <disconnected_cb+0x16>
   1984a:	bf00      	nop
   1984c:	000193d1 	.word	0x000193d1
   19850:	200005d0 	.word	0x200005d0

00019854 <bt_gatt_init>:
{
   19854:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19856:	4b22      	ldr	r3, [pc, #136]	; (198e0 <bt_gatt_init+0x8c>)
   19858:	f3bf 8f5b 	dmb	ish
   1985c:	2201      	movs	r2, #1
   1985e:	e853 1f00 	ldrex	r1, [r3]
   19862:	2900      	cmp	r1, #0
   19864:	d103      	bne.n	1986e <bt_gatt_init+0x1a>
   19866:	e843 2000 	strex	r0, r2, [r3]
   1986a:	2800      	cmp	r0, #0
   1986c:	d1f7      	bne.n	1985e <bt_gatt_init+0xa>
   1986e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   19872:	d12e      	bne.n	198d2 <bt_gatt_init+0x7e>
   19874:	f3bf 8f5b 	dmb	ish
   19878:	4b1a      	ldr	r3, [pc, #104]	; (198e4 <bt_gatt_init+0x90>)
   1987a:	e853 1f00 	ldrex	r1, [r3]
   1987e:	2900      	cmp	r1, #0
   19880:	d103      	bne.n	1988a <bt_gatt_init+0x36>
   19882:	e843 2000 	strex	r0, r2, [r3]
   19886:	2800      	cmp	r0, #0
   19888:	d1f7      	bne.n	1987a <bt_gatt_init+0x26>
   1988a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1988e:	d108      	bne.n	198a2 <bt_gatt_init+0x4e>
   19890:	4a15      	ldr	r2, [pc, #84]	; (198e8 <bt_gatt_init+0x94>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19892:	4916      	ldr	r1, [pc, #88]	; (198ec <bt_gatt_init+0x98>)
   19894:	8813      	ldrh	r3, [r2, #0]
   19896:	4c16      	ldr	r4, [pc, #88]	; (198f0 <bt_gatt_init+0x9c>)
	if (!atomic_cas(&service_init, 0, 1)) {
   19898:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1989a:	42a1      	cmp	r1, r4
   1989c:	d31a      	bcc.n	198d4 <bt_gatt_init+0x80>
   1989e:	b100      	cbz	r0, 198a2 <bt_gatt_init+0x4e>
   198a0:	8013      	strh	r3, [r2, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   198a2:	4c14      	ldr	r4, [pc, #80]	; (198f4 <bt_gatt_init+0xa0>)
   198a4:	2230      	movs	r2, #48	; 0x30
   198a6:	2100      	movs	r1, #0
   198a8:	4620      	mov	r0, r4
   198aa:	f004 fbe0 	bl	1e06e <memset>
   198ae:	4b12      	ldr	r3, [pc, #72]	; (198f8 <bt_gatt_init+0xa4>)
   198b0:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   198b2:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   198b4:	4c11      	ldr	r4, [pc, #68]	; (198fc <bt_gatt_init+0xa8>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   198b6:	4812      	ldr	r0, [pc, #72]	; (19900 <bt_gatt_init+0xac>)
   198b8:	2300      	movs	r3, #0
   198ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
   198be:	f002 fe37 	bl	1c530 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   198c2:	2230      	movs	r2, #48	; 0x30
   198c4:	2100      	movs	r1, #0
   198c6:	f104 0020 	add.w	r0, r4, #32
   198ca:	f004 fbd0 	bl	1e06e <memset>
   198ce:	4b0d      	ldr	r3, [pc, #52]	; (19904 <bt_gatt_init+0xb0>)
   198d0:	6263      	str	r3, [r4, #36]	; 0x24
}
   198d2:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
   198d4:	6848      	ldr	r0, [r1, #4]
   198d6:	4403      	add	r3, r0
   198d8:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   198da:	3108      	adds	r1, #8
   198dc:	2001      	movs	r0, #1
   198de:	e7dc      	b.n	1989a <bt_gatt_init+0x46>
   198e0:	200025c4 	.word	0x200025c4
   198e4:	200025e0 	.word	0x200025e0
   198e8:	200026b8 	.word	0x200026b8
   198ec:	000202f0 	.word	0x000202f0
   198f0:	00020308 	.word	0x00020308
   198f4:	20001f90 	.word	0x20001f90
   198f8:	0001f28b 	.word	0x0001f28b
   198fc:	20001fc0 	.word	0x20001fc0
   19900:	200022f0 	.word	0x200022f0
   19904:	00019ba1 	.word	0x00019ba1

00019908 <bt_gatt_attr_get_handle>:
{
   19908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1990c:	4603      	mov	r3, r0
   1990e:	b148      	cbz	r0, 19924 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   19910:	8a00      	ldrh	r0, [r0, #16]
   19912:	b938      	cbnz	r0, 19924 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19914:	4912      	ldr	r1, [pc, #72]	; (19960 <bt_gatt_attr_get_handle+0x58>)
   19916:	f8df e04c 	ldr.w	lr, [pc, #76]	; 19964 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1991a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1991c:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19920:	4571      	cmp	r1, lr
   19922:	d301      	bcc.n	19928 <bt_gatt_attr_get_handle+0x20>
}
   19924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   19928:	e9d1 7600 	ldrd	r7, r6, [r1]
   1992c:	42bb      	cmp	r3, r7
   1992e:	d304      	bcc.n	1993a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19930:	fb0c 7206 	mla	r2, ip, r6, r7
   19934:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   19936:	4293      	cmp	r3, r2
   19938:	d90e      	bls.n	19958 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1993a:	19a2      	adds	r2, r4, r6
   1993c:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1993e:	3108      	adds	r1, #8
   19940:	4614      	mov	r4, r2
   19942:	e7ed      	b.n	19920 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   19944:	fb0c 7805 	mla	r8, ip, r5, r7
   19948:	4543      	cmp	r3, r8
   1994a:	d007      	beq.n	1995c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1994c:	3501      	adds	r5, #1
   1994e:	1962      	adds	r2, r4, r5
   19950:	42b5      	cmp	r5, r6
   19952:	b292      	uxth	r2, r2
   19954:	d1f6      	bne.n	19944 <bt_gatt_attr_get_handle+0x3c>
   19956:	e7f2      	b.n	1993e <bt_gatt_attr_get_handle+0x36>
   19958:	2500      	movs	r5, #0
   1995a:	e7f8      	b.n	1994e <bt_gatt_attr_get_handle+0x46>
   1995c:	4610      	mov	r0, r2
   1995e:	e7e1      	b.n	19924 <bt_gatt_attr_get_handle+0x1c>
   19960:	000202f0 	.word	0x000202f0
   19964:	00020308 	.word	0x00020308

00019968 <bt_gatt_foreach_attr_type>:
{
   19968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1996c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   19970:	9100      	str	r1, [sp, #0]
   19972:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   19974:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19978:	2d00      	cmp	r5, #0
   1997a:	bf08      	it	eq
   1997c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1997e:	4b24      	ldr	r3, [pc, #144]	; (19a10 <bt_gatt_foreach_attr_type+0xa8>)
   19980:	881b      	ldrh	r3, [r3, #0]
   19982:	4283      	cmp	r3, r0
{
   19984:	4607      	mov	r7, r0
   19986:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   19988:	d23c      	bcs.n	19a04 <bt_gatt_foreach_attr_type+0x9c>
}
   1998a:	b003      	add	sp, #12
   1998c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   19990:	6873      	ldr	r3, [r6, #4]
   19992:	4423      	add	r3, r4
   19994:	42bb      	cmp	r3, r7
   19996:	d232      	bcs.n	199fe <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   19998:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1999a:	3608      	adds	r6, #8
   1999c:	4b1d      	ldr	r3, [pc, #116]	; (19a14 <bt_gatt_foreach_attr_type+0xac>)
   1999e:	429e      	cmp	r6, r3
   199a0:	d3f6      	bcc.n	19990 <bt_gatt_foreach_attr_type+0x28>
   199a2:	e7f2      	b.n	1998a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   199a4:	5889      	ldr	r1, [r1, r2]
   199a6:	9301      	str	r3, [sp, #4]
   199a8:	4640      	mov	r0, r8
   199aa:	f004 fb9b 	bl	1e0e4 <bt_uuid_cmp>
   199ae:	9b01      	ldr	r3, [sp, #4]
   199b0:	b190      	cbz	r0, 199d8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   199b2:	3401      	adds	r4, #1
   199b4:	f10a 0a01 	add.w	sl, sl, #1
   199b8:	b2a4      	uxth	r4, r4
   199ba:	6873      	ldr	r3, [r6, #4]
   199bc:	4553      	cmp	r3, sl
   199be:	d9ec      	bls.n	1999a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   199c0:	9b00      	ldr	r3, [sp, #0]
   199c2:	429c      	cmp	r4, r3
   199c4:	d8e1      	bhi.n	1998a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   199c6:	42bc      	cmp	r4, r7
   199c8:	d3f3      	bcc.n	199b2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   199ca:	6831      	ldr	r1, [r6, #0]
   199cc:	fb0b f20a 	mul.w	r2, fp, sl
   199d0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   199d2:	f1b8 0f00 	cmp.w	r8, #0
   199d6:	d1e5      	bne.n	199a4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   199d8:	f1b9 0f00 	cmp.w	r9, #0
   199dc:	d10b      	bne.n	199f6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   199de:	3d01      	subs	r5, #1
   199e0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   199e2:	4618      	mov	r0, r3
   199e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   199e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   199e8:	4621      	mov	r1, r4
   199ea:	4798      	blx	r3
	if (!*num_matches) {
   199ec:	2d00      	cmp	r5, #0
   199ee:	d0cc      	beq.n	1998a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   199f0:	2800      	cmp	r0, #0
   199f2:	d1de      	bne.n	199b2 <bt_gatt_foreach_attr_type+0x4a>
   199f4:	e7c9      	b.n	1998a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   199f6:	68da      	ldr	r2, [r3, #12]
   199f8:	4591      	cmp	r9, r2
   199fa:	d1da      	bne.n	199b2 <bt_gatt_foreach_attr_type+0x4a>
   199fc:	e7ef      	b.n	199de <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   199fe:	f04f 0a00 	mov.w	sl, #0
   19a02:	e7da      	b.n	199ba <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19a04:	4e04      	ldr	r6, [pc, #16]	; (19a18 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   19a06:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19a08:	f04f 0b14 	mov.w	fp, #20
   19a0c:	e7c6      	b.n	1999c <bt_gatt_foreach_attr_type+0x34>
   19a0e:	bf00      	nop
   19a10:	200026b8 	.word	0x200026b8
   19a14:	00020308 	.word	0x00020308
   19a18:	000202f0 	.word	0x000202f0

00019a1c <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   19a1c:	b510      	push	{r4, lr}
   19a1e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   19a20:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19a22:	aa1c      	add	r2, sp, #112	; 0x70
   19a24:	4669      	mov	r1, sp
   19a26:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   19a28:	e9cd 3300 	strd	r3, r3, [sp]
   19a2c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19a30:	f004 f9ce 	bl	1ddd0 <tc_cmac_setup>
   19a34:	b958      	cbnz	r0, 19a4e <db_hash_gen.isra.0+0x32>
   19a36:	4917      	ldr	r1, [pc, #92]	; (19a94 <db_hash_gen.isra.0+0x78>)
   19a38:	4b17      	ldr	r3, [pc, #92]	; (19a98 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
   19a3a:	4818      	ldr	r0, [pc, #96]	; (19a9c <db_hash_gen.isra.0+0x80>)
   19a3c:	1ac9      	subs	r1, r1, r3
   19a3e:	08c9      	lsrs	r1, r1, #3
   19a40:	0189      	lsls	r1, r1, #6
   19a42:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   19a46:	f003 fcd8 	bl	1d3fa <log_0>
}
   19a4a:	b048      	add	sp, #288	; 0x120
   19a4c:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   19a4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19a52:	2001      	movs	r0, #1
   19a54:	4a12      	ldr	r2, [pc, #72]	; (19aa0 <db_hash_gen.isra.0+0x84>)
   19a56:	ab04      	add	r3, sp, #16
   19a58:	f005 fc0c 	bl	1f274 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   19a5c:	4811      	ldr	r0, [pc, #68]	; (19aa4 <db_hash_gen.isra.0+0x88>)
   19a5e:	a904      	add	r1, sp, #16
   19a60:	f004 fa4d 	bl	1defe <tc_cmac_final>
   19a64:	b940      	cbnz	r0, 19a78 <db_hash_gen.isra.0+0x5c>
   19a66:	490b      	ldr	r1, [pc, #44]	; (19a94 <db_hash_gen.isra.0+0x78>)
   19a68:	4b0b      	ldr	r3, [pc, #44]	; (19a98 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
   19a6a:	480f      	ldr	r0, [pc, #60]	; (19aa8 <db_hash_gen.isra.0+0x8c>)
   19a6c:	1ac9      	subs	r1, r1, r3
   19a6e:	08c9      	lsrs	r1, r1, #3
   19a70:	0189      	lsls	r1, r1, #6
   19a72:	f041 0101 	orr.w	r1, r1, #1
   19a76:	e7e6      	b.n	19a46 <db_hash_gen.isra.0+0x2a>
   19a78:	4b0a      	ldr	r3, [pc, #40]	; (19aa4 <db_hash_gen.isra.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   19a7a:	2208      	movs	r2, #8
   19a7c:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   19a80:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   19a82:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   19a86:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   19a8a:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19a8c:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   19a8e:	d1f7      	bne.n	19a80 <db_hash_gen.isra.0+0x64>
   19a90:	e7db      	b.n	19a4a <db_hash_gen.isra.0+0x2e>
   19a92:	bf00      	nop
   19a94:	00020320 	.word	0x00020320
   19a98:	00020308 	.word	0x00020308
   19a9c:	00021fbf 	.word	0x00021fbf
   19aa0:	0001eec3 	.word	0x0001eec3
   19aa4:	20002b8d 	.word	0x20002b8d
   19aa8:	00021fd8 	.word	0x00021fd8

00019aac <bt_gatt_indicate>:
{
   19aac:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19aae:	4b39      	ldr	r3, [pc, #228]	; (19b94 <bt_gatt_indicate+0xe8>)
   19ab0:	f3bf 8f5b 	dmb	ish
   19ab4:	681b      	ldr	r3, [r3, #0]
   19ab6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19aba:	079a      	lsls	r2, r3, #30
{
   19abc:	b08b      	sub	sp, #44	; 0x2c
   19abe:	4604      	mov	r4, r0
   19ac0:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19ac2:	d561      	bpl.n	19b88 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   19ac4:	6848      	ldr	r0, [r1, #4]
   19ac6:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19ac8:	b114      	cbz	r4, 19ad0 <bt_gatt_indicate+0x24>
   19aca:	7aa3      	ldrb	r3, [r4, #10]
   19acc:	2b07      	cmp	r3, #7
   19ace:	d15e      	bne.n	19b8e <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19ad0:	f7ff ff1a 	bl	19908 <bt_gatt_attr_get_handle>
   19ad4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   19ad8:	b918      	cbnz	r0, 19ae2 <bt_gatt_indicate+0x36>
		return -ENOENT;
   19ada:	f06f 0001 	mvn.w	r0, #1
}
   19ade:	b00b      	add	sp, #44	; 0x2c
   19ae0:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   19ae2:	682a      	ldr	r2, [r5, #0]
   19ae4:	b9ba      	cbnz	r2, 19b16 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   19ae6:	9b05      	ldr	r3, [sp, #20]
   19ae8:	6818      	ldr	r0, [r3, #0]
   19aea:	2300      	movs	r3, #0
   19aec:	f88d 3010 	strb.w	r3, [sp, #16]
   19af0:	a904      	add	r1, sp, #16
   19af2:	f642 0303 	movw	r3, #10243	; 0x2803
   19af6:	f8ad 3012 	strh.w	r3, [sp, #18]
   19afa:	f004 faf3 	bl	1e0e4 <bt_uuid_cmp>
   19afe:	b1d0      	cbz	r0, 19b36 <bt_gatt_indicate+0x8a>
	if (conn) {
   19b00:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   19b04:	b324      	cbz	r4, 19b50 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   19b06:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   19b08:	4601      	mov	r1, r0
		params->_ref = 1;
   19b0a:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   19b0c:	462a      	mov	r2, r5
   19b0e:	4620      	mov	r0, r4
   19b10:	f7ff fbf0 	bl	192f4 <gatt_indicate>
   19b14:	e7e3      	b.n	19ade <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19b16:	a905      	add	r1, sp, #20
   19b18:	9102      	str	r1, [sp, #8]
   19b1a:	491f      	ldr	r1, [pc, #124]	; (19b98 <bt_gatt_indicate+0xec>)
   19b1c:	9101      	str	r1, [sp, #4]
   19b1e:	2101      	movs	r1, #1
	found->attr = NULL;
   19b20:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19b22:	9100      	str	r1, [sp, #0]
   19b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   19b28:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19b2a:	f7ff ff1d 	bl	19968 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19b2e:	9b05      	ldr	r3, [sp, #20]
   19b30:	2b00      	cmp	r3, #0
   19b32:	d1d8      	bne.n	19ae6 <bt_gatt_indicate+0x3a>
   19b34:	e7d1      	b.n	19ada <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19b36:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   19b38:	68c3      	ldr	r3, [r0, #12]
   19b3a:	799b      	ldrb	r3, [r3, #6]
   19b3c:	069b      	lsls	r3, r3, #26
   19b3e:	d402      	bmi.n	19b46 <bt_gatt_indicate+0x9a>
			return -EINVAL;
   19b40:	f06f 0015 	mvn.w	r0, #21
   19b44:	e7cb      	b.n	19ade <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19b46:	f005 fb47 	bl	1f1d8 <bt_gatt_attr_value_handle>
   19b4a:	f8ad 0018 	strh.w	r0, [sp, #24]
   19b4e:	e7d7      	b.n	19b00 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
   19b50:	f06f 0338 	mvn.w	r3, #56	; 0x38
   19b54:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   19b56:	2302      	movs	r3, #2
   19b58:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19b5c:	f642 1302 	movw	r3, #10498	; 0x2902
   19b60:	f8ad 3012 	strh.w	r3, [sp, #18]
   19b64:	ab05      	add	r3, sp, #20
   19b66:	9302      	str	r3, [sp, #8]
   19b68:	4b0c      	ldr	r3, [pc, #48]	; (19b9c <bt_gatt_indicate+0xf0>)
   19b6a:	9301      	str	r3, [sp, #4]
   19b6c:	2301      	movs	r3, #1
   19b6e:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   19b70:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19b72:	4623      	mov	r3, r4
   19b74:	aa04      	add	r2, sp, #16
   19b76:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   19b7a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19b7c:	f88d 4010 	strb.w	r4, [sp, #16]
   19b80:	f7ff fef2 	bl	19968 <bt_gatt_foreach_attr_type>
	return data.err;
   19b84:	9807      	ldr	r0, [sp, #28]
   19b86:	e7aa      	b.n	19ade <bt_gatt_indicate+0x32>
		return -EAGAIN;
   19b88:	f06f 000a 	mvn.w	r0, #10
   19b8c:	e7a7      	b.n	19ade <bt_gatt_indicate+0x32>
		return -ENOTCONN;
   19b8e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   19b92:	e7a4      	b.n	19ade <bt_gatt_indicate+0x32>
   19b94:	2000045c 	.word	0x2000045c
   19b98:	0001eebb 	.word	0x0001eebb
   19b9c:	000196ed 	.word	0x000196ed

00019ba0 <sc_process>:
{
   19ba0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   19ba2:	f850 2c08 	ldr.w	r2, [r0, #-8]
   19ba6:	9201      	str	r2, [sp, #4]
{
   19ba8:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   19baa:	f1a0 0120 	sub.w	r1, r0, #32
   19bae:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19bb2:	f3bf 8f5b 	dmb	ish
   19bb6:	e854 2f00 	ldrex	r2, [r4]
   19bba:	f022 0201 	bic.w	r2, r2, #1
   19bbe:	e844 2000 	strex	r0, r2, [r4]
   19bc2:	2800      	cmp	r0, #0
   19bc4:	d1f7      	bne.n	19bb6 <sc_process+0x16>
   19bc6:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   19bca:	4a0d      	ldr	r2, [pc, #52]	; (19c00 <sc_process+0x60>)
   19bcc:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   19bd0:	4a0c      	ldr	r2, [pc, #48]	; (19c04 <sc_process+0x64>)
   19bd2:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   19bd6:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   19bd8:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   19bda:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   19bde:	2204      	movs	r2, #4
	sc->start = 0U;
   19be0:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   19be4:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   19be8:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   19bec:	f7ff ff5e 	bl	19aac <bt_gatt_indicate>
   19bf0:	b918      	cbnz	r0, 19bfa <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   19bf2:	2101      	movs	r1, #1
   19bf4:	4620      	mov	r0, r4
   19bf6:	f005 f9ba 	bl	1ef6e <atomic_set_bit>
}
   19bfa:	b002      	add	sp, #8
   19bfc:	bd10      	pop	{r4, pc}
   19bfe:	bf00      	nop
   19c00:	000207ec 	.word	0x000207ec
   19c04:	000194a9 	.word	0x000194a9

00019c08 <update_ccc>:
{
   19c08:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19c0a:	4b33      	ldr	r3, [pc, #204]	; (19cd8 <update_ccc+0xd0>)
	struct bt_conn *conn = data->conn;
   19c0c:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   19c0e:	6882      	ldr	r2, [r0, #8]
   19c10:	429a      	cmp	r2, r3
{
   19c12:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19c14:	d11b      	bne.n	19c4e <update_ccc+0x46>
	ccc = attr->user_data;
   19c16:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   19c18:	8933      	ldrh	r3, [r6, #8]
   19c1a:	b1c3      	cbz	r3, 19c4e <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19c1c:	4632      	mov	r2, r6
   19c1e:	4628      	mov	r0, r5
   19c20:	f812 1b01 	ldrb.w	r1, [r2], #1
   19c24:	f004 fc2c 	bl	1e480 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   19c28:	b188      	cbz	r0, 19c4e <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   19c2a:	222a      	movs	r2, #42	; 0x2a
   19c2c:	4621      	mov	r1, r4
   19c2e:	4628      	mov	r0, r5
   19c30:	f005 fb2d 	bl	1f28e <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   19c34:	2803      	cmp	r0, #3
   19c36:	d10d      	bne.n	19c54 <update_ccc+0x4c>
   19c38:	4a28      	ldr	r2, [pc, #160]	; (19cdc <update_ccc+0xd4>)
   19c3a:	4b29      	ldr	r3, [pc, #164]	; (19ce0 <update_ccc+0xd8>)
				BT_WARN("CCC %p not writable", attr);
   19c3c:	4829      	ldr	r0, [pc, #164]	; (19ce4 <update_ccc+0xdc>)
   19c3e:	1ad2      	subs	r2, r2, r3
   19c40:	08d2      	lsrs	r2, r2, #3
   19c42:	0192      	lsls	r2, r2, #6
   19c44:	f042 0202 	orr.w	r2, r2, #2
   19c48:	4621      	mov	r1, r4
   19c4a:	f003 fbe3 	bl	1d414 <log_1>
}
   19c4e:	2001      	movs	r0, #1
   19c50:	b002      	add	sp, #8
   19c52:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
   19c54:	4631      	mov	r1, r6
   19c56:	4620      	mov	r0, r4
   19c58:	f005 f913 	bl	1ee82 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   19c5c:	4b22      	ldr	r3, [pc, #136]	; (19ce8 <update_ccc+0xe0>)
   19c5e:	429e      	cmp	r6, r3
   19c60:	d1f5      	bne.n	19c4e <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19c62:	7a28      	ldrb	r0, [r5, #8]
   19c64:	f105 0188 	add.w	r1, r5, #136	; 0x88
   19c68:	f7ff fb84 	bl	19374 <find_sc_cfg>
	if (!cfg) {
   19c6c:	4604      	mov	r4, r0
   19c6e:	2800      	cmp	r0, #0
   19c70:	d0ed      	beq.n	19c4e <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
   19c72:	8902      	ldrh	r2, [r0, #8]
   19c74:	8943      	ldrh	r3, [r0, #10]
   19c76:	ea53 0102 	orrs.w	r1, r3, r2
   19c7a:	d0e8      	beq.n	19c4e <update_ccc+0x46>
	index = bt_conn_index(conn);
   19c7c:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   19c7e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   19c82:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   19c86:	f7fe f97b 	bl	17f80 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   19c8a:	4918      	ldr	r1, [pc, #96]	; (19cec <update_ccc+0xe4>)
   19c8c:	4a18      	ldr	r2, [pc, #96]	; (19cf0 <update_ccc+0xe8>)
   19c8e:	2318      	movs	r3, #24
   19c90:	fb03 1300 	mla	r3, r3, r0, r1
   19c94:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   19c96:	4a17      	ldr	r2, [pc, #92]	; (19cf4 <update_ccc+0xec>)
   19c98:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   19c9a:	aa01      	add	r2, sp, #4
   19c9c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   19c9e:	2204      	movs	r2, #4
   19ca0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19ca2:	b203      	sxth	r3, r0
   19ca4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19ca8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   19cac:	4628      	mov	r0, r5
   19cae:	f7ff fefd 	bl	19aac <bt_gatt_indicate>
   19cb2:	b148      	cbz	r0, 19cc8 <update_ccc+0xc0>
   19cb4:	4909      	ldr	r1, [pc, #36]	; (19cdc <update_ccc+0xd4>)
   19cb6:	4b0a      	ldr	r3, [pc, #40]	; (19ce0 <update_ccc+0xd8>)
		BT_ERR("SC restore indication failed");
   19cb8:	480f      	ldr	r0, [pc, #60]	; (19cf8 <update_ccc+0xf0>)
   19cba:	1ac9      	subs	r1, r1, r3
   19cbc:	08c9      	lsrs	r1, r1, #3
   19cbe:	0189      	lsls	r1, r1, #6
   19cc0:	f041 0101 	orr.w	r1, r1, #1
   19cc4:	f003 fb99 	bl	1d3fa <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   19cc8:	2204      	movs	r2, #4
   19cca:	2100      	movs	r1, #0
   19ccc:	f104 0008 	add.w	r0, r4, #8
   19cd0:	f004 f9cd 	bl	1e06e <memset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
   19cd4:	e7bb      	b.n	19c4e <update_ccc+0x46>
   19cd6:	bf00      	nop
   19cd8:	000193d1 	.word	0x000193d1
   19cdc:	00020320 	.word	0x00020320
   19ce0:	00020308 	.word	0x00020308
   19ce4:	00021ff1 	.word	0x00021ff1
   19ce8:	200005d0 	.word	0x200005d0
   19cec:	200025c8 	.word	0x200025c8
   19cf0:	000207ec 	.word	0x000207ec
   19cf4:	0001ef8b 	.word	0x0001ef8b
   19cf8:	00022005 	.word	0x00022005

00019cfc <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   19cfc:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19cfe:	4a06      	ldr	r2, [pc, #24]	; (19d18 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   19d00:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19d02:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   19d04:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19d06:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   19d0a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19d0e:	f005 fab1 	bl	1f274 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   19d12:	b003      	add	sp, #12
   19d14:	f85d fb04 	ldr.w	pc, [sp], #4
   19d18:	00019c09 	.word	0x00019c09

00019d1c <db_hash_read>:
{
   19d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d1e:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   19d20:	480f      	ldr	r0, [pc, #60]	; (19d60 <db_hash_read+0x44>)
{
   19d22:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   19d26:	4615      	mov	r5, r2
   19d28:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
   19d2a:	f005 ffda 	bl	1fce2 <k_delayed_work_cancel>
	if (!err) {
   19d2e:	b908      	cbnz	r0, 19d34 <db_hash_read+0x18>
		db_hash_gen(true);
   19d30:	f7ff fe74 	bl	19a1c <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   19d34:	2101      	movs	r1, #1
   19d36:	4620      	mov	r0, r4
   19d38:	f005 facc 	bl	1f2d4 <bt_gatt_change_aware>
	if (offset > value_len) {
   19d3c:	2e10      	cmp	r6, #16
   19d3e:	d80c      	bhi.n	19d5a <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
   19d40:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   19d44:	4907      	ldr	r1, [pc, #28]	; (19d64 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
   19d46:	42bc      	cmp	r4, r7
   19d48:	bfa8      	it	ge
   19d4a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19d4c:	4622      	mov	r2, r4
   19d4e:	4431      	add	r1, r6
   19d50:	4628      	mov	r0, r5
   19d52:	f004 f961 	bl	1e018 <memcpy>
}
   19d56:	4620      	mov	r0, r4
   19d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19d5a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   19d5e:	e7fa      	b.n	19d56 <db_hash_read+0x3a>
   19d60:	20001f90 	.word	0x20001f90
   19d64:	20002b8d 	.word	0x20002b8d

00019d68 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   19d68:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19d6a:	4603      	mov	r3, r0
   19d6c:	4a15      	ldr	r2, [pc, #84]	; (19dc4 <bt_gatt_disconnected+0x5c>)
{
   19d6e:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19d74:	2001      	movs	r0, #1
   19d76:	f005 fa7d 	bl	1f274 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   19d7a:	4628      	mov	r0, r5
   19d7c:	f7ff fb0a 	bl	19394 <find_cf_cfg>
	if (!cfg) {
   19d80:	4604      	mov	r4, r0
   19d82:	b1e8      	cbz	r0, 19dc0 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19d84:	f105 0688 	add.w	r6, r5, #136	; 0x88
   19d88:	7a28      	ldrb	r0, [r5, #8]
   19d8a:	4631      	mov	r1, r6
   19d8c:	f004 fae4 	bl	1e358 <bt_addr_le_is_bonded>
   19d90:	b920      	cbnz	r0, 19d9c <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   19d92:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   19d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   19d98:	f005 b91f 	b.w	1efda <clear_cf_cfg>
   19d9c:	1c60      	adds	r0, r4, #1
   19d9e:	2207      	movs	r2, #7
   19da0:	4631      	mov	r1, r6
   19da2:	340c      	adds	r4, #12
   19da4:	f004 f938 	bl	1e018 <memcpy>
   19da8:	f3bf 8f5b 	dmb	ish
   19dac:	e854 3f00 	ldrex	r3, [r4]
   19db0:	f023 0302 	bic.w	r3, r3, #2
   19db4:	e844 3200 	strex	r2, r3, [r4]
   19db8:	2a00      	cmp	r2, #0
   19dba:	d1f7      	bne.n	19dac <bt_gatt_disconnected+0x44>
   19dbc:	f3bf 8f5b 	dmb	ish
}
   19dc0:	bd70      	pop	{r4, r5, r6, pc}
   19dc2:	bf00      	nop
   19dc4:	000197b5 	.word	0x000197b5

00019dc8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   19dc8:	4a0b      	ldr	r2, [pc, #44]	; (19df8 <bt_smp_accept+0x30>)
{
   19dca:	b508      	push	{r3, lr}
   19dcc:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   19dce:	6810      	ldr	r0, [r2, #0]
   19dd0:	b918      	cbnz	r0, 19dda <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   19dd2:	4b0a      	ldr	r3, [pc, #40]	; (19dfc <bt_smp_accept+0x34>)
   19dd4:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   19dd6:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   19dd8:	bd08      	pop	{r3, pc}
   19dda:	4909      	ldr	r1, [pc, #36]	; (19e00 <bt_smp_accept+0x38>)
   19ddc:	4a09      	ldr	r2, [pc, #36]	; (19e04 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
   19dde:	480a      	ldr	r0, [pc, #40]	; (19e08 <bt_smp_accept+0x40>)
   19de0:	1a52      	subs	r2, r2, r1
   19de2:	08d2      	lsrs	r2, r2, #3
   19de4:	0192      	lsls	r2, r2, #6
   19de6:	f042 0201 	orr.w	r2, r2, #1
   19dea:	4619      	mov	r1, r3
   19dec:	f003 fb12 	bl	1d414 <log_1>
	return -ENOMEM;
   19df0:	f06f 000b 	mvn.w	r0, #11
   19df4:	e7f0      	b.n	19dd8 <bt_smp_accept+0x10>
   19df6:	bf00      	nop
   19df8:	20002018 	.word	0x20002018
   19dfc:	000208f0 	.word	0x000208f0
   19e00:	00020308 	.word	0x00020308
   19e04:	00020340 	.word	0x00020340
   19e08:	00022031 	.word	0x00022031

00019e0c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19e0c:	4b02      	ldr	r3, [pc, #8]	; (19e18 <net_buf_pool_get+0xc>)
   19e0e:	2228      	movs	r2, #40	; 0x28
   19e10:	fb02 3000 	mla	r0, r2, r0, r3
   19e14:	4770      	bx	lr
   19e16:	bf00      	nop
   19e18:	200007e0 	.word	0x200007e0

00019e1c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19e1c:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   19e1e:	4a05      	ldr	r2, [pc, #20]	; (19e34 <net_buf_id+0x18>)
   19e20:	2128      	movs	r1, #40	; 0x28
   19e22:	fb01 2303 	mla	r3, r1, r3, r2
   19e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19e28:	1ac0      	subs	r0, r0, r3
}
   19e2a:	4b03      	ldr	r3, [pc, #12]	; (19e38 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   19e2c:	10c0      	asrs	r0, r0, #3
}
   19e2e:	4358      	muls	r0, r3
   19e30:	4770      	bx	lr
   19e32:	bf00      	nop
   19e34:	200007e0 	.word	0x200007e0
   19e38:	aaaaaaab 	.word	0xaaaaaaab

00019e3c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19e3c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19e3e:	4a0a      	ldr	r2, [pc, #40]	; (19e68 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19e40:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19e42:	2428      	movs	r4, #40	; 0x28
   19e44:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   19e48:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19e4a:	6a1b      	ldr	r3, [r3, #32]
   19e4c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19e4e:	6823      	ldr	r3, [r4, #0]
   19e50:	429a      	cmp	r2, r3
   19e52:	bf94      	ite	ls
   19e54:	600a      	strls	r2, [r1, #0]
   19e56:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19e58:	f7ff ffe0 	bl	19e1c <net_buf_id>
   19e5c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19e60:	fb02 3000 	mla	r0, r2, r0, r3
   19e64:	bd10      	pop	{r4, pc}
   19e66:	bf00      	nop
   19e68:	200007e0 	.word	0x200007e0

00019e6c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19e6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19e70:	4605      	mov	r5, r0
   19e72:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   19e74:	4610      	mov	r0, r2
   19e76:	4619      	mov	r1, r3
{
   19e78:	4616      	mov	r6, r2
   19e7a:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   19e7c:	f005 ff8a 	bl	1fd94 <z_timeout_end_calc>
   19e80:	4680      	mov	r8, r0
   19e82:	4689      	mov	r9, r1
	__asm__ volatile(
   19e84:	f04f 0340 	mov.w	r3, #64	; 0x40
   19e88:	f3ef 8a11 	mrs	sl, BASEPRI
   19e8c:	f383 8811 	msr	BASEPRI, r3
   19e90:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   19e94:	8b6b      	ldrh	r3, [r5, #26]
   19e96:	2b00      	cmp	r3, #0
   19e98:	d054      	beq.n	19f44 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19e9a:	8b2a      	ldrh	r2, [r5, #24]
   19e9c:	429a      	cmp	r2, r3
   19e9e:	d93d      	bls.n	19f1c <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   19ea0:	2200      	movs	r2, #0
   19ea2:	2300      	movs	r3, #0
   19ea4:	4628      	mov	r0, r5
   19ea6:	f001 fe13 	bl	1bad0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   19eaa:	4604      	mov	r4, r0
   19eac:	2800      	cmp	r0, #0
   19eae:	d035      	beq.n	19f1c <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   19eb0:	f38a 8811 	msr	BASEPRI, sl
   19eb4:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19eb8:	9b01      	ldr	r3, [sp, #4]
   19eba:	2b00      	cmp	r3, #0
   19ebc:	d052      	beq.n	19f64 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19ebe:	ea56 0307 	orrs.w	r3, r6, r7
   19ec2:	d010      	beq.n	19ee6 <net_buf_alloc_len+0x7a>
   19ec4:	1c7b      	adds	r3, r7, #1
   19ec6:	bf08      	it	eq
   19ec8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19ecc:	d00b      	beq.n	19ee6 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   19ece:	f002 fce1 	bl	1c894 <z_tick_get>
   19ed2:	ebb8 0600 	subs.w	r6, r8, r0
   19ed6:	eb69 0701 	sbc.w	r7, r9, r1
   19eda:	2e00      	cmp	r6, #0
   19edc:	f177 0300 	sbcs.w	r3, r7, #0
   19ee0:	bfbc      	itt	lt
   19ee2:	2600      	movlt	r6, #0
   19ee4:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19ee6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19ee8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 19f7c <net_buf_alloc_len+0x110>
   19eec:	2228      	movs	r2, #40	; 0x28
   19eee:	fb02 8303 	mla	r3, r2, r3, r8
   19ef2:	a901      	add	r1, sp, #4
   19ef4:	6a1b      	ldr	r3, [r3, #32]
   19ef6:	681b      	ldr	r3, [r3, #0]
   19ef8:	4632      	mov	r2, r6
   19efa:	681d      	ldr	r5, [r3, #0]
   19efc:	4620      	mov	r0, r4
   19efe:	463b      	mov	r3, r7
   19f00:	47a8      	blx	r5
   19f02:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   19f04:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   19f06:	bb70      	cbnz	r0, 19f66 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   19f08:	79a0      	ldrb	r0, [r4, #6]
   19f0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19f0e:	4621      	mov	r1, r4
   19f10:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   19f14:	f005 fd22 	bl	1f95c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   19f18:	462c      	mov	r4, r5
}
   19f1a:	e01f      	b.n	19f5c <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   19f1c:	8b68      	ldrh	r0, [r5, #26]
   19f1e:	1e43      	subs	r3, r0, #1
   19f20:	836b      	strh	r3, [r5, #26]
   19f22:	f38a 8811 	msr	BASEPRI, sl
   19f26:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   19f2a:	8b2c      	ldrh	r4, [r5, #24]
   19f2c:	1a24      	subs	r4, r4, r0
   19f2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   19f30:	2318      	movs	r3, #24
   19f32:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   19f36:	4811      	ldr	r0, [pc, #68]	; (19f7c <net_buf_alloc_len+0x110>)
   19f38:	4b11      	ldr	r3, [pc, #68]	; (19f80 <net_buf_alloc_len+0x114>)
   19f3a:	1a2d      	subs	r5, r5, r0
   19f3c:	10ed      	asrs	r5, r5, #3
   19f3e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   19f40:	71a5      	strb	r5, [r4, #6]
		goto success;
   19f42:	e7b9      	b.n	19eb8 <net_buf_alloc_len+0x4c>
   19f44:	f38a 8811 	msr	BASEPRI, sl
   19f48:	f3bf 8f6f 	isb	sy
   19f4c:	4632      	mov	r2, r6
   19f4e:	463b      	mov	r3, r7
   19f50:	4628      	mov	r0, r5
   19f52:	f001 fdbd 	bl	1bad0 <z_impl_k_queue_get>
	if (!buf) {
   19f56:	4604      	mov	r4, r0
   19f58:	2800      	cmp	r0, #0
   19f5a:	d1ad      	bne.n	19eb8 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   19f5c:	4620      	mov	r0, r4
   19f5e:	b002      	add	sp, #8
   19f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   19f64:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   19f66:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19f68:	2201      	movs	r2, #1
	buf->frags = NULL;
   19f6a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   19f6c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   19f6e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   19f70:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   19f72:	6923      	ldr	r3, [r4, #16]
   19f74:	81e2      	strh	r2, [r4, #14]
   19f76:	60a3      	str	r3, [r4, #8]
	return buf;
   19f78:	e7f0      	b.n	19f5c <net_buf_alloc_len+0xf0>
   19f7a:	bf00      	nop
   19f7c:	200007e0 	.word	0x200007e0
   19f80:	cccccccd 	.word	0xcccccccd

00019f84 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f88:	4d17      	ldr	r5, [pc, #92]	; (19fe8 <net_buf_unref+0x64>)
   19f8a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   19f8c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   19f8e:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   19f90:	b90c      	cbnz	r4, 19f96 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   19f96:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   19f98:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   19f9c:	3b01      	subs	r3, #1
   19f9e:	b2db      	uxtb	r3, r3
   19fa0:	7123      	strb	r3, [r4, #4]
   19fa2:	2b00      	cmp	r3, #0
   19fa4:	d1f5      	bne.n	19f92 <net_buf_unref+0xe>
		if (buf->__buf) {
   19fa6:	6921      	ldr	r1, [r4, #16]
   19fa8:	b159      	cbz	r1, 19fc2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19faa:	7963      	ldrb	r3, [r4, #5]
   19fac:	079b      	lsls	r3, r3, #30
   19fae:	d407      	bmi.n	19fc0 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   19fb0:	79a3      	ldrb	r3, [r4, #6]
   19fb2:	fb07 5303 	mla	r3, r7, r3, r5
   19fb6:	4620      	mov	r0, r4
   19fb8:	6a1b      	ldr	r3, [r3, #32]
   19fba:	681b      	ldr	r3, [r3, #0]
   19fbc:	689b      	ldr	r3, [r3, #8]
   19fbe:	4798      	blx	r3
			buf->__buf = NULL;
   19fc0:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   19fc2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   19fc4:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   19fc6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   19fca:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   19fcc:	69db      	ldr	r3, [r3, #28]
   19fce:	b11b      	cbz	r3, 19fd8 <net_buf_unref+0x54>
			pool->destroy(buf);
   19fd0:	4620      	mov	r0, r4
   19fd2:	4798      	blx	r3
{
   19fd4:	4644      	mov	r4, r8
   19fd6:	e7db      	b.n	19f90 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   19fd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19fdc:	4621      	mov	r1, r4
   19fde:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   19fe2:	f005 fcbb 	bl	1f95c <k_queue_prepend>
}
   19fe6:	e7f5      	b.n	19fd4 <net_buf_unref+0x50>
   19fe8:	200007e0 	.word	0x200007e0

00019fec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   19fec:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   19fee:	4b09      	ldr	r3, [pc, #36]	; (1a014 <gpio_nrfx_init+0x28>)
   19ff0:	781a      	ldrb	r2, [r3, #0]
   19ff2:	b96a      	cbnz	r2, 1a010 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   19ff4:	2101      	movs	r1, #1
   19ff6:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   19ff8:	2006      	movs	r0, #6
   19ffa:	2105      	movs	r1, #5
   19ffc:	f7fa fc86 	bl	1490c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1a000:	2006      	movs	r0, #6
   1a002:	f7fa fc73 	bl	148ec <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a006:	4b04      	ldr	r3, [pc, #16]	; (1a018 <gpio_nrfx_init+0x2c>)
   1a008:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a00c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1a010:	2000      	movs	r0, #0
   1a012:	bd08      	pop	{r3, pc}
   1a014:	20002b9d 	.word	0x20002b9d
   1a018:	40006000 	.word	0x40006000

0001a01c <gpio_nrfx_pin_interrupt_configure>:
{
   1a01c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a01e:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a020:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1a022:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a024:	7a09      	ldrb	r1, [r1, #8]
   1a026:	f005 041f 	and.w	r4, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1a02a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a02e:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
   1a032:	d10c      	bne.n	1a04e <gpio_nrfx_pin_interrupt_configure+0x32>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1a034:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a038:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1a03c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1a040:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1a044:	07c8      	lsls	r0, r1, #31
   1a046:	d507      	bpl.n	1a058 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   1a048:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a04c:	e093      	b.n	1a176 <gpio_nrfx_pin_interrupt_configure+0x15a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a04e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1a052:	68f1      	ldr	r1, [r6, #12]
   1a054:	f000 8091 	beq.w	1a17a <gpio_nrfx_pin_interrupt_configure+0x15e>
   1a058:	68f0      	ldr	r0, [r6, #12]
   1a05a:	2101      	movs	r1, #1
   1a05c:	40a9      	lsls	r1, r5
   1a05e:	4301      	orrs	r1, r0
   1a060:	6970      	ldr	r0, [r6, #20]
   1a062:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a064:	2101      	movs	r1, #1
   1a066:	40a9      	lsls	r1, r5
   1a068:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a06c:	69b2      	ldr	r2, [r6, #24]
   1a06e:	bf0c      	ite	eq
   1a070:	4308      	orreq	r0, r1
   1a072:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1a074:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1a078:	bf0c      	ite	eq
   1a07a:	430a      	orreq	r2, r1
   1a07c:	438a      	bicne	r2, r1
   1a07e:	61b2      	str	r2, [r6, #24]
   1a080:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a082:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1a084:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1a088:	bf0c      	ite	eq
   1a08a:	4311      	orreq	r1, r2
   1a08c:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1a090:	4a46      	ldr	r2, [pc, #280]	; (1a1ac <gpio_nrfx_pin_interrupt_configure+0x190>)
   1a092:	6131      	str	r1, [r6, #16]
   1a094:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a098:	2000      	movs	r0, #0
   1a09a:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a09c:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1a0a0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1a0a4:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1a0a8:	428c      	cmp	r4, r1
   1a0aa:	d16b      	bne.n	1a184 <gpio_nrfx_pin_interrupt_configure+0x168>
		    && (intenset & BIT(i))) {
   1a0ac:	fa23 f100 	lsr.w	r1, r3, r0
   1a0b0:	07c9      	lsls	r1, r1, #31
   1a0b2:	d567      	bpl.n	1a184 <gpio_nrfx_pin_interrupt_configure+0x168>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1a0b4:	0083      	lsls	r3, r0, #2
   1a0b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a0ba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a0be:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1a0c2:	f021 0101 	bic.w	r1, r1, #1
   1a0c6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1a0ca:	2301      	movs	r3, #1
   1a0cc:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1a0ce:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1a0d2:	b2c0      	uxtb	r0, r0
   1a0d4:	f001 f97a 	bl	1b3cc <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a0d8:	4620      	mov	r0, r4
   1a0da:	2100      	movs	r1, #0
   1a0dc:	f005 f9ee 	bl	1f4bc <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1a0e0:	68f0      	ldr	r0, [r6, #12]
   1a0e2:	40e8      	lsrs	r0, r5
   1a0e4:	f010 0001 	ands.w	r0, r0, #1
   1a0e8:	d045      	beq.n	1a176 <gpio_nrfx_pin_interrupt_configure+0x15a>
		if (data->trig_edge & BIT(pin)) {
   1a0ea:	6970      	ldr	r0, [r6, #20]
   1a0ec:	40e8      	lsrs	r0, r5
   1a0ee:	f010 0201 	ands.w	r2, r0, #1
   1a0f2:	d04e      	beq.n	1a192 <gpio_nrfx_pin_interrupt_configure+0x176>
			if (data->double_edge & BIT(pin)) {
   1a0f4:	69b3      	ldr	r3, [r6, #24]
   1a0f6:	40eb      	lsrs	r3, r5
   1a0f8:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a0fa:	bf5f      	itttt	pl
   1a0fc:	6931      	ldrpl	r1, [r6, #16]
   1a0fe:	fa21 f505 	lsrpl.w	r5, r1, r5
   1a102:	f005 0501 	andpl.w	r5, r5, #1
   1a106:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a10a:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a10e:	bf54      	ite	pl
   1a110:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1a112:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a114:	f001 f97c 	bl	1b410 <nrfx_gpiote_channel_alloc>
   1a118:	4b25      	ldr	r3, [pc, #148]	; (1a1b0 <gpio_nrfx_pin_interrupt_configure+0x194>)
   1a11a:	4298      	cmp	r0, r3
   1a11c:	d136      	bne.n	1a18c <gpio_nrfx_pin_interrupt_configure+0x170>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1a11e:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a122:	008b      	lsls	r3, r1, #2
   1a124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a128:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a12c:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a12e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a132:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1a136:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1a13a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a13e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a142:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1a146:	4314      	orrs	r4, r2
    return ((uint32_t)p_reg + event);
   1a148:	008a      	lsls	r2, r1, #2
   1a14a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a14e:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a152:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a156:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a158:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a15c:	6010      	str	r0, [r2, #0]
   1a15e:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a160:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a164:	f042 0201 	orr.w	r2, r2, #1
   1a168:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1a16c:	4a0f      	ldr	r2, [pc, #60]	; (1a1ac <gpio_nrfx_pin_interrupt_configure+0x190>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1a16e:	2301      	movs	r3, #1
   1a170:	408b      	lsls	r3, r1
   1a172:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1a176:	b002      	add	sp, #8
   1a178:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a17a:	2001      	movs	r0, #1
   1a17c:	40a8      	lsls	r0, r5
   1a17e:	ea21 0100 	bic.w	r1, r1, r0
   1a182:	e76d      	b.n	1a060 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a184:	3001      	adds	r0, #1
   1a186:	2808      	cmp	r0, #8
   1a188:	d188      	bne.n	1a09c <gpio_nrfx_pin_interrupt_configure+0x80>
   1a18a:	e7a5      	b.n	1a0d8 <gpio_nrfx_pin_interrupt_configure+0xbc>
		return -ENODEV;
   1a18c:	f06f 0012 	mvn.w	r0, #18
   1a190:	e7f1      	b.n	1a176 <gpio_nrfx_pin_interrupt_configure+0x15a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a192:	6931      	ldr	r1, [r6, #16]
   1a194:	40e9      	lsrs	r1, r5
   1a196:	f001 0101 	and.w	r1, r1, #1
   1a19a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1a19e:	4620      	mov	r0, r4
   1a1a0:	b2c9      	uxtb	r1, r1
   1a1a2:	f005 f98b 	bl	1f4bc <nrf_gpio_cfg_sense_set>
	int res = 0;
   1a1a6:	4610      	mov	r0, r2
   1a1a8:	e7e5      	b.n	1a176 <gpio_nrfx_pin_interrupt_configure+0x15a>
   1a1aa:	bf00      	nop
   1a1ac:	40006000 	.word	0x40006000
   1a1b0:	0bad0000 	.word	0x0bad0000

0001a1b4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a1b4:	4b2a      	ldr	r3, [pc, #168]	; (1a260 <gpio_nrfx_config+0xac>)
{
   1a1b6:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a1b8:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a1ba:	482a      	ldr	r0, [pc, #168]	; (1a264 <gpio_nrfx_config+0xb0>)
   1a1bc:	4013      	ands	r3, r2
   1a1be:	4283      	cmp	r3, r0
   1a1c0:	d03e      	beq.n	1a240 <gpio_nrfx_config+0x8c>
   1a1c2:	d80d      	bhi.n	1a1e0 <gpio_nrfx_config+0x2c>
   1a1c4:	2b06      	cmp	r3, #6
   1a1c6:	d015      	beq.n	1a1f4 <gpio_nrfx_config+0x40>
   1a1c8:	d805      	bhi.n	1a1d6 <gpio_nrfx_config+0x22>
   1a1ca:	b19b      	cbz	r3, 1a1f4 <gpio_nrfx_config+0x40>
   1a1cc:	2b02      	cmp	r3, #2
   1a1ce:	d039      	beq.n	1a244 <gpio_nrfx_config+0x90>
   1a1d0:	f06f 0015 	mvn.w	r0, #21
   1a1d4:	e033      	b.n	1a23e <gpio_nrfx_config+0x8a>
   1a1d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1a1da:	d1f9      	bne.n	1a1d0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1a1dc:	2301      	movs	r3, #1
   1a1de:	e009      	b.n	1a1f4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a1e0:	4821      	ldr	r0, [pc, #132]	; (1a268 <gpio_nrfx_config+0xb4>)
   1a1e2:	4283      	cmp	r3, r0
   1a1e4:	d030      	beq.n	1a248 <gpio_nrfx_config+0x94>
   1a1e6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1a1ea:	d02f      	beq.n	1a24c <gpio_nrfx_config+0x98>
   1a1ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1a1f0:	d1ee      	bne.n	1a1d0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1a1f2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1a1f4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1a1f6:	bf54      	ite	pl
   1a1f8:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1a1fc:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a1fe:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1a202:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   1a206:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a20a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1a20e:	d007      	beq.n	1a220 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a210:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a214:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a216:	d01b      	beq.n	1a250 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1a218:	2201      	movs	r2, #1
   1a21a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1a21c:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a220:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   1a224:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a228:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a22c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1a230:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a234:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a238:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   1a23c:	2000      	movs	r0, #0
}
   1a23e:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1a240:	2307      	movs	r3, #7
   1a242:	e7d7      	b.n	1a1f4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1a244:	2304      	movs	r3, #4
   1a246:	e7d5      	b.n	1a1f4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1a248:	2305      	movs	r3, #5
   1a24a:	e7d3      	b.n	1a1f4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1a24c:	2303      	movs	r3, #3
   1a24e:	e7d1      	b.n	1a1f4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1a250:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1a252:	bf42      	ittt	mi
   1a254:	2201      	movmi	r2, #1
   1a256:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1a258:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   1a25c:	e7e0      	b.n	1a220 <gpio_nrfx_config+0x6c>
   1a25e:	bf00      	nop
   1a260:	00f00006 	.word	0x00f00006
   1a264:	00100006 	.word	0x00100006
   1a268:	00400002 	.word	0x00400002

0001a26c <gpiote_event_handler>:
{
   1a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a270:	4d3f      	ldr	r5, [pc, #252]	; (1a370 <gpiote_event_handler+0x104>)
   1a272:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
   1a274:	2e00      	cmp	r6, #0
   1a276:	d04e      	beq.n	1a316 <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
   1a278:	4b3e      	ldr	r3, [pc, #248]	; (1a374 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   1a27a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   1a27e:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1a280:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   1a282:	4301      	orrs	r1, r0
   1a284:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
   1a288:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
   1a28c:	2701      	movs	r7, #1
   1a28e:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1a292:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   1a294:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
   1a298:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
   1a29c:	bb72      	cbnz	r2, 1a2fc <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a29e:	602a      	str	r2, [r5, #0]
   1a2a0:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   1a2a2:	4835      	ldr	r0, [pc, #212]	; (1a378 <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a2a4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1a2a6:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a2a8:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1a2aa:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1a2ae:	fa05 f103 	lsl.w	r1, r5, r3
   1a2b2:	4211      	tst	r1, r2
   1a2b4:	d011      	beq.n	1a2da <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a2b6:	009a      	lsls	r2, r3, #2
   1a2b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a2bc:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   1a2c0:	6811      	ldr	r1, [r2, #0]
   1a2c2:	b151      	cbz	r1, 1a2da <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a2c4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1a2c8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a2cc:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a2ce:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1a2d2:	fa05 f101 	lsl.w	r1, r5, r1
   1a2d6:	6812      	ldr	r2, [r2, #0]
   1a2d8:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a2da:	3301      	adds	r3, #1
   1a2dc:	2b08      	cmp	r3, #8
   1a2de:	d1e4      	bne.n	1a2aa <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   1a2e0:	b9dc      	cbnz	r4, 1a31a <gpiote_event_handler+0xae>
	if (port_event) {
   1a2e2:	b14e      	cbz	r6, 1a2f8 <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
   1a2e4:	4c23      	ldr	r4, [pc, #140]	; (1a374 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   1a2e6:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   1a2ea:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1a2ec:	4301      	orrs	r1, r0
   1a2ee:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   1a2f2:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   1a2f4:	2600      	movs	r6, #0
	while (level_pins) {
   1a2f6:	bb42      	cbnz	r2, 1a34a <gpiote_event_handler+0xde>
}
   1a2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1a2fc:	423a      	tst	r2, r7
   1a2fe:	d006      	beq.n	1a30e <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a300:	2100      	movs	r1, #0
   1a302:	f008 001f 	and.w	r0, r8, #31
   1a306:	f005 f8d9 	bl	1f4bc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1a30a:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
   1a30e:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   1a312:	007f      	lsls	r7, r7, #1
   1a314:	e7c2      	b.n	1a29c <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a316:	4634      	mov	r4, r6
   1a318:	e7c3      	b.n	1a2a2 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a31a:	4b16      	ldr	r3, [pc, #88]	; (1a374 <gpiote_event_handler+0x108>)
   1a31c:	6859      	ldr	r1, [r3, #4]
   1a31e:	2900      	cmp	r1, #0
   1a320:	d0df      	beq.n	1a2e2 <gpiote_event_handler+0x76>
	return node->next;
   1a322:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1a324:	4f15      	ldr	r7, [pc, #84]	; (1a37c <gpiote_event_handler+0x110>)
   1a326:	2d00      	cmp	r5, #0
   1a328:	bf38      	it	cc
   1a32a:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   1a32c:	688a      	ldr	r2, [r1, #8]
   1a32e:	4022      	ands	r2, r4
   1a330:	d002      	beq.n	1a338 <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
   1a332:	684b      	ldr	r3, [r1, #4]
   1a334:	4638      	mov	r0, r7
   1a336:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a338:	2d00      	cmp	r5, #0
   1a33a:	d0d2      	beq.n	1a2e2 <gpiote_event_handler+0x76>
   1a33c:	682b      	ldr	r3, [r5, #0]
   1a33e:	2b00      	cmp	r3, #0
   1a340:	bf38      	it	cc
   1a342:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a344:	4629      	mov	r1, r5
   1a346:	461d      	mov	r5, r3
   1a348:	e7f0      	b.n	1a32c <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
   1a34a:	4215      	tst	r5, r2
   1a34c:	d00c      	beq.n	1a368 <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a34e:	6921      	ldr	r1, [r4, #16]
   1a350:	40f1      	lsrs	r1, r6
   1a352:	f001 0101 	and.w	r1, r1, #1
   1a356:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1a35a:	b2c9      	uxtb	r1, r1
   1a35c:	f006 001f 	and.w	r0, r6, #31
   1a360:	f005 f8ac 	bl	1f4bc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1a364:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   1a368:	3601      	adds	r6, #1
		bit <<= 1;
   1a36a:	006d      	lsls	r5, r5, #1
   1a36c:	e7c3      	b.n	1a2f6 <gpiote_event_handler+0x8a>
   1a36e:	bf00      	nop
   1a370:	4000617c 	.word	0x4000617c
   1a374:	200025e4 	.word	0x200025e4
   1a378:	40006000 	.word	0x40006000
   1a37c:	200006ec 	.word	0x200006ec

0001a380 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1a380:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1a382:	794b      	ldrb	r3, [r1, #5]
   1a384:	2b01      	cmp	r3, #1
   1a386:	d02b      	beq.n	1a3e0 <uarte_nrfx_configure+0x60>
   1a388:	2b03      	cmp	r3, #3
   1a38a:	d126      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1a38c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a38e:	798b      	ldrb	r3, [r1, #6]
   1a390:	2b03      	cmp	r3, #3
   1a392:	d122      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1a394:	79cd      	ldrb	r5, [r1, #7]
   1a396:	b125      	cbz	r5, 1a3a2 <uarte_nrfx_configure+0x22>
   1a398:	2d01      	cmp	r5, #1
   1a39a:	d11e      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1a39c:	6843      	ldr	r3, [r0, #4]
   1a39e:	791b      	ldrb	r3, [r3, #4]
   1a3a0:	b1db      	cbz	r3, 1a3da <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1a3a2:	790a      	ldrb	r2, [r1, #4]
   1a3a4:	2a01      	cmp	r2, #1
   1a3a6:	d01d      	beq.n	1a3e4 <uarte_nrfx_configure+0x64>
   1a3a8:	2a02      	cmp	r2, #2
   1a3aa:	d01f      	beq.n	1a3ec <uarte_nrfx_configure+0x6c>
   1a3ac:	b9aa      	cbnz	r2, 1a3da <uarte_nrfx_configure+0x5a>
   1a3ae:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a3b0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1a3b2:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   1a3b4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1a3b8:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   1a3ba:	d06e      	beq.n	1a49a <uarte_nrfx_configure+0x11a>
   1a3bc:	d833      	bhi.n	1a426 <uarte_nrfx_configure+0xa6>
   1a3be:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a3c2:	d06d      	beq.n	1a4a0 <uarte_nrfx_configure+0x120>
   1a3c4:	d81c      	bhi.n	1a400 <uarte_nrfx_configure+0x80>
   1a3c6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a3ca:	d06b      	beq.n	1a4a4 <uarte_nrfx_configure+0x124>
   1a3cc:	d810      	bhi.n	1a3f0 <uarte_nrfx_configure+0x70>
   1a3ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1a3d2:	d06a      	beq.n	1a4aa <uarte_nrfx_configure+0x12a>
   1a3d4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1a3d8:	d06a      	beq.n	1a4b0 <uarte_nrfx_configure+0x130>
   1a3da:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a3de:	e05b      	b.n	1a498 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   1a3e0:	2700      	movs	r7, #0
   1a3e2:	e7d4      	b.n	1a38e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1a3e4:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1a3e8:	220e      	movs	r2, #14
   1a3ea:	e7e1      	b.n	1a3b0 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1a3ec:	2400      	movs	r4, #0
   1a3ee:	e7fb      	b.n	1a3e8 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   1a3f0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a3f4:	d05f      	beq.n	1a4b6 <uarte_nrfx_configure+0x136>
   1a3f6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a3fa:	d1ee      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1a3fc:	4b38      	ldr	r3, [pc, #224]	; (1a4e0 <uarte_nrfx_configure+0x160>)
   1a3fe:	e03e      	b.n	1a47e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1a400:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1a404:	d05a      	beq.n	1a4bc <uarte_nrfx_configure+0x13c>
   1a406:	d807      	bhi.n	1a418 <uarte_nrfx_configure+0x98>
   1a408:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a40c:	d058      	beq.n	1a4c0 <uarte_nrfx_configure+0x140>
   1a40e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a412:	d1e2      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1a414:	4b33      	ldr	r3, [pc, #204]	; (1a4e4 <uarte_nrfx_configure+0x164>)
   1a416:	e032      	b.n	1a47e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1a418:	f647 2c12 	movw	ip, #31250	; 0x7a12
   1a41c:	4563      	cmp	r3, ip
   1a41e:	d1dc      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1a420:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a424:	e02b      	b.n	1a47e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1a426:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a42a:	d04b      	beq.n	1a4c4 <uarte_nrfx_configure+0x144>
   1a42c:	d813      	bhi.n	1a456 <uarte_nrfx_configure+0xd6>
   1a42e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1a432:	d04a      	beq.n	1a4ca <uarte_nrfx_configure+0x14a>
   1a434:	d809      	bhi.n	1a44a <uarte_nrfx_configure+0xca>
   1a436:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   1a43a:	4563      	cmp	r3, ip
   1a43c:	d047      	beq.n	1a4ce <uarte_nrfx_configure+0x14e>
   1a43e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a442:	d1ca      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1a444:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1a448:	e019      	b.n	1a47e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1a44a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a44e:	d1c4      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1a450:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1a454:	e013      	b.n	1a47e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1a456:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a45a:	d03b      	beq.n	1a4d4 <uarte_nrfx_configure+0x154>
   1a45c:	d809      	bhi.n	1a472 <uarte_nrfx_configure+0xf2>
   1a45e:	f8df c098 	ldr.w	ip, [pc, #152]	; 1a4f8 <uarte_nrfx_configure+0x178>
   1a462:	4563      	cmp	r3, ip
   1a464:	d039      	beq.n	1a4da <uarte_nrfx_configure+0x15a>
   1a466:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a46a:	d1b6      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1a46c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1a470:	e005      	b.n	1a47e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1a472:	f8df c088 	ldr.w	ip, [pc, #136]	; 1a4fc <uarte_nrfx_configure+0x17c>
   1a476:	4563      	cmp	r3, ip
   1a478:	d1af      	bne.n	1a3da <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1a47a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1a47e:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1a482:	68c3      	ldr	r3, [r0, #12]
   1a484:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1a486:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   1a488:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   1a48a:	4322      	orrs	r2, r4
   1a48c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a48e:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   1a492:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1a496:	2000      	movs	r0, #0
}
   1a498:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1a49a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1a49e:	e7ee      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1a4a0:	4b11      	ldr	r3, [pc, #68]	; (1a4e8 <uarte_nrfx_configure+0x168>)
   1a4a2:	e7ec      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1a4a4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a4a8:	e7e9      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   1a4aa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a4ae:	e7e6      	b.n	1a47e <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1a4b0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1a4b4:	e7e3      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1a4b6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a4ba:	e7e0      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1a4bc:	4b0b      	ldr	r3, [pc, #44]	; (1a4ec <uarte_nrfx_configure+0x16c>)
   1a4be:	e7de      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1a4c0:	4b0b      	ldr	r3, [pc, #44]	; (1a4f0 <uarte_nrfx_configure+0x170>)
   1a4c2:	e7dc      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1a4c4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1a4c8:	e7d9      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1a4ca:	4b0a      	ldr	r3, [pc, #40]	; (1a4f4 <uarte_nrfx_configure+0x174>)
   1a4cc:	e7d7      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1a4ce:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a4d2:	e7d4      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1a4d4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1a4d8:	e7d1      	b.n	1a47e <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1a4da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a4de:	e7ce      	b.n	1a47e <uarte_nrfx_configure+0xfe>
   1a4e0:	0013b000 	.word	0x0013b000
   1a4e4:	004ea000 	.word	0x004ea000
   1a4e8:	00275000 	.word	0x00275000
   1a4ec:	0075c000 	.word	0x0075c000
   1a4f0:	003af000 	.word	0x003af000
   1a4f4:	013a9000 	.word	0x013a9000
   1a4f8:	0003d090 	.word	0x0003d090
   1a4fc:	000f4240 	.word	0x000f4240

0001a500 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1a500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1a504:	68c7      	ldr	r7, [r0, #12]
{
   1a506:	4606      	mov	r6, r0
   1a508:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a50a:	f005 fb78 	bl	1fbfe <k_is_in_isr>
   1a50e:	b9b8      	cbnz	r0, 1a540 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1a510:	4b28      	ldr	r3, [pc, #160]	; (1a5b4 <uarte_nrfx_poll_out+0xb4>)
   1a512:	781b      	ldrb	r3, [r3, #0]
   1a514:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1a518:	6872      	ldr	r2, [r6, #4]
   1a51a:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   1a51c:	b193      	cbz	r3, 1a544 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1a51e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a522:	f3ef 8411 	mrs	r4, BASEPRI
   1a526:	f383 8811 	msr	BASEPRI, r3
   1a52a:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1a52e:	4630      	mov	r0, r6
   1a530:	f005 f853 	bl	1f5da <is_tx_ready>
   1a534:	bb38      	cbnz	r0, 1a586 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1a536:	f384 8811 	msr	BASEPRI, r4
   1a53a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1a53e:	e7ee      	b.n	1a51e <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a540:	2301      	movs	r3, #1
   1a542:	e7e9      	b.n	1a518 <uarte_nrfx_poll_out+0x18>
   1a544:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1a546:	4630      	mov	r0, r6
   1a548:	f005 f847 	bl	1f5da <is_tx_ready>
   1a54c:	b970      	cbnz	r0, 1a56c <uarte_nrfx_poll_out+0x6c>
   1a54e:	2001      	movs	r0, #1
   1a550:	f005 f8f1 	bl	1f736 <nrfx_busy_wait>
   1a554:	3c01      	subs	r4, #1
   1a556:	d1f6      	bne.n	1a546 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1a558:	2100      	movs	r1, #0
   1a55a:	2021      	movs	r0, #33	; 0x21
   1a55c:	f001 fe62 	bl	1c224 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a560:	e7f0      	b.n	1a544 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1a562:	f384 8811 	msr	BASEPRI, r4
   1a566:	f3bf 8f6f 	isb	sy
}
   1a56a:	e7f5      	b.n	1a558 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1a56c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a570:	f3ef 8411 	mrs	r4, BASEPRI
   1a574:	f383 8811 	msr	BASEPRI, r3
   1a578:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1a57c:	4630      	mov	r0, r6
   1a57e:	f005 f82c 	bl	1f5da <is_tx_ready>
   1a582:	2800      	cmp	r0, #0
   1a584:	d0ed      	beq.n	1a562 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1a586:	f807 8f10 	strb.w	r8, [r7, #16]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1a58a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a58c:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a58e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a592:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a596:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1a59a:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1a59e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1a5a2:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a5a6:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1a5a8:	f384 8811 	msr	BASEPRI, r4
   1a5ac:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1a5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a5b4:	20002ffb 	.word	0x20002ffb

0001a5b8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1a5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5ba:	2200      	movs	r2, #0
   1a5bc:	4605      	mov	r5, r0
   1a5be:	2101      	movs	r1, #1
   1a5c0:	2002      	movs	r0, #2
   1a5c2:	f7fa f9a3 	bl	1490c <z_arm_irq_priority_set>
   1a5c6:	2002      	movs	r0, #2
   1a5c8:	f7fa f990 	bl	148ec <arch_irq_enable>
	return config->uarte_regs;
   1a5cc:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1a5ce:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   1a5d0:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   1a5d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a5d6:	2200      	movs	r2, #0
   1a5d8:	2140      	movs	r1, #64	; 0x40
   1a5da:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.TXD = pseltxd;
   1a5de:	2006      	movs	r0, #6
	data->dev = dev;
   1a5e0:	6035      	str	r5, [r6, #0]
   1a5e2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a5e6:	2103      	movs	r1, #3
   1a5e8:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1a5ec:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1a5f0:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1a5f4:	2008      	movs	r0, #8
   1a5f6:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
   1a5fa:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
   1a5fe:	2220      	movs	r2, #32
   1a600:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a604:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1a608:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RTS = pselrts;
   1a60a:	2305      	movs	r3, #5
   1a60c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1a610:	2307      	movs	r3, #7
   1a612:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1a616:	3104      	adds	r1, #4
   1a618:	4628      	mov	r0, r5
   1a61a:	f7ff feb1 	bl	1a380 <uarte_nrfx_configure>
	if (err) {
   1a61e:	4607      	mov	r7, r0
   1a620:	b9a8      	cbnz	r0, 1a64e <uarte_0_init+0x96>
	if (get_dev_config(dev)->ppi_endtx) {
   1a622:	686b      	ldr	r3, [r5, #4]
   1a624:	799b      	ldrb	r3, [r3, #6]
   1a626:	b33b      	cbz	r3, 1a678 <uarte_0_init+0xc0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1a628:	f106 0012 	add.w	r0, r6, #18
   1a62c:	f000 ff28 	bl	1b480 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1a630:	4b22      	ldr	r3, [pc, #136]	; (1a6bc <uarte_0_init+0x104>)
   1a632:	4298      	cmp	r0, r3
   1a634:	d00d      	beq.n	1a652 <uarte_0_init+0x9a>
   1a636:	4b22      	ldr	r3, [pc, #136]	; (1a6c0 <uarte_0_init+0x108>)
   1a638:	4922      	ldr	r1, [pc, #136]	; (1a6c4 <uarte_0_init+0x10c>)
		LOG_ERR("Failed to allocate PPI Channel");
   1a63a:	4823      	ldr	r0, [pc, #140]	; (1a6c8 <uarte_0_init+0x110>)
   1a63c:	1ac9      	subs	r1, r1, r3
   1a63e:	08c9      	lsrs	r1, r1, #3
   1a640:	0189      	lsls	r1, r1, #6
   1a642:	f041 0101 	orr.w	r1, r1, #1
   1a646:	f002 fed8 	bl	1d3fa <log_0>
		return -EIO;
   1a64a:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   1a64e:	4638      	mov	r0, r7
   1a650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1a652:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1a654:	00c3      	lsls	r3, r0, #3
   1a656:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a65a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1a65e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1a662:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a666:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a66a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1a66e:	4a17      	ldr	r2, [pc, #92]	; (1a6cc <uarte_0_init+0x114>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1a670:	2301      	movs	r3, #1
   1a672:	4083      	lsls	r3, r0
   1a674:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a678:	2308      	movs	r3, #8
   1a67a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a67e:	2300      	movs	r3, #0
   1a680:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1a684:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1a688:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a68c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a690:	2301      	movs	r3, #1
   1a692:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a696:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1a698:	686b      	ldr	r3, [r5, #4]
   1a69a:	799b      	ldrb	r3, [r3, #6]
   1a69c:	b91b      	cbnz	r3, 1a6a6 <uarte_0_init+0xee>
    p_reg->INTENSET = mask;
   1a69e:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a6a2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1a6a6:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1a6a8:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a6aa:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a6ae:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a6b2:	2301      	movs	r3, #1
   1a6b4:	60a3      	str	r3, [r4, #8]
   1a6b6:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1a6b8:	e7c9      	b.n	1a64e <uarte_0_init+0x96>
   1a6ba:	bf00      	nop
   1a6bc:	0bad0000 	.word	0x0bad0000
   1a6c0:	00020308 	.word	0x00020308
   1a6c4:	000203a8 	.word	0x000203a8
   1a6c8:	0002206c 	.word	0x0002206c
   1a6cc:	4001f000 	.word	0x4001f000

0001a6d0 <rng_driver_isr>:
		return errcode;
	}
}

static void rng_driver_isr(void *param)
{
   1a6d0:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	sdc_RNG_IRQHandler();
   1a6d2:	f7f4 fd46 	bl	f162 <sdc_RNG_IRQHandler>
	z_impl_k_sem_give(sem);
   1a6d6:	4802      	ldr	r0, [pc, #8]	; (1a6e0 <rng_driver_isr+0x10>)

	/* This sema wakes up the pending client buffer to fill it with new
	 * random values.
	 */
	k_sem_give(&rng_data.sem_sync);
}
   1a6d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a6dc:	f001 bdca 	b.w	1c274 <z_impl_k_sem_give>
   1a6e0:	20002600 	.word	0x20002600

0001a6e4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_SEM_DEFINE(mpsl_lock, 1, 1);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1a6e4:	4602      	mov	r2, r0
   1a6e6:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1a6e8:	4801      	ldr	r0, [pc, #4]	; (1a6f0 <multithreading_lock_acquire+0xc>)
   1a6ea:	f001 bde9 	b.w	1c2c0 <z_impl_k_sem_take>
   1a6ee:	bf00      	nop
   1a6f0:	20000780 	.word	0x20000780

0001a6f4 <multithreading_lock_release>:
	z_impl_k_sem_give(sem);
   1a6f4:	4801      	ldr	r0, [pc, #4]	; (1a6fc <multithreading_lock_release+0x8>)
   1a6f6:	f001 bdbd 	b.w	1c274 <z_impl_k_sem_give>
   1a6fa:	bf00      	nop
   1a6fc:	20000780 	.word	0x20000780

0001a700 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1a700:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1a702:	f7f9 f8ff 	bl	13904 <z_impl_log_panic>
   1a706:	4b06      	ldr	r3, [pc, #24]	; (1a720 <k_sys_fatal_error_handler+0x20>)
   1a708:	4906      	ldr	r1, [pc, #24]	; (1a724 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1a70a:	4807      	ldr	r0, [pc, #28]	; (1a728 <k_sys_fatal_error_handler+0x28>)
   1a70c:	1ac9      	subs	r1, r1, r3
   1a70e:	08c9      	lsrs	r1, r1, #3
   1a710:	0189      	lsls	r1, r1, #6
   1a712:	f041 0101 	orr.w	r1, r1, #1
   1a716:	f002 fe70 	bl	1d3fa <log_0>
	sys_arch_reboot(0);
   1a71a:	2000      	movs	r0, #0
   1a71c:	f7fa fd48 	bl	151b0 <sys_arch_reboot>

	CODE_UNREACHABLE;
   1a720:	00020308 	.word	0x00020308
   1a724:	00020350 	.word	0x00020350
   1a728:	0002209f 	.word	0x0002209f

0001a72c <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1a72c:	b538      	push	{r3, r4, r5, lr}
   1a72e:	4b0b      	ldr	r3, [pc, #44]	; (1a75c <sdc_assertion_handler+0x30>)
   1a730:	4c0b      	ldr	r4, [pc, #44]	; (1a760 <sdc_assertion_handler+0x34>)
   1a732:	1ae4      	subs	r4, r4, r3
   1a734:	460d      	mov	r5, r1
   1a736:	08e4      	lsrs	r4, r4, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1a738:	f7f8 ff62 	bl	13600 <log_strdup>
   1a73c:	01a4      	lsls	r4, r4, #6
   1a73e:	f044 0401 	orr.w	r4, r4, #1
   1a742:	4601      	mov	r1, r0
   1a744:	4623      	mov	r3, r4
   1a746:	4807      	ldr	r0, [pc, #28]	; (1a764 <sdc_assertion_handler+0x38>)
   1a748:	462a      	mov	r2, r5
   1a74a:	f002 fe77 	bl	1d43c <log_2>
	k_oops();
   1a74e:	4040      	eors	r0, r0
   1a750:	f380 8811 	msr	BASEPRI, r0
   1a754:	f04f 0003 	mov.w	r0, #3
   1a758:	df02      	svc	2
}
   1a75a:	bd38      	pop	{r3, r4, r5, pc}
   1a75c:	00020308 	.word	0x00020308
   1a760:	00020398 	.word	0x00020398
   1a764:	000220bc 	.word	0x000220bc

0001a768 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1a768:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1a76a:	4804      	ldr	r0, [pc, #16]	; (1a77c <hci_driver_init+0x14>)
   1a76c:	f7fb ffe8 	bl	16740 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1a770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1a774:	4802      	ldr	r0, [pc, #8]	; (1a780 <hci_driver_init+0x18>)
   1a776:	f7e9 ba05 	b.w	3b84 <sdc_init>
   1a77a:	bf00      	nop
   1a77c:	00020970 	.word	0x00020970
   1a780:	0001a72d 	.word	0x0001a72d

0001a784 <hci_driver_open>:
{
   1a784:	b530      	push	{r4, r5, lr}
   1a786:	b08f      	sub	sp, #60	; 0x3c
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a788:	2200      	movs	r2, #0
   1a78a:	2300      	movs	r3, #0
   1a78c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a790:	2400      	movs	r4, #0
   1a792:	f06f 0309 	mvn.w	r3, #9
   1a796:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1a79a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a79e:	4b3f      	ldr	r3, [pc, #252]	; (1a89c <hci_driver_open+0x118>)
   1a7a0:	493f      	ldr	r1, [pc, #252]	; (1a8a0 <hci_driver_open+0x11c>)
   1a7a2:	9400      	str	r4, [sp, #0]
   1a7a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a7a8:	483e      	ldr	r0, [pc, #248]	; (1a8a4 <hci_driver_open+0x120>)
   1a7aa:	f001 fdfd 	bl	1c3a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1a7ae:	493e      	ldr	r1, [pc, #248]	; (1a8a8 <hci_driver_open+0x124>)
   1a7b0:	483c      	ldr	r0, [pc, #240]	; (1a8a4 <hci_driver_open+0x120>)
   1a7b2:	4d3e      	ldr	r5, [pc, #248]	; (1a8ac <hci_driver_open+0x128>)
   1a7b4:	f005 fa2d 	bl	1fc12 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1a7b8:	a809      	add	r0, sp, #36	; 0x24
   1a7ba:	f7e9 f985 	bl	3ac8 <sdc_build_revision_get>
   1a7be:	4b3c      	ldr	r3, [pc, #240]	; (1a8b0 <hci_driver_open+0x12c>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1a7c0:	483c      	ldr	r0, [pc, #240]	; (1a8b4 <hci_driver_open+0x130>)
   1a7c2:	1aed      	subs	r5, r5, r3
   1a7c4:	08ed      	lsrs	r5, r5, #3
   1a7c6:	01ad      	lsls	r5, r5, #6
   1a7c8:	f045 0303 	orr.w	r3, r5, #3
   1a7cc:	2214      	movs	r2, #20
   1a7ce:	a909      	add	r1, sp, #36	; 0x24
   1a7d0:	f002 fe74 	bl	1d4bc <log_hexdump>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a7d4:	aa08      	add	r2, sp, #32
   1a7d6:	2101      	movs	r1, #1
   1a7d8:	4620      	mov	r0, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   1a7da:	f88d 4020 	strb.w	r4, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a7de:	f7e9 f981 	bl	3ae4 <sdc_cfg_set>
	if (required_memory < 0) {
   1a7e2:	2800      	cmp	r0, #0
   1a7e4:	db2f      	blt.n	1a846 <hci_driver_open+0xc2>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1a7e6:	2301      	movs	r3, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a7e8:	aa08      	add	r2, sp, #32
   1a7ea:	2102      	movs	r1, #2
   1a7ec:	4620      	mov	r0, r4
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1a7ee:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a7f2:	f7e9 f977 	bl	3ae4 <sdc_cfg_set>
	if (required_memory < 0) {
   1a7f6:	2800      	cmp	r0, #0
   1a7f8:	db25      	blt.n	1a846 <hci_driver_open+0xc2>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1a7fa:	4b2f      	ldr	r3, [pc, #188]	; (1a8b8 <hci_driver_open+0x134>)
   1a7fc:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a7fe:	aa08      	add	r2, sp, #32
   1a800:	2103      	movs	r1, #3
   1a802:	4620      	mov	r0, r4
   1a804:	f7e9 f96e 	bl	3ae4 <sdc_cfg_set>
	if (required_memory < 0) {
   1a808:	2800      	cmp	r0, #0
   1a80a:	db1c      	blt.n	1a846 <hci_driver_open+0xc2>
	cfg.event_length.event_length_us =
   1a80c:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a810:	aa08      	add	r2, sp, #32
   1a812:	2104      	movs	r1, #4
   1a814:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1a816:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a818:	f7e9 f964 	bl	3ae4 <sdc_cfg_set>
	if (required_memory < 0) {
   1a81c:	2800      	cmp	r0, #0
   1a81e:	db12      	blt.n	1a846 <hci_driver_open+0xc2>
	if (required_memory > sizeof(sdc_mempool)) {
   1a820:	f5b0 7f71 	cmp.w	r0, #964	; 0x3c4
   1a824:	dd11      	ble.n	1a84a <hci_driver_open+0xc6>
		BT_ERR("Allocated memory too low: %u < %u",
   1a826:	4602      	mov	r2, r0
   1a828:	f045 0301 	orr.w	r3, r5, #1
   1a82c:	4823      	ldr	r0, [pc, #140]	; (1a8bc <hci_driver_open+0x138>)
   1a82e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1a832:	f002 fe03 	bl	1d43c <log_2>
		k_panic();
   1a836:	4040      	eors	r0, r0
   1a838:	f380 8811 	msr	BASEPRI, r0
   1a83c:	f04f 0004 	mov.w	r0, #4
   1a840:	df02      	svc	2
		return -ENOMEM;
   1a842:	f06f 000b 	mvn.w	r0, #11
}
   1a846:	b00f      	add	sp, #60	; 0x3c
   1a848:	bd30      	pop	{r4, r5, pc}
			err = sdc_support_adv();
   1a84a:	f7e9 fa15 	bl	3c78 <sdc_support_adv>
			if (err) {
   1a84e:	b110      	cbz	r0, 1a856 <hci_driver_open+0xd2>
				return -ENOTSUP;
   1a850:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a854:	e7f7      	b.n	1a846 <hci_driver_open+0xc2>
		err = sdc_support_slave();
   1a856:	f7e9 fa47 	bl	3ce8 <sdc_support_slave>
		if (err) {
   1a85a:	2800      	cmp	r0, #0
   1a85c:	d1f8      	bne.n	1a850 <hci_driver_open+0xcc>
		err = sdc_support_dle();
   1a85e:	f7e9 fa19 	bl	3c94 <sdc_support_dle>
		if (err) {
   1a862:	2800      	cmp	r0, #0
   1a864:	d1f4      	bne.n	1a850 <hci_driver_open+0xcc>
		err = sdc_support_le_2m_phy();
   1a866:	f7e9 fa23 	bl	3cb0 <sdc_support_le_2m_phy>
		if (err) {
   1a86a:	2800      	cmp	r0, #0
   1a86c:	d1f0      	bne.n	1a850 <hci_driver_open+0xcc>
		err = sdc_support_le_coded_phy();
   1a86e:	f7e9 fa2d 	bl	3ccc <sdc_support_le_coded_phy>
		if (err) {
   1a872:	2800      	cmp	r0, #0
   1a874:	d1ec      	bne.n	1a850 <hci_driver_open+0xcc>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1a876:	f04f 30ff 	mov.w	r0, #4294967295
   1a87a:	f04f 31ff 	mov.w	r1, #4294967295
   1a87e:	f7ff ff31 	bl	1a6e4 <multithreading_lock_acquire>
	if (!err) {
   1a882:	4604      	mov	r4, r0
   1a884:	b930      	cbnz	r0, 1a894 <hci_driver_open+0x110>
		err = sdc_enable(host_signal, sdc_mempool);
   1a886:	490e      	ldr	r1, [pc, #56]	; (1a8c0 <hci_driver_open+0x13c>)
   1a888:	480e      	ldr	r0, [pc, #56]	; (1a8c4 <hci_driver_open+0x140>)
   1a88a:	f7e9 f957 	bl	3b3c <sdc_enable>
   1a88e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a890:	f7ff ff30 	bl	1a6f4 <multithreading_lock_release>
	if (err < 0) {
   1a894:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1a898:	e7d5      	b.n	1a846 <hci_driver_open+0xc2>
   1a89a:	bf00      	nop
   1a89c:	0001a8c9 	.word	0x0001a8c9
   1a8a0:	20003d60 	.word	0x20003d60
   1a8a4:	200020d0 	.word	0x200020d0
   1a8a8:	000220e1 	.word	0x000220e1
   1a8ac:	00020398 	.word	0x00020398
   1a8b0:	00020308 	.word	0x00020308
   1a8b4:	000220e8 	.word	0x000220e8
   1a8b8:	03031b1b 	.word	0x03031b1b
   1a8bc:	0002210f 	.word	0x0002210f
   1a8c0:	20002bea 	.word	0x20002bea
   1a8c4:	0001a9e5 	.word	0x0001a9e5

0001a8c8 <recv_thread>:
{
   1a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8cc:	4b3f      	ldr	r3, [pc, #252]	; (1a9cc <recv_thread+0x104>)
   1a8ce:	4e40      	ldr	r6, [pc, #256]	; (1a9d0 <recv_thread+0x108>)
	return z_impl_k_sem_take(sem, timeout);
   1a8d0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1a9e0 <recv_thread+0x118>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1a8d4:	4d3f      	ldr	r5, [pc, #252]	; (1a9d4 <recv_thread+0x10c>)
   1a8d6:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   1a8d8:	2700      	movs	r7, #0
   1a8da:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   1a8dc:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   1a8de:	b93c      	cbnz	r4, 1a8f0 <recv_thread+0x28>
   1a8e0:	b937      	cbnz	r7, 1a8f0 <recv_thread+0x28>
   1a8e2:	f04f 32ff 	mov.w	r2, #4294967295
   1a8e6:	f04f 33ff 	mov.w	r3, #4294967295
   1a8ea:	4640      	mov	r0, r8
   1a8ec:	f001 fce8 	bl	1c2c0 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a8f0:	f04f 30ff 	mov.w	r0, #4294967295
   1a8f4:	f04f 31ff 	mov.w	r1, #4294967295
   1a8f8:	f7ff fef4 	bl	1a6e4 <multithreading_lock_acquire>
	if (!errcode) {
   1a8fc:	b160      	cbz	r0, 1a918 <recv_thread+0x50>
		return false;
   1a8fe:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a900:	f04f 30ff 	mov.w	r0, #4294967295
   1a904:	f04f 31ff 	mov.w	r1, #4294967295
   1a908:	f7ff feec 	bl	1a6e4 <multithreading_lock_acquire>
	if (!errcode) {
   1a90c:	2800      	cmp	r0, #0
   1a90e:	d03a      	beq.n	1a986 <recv_thread+0xbe>
		return false;
   1a910:	2700      	movs	r7, #0
	z_impl_k_yield();
   1a912:	f001 fc39 	bl	1c188 <z_impl_k_yield>
}
   1a916:	e7e2      	b.n	1a8de <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1a918:	482e      	ldr	r0, [pc, #184]	; (1a9d4 <recv_thread+0x10c>)
   1a91a:	f000 fbc5 	bl	1b0a8 <hci_internal_evt_get>
   1a91e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a920:	f7ff fee8 	bl	1a6f4 <multithreading_lock_release>
	if (errcode) {
   1a924:	2c00      	cmp	r4, #0
   1a926:	d1ea      	bne.n	1a8fe <recv_thread+0x36>
	switch (hdr->evt) {
   1a928:	7828      	ldrb	r0, [r5, #0]
   1a92a:	283e      	cmp	r0, #62	; 0x3e
   1a92c:	d007      	beq.n	1a93e <recv_thread+0x76>
   1a92e:	28ff      	cmp	r0, #255	; 0xff
   1a930:	d01c      	beq.n	1a96c <recv_thread+0xa4>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a932:	f04f 32ff 	mov.w	r2, #4294967295
   1a936:	f04f 33ff 	mov.w	r3, #4294967295
   1a93a:	2400      	movs	r4, #0
   1a93c:	e007      	b.n	1a94e <recv_thread+0x86>
		switch (me->subevent) {
   1a93e:	78ab      	ldrb	r3, [r5, #2]
   1a940:	2b02      	cmp	r3, #2
   1a942:	d001      	beq.n	1a948 <recv_thread+0x80>
   1a944:	2b0d      	cmp	r3, #13
		switch (subevent) {
   1a946:	d1f4      	bne.n	1a932 <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a948:	2200      	movs	r2, #0
   1a94a:	2300      	movs	r3, #0
   1a94c:	2401      	movs	r4, #1
   1a94e:	4621      	mov	r1, r4
   1a950:	f7fa fd22 	bl	15398 <bt_buf_get_evt>
	if (!evt_buf) {
   1a954:	4607      	mov	r7, r0
   1a956:	b960      	cbnz	r0, 1a972 <recv_thread+0xaa>
		if (discardable) {
   1a958:	2c00      	cmp	r4, #0
   1a95a:	d1d1      	bne.n	1a900 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1a95c:	01b1      	lsls	r1, r6, #6
   1a95e:	481e      	ldr	r0, [pc, #120]	; (1a9d8 <recv_thread+0x110>)
   1a960:	f041 0101 	orr.w	r1, r1, #1
   1a964:	f002 fd49 	bl	1d3fa <log_0>
	return true;
   1a968:	2401      	movs	r4, #1
   1a96a:	e7c9      	b.n	1a900 <recv_thread+0x38>
		switch (subevent) {
   1a96c:	78ab      	ldrb	r3, [r5, #2]
   1a96e:	2b80      	cmp	r3, #128	; 0x80
   1a970:	e7e9      	b.n	1a946 <recv_thread+0x7e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1a972:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a974:	4629      	mov	r1, r5
   1a976:	3202      	adds	r2, #2
   1a978:	3008      	adds	r0, #8
   1a97a:	f004 fd62 	bl	1f442 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1a97e:	4638      	mov	r0, r7
   1a980:	f7fb feaa 	bl	166d8 <bt_recv>
   1a984:	e7f0      	b.n	1a968 <recv_thread+0xa0>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1a986:	4813      	ldr	r0, [pc, #76]	; (1a9d4 <recv_thread+0x10c>)
   1a988:	f7f4 fee1 	bl	f74e <sdc_hci_data_get>
   1a98c:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1a98e:	f7ff feb1 	bl	1a6f4 <multithreading_lock_release>
	if (errcode) {
   1a992:	2f00      	cmp	r7, #0
   1a994:	d1bc      	bne.n	1a910 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1a996:	f04f 32ff 	mov.w	r2, #4294967295
   1a99a:	f04f 33ff 	mov.w	r3, #4294967295
   1a99e:	2003      	movs	r0, #3
   1a9a0:	f7fa fcc4 	bl	1532c <bt_buf_get_rx>
	if (!data_buf) {
   1a9a4:	4607      	mov	r7, r0
   1a9a6:	b938      	cbnz	r0, 1a9b8 <recv_thread+0xf0>
		BT_ERR("No data buffer available");
   1a9a8:	01b1      	lsls	r1, r6, #6
   1a9aa:	480c      	ldr	r0, [pc, #48]	; (1a9dc <recv_thread+0x114>)
   1a9ac:	f041 0101 	orr.w	r1, r1, #1
   1a9b0:	f002 fd23 	bl	1d3fa <log_0>
	return true;
   1a9b4:	2701      	movs	r7, #1
   1a9b6:	e7ac      	b.n	1a912 <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1a9b8:	886a      	ldrh	r2, [r5, #2]
   1a9ba:	4629      	mov	r1, r5
   1a9bc:	3204      	adds	r2, #4
   1a9be:	3008      	adds	r0, #8
   1a9c0:	f004 fd3f 	bl	1f442 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1a9c4:	4638      	mov	r0, r7
   1a9c6:	f7fb fe87 	bl	166d8 <bt_recv>
   1a9ca:	e7f3      	b.n	1a9b4 <recv_thread+0xec>
   1a9cc:	00020308 	.word	0x00020308
   1a9d0:	00020398 	.word	0x00020398
   1a9d4:	20002b9e 	.word	0x20002b9e
   1a9d8:	00022131 	.word	0x00022131
   1a9dc:	0002214b 	.word	0x0002214b
   1a9e0:	20000798 	.word	0x20000798

0001a9e4 <host_signal>:
	z_impl_k_sem_give(sem);
   1a9e4:	4801      	ldr	r0, [pc, #4]	; (1a9ec <host_signal+0x8>)
   1a9e6:	f001 bc45 	b.w	1c274 <z_impl_k_sem_give>
   1a9ea:	bf00      	nop
   1a9ec:	20000798 	.word	0x20000798

0001a9f0 <hci_driver_send>:
{
   1a9f0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1a9f2:	8983      	ldrh	r3, [r0, #12]
{
   1a9f4:	4605      	mov	r5, r0
	if (!buf->len) {
   1a9f6:	b383      	cbz	r3, 1aa5a <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1a9f8:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1a9fa:	b1ab      	cbz	r3, 1aa28 <hci_driver_send+0x38>
   1a9fc:	2b02      	cmp	r3, #2
   1a9fe:	d12c      	bne.n	1aa5a <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1aa00:	f04f 30ff 	mov.w	r0, #4294967295
   1aa04:	f04f 31ff 	mov.w	r1, #4294967295
   1aa08:	f7ff fe6c 	bl	1a6e4 <multithreading_lock_acquire>
	if (!errcode) {
   1aa0c:	4604      	mov	r4, r0
   1aa0e:	b948      	cbnz	r0, 1aa24 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1aa10:	68a8      	ldr	r0, [r5, #8]
   1aa12:	f7f4 fea9 	bl	f768 <sdc_hci_data_put>
   1aa16:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1aa18:	f7ff fe6c 	bl	1a6f4 <multithreading_lock_release>
		if (errcode) {
   1aa1c:	b1c4      	cbz	r4, 1aa50 <hci_driver_send+0x60>
   1aa1e:	4810      	ldr	r0, [pc, #64]	; (1aa60 <hci_driver_send+0x70>)
   1aa20:	f001 fc28 	bl	1c274 <z_impl_k_sem_give>
}
   1aa24:	4620      	mov	r0, r4
   1aa26:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1aa28:	f04f 30ff 	mov.w	r0, #4294967295
   1aa2c:	f04f 31ff 	mov.w	r1, #4294967295
   1aa30:	f7ff fe58 	bl	1a6e4 <multithreading_lock_acquire>
	if (!errcode) {
   1aa34:	4604      	mov	r4, r0
   1aa36:	2800      	cmp	r0, #0
   1aa38:	d1f4      	bne.n	1aa24 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1aa3a:	68a8      	ldr	r0, [r5, #8]
   1aa3c:	f000 f812 	bl	1aa64 <hci_internal_cmd_put>
   1aa40:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1aa42:	f7ff fe57 	bl	1a6f4 <multithreading_lock_release>
	if (errcode) {
   1aa46:	2c00      	cmp	r4, #0
   1aa48:	d1ec      	bne.n	1aa24 <hci_driver_send+0x34>
   1aa4a:	4805      	ldr	r0, [pc, #20]	; (1aa60 <hci_driver_send+0x70>)
   1aa4c:	f001 fc12 	bl	1c274 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1aa50:	4628      	mov	r0, r5
   1aa52:	f7ff fa97 	bl	19f84 <net_buf_unref>
   1aa56:	2400      	movs	r4, #0
   1aa58:	e7e4      	b.n	1aa24 <hci_driver_send+0x34>
	switch (type) {
   1aa5a:	f06f 0415 	mvn.w	r4, #21
   1aa5e:	e7e1      	b.n	1aa24 <hci_driver_send+0x34>
   1aa60:	20000798 	.word	0x20000798

0001aa64 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1aa64:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1aa66:	4c94      	ldr	r4, [pc, #592]	; (1acb8 <hci_internal_cmd_put+0x254>)
   1aa68:	7823      	ldrb	r3, [r4, #0]
   1aa6a:	2b00      	cmp	r3, #0
   1aa6c:	f040 8316 	bne.w	1b09c <hci_internal_cmd_put+0x638>
	return ((uint16_t)src[1] << 8) | src[0];
   1aa70:	7843      	ldrb	r3, [r0, #1]
   1aa72:	7805      	ldrb	r5, [r0, #0]
   1aa74:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1aa78:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1aa7c:	b22e      	sxth	r6, r5
   1aa7e:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1aa82:	d20d      	bcs.n	1aaa0 <hci_internal_cmd_put+0x3c>
   1aa84:	b17b      	cbz	r3, 1aaa6 <hci_internal_cmd_put+0x42>
   1aa86:	3b01      	subs	r3, #1
   1aa88:	2b07      	cmp	r3, #7
   1aa8a:	d80c      	bhi.n	1aaa6 <hci_internal_cmd_put+0x42>
   1aa8c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1aa90:	000b000e 	.word	0x000b000e
   1aa94:	0060002c 	.word	0x0060002c
   1aa98:	000b0109 	.word	0x000b0109
   1aa9c:	0118000b 	.word	0x0118000b
   1aaa0:	2b3f      	cmp	r3, #63	; 0x3f
   1aaa2:	f000 823f 	beq.w	1af24 <hci_internal_cmd_put+0x4c0>
   1aaa6:	2304      	movs	r3, #4
   1aaa8:	2001      	movs	r0, #1
   1aaaa:	e282      	b.n	1afb2 <hci_internal_cmd_put+0x54e>
	switch (opcode)	{
   1aaac:	f240 4306 	movw	r3, #1030	; 0x406
   1aab0:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1aab2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1aab6:	d005      	beq.n	1aac4 <hci_internal_cmd_put+0x60>
   1aab8:	f240 431d 	movw	r3, #1053	; 0x41d
   1aabc:	429e      	cmp	r6, r3
   1aabe:	d010      	beq.n	1aae2 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1aac0:	2001      	movs	r0, #1
   1aac2:	e001      	b.n	1aac8 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1aac4:	f7f4 ff6d 	bl	f9a2 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1aac8:	230f      	movs	r3, #15
   1aaca:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1aacc:	2304      	movs	r3, #4
   1aace:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1aad0:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1aad2:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1aad4:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1aad6:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1aada:	2301      	movs	r3, #1
   1aadc:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1aade:	2000      	movs	r0, #0
}
   1aae0:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1aae2:	f7f4 ff60 	bl	f9a6 <sdc_hci_cmd_lc_read_remote_version_information>
   1aae6:	e7ef      	b.n	1aac8 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1aae8:	f640 4363 	movw	r3, #3171	; 0xc63
   1aaec:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1aaee:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1aaf2:	d025      	beq.n	1ab40 <hci_internal_cmd_put+0xdc>
   1aaf4:	dc0f      	bgt.n	1ab16 <hci_internal_cmd_put+0xb2>
   1aaf6:	f640 4303 	movw	r3, #3075	; 0xc03
   1aafa:	429e      	cmp	r6, r3
   1aafc:	d018      	beq.n	1ab30 <hci_internal_cmd_put+0xcc>
   1aafe:	f640 432d 	movw	r3, #3117	; 0xc2d
   1ab02:	429e      	cmp	r6, r3
   1ab04:	d017      	beq.n	1ab36 <hci_internal_cmd_put+0xd2>
   1ab06:	f640 4301 	movw	r3, #3073	; 0xc01
   1ab0a:	429e      	cmp	r6, r3
   1ab0c:	d1d8      	bne.n	1aac0 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1ab0e:	f7f4 fe47 	bl	f7a0 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1ab12:	2304      	movs	r3, #4
   1ab14:	e0ba      	b.n	1ac8c <hci_internal_cmd_put+0x228>
	switch (opcode)	{
   1ab16:	f640 437b 	movw	r3, #3195	; 0xc7b
   1ab1a:	429e      	cmp	r6, r3
   1ab1c:	d013      	beq.n	1ab46 <hci_internal_cmd_put+0xe2>
   1ab1e:	f640 437c 	movw	r3, #3196	; 0xc7c
   1ab22:	429e      	cmp	r6, r3
   1ab24:	d1cc      	bne.n	1aac0 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1ab26:	4965      	ldr	r1, [pc, #404]	; (1acbc <hci_internal_cmd_put+0x258>)
   1ab28:	f7f4 fe44 	bl	f7b4 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1ab2c:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1ab2e:	e0ad      	b.n	1ac8c <hci_internal_cmd_put+0x228>
		return sdc_hci_cmd_cb_reset();
   1ab30:	f7e9 fa20 	bl	3f74 <sdc_hci_cmd_cb_reset>
   1ab34:	e7ed      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1ab36:	4961      	ldr	r1, [pc, #388]	; (1acbc <hci_internal_cmd_put+0x258>)
   1ab38:	f7f4 fe30 	bl	f79c <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1ab3c:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1ab3e:	e0a5      	b.n	1ac8c <hci_internal_cmd_put+0x228>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1ab40:	f7f4 fe33 	bl	f7aa <sdc_hci_cmd_cb_set_event_mask_page_2>
   1ab44:	e7e5      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1ab46:	495d      	ldr	r1, [pc, #372]	; (1acbc <hci_internal_cmd_put+0x258>)
   1ab48:	f7f4 fe26 	bl	f798 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1ab4c:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1ab4e:	e09d      	b.n	1ac8c <hci_internal_cmd_put+0x228>
	switch (opcode)	{
   1ab50:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1ab54:	3e01      	subs	r6, #1
   1ab56:	2e08      	cmp	r6, #8
   1ab58:	d8b2      	bhi.n	1aac0 <hci_internal_cmd_put+0x5c>
   1ab5a:	a301      	add	r3, pc, #4	; (adr r3, 1ab60 <hci_internal_cmd_put+0xfc>)
   1ab5c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1ab60:	0001ab85 	.word	0x0001ab85
   1ab64:	0001ab8f 	.word	0x0001ab8f
   1ab68:	0001ac6d 	.word	0x0001ac6d
   1ab6c:	0001aac1 	.word	0x0001aac1
   1ab70:	0001aac1 	.word	0x0001aac1
   1ab74:	0001aac1 	.word	0x0001aac1
   1ab78:	0001aac1 	.word	0x0001aac1
   1ab7c:	0001aac1 	.word	0x0001aac1
   1ab80:	0001ac85 	.word	0x0001ac85
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1ab84:	484d      	ldr	r0, [pc, #308]	; (1acbc <hci_internal_cmd_put+0x258>)
   1ab86:	f7f4 fec1 	bl	f90c <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1ab8a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1ab8c:	e07e      	b.n	1ac8c <hci_internal_cmd_put+0x228>
	memset(cmds, 0, sizeof(*cmds));
   1ab8e:	484b      	ldr	r0, [pc, #300]	; (1acbc <hci_internal_cmd_put+0x258>)
   1ab90:	222e      	movs	r2, #46	; 0x2e
   1ab92:	2100      	movs	r1, #0
   1ab94:	f003 fa6b 	bl	1e06e <memset>
	cmds->hci_disconnect = 1;
   1ab98:	79e3      	ldrb	r3, [r4, #7]
   1ab9a:	f043 0320 	orr.w	r3, r3, #32
   1ab9e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1aba0:	7a63      	ldrb	r3, [r4, #9]
   1aba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1aba6:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1aba8:	7b23      	ldrb	r3, [r4, #12]
   1abaa:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1abae:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1abb0:	7c63      	ldrb	r3, [r4, #17]
   1abb2:	f043 0304 	orr.w	r3, r3, #4
   1abb6:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1abb8:	7d63      	ldrb	r3, [r4, #21]
   1abba:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1abbe:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1abc2:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1abc4:	7da3      	ldrb	r3, [r4, #22]
   1abc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
   1abca:	f043 0322 	orr.w	r3, r3, #34	; 0x22
   1abce:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1abd0:	7f63      	ldrb	r3, [r4, #29]
   1abd2:	f043 0304 	orr.w	r3, r3, #4
   1abd6:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1abd8:	f894 3020 	ldrb.w	r3, [r4, #32]
   1abdc:	f063 0308 	orn	r3, r3, #8
   1abe0:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1abe4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1abe8:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1abec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1abf0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1abf4:	f063 030c 	orn	r3, r3, #12
   1abf8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1abfc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1ac00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1ac04:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1ac08:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1ac0c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1ac10:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1ac14:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1ac18:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1ac1c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1ac20:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ac24:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1ac28:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1ac2c:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1ac30:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1ac34:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1ac38:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1ac3c:	f063 0301 	orn	r3, r3, #1
   1ac40:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1ac44:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1ac48:	f043 0301 	orr.w	r3, r3, #1
   1ac4c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1ac50:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1ac54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ac58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1ac5c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1ac60:	f043 0304 	orr.w	r3, r3, #4
   1ac64:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   1ac68:	2344      	movs	r3, #68	; 0x44
   1ac6a:	e0e8      	b.n	1ae3e <hci_internal_cmd_put+0x3da>
	memset(features, 0, sizeof(*features));
   1ac6c:	4813      	ldr	r0, [pc, #76]	; (1acbc <hci_internal_cmd_put+0x258>)
   1ac6e:	2208      	movs	r2, #8
   1ac70:	2100      	movs	r1, #0
   1ac72:	f003 f9fc 	bl	1e06e <memset>
	features->bdedr_not_supported = 1;
   1ac76:	7ae3      	ldrb	r3, [r4, #11]
   1ac78:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1ac7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1ac80:	72e3      	strb	r3, [r4, #11]
   1ac82:	e0db      	b.n	1ae3c <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1ac84:	480d      	ldr	r0, [pc, #52]	; (1acbc <hci_internal_cmd_put+0x258>)
   1ac86:	f7f4 fe3f 	bl	f908 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1ac8a:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1ac8c:	2801      	cmp	r0, #1
   1ac8e:	f43f af17 	beq.w	1aac0 <hci_internal_cmd_put+0x5c>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1ac92:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1ac94:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1ac96:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1ac98:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1ac9a:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1ac9c:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1ac9e:	71a0      	strb	r0, [r4, #6]
}
   1aca0:	e71b      	b.n	1aada <hci_internal_cmd_put+0x76>
	switch (opcode)	{
   1aca2:	f241 4305 	movw	r3, #5125	; 0x1405
   1aca6:	429e      	cmp	r6, r3
   1aca8:	f47f af0a 	bne.w	1aac0 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_sp_read_rssi((void *)cmd_params,
   1acac:	4903      	ldr	r1, [pc, #12]	; (1acbc <hci_internal_cmd_put+0x258>)
   1acae:	3003      	adds	r0, #3
   1acb0:	f7f4 fe7b 	bl	f9aa <sdc_hci_cmd_sp_read_rssi>
   1acb4:	e742      	b.n	1ab3c <hci_internal_cmd_put+0xd8>
   1acb6:	bf00      	nop
   1acb8:	20002fae 	.word	0x20002fae
   1acbc:	20002fb5 	.word	0x20002fb5
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1acc0:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1acc4:	3e01      	subs	r6, #1
   1acc6:	3003      	adds	r0, #3
	switch (opcode)	{
   1acc8:	2e4d      	cmp	r6, #77	; 0x4d
   1acca:	f63f aef9 	bhi.w	1aac0 <hci_internal_cmd_put+0x5c>
   1acce:	a301      	add	r3, pc, #4	; (adr r3, 1acd4 <hci_internal_cmd_put+0x270>)
   1acd0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1acd4:	0001ae0d 	.word	0x0001ae0d
   1acd8:	0001ae13 	.word	0x0001ae13
   1acdc:	0001ae1b 	.word	0x0001ae1b
   1ace0:	0001aac1 	.word	0x0001aac1
   1ace4:	0001ae43 	.word	0x0001ae43
   1ace8:	0001ae49 	.word	0x0001ae49
   1acec:	0001ae4f 	.word	0x0001ae4f
   1acf0:	0001ae59 	.word	0x0001ae59
   1acf4:	0001ae5f 	.word	0x0001ae5f
   1acf8:	0001ae65 	.word	0x0001ae65
   1acfc:	0001aac1 	.word	0x0001aac1
   1ad00:	0001aac1 	.word	0x0001aac1
   1ad04:	0001aac1 	.word	0x0001aac1
   1ad08:	0001aac1 	.word	0x0001aac1
   1ad0c:	0001ae6b 	.word	0x0001ae6b
   1ad10:	0001ae73 	.word	0x0001ae73
   1ad14:	0001ae79 	.word	0x0001ae79
   1ad18:	0001ae7f 	.word	0x0001ae7f
   1ad1c:	0001aac1 	.word	0x0001aac1
   1ad20:	0001aac1 	.word	0x0001aac1
   1ad24:	0001ae85 	.word	0x0001ae85
   1ad28:	0001ae8f 	.word	0x0001ae8f
   1ad2c:	0001ae95 	.word	0x0001ae95
   1ad30:	0001ae9f 	.word	0x0001ae9f
   1ad34:	0001aac1 	.word	0x0001aac1
   1ad38:	0001aea7 	.word	0x0001aea7
   1ad3c:	0001aeaf 	.word	0x0001aeaf
   1ad40:	0001aeb7 	.word	0x0001aeb7
   1ad44:	0001aac1 	.word	0x0001aac1
   1ad48:	0001aac1 	.word	0x0001aac1
   1ad4c:	0001aac1 	.word	0x0001aac1
   1ad50:	0001aac1 	.word	0x0001aac1
   1ad54:	0001aac1 	.word	0x0001aac1
   1ad58:	0001aebf 	.word	0x0001aebf
   1ad5c:	0001aec7 	.word	0x0001aec7
   1ad60:	0001aecf 	.word	0x0001aecf
   1ad64:	0001aac1 	.word	0x0001aac1
   1ad68:	0001aac1 	.word	0x0001aac1
   1ad6c:	0001aed5 	.word	0x0001aed5
   1ad70:	0001aedb 	.word	0x0001aedb
   1ad74:	0001aee1 	.word	0x0001aee1
   1ad78:	0001aee7 	.word	0x0001aee7
   1ad7c:	0001aac1 	.word	0x0001aac1
   1ad80:	0001aac1 	.word	0x0001aac1
   1ad84:	0001aeef 	.word	0x0001aeef
   1ad88:	0001aef5 	.word	0x0001aef5
   1ad8c:	0001aefb 	.word	0x0001aefb
   1ad90:	0001af03 	.word	0x0001af03
   1ad94:	0001af0b 	.word	0x0001af0b
   1ad98:	0001af11 	.word	0x0001af11
   1ad9c:	0001aac1 	.word	0x0001aac1
   1ada0:	0001aac1 	.word	0x0001aac1
   1ada4:	0001aac1 	.word	0x0001aac1
   1ada8:	0001aac1 	.word	0x0001aac1
   1adac:	0001aac1 	.word	0x0001aac1
   1adb0:	0001aac1 	.word	0x0001aac1
   1adb4:	0001aac1 	.word	0x0001aac1
   1adb8:	0001aac1 	.word	0x0001aac1
   1adbc:	0001aac1 	.word	0x0001aac1
   1adc0:	0001aac1 	.word	0x0001aac1
   1adc4:	0001aac1 	.word	0x0001aac1
   1adc8:	0001aac1 	.word	0x0001aac1
   1adcc:	0001aac1 	.word	0x0001aac1
   1add0:	0001aac1 	.word	0x0001aac1
   1add4:	0001aac1 	.word	0x0001aac1
   1add8:	0001aac1 	.word	0x0001aac1
   1addc:	0001aac1 	.word	0x0001aac1
   1ade0:	0001aac1 	.word	0x0001aac1
   1ade4:	0001aac1 	.word	0x0001aac1
   1ade8:	0001aac1 	.word	0x0001aac1
   1adec:	0001aac1 	.word	0x0001aac1
   1adf0:	0001aac1 	.word	0x0001aac1
   1adf4:	0001aac1 	.word	0x0001aac1
   1adf8:	0001aac1 	.word	0x0001aac1
   1adfc:	0001af17 	.word	0x0001af17
   1ae00:	0001aac1 	.word	0x0001aac1
   1ae04:	0001aac1 	.word	0x0001aac1
   1ae08:	0001af1f 	.word	0x0001af1f
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1ae0c:	f7f4 fdb8 	bl	f980 <sdc_hci_cmd_le_set_event_mask>
   1ae10:	e67f      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1ae12:	48a4      	ldr	r0, [pc, #656]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1ae14:	f7f4 fd92 	bl	f93c <sdc_hci_cmd_le_read_buffer_size>
   1ae18:	e690      	b.n	1ab3c <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1ae1a:	48a2      	ldr	r0, [pc, #648]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1ae1c:	2205      	movs	r2, #5
   1ae1e:	2100      	movs	r1, #0
   1ae20:	f003 f925 	bl	1e06e <memset>
	features->le_encryption = 1;
   1ae24:	79e3      	ldrb	r3, [r4, #7]
   1ae26:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   1ae2a:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   1ae2e:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1ae30:	7a23      	ldrb	r3, [r4, #8]
   1ae32:	f023 0349 	bic.w	r3, r3, #73	; 0x49
   1ae36:	f043 0349 	orr.w	r3, r3, #73	; 0x49
   1ae3a:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1ae3c:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1ae3e:	2000      	movs	r0, #0
   1ae40:	e727      	b.n	1ac92 <hci_internal_cmd_put+0x22e>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1ae42:	f7f4 fda6 	bl	f992 <sdc_hci_cmd_le_set_random_address>
   1ae46:	e664      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1ae48:	f7f4 fd94 	bl	f974 <sdc_hci_cmd_le_set_adv_params>
   1ae4c:	e661      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1ae4e:	4895      	ldr	r0, [pc, #596]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1ae50:	f7f4 fd72 	bl	f938 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1ae54:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1ae56:	e719      	b.n	1ac8c <hci_internal_cmd_put+0x228>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1ae58:	f7f4 fd88 	bl	f96c <sdc_hci_cmd_le_set_adv_data>
   1ae5c:	e659      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1ae5e:	f7f4 fd9c 	bl	f99a <sdc_hci_cmd_le_set_scan_response_data>
   1ae62:	e656      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1ae64:	f7f4 fd84 	bl	f970 <sdc_hci_cmd_le_set_adv_enable>
   1ae68:	e653      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1ae6a:	488e      	ldr	r0, [pc, #568]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1ae6c:	f7f4 fd76 	bl	f95c <sdc_hci_cmd_le_read_white_list_size>
   1ae70:	e7f0      	b.n	1ae54 <hci_internal_cmd_put+0x3f0>
		return sdc_hci_cmd_le_clear_white_list();
   1ae72:	f7f4 fd53 	bl	f91c <sdc_hci_cmd_le_clear_white_list>
   1ae76:	e64c      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1ae78:	f7f4 fd4c 	bl	f914 <sdc_hci_cmd_le_add_device_to_white_list>
   1ae7c:	e649      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1ae7e:	f7f4 fd71 	bl	f964 <sdc_hci_cmd_le_remove_device_from_white_list>
   1ae82:	e646      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ae84:	4987      	ldr	r1, [pc, #540]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1ae86:	f7f4 fd5b 	bl	f940 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1ae8a:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ae8c:	e6fe      	b.n	1ac8c <hci_internal_cmd_put+0x228>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1ae8e:	f7f4 fd5d 	bl	f94c <sdc_hci_cmd_le_read_remote_features>
   1ae92:	e619      	b.n	1aac8 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ae94:	4983      	ldr	r1, [pc, #524]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1ae96:	f7f4 fd43 	bl	f920 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1ae9a:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ae9c:	e6f6      	b.n	1ac8c <hci_internal_cmd_put+0x228>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1ae9e:	4881      	ldr	r0, [pc, #516]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1aea0:	f7f4 fd48 	bl	f934 <sdc_hci_cmd_le_rand>
   1aea4:	e671      	b.n	1ab8a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1aea6:	497f      	ldr	r1, [pc, #508]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1aea8:	f7f4 fd40 	bl	f92c <sdc_hci_cmd_le_long_term_key_request_reply>
   1aeac:	e63e      	b.n	1ab2c <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1aeae:	497d      	ldr	r1, [pc, #500]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1aeb0:	f7f4 fd38 	bl	f924 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1aeb4:	e63a      	b.n	1ab2c <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1aeb6:	238f      	movs	r3, #143	; 0x8f
   1aeb8:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1aeba:	23c0      	movs	r3, #192	; 0xc0
   1aebc:	e6e0      	b.n	1ac80 <hci_internal_cmd_put+0x21c>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1aebe:	4979      	ldr	r1, [pc, #484]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1aec0:	f7f4 fd5a 	bl	f978 <sdc_hci_cmd_le_set_data_length>
   1aec4:	e632      	b.n	1ab2c <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1aec6:	4877      	ldr	r0, [pc, #476]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1aec8:	f7f4 fd44 	bl	f954 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1aecc:	e63e      	b.n	1ab4c <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1aece:	f7f4 fd66 	bl	f99e <sdc_hci_cmd_le_write_suggested_default_data_length>
   1aed2:	e61e      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1aed4:	f7f4 fd1c 	bl	f910 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1aed8:	e61b      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1aeda:	f7f4 fd41 	bl	f960 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1aede:	e618      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1aee0:	f7f4 fd1a 	bl	f918 <sdc_hci_cmd_le_clear_resolving_list>
   1aee4:	e615      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1aee6:	486f      	ldr	r0, [pc, #444]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1aee8:	f7f4 fd32 	bl	f950 <sdc_hci_cmd_le_read_resolving_list_size>
   1aeec:	e7b2      	b.n	1ae54 <hci_internal_cmd_put+0x3f0>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1aeee:	f7f4 fd3b 	bl	f968 <sdc_hci_cmd_le_set_address_resolution_enable>
   1aef2:	e60e      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1aef4:	f7f4 fd4f 	bl	f996 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1aef8:	e60b      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1aefa:	486a      	ldr	r0, [pc, #424]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1aefc:	f7f4 fd22 	bl	f944 <sdc_hci_cmd_le_read_max_data_length>
   1af00:	e643      	b.n	1ab8a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1af02:	4968      	ldr	r1, [pc, #416]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1af04:	f7f4 fd20 	bl	f948 <sdc_hci_cmd_le_read_phy>
   1af08:	e620      	b.n	1ab4c <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1af0a:	f7f4 fd37 	bl	f97c <sdc_hci_cmd_le_set_default_phy>
   1af0e:	e600      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1af10:	f7f4 fd3b 	bl	f98a <sdc_hci_cmd_le_set_phy>
   1af14:	e5d8      	b.n	1aac8 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1af16:	4863      	ldr	r0, [pc, #396]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1af18:	f7f4 fd1e 	bl	f958 <sdc_hci_cmd_le_read_transmit_power>
   1af1c:	e606      	b.n	1ab2c <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1af1e:	f7f4 fd36 	bl	f98e <sdc_hci_cmd_le_set_privacy_mode>
   1af22:	e5f6      	b.n	1ab12 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1af24:	f64f 430f 	movw	r3, #64527	; 0xfc0f
   1af28:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1af2a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1af2e:	d82b      	bhi.n	1af88 <hci_internal_cmd_put+0x524>
   1af30:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1af34:	f43f adc4 	beq.w	1aac0 <hci_internal_cmd_put+0x5c>
   1af38:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1af3c:	3b01      	subs	r3, #1
   1af3e:	2b0e      	cmp	r3, #14
   1af40:	f63f adbe 	bhi.w	1aac0 <hci_internal_cmd_put+0x5c>
   1af44:	a201      	add	r2, pc, #4	; (adr r2, 1af4c <hci_internal_cmd_put+0x4e8>)
   1af46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1af4a:	bf00      	nop
   1af4c:	0001afab 	.word	0x0001afab
   1af50:	0001afd9 	.word	0x0001afd9
   1af54:	0001aac1 	.word	0x0001aac1
   1af58:	0001aac1 	.word	0x0001aac1
   1af5c:	0001aac1 	.word	0x0001aac1
   1af60:	0001b03b 	.word	0x0001b03b
   1af64:	0001aac1 	.word	0x0001aac1
   1af68:	0001aac1 	.word	0x0001aac1
   1af6c:	0001b031 	.word	0x0001b031
   1af70:	0001aac1 	.word	0x0001aac1
   1af74:	0001aac1 	.word	0x0001aac1
   1af78:	0001aac1 	.word	0x0001aac1
   1af7c:	0001aac1 	.word	0x0001aac1
   1af80:	0001b043 	.word	0x0001b043
   1af84:	0001b04d 	.word	0x0001b04d
   1af88:	f205 23ff 	addw	r3, r5, #767	; 0x2ff
   1af8c:	b29b      	uxth	r3, r3
   1af8e:	2b04      	cmp	r3, #4
   1af90:	f63f ad96 	bhi.w	1aac0 <hci_internal_cmd_put+0x5c>
   1af94:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1af98:	3b01      	subs	r3, #1
   1af9a:	2b04      	cmp	r3, #4
   1af9c:	f63f ad90 	bhi.w	1aac0 <hci_internal_cmd_put+0x5c>
   1afa0:	e8df f003 	tbb	[pc, r3]
   1afa4:	615e5b58 	.word	0x615e5b58
   1afa8:	64          	.byte	0x64
   1afa9:	00          	.byte	0x00
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1afaa:	483e      	ldr	r0, [pc, #248]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1afac:	f7e8 fffa 	bl	3fa4 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1afb0:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1afb2:	f242 0219 	movw	r2, #8217	; 0x2019
   1afb6:	4296      	cmp	r6, r2
   1afb8:	dc68      	bgt.n	1b08c <hci_internal_cmd_put+0x628>
   1afba:	f242 020c 	movw	r2, #8204	; 0x200c
   1afbe:	4296      	cmp	r6, r2
   1afc0:	dc57      	bgt.n	1b072 <hci_internal_cmd_put+0x60e>
   1afc2:	f240 4206 	movw	r2, #1030	; 0x406
   1afc6:	4296      	cmp	r6, r2
   1afc8:	f43f ad7e 	beq.w	1aac8 <hci_internal_cmd_put+0x64>
   1afcc:	f240 421d 	movw	r2, #1053	; 0x41d
   1afd0:	4296      	cmp	r6, r2
   1afd2:	f43f ad79 	beq.w	1aac8 <hci_internal_cmd_put+0x64>
   1afd6:	e659      	b.n	1ac8c <hci_internal_cmd_put+0x228>
	memset(cmds, 0, sizeof(*cmds));
   1afd8:	4832      	ldr	r0, [pc, #200]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1afda:	2202      	movs	r2, #2
   1afdc:	2100      	movs	r1, #0
   1afde:	f003 f846 	bl	1e06e <memset>
	cmds->read_version_info = 1;
   1afe2:	79e3      	ldrb	r3, [r4, #7]
   1afe4:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1afe8:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1afec:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1afee:	7a23      	ldrb	r3, [r4, #8]
   1aff0:	f023 0365 	bic.w	r3, r3, #101	; 0x65
   1aff4:	f043 0365 	orr.w	r3, r3, #101	; 0x65
   1aff8:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1affa:	f242 0319 	movw	r3, #8217	; 0x2019
   1affe:	429e      	cmp	r6, r3
   1b000:	dc0f      	bgt.n	1b022 <hci_internal_cmd_put+0x5be>
   1b002:	f242 030c 	movw	r3, #8204	; 0x200c
   1b006:	429e      	cmp	r6, r3
   1b008:	f73f ae2e 	bgt.w	1ac68 <hci_internal_cmd_put+0x204>
   1b00c:	f240 4306 	movw	r3, #1030	; 0x406
   1b010:	429e      	cmp	r6, r3
   1b012:	d004      	beq.n	1b01e <hci_internal_cmd_put+0x5ba>
   1b014:	f240 431d 	movw	r3, #1053	; 0x41d
   1b018:	429e      	cmp	r6, r3
   1b01a:	f47f ae25 	bne.w	1ac68 <hci_internal_cmd_put+0x204>
   1b01e:	2000      	movs	r0, #0
   1b020:	e552      	b.n	1aac8 <hci_internal_cmd_put+0x64>
   1b022:	f242 0332 	movw	r3, #8242	; 0x2032
   1b026:	429e      	cmp	r6, r3
   1b028:	d0f9      	beq.n	1b01e <hci_internal_cmd_put+0x5ba>
   1b02a:	f242 0343 	movw	r3, #8259	; 0x2043
   1b02e:	e7f3      	b.n	1b018 <hci_internal_cmd_put+0x5b4>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1b030:	481c      	ldr	r0, [pc, #112]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1b032:	f7f4 fc02 	bl	f83a <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1b036:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1b038:	e7bb      	b.n	1afb2 <hci_internal_cmd_put+0x54e>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1b03a:	f7f4 fc52 	bl	f8e2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1b03e:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1b040:	e7b7      	b.n	1afb2 <hci_internal_cmd_put+0x54e>
		return sdc_hci_cmd_vs_zephyr_write_tx_power((void *)cmd_params,
   1b042:	4918      	ldr	r1, [pc, #96]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1b044:	f7f4 fc4f 	bl	f8e6 <sdc_hci_cmd_vs_zephyr_write_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_tx_power_return_t);
   1b048:	2308      	movs	r3, #8
		return sdc_hci_cmd_vs_zephyr_read_tx_power((void *)cmd_params,
   1b04a:	e7b2      	b.n	1afb2 <hci_internal_cmd_put+0x54e>
   1b04c:	4915      	ldr	r1, [pc, #84]	; (1b0a4 <hci_internal_cmd_put+0x640>)
   1b04e:	f7f4 fc3b 	bl	f8c8 <sdc_hci_cmd_vs_zephyr_read_tx_power>
   1b052:	e7f9      	b.n	1b048 <hci_internal_cmd_put+0x5e4>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1b054:	f7f4 fbe4 	bl	f820 <sdc_hci_cmd_vs_llpm_mode_set>
   1b058:	e55b      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1b05a:	f7f4 fbb5 	bl	f7c8 <sdc_hci_cmd_vs_conn_update>
   1b05e:	e558      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1b060:	f7f4 fbaa 	bl	f7b8 <sdc_hci_cmd_vs_conn_event_extend>
   1b064:	e555      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1b066:	f7f4 fbe3 	bl	f830 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1b06a:	e552      	b.n	1ab12 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1b06c:	f7f4 fbd6 	bl	f81c <sdc_hci_cmd_vs_event_length_set>
   1b070:	e54f      	b.n	1ab12 <hci_internal_cmd_put+0xae>
   1b072:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1b076:	3a0d      	subs	r2, #13
   1b078:	2101      	movs	r1, #1
   1b07a:	b292      	uxth	r2, r2
   1b07c:	fa01 f202 	lsl.w	r2, r1, r2
   1b080:	f241 2141 	movw	r1, #4673	; 0x1241
   1b084:	420a      	tst	r2, r1
   1b086:	f43f ae01 	beq.w	1ac8c <hci_internal_cmd_put+0x228>
   1b08a:	e51d      	b.n	1aac8 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1b08c:	f242 0232 	movw	r2, #8242	; 0x2032
   1b090:	4296      	cmp	r6, r2
   1b092:	f43f ad19 	beq.w	1aac8 <hci_internal_cmd_put+0x64>
   1b096:	f242 0243 	movw	r2, #8259	; 0x2043
   1b09a:	e799      	b.n	1afd0 <hci_internal_cmd_put+0x56c>
		return -NRF_EPERM;
   1b09c:	f04f 30ff 	mov.w	r0, #4294967295
   1b0a0:	e51e      	b.n	1aae0 <hci_internal_cmd_put+0x7c>
   1b0a2:	bf00      	nop
   1b0a4:	20002fb5 	.word	0x20002fb5

0001b0a8 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1b0a8:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1b0aa:	4c07      	ldr	r4, [pc, #28]	; (1b0c8 <hci_internal_evt_get+0x20>)
   1b0ac:	7823      	ldrb	r3, [r4, #0]
   1b0ae:	b13b      	cbz	r3, 1b0c0 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1b0b0:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1b0b2:	1c61      	adds	r1, r4, #1
   1b0b4:	3202      	adds	r2, #2
   1b0b6:	f002 ffaf 	bl	1e018 <memcpy>
		cmd_complete_or_status.occurred = false;
   1b0ba:	2000      	movs	r0, #0
   1b0bc:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1b0be:	bd10      	pop	{r4, pc}
   1b0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1b0c4:	f7f4 bb5b 	b.w	f77e <sdc_hci_evt_get>
   1b0c8:	20002fae 	.word	0x20002fae

0001b0cc <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1b0d0:	4c0b      	ldr	r4, [pc, #44]	; (1b100 <bt_rand+0x34>)
   1b0d2:	6823      	ldr	r3, [r4, #0]
{
   1b0d4:	4605      	mov	r5, r0
   1b0d6:	460e      	mov	r6, r1
   1b0d8:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   1b0da:	b13b      	cbz	r3, 1b0ec <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1b0dc:	6838      	ldr	r0, [r7, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1b0de:	6883      	ldr	r3, [r0, #8]
   1b0e0:	b2b2      	uxth	r2, r6
   1b0e2:	4629      	mov	r1, r5
   1b0e4:	681b      	ldr	r3, [r3, #0]
}
   1b0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b0ea:	4718      	bx	r3
   1b0ec:	4805      	ldr	r0, [pc, #20]	; (1b104 <bt_rand+0x38>)
   1b0ee:	f000 fa3f 	bl	1b570 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1b0f2:	6020      	str	r0, [r4, #0]
		if (!dev) {
   1b0f4:	2800      	cmp	r0, #0
   1b0f6:	d1f1      	bne.n	1b0dc <bt_rand+0x10>
}
   1b0f8:	f06f 0012 	mvn.w	r0, #18
   1b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b100:	20002618 	.word	0x20002618
   1b104:	0002209b 	.word	0x0002209b

0001b108 <m_assert_handler>:
	 */
	return 1;
}

static void m_assert_handler(const char *const file, const uint32_t line)
{
   1b108:	b538      	push	{r3, r4, r5, lr}
   1b10a:	4b0b      	ldr	r3, [pc, #44]	; (1b138 <m_assert_handler+0x30>)
   1b10c:	4c0b      	ldr	r4, [pc, #44]	; (1b13c <m_assert_handler+0x34>)
   1b10e:	1ae4      	subs	r4, r4, r3
   1b110:	460d      	mov	r5, r1
   1b112:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1b114:	f7f8 fa74 	bl	13600 <log_strdup>
   1b118:	01a4      	lsls	r4, r4, #6
   1b11a:	f044 0401 	orr.w	r4, r4, #1
   1b11e:	4601      	mov	r1, r0
   1b120:	4623      	mov	r3, r4
   1b122:	4807      	ldr	r0, [pc, #28]	; (1b140 <m_assert_handler+0x38>)
   1b124:	462a      	mov	r2, r5
   1b126:	f002 f989 	bl	1d43c <log_2>
	k_oops();
   1b12a:	4040      	eors	r0, r0
   1b12c:	f380 8811 	msr	BASEPRI, r0
   1b130:	f04f 0003 	mov.w	r0, #3
   1b134:	df02      	svc	2
}
   1b136:	bd38      	pop	{r3, r4, r5, pc}
   1b138:	00020308 	.word	0x00020308
   1b13c:	00020368 	.word	0x00020368
   1b140:	00022194 	.word	0x00022194

0001b144 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1b144:	b537      	push	{r0, r1, r2, r4, r5, lr}
	err_code = nrfx_dppi_channel_alloc(&channel);
	__ASSERT_NO_MSG(err_code == NRFX_SUCCESS && channel == 2);
#endif

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1b146:	2314      	movs	r3, #20
   1b148:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1b14c:	4a10      	ldr	r2, [pc, #64]	; (1b190 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1b14e:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1b150:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1b152:	2119      	movs	r1, #25
   1b154:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1b156:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1b15a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1b15e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1b162:	f7e8 fa97 	bl	3694 <mpsl_init>
	if (err) {
   1b166:	4604      	mov	r4, r0
   1b168:	b970      	cbnz	r0, 1b188 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1b16a:	4601      	mov	r1, r0
   1b16c:	462a      	mov	r2, r5
   1b16e:	2008      	movs	r0, #8
   1b170:	f7f9 fbcc 	bl	1490c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1b174:	462a      	mov	r2, r5
   1b176:	4621      	mov	r1, r4
   1b178:	200b      	movs	r0, #11
   1b17a:	f7f9 fbc7 	bl	1490c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1b17e:	462a      	mov	r2, r5
   1b180:	4621      	mov	r1, r4
   1b182:	4628      	mov	r0, r5
   1b184:	f7f9 fbc2 	bl	1490c <z_arm_irq_priority_set>
		return err;
	}
#endif

	return 0;
}
   1b188:	4620      	mov	r0, r4
   1b18a:	b003      	add	sp, #12
   1b18c:	bd30      	pop	{r4, r5, pc}
   1b18e:	bf00      	nop
   1b190:	0001b109 	.word	0x0001b109

0001b194 <mpsl_low_prio_irq_handler>:
   1b194:	4801      	ldr	r0, [pc, #4]	; (1b19c <mpsl_low_prio_irq_handler+0x8>)
   1b196:	f001 b86d 	b.w	1c274 <z_impl_k_sem_give>
   1b19a:	bf00      	nop
   1b19c:	200007b0 	.word	0x200007b0

0001b1a0 <signal_thread>:
{
   1b1a0:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   1b1a2:	4c09      	ldr	r4, [pc, #36]	; (1b1c8 <signal_thread+0x28>)
   1b1a4:	f04f 32ff 	mov.w	r2, #4294967295
   1b1a8:	f04f 33ff 	mov.w	r3, #4294967295
   1b1ac:	4620      	mov	r0, r4
   1b1ae:	f001 f887 	bl	1c2c0 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b1b2:	f04f 31ff 	mov.w	r1, #4294967295
   1b1b6:	f04f 30ff 	mov.w	r0, #4294967295
   1b1ba:	f7ff fa93 	bl	1a6e4 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1b1be:	f7f3 fede 	bl	ef7e <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1b1c2:	f7ff fa97 	bl	1a6f4 <multithreading_lock_release>
	while (true) {
   1b1c6:	e7ed      	b.n	1b1a4 <signal_thread+0x4>
   1b1c8:	200007b0 	.word	0x200007b0

0001b1cc <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1b1cc:	b530      	push	{r4, r5, lr}
   1b1ce:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b1d0:	4d0f      	ldr	r5, [pc, #60]	; (1b210 <mpsl_signal_thread_init+0x44>)
   1b1d2:	4910      	ldr	r1, [pc, #64]	; (1b214 <mpsl_signal_thread_init+0x48>)
   1b1d4:	2200      	movs	r2, #0
   1b1d6:	2300      	movs	r3, #0
   1b1d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b1dc:	2400      	movs	r4, #0
   1b1de:	f06f 0309 	mvn.w	r3, #9
   1b1e2:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1b1e6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1b1ea:	4b0b      	ldr	r3, [pc, #44]	; (1b218 <mpsl_signal_thread_init+0x4c>)
   1b1ec:	9400      	str	r4, [sp, #0]
   1b1ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b1f2:	4628      	mov	r0, r5
   1b1f4:	f001 f8d8 	bl	1c3a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1b1f8:	4908      	ldr	r1, [pc, #32]	; (1b21c <mpsl_signal_thread_init+0x50>)
   1b1fa:	4628      	mov	r0, r5
   1b1fc:	f004 fd09 	bl	1fc12 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1b200:	4622      	mov	r2, r4
   1b202:	2104      	movs	r1, #4
   1b204:	2019      	movs	r0, #25
   1b206:	f7f9 fb81 	bl	1490c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1b20a:	4620      	mov	r0, r4
   1b20c:	b009      	add	sp, #36	; 0x24
   1b20e:	bd30      	pop	{r4, r5, pc}
   1b210:	20002158 	.word	0x20002158
   1b214:	20004180 	.word	0x20004180
   1b218:	0001b1a1 	.word	0x0001b1a1
   1b21c:	000221a8 	.word	0x000221a8

0001b220 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1b220:	4b01      	ldr	r3, [pc, #4]	; (1b228 <mpsl_hfclk_callback+0x8>)
   1b222:	2000      	movs	r0, #0
   1b224:	681b      	ldr	r3, [r3, #0]
   1b226:	4718      	bx	r3
   1b228:	2000261c 	.word	0x2000261c

0001b22c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1b22c:	b120      	cbz	r0, 1b238 <nrfx_clock_start+0xc>
   1b22e:	2801      	cmp	r0, #1
   1b230:	d106      	bne.n	1b240 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1b232:	4804      	ldr	r0, [pc, #16]	; (1b244 <nrfx_clock_start+0x18>)
   1b234:	f7e8 b896 	b.w	3364 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1b238:	4b03      	ldr	r3, [pc, #12]	; (1b248 <nrfx_clock_start+0x1c>)
   1b23a:	2001      	movs	r0, #1
   1b23c:	681b      	ldr	r3, [r3, #0]
   1b23e:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1b240:	4770      	bx	lr
   1b242:	bf00      	nop
   1b244:	0001b221 	.word	0x0001b221
   1b248:	2000261c 	.word	0x2000261c

0001b24c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1b24c:	4b01      	ldr	r3, [pc, #4]	; (1b254 <nrfx_clock_init+0x8>)
   1b24e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1b250:	4801      	ldr	r0, [pc, #4]	; (1b258 <nrfx_clock_init+0xc>)
   1b252:	4770      	bx	lr
   1b254:	2000261c 	.word	0x2000261c
   1b258:	0bad0000 	.word	0x0bad0000

0001b25c <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b25c:	4b05      	ldr	r3, [pc, #20]	; (1b274 <nrf52_errata_136+0x18>)
   1b25e:	6818      	ldr	r0, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1b260:	280d      	cmp	r0, #13
   1b262:	d004      	beq.n	1b26e <nrf52_errata_136+0x12>
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
   1b264:	f1a0 0310 	sub.w	r3, r0, #16
   1b268:	4258      	negs	r0, r3
   1b26a:	4158      	adcs	r0, r3
   1b26c:	4770      	bx	lr
                        return true;
   1b26e:	2001      	movs	r0, #1
                }
            }
        #endif
        return false;
    #endif
}
   1b270:	4770      	bx	lr
   1b272:	bf00      	nop
   1b274:	10000130 	.word	0x10000130

0001b278 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1b278:	4a02      	ldr	r2, [pc, #8]	; (1b284 <nvmc_wait+0xc>)
   1b27a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1b27e:	2b00      	cmp	r3, #0
   1b280:	d0fb      	beq.n	1b27a <nvmc_wait+0x2>
}
   1b282:	4770      	bx	lr
   1b284:	4001e000 	.word	0x4001e000

0001b288 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1b288:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1b28a:	f7ff ffe7 	bl	1b25c <nrf52_errata_136>
   1b28e:	b140      	cbz	r0, 1b2a2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1b290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b294:	2200      	movs	r2, #0
   1b296:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1b29a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1b29e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1b2a2:	f7ff ffdb 	bl	1b25c <nrf52_errata_136>
   1b2a6:	2800      	cmp	r0, #0
   1b2a8:	d046      	beq.n	1b338 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1b2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b2ae:	4b41      	ldr	r3, [pc, #260]	; (1b3b4 <SystemInit+0x12c>)
   1b2b0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1b2b4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1b2b8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1b2bc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1b2c0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1b2c4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1b2c8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1b2cc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1b2d0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1b2d4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1b2d8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1b2dc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1b2e0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1b2e4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1b2e8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1b2ec:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1b2f0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1b2f4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1b2f8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1b2fc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1b300:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1b304:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1b308:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1b30c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1b310:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1b314:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1b318:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1b31c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1b320:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1b324:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1b328:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1b32c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1b330:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1b334:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1b338:	f7ff ff90 	bl	1b25c <nrf52_errata_136>
   1b33c:	b148      	cbz	r0, 1b352 <SystemInit+0xca>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1b33e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b342:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1b346:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1b348:	bf44      	itt	mi
   1b34a:	f06f 0201 	mvnmi.w	r2, #1
   1b34e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b352:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b356:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1b35a:	2a00      	cmp	r2, #0
   1b35c:	db03      	blt.n	1b366 <SystemInit+0xde>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1b35e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b362:	2b00      	cmp	r3, #0
   1b364:	da22      	bge.n	1b3ac <SystemInit+0x124>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b366:	4914      	ldr	r1, [pc, #80]	; (1b3b8 <SystemInit+0x130>)
   1b368:	2301      	movs	r3, #1
   1b36a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1b36e:	f7ff ff83 	bl	1b278 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b372:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1b376:	2412      	movs	r4, #18
   1b378:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1b37c:	f7ff ff7c 	bl	1b278 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1b380:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1b384:	f7ff ff78 	bl	1b278 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b388:	2300      	movs	r3, #0
   1b38a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1b38e:	f7ff ff73 	bl	1b278 <nvmc_wait>
   1b392:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1b396:	4909      	ldr	r1, [pc, #36]	; (1b3bc <SystemInit+0x134>)
   1b398:	4b09      	ldr	r3, [pc, #36]	; (1b3c0 <SystemInit+0x138>)
   1b39a:	68ca      	ldr	r2, [r1, #12]
   1b39c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1b3a0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1b3a2:	60cb      	str	r3, [r1, #12]
   1b3a4:	f3bf 8f4f 	dsb	sy
    __NOP();
   1b3a8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1b3aa:	e7fd      	b.n	1b3a8 <SystemInit+0x120>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1b3ac:	4b05      	ldr	r3, [pc, #20]	; (1b3c4 <SystemInit+0x13c>)
   1b3ae:	4a06      	ldr	r2, [pc, #24]	; (1b3c8 <SystemInit+0x140>)
   1b3b0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1b3b2:	bd10      	pop	{r4, pc}
   1b3b4:	4000c000 	.word	0x4000c000
   1b3b8:	4001e000 	.word	0x4001e000
   1b3bc:	e000ed00 	.word	0xe000ed00
   1b3c0:	05fa0004 	.word	0x05fa0004
   1b3c4:	200005fc 	.word	0x200005fc
   1b3c8:	03d09000 	.word	0x03d09000

0001b3cc <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1b3cc:	2301      	movs	r3, #1
   1b3ce:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1b3d2:	f010 0fff 	tst.w	r0, #255	; 0xff
   1b3d6:	d012      	beq.n	1b3fe <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1b3d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b3dc:	f3ef 8111 	mrs	r1, BASEPRI
   1b3e0:	f383 8811 	msr	BASEPRI, r3
   1b3e4:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1b3e8:	4a06      	ldr	r2, [pc, #24]	; (1b404 <nrfx_gpiote_channel_free+0x38>)
   1b3ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1b3ec:	ea23 0000 	bic.w	r0, r3, r0
   1b3f0:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   1b3f2:	f381 8811 	msr	BASEPRI, r1
   1b3f6:	f3bf 8f6f 	isb	sy
   1b3fa:	4803      	ldr	r0, [pc, #12]	; (1b408 <nrfx_gpiote_channel_free+0x3c>)
   1b3fc:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1b3fe:	4803      	ldr	r0, [pc, #12]	; (1b40c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1b400:	4770      	bx	lr
   1b402:	bf00      	nop
   1b404:	20002620 	.word	0x20002620
   1b408:	0bad0000 	.word	0x0bad0000
   1b40c:	0bad0004 	.word	0x0bad0004

0001b410 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1b410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b414:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1b416:	f8df e060 	ldr.w	lr, [pc, #96]	; 1b478 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1b41a:	4816      	ldr	r0, [pc, #88]	; (1b474 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1b41c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1b47c <nrfx_gpiote_channel_alloc+0x6c>
{
   1b420:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1b422:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1b424:	2601      	movs	r6, #1
   1b426:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1b428:	f04f 0140 	mov.w	r1, #64	; 0x40
   1b42c:	f3ef 8c11 	mrs	ip, BASEPRI
   1b430:	f381 8811 	msr	BASEPRI, r1
   1b434:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1b438:	fa22 f103 	lsr.w	r1, r2, r3
   1b43c:	07c9      	lsls	r1, r1, #31
   1b43e:	d50a      	bpl.n	1b456 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1b440:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   1b444:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1b448:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1b44a:	bf01      	itttt	eq
   1b44c:	4339      	orreq	r1, r7
   1b44e:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   1b452:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1b454:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1b456:	f38c 8811 	msr	BASEPRI, ip
   1b45a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1b45e:	4540      	cmp	r0, r8
   1b460:	d005      	beq.n	1b46e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1b462:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1b466:	439a      	bics	r2, r3
   1b468:	f104 0401 	add.w	r4, r4, #1
   1b46c:	d1db      	bne.n	1b426 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1b46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b472:	bf00      	nop
   1b474:	0bad0002 	.word	0x0bad0002
   1b478:	20002620 	.word	0x20002620
   1b47c:	0bad0000 	.word	0x0bad0000

0001b480 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1b480:	4b18      	ldr	r3, [pc, #96]	; (1b4e4 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1b482:	f8df c06c 	ldr.w	ip, [pc, #108]	; 1b4f0 <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1b486:	681b      	ldr	r3, [r3, #0]
{
   1b488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1b48c:	43db      	mvns	r3, r3
{
   1b48e:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1b490:	4f15      	ldr	r7, [pc, #84]	; (1b4e8 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1b492:	4816      	ldr	r0, [pc, #88]	; (1b4ec <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1b494:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1b498:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1b49a:	f04f 0e01 	mov.w	lr, #1
   1b49e:	b2e6      	uxtb	r6, r4
   1b4a0:	b90b      	cbnz	r3, 1b4a6 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1b4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1b4a6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b4aa:	f3ef 8811 	mrs	r8, BASEPRI
   1b4ae:	f382 8811 	msr	BASEPRI, r2
   1b4b2:	f3bf 8f6f 	isb	sy
   1b4b6:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1b4ba:	4213      	tst	r3, r2
   1b4bc:	d006      	beq.n	1b4cc <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1b4be:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1b4c0:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1b4c2:	bf01      	itttt	eq
   1b4c4:	4311      	orreq	r1, r2
   1b4c6:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1b4c8:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1b4ca:	4660      	moveq	r0, ip
	__asm__ volatile(
   1b4cc:	f388 8811 	msr	BASEPRI, r8
   1b4d0:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1b4d4:	4560      	cmp	r0, ip
   1b4d6:	f104 0401 	add.w	r4, r4, #1
   1b4da:	d0e2      	beq.n	1b4a2 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1b4dc:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1b4e0:	e7dd      	b.n	1b49e <nrfx_ppi_channel_alloc+0x1e>
   1b4e2:	bf00      	nop
   1b4e4:	00020984 	.word	0x00020984
   1b4e8:	20002670 	.word	0x20002670
   1b4ec:	0bad0002 	.word	0x0bad0002
   1b4f0:	0bad0000 	.word	0x0bad0000

0001b4f4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b4f6:	4b10      	ldr	r3, [pc, #64]	; (1b538 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1b4f8:	4f10      	ldr	r7, [pc, #64]	; (1b53c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b4fa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1b4fe:	3001      	adds	r0, #1
   1b500:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1b504:	42ae      	cmp	r6, r5
   1b506:	d800      	bhi.n	1b50a <z_sys_init_run_level+0x16>
		}
	}
}
   1b508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1b50a:	e9d5 3400 	ldrd	r3, r4, [r5]
   1b50e:	4620      	mov	r0, r4
   1b510:	4798      	blx	r3
   1b512:	b170      	cbz	r0, 1b532 <z_sys_init_run_level+0x3e>
   1b514:	b16c      	cbz	r4, 1b532 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1b516:	1be4      	subs	r4, r4, r7
   1b518:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1b51a:	0961      	lsrs	r1, r4, #5
   1b51c:	4a08      	ldr	r2, [pc, #32]	; (1b540 <z_sys_init_run_level+0x4c>)
   1b51e:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1b522:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1b526:	2301      	movs	r3, #1
   1b528:	fa03 f404 	lsl.w	r4, r3, r4
   1b52c:	4304      	orrs	r4, r0
   1b52e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b532:	3508      	adds	r5, #8
   1b534:	e7e6      	b.n	1b504 <z_sys_init_run_level+0x10>
   1b536:	bf00      	nop
   1b538:	00020988 	.word	0x00020988
   1b53c:	200006ac 	.word	0x200006ac
   1b540:	200006fc 	.word	0x200006fc

0001b544 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1b544:	4b08      	ldr	r3, [pc, #32]	; (1b568 <z_device_ready+0x24>)
   1b546:	1ac0      	subs	r0, r0, r3
   1b548:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1b54a:	4b08      	ldr	r3, [pc, #32]	; (1b56c <z_device_ready+0x28>)
   1b54c:	0942      	lsrs	r2, r0, #5
   1b54e:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1b552:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1b556:	2301      	movs	r3, #1
   1b558:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1b55c:	4210      	tst	r0, r2
}
   1b55e:	bf0c      	ite	eq
   1b560:	4618      	moveq	r0, r3
   1b562:	2000      	movne	r0, #0
   1b564:	4770      	bx	lr
   1b566:	bf00      	nop
   1b568:	200006ac 	.word	0x200006ac
   1b56c:	200006fc 	.word	0x200006fc

0001b570 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1b570:	4911      	ldr	r1, [pc, #68]	; (1b5b8 <z_impl_device_get_binding+0x48>)
{
   1b572:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1b574:	4c11      	ldr	r4, [pc, #68]	; (1b5bc <z_impl_device_get_binding+0x4c>)
{
   1b576:	4605      	mov	r5, r0
   1b578:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1b57a:	428c      	cmp	r4, r1
   1b57c:	d104      	bne.n	1b588 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b57e:	4c0f      	ldr	r4, [pc, #60]	; (1b5bc <z_impl_device_get_binding+0x4c>)
   1b580:	42b4      	cmp	r4, r6
   1b582:	d10a      	bne.n	1b59a <z_impl_device_get_binding+0x2a>
	return NULL;
   1b584:	2400      	movs	r4, #0
   1b586:	e014      	b.n	1b5b2 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1b588:	4620      	mov	r0, r4
   1b58a:	f7ff ffdb 	bl	1b544 <z_device_ready>
   1b58e:	b110      	cbz	r0, 1b596 <z_impl_device_get_binding+0x26>
   1b590:	6823      	ldr	r3, [r4, #0]
   1b592:	42ab      	cmp	r3, r5
   1b594:	d00d      	beq.n	1b5b2 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b596:	3410      	adds	r4, #16
   1b598:	e7ef      	b.n	1b57a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b59a:	4620      	mov	r0, r4
   1b59c:	f7ff ffd2 	bl	1b544 <z_device_ready>
   1b5a0:	b908      	cbnz	r0, 1b5a6 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b5a2:	3410      	adds	r4, #16
   1b5a4:	e7ec      	b.n	1b580 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b5a6:	6821      	ldr	r1, [r4, #0]
   1b5a8:	4628      	mov	r0, r5
   1b5aa:	f002 fd19 	bl	1dfe0 <strcmp>
   1b5ae:	2800      	cmp	r0, #0
   1b5b0:	d1f7      	bne.n	1b5a2 <z_impl_device_get_binding+0x32>
}
   1b5b2:	4620      	mov	r0, r4
   1b5b4:	bd70      	pop	{r4, r5, r6, pc}
   1b5b6:	bf00      	nop
   1b5b8:	200006fc 	.word	0x200006fc
   1b5bc:	200006ac 	.word	0x200006ac

0001b5c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1b5c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b5c4:	4606      	mov	r6, r0
   1b5c6:	460f      	mov	r7, r1
	__asm__ volatile(
   1b5c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5cc:	f3ef 8811 	mrs	r8, BASEPRI
   1b5d0:	f383 8811 	msr	BASEPRI, r3
   1b5d4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1b5d8:	f000 fe46 	bl	1c268 <z_impl_k_current_get>
   1b5dc:	4c1f      	ldr	r4, [pc, #124]	; (1b65c <z_fatal_error+0x9c>)
   1b5de:	4b20      	ldr	r3, [pc, #128]	; (1b660 <z_fatal_error+0xa0>)
   1b5e0:	1ae4      	subs	r4, r4, r3
   1b5e2:	2e04      	cmp	r6, #4
   1b5e4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1b5e8:	bf96      	itet	ls
   1b5ea:	4a1e      	ldrls	r2, [pc, #120]	; (1b664 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1b5ec:	4a1e      	ldrhi	r2, [pc, #120]	; (1b668 <z_fatal_error+0xa8>)
   1b5ee:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1b5f2:	01a4      	lsls	r4, r4, #6
   1b5f4:	f044 0301 	orr.w	r3, r4, #1
   1b5f8:	4605      	mov	r5, r0
   1b5fa:	f8ad 3000 	strh.w	r3, [sp]
   1b5fe:	481b      	ldr	r0, [pc, #108]	; (1b66c <z_fatal_error+0xac>)
   1b600:	2300      	movs	r3, #0
   1b602:	4631      	mov	r1, r6
   1b604:	f001 ff33 	bl	1d46e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1b608:	b147      	cbz	r7, 1b61c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1b60a:	69fb      	ldr	r3, [r7, #28]
   1b60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1b610:	b123      	cbz	r3, 1b61c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1b612:	4817      	ldr	r0, [pc, #92]	; (1b670 <z_fatal_error+0xb0>)
   1b614:	f044 0101 	orr.w	r1, r4, #1
   1b618:	f001 feef 	bl	1d3fa <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1b61c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1b620:	b12d      	cbz	r5, 1b62e <z_fatal_error+0x6e>
   1b622:	4628      	mov	r0, r5
   1b624:	f004 faf8 	bl	1fc18 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1b628:	b108      	cbz	r0, 1b62e <z_fatal_error+0x6e>
   1b62a:	7803      	ldrb	r3, [r0, #0]
   1b62c:	b903      	cbnz	r3, 1b630 <z_fatal_error+0x70>
		thread_name = "unknown";
   1b62e:	4811      	ldr	r0, [pc, #68]	; (1b674 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1b630:	f7f7 ffe6 	bl	13600 <log_strdup>
   1b634:	4623      	mov	r3, r4
   1b636:	4602      	mov	r2, r0
   1b638:	4629      	mov	r1, r5
   1b63a:	480f      	ldr	r0, [pc, #60]	; (1b678 <z_fatal_error+0xb8>)
   1b63c:	f001 fefe 	bl	1d43c <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1b640:	4639      	mov	r1, r7
   1b642:	4630      	mov	r0, r6
   1b644:	f7ff f85c 	bl	1a700 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1b648:	f388 8811 	msr	BASEPRI, r8
   1b64c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1b650:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1b652:	b002      	add	sp, #8
   1b654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b658:	f7f9 bcaa 	b.w	14fb0 <z_impl_k_thread_abort>
   1b65c:	00020380 	.word	0x00020380
   1b660:	00020308 	.word	0x00020308
   1b664:	000209a0 	.word	0x000209a0
   1b668:	000221be 	.word	0x000221be
   1b66c:	000221cc 	.word	0x000221cc
   1b670:	000221f4 	.word	0x000221f4
   1b674:	0002129a 	.word	0x0002129a
   1b678:	00022215 	.word	0x00022215

0001b67c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   1b67e:	4e16      	ldr	r6, [pc, #88]	; (1b6d8 <idle+0x5c>)
{
   1b680:	4605      	mov	r5, r0
			cpu->pending_abort = NULL;
   1b682:	2700      	movs	r7, #0
	__asm__ volatile(
   1b684:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b688:	f3ef 8311 	mrs	r3, BASEPRI
   1b68c:	f382 8811 	msr	BASEPRI, r2
   1b690:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1b694:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1b696:	b188      	cbz	r0, 1b6bc <idle+0x40>
			cpu->pending_abort = NULL;
   1b698:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1b69a:	f383 8811 	msr	BASEPRI, r3
   1b69e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   1b6a2:	f000 fc11 	bl	1bec8 <z_thread_single_abort>
	__asm__ volatile(
   1b6a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b6aa:	f3ef 8011 	mrs	r0, BASEPRI
   1b6ae:	f383 8811 	msr	BASEPRI, r3
   1b6b2:	f3bf 8f6f 	isb	sy
   1b6b6:	f004 f9c0 	bl	1fa3a <z_reschedule_irqlock>
			continue;
   1b6ba:	e7e3      	b.n	1b684 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   1b6bc:	f004 fb3c 	bl	1fd38 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b6c0:	2101      	movs	r1, #1
   1b6c2:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   1b6c4:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b6c6:	bfd8      	it	le
   1b6c8:	4608      	movle	r0, r1
   1b6ca:	f004 fb45 	bl	1fd58 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   1b6ce:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1b6d0:	f7f9 f99a 	bl	14a08 <arch_cpu_idle>
}
   1b6d4:	e7d6      	b.n	1b684 <idle+0x8>
   1b6d6:	bf00      	nop
   1b6d8:	20002674 	.word	0x20002674

0001b6dc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b6dc:	4802      	ldr	r0, [pc, #8]	; (1b6e8 <z_bss_zero+0xc>)
   1b6de:	4a03      	ldr	r2, [pc, #12]	; (1b6ec <z_bss_zero+0x10>)
   1b6e0:	2100      	movs	r1, #0
   1b6e2:	1a12      	subs	r2, r2, r0
   1b6e4:	f002 bcc3 	b.w	1e06e <memset>
   1b6e8:	200008d0 	.word	0x200008d0
   1b6ec:	20002ffc 	.word	0x20002ffc

0001b6f0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1b6f0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   1b6f2:	4b0a      	ldr	r3, [pc, #40]	; (1b71c <bg_thread_main+0x2c>)
   1b6f4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b6f6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1b6f8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b6fa:	f7ff fefb 	bl	1b4f4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1b6fe:	f000 ff57 	bl	1c5b0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1b702:	2003      	movs	r0, #3
   1b704:	f7ff fef6 	bl	1b4f4 <z_sys_init_run_level>

	z_init_static_threads();
   1b708:	f000 fe7a 	bl	1c400 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1b70c:	f7f7 f97c 	bl	12a08 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b710:	4a03      	ldr	r2, [pc, #12]	; (1b720 <bg_thread_main+0x30>)
   1b712:	7b13      	ldrb	r3, [r2, #12]
   1b714:	f023 0301 	bic.w	r3, r3, #1
   1b718:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b71a:	bd08      	pop	{r3, pc}
   1b71c:	20002ffb 	.word	0x20002ffb
   1b720:	20002268 	.word	0x20002268

0001b724 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1b724:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1b728:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1b72a:	f7f7 fec1 	bl	134b0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1b72e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1b824 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b732:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1b736:	4d33      	ldr	r5, [pc, #204]	; (1b804 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   1b738:	4e33      	ldr	r6, [pc, #204]	; (1b808 <z_cstart+0xe4>)
   1b73a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b73c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1b828 <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   1b740:	4f32      	ldr	r7, [pc, #200]	; (1b80c <z_cstart+0xe8>)
   1b742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b746:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b748:	23e0      	movs	r3, #224	; 0xe0
   1b74a:	2400      	movs	r4, #0
   1b74c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1b750:	2320      	movs	r3, #32
   1b752:	77eb      	strb	r3, [r5, #31]
   1b754:	762c      	strb	r4, [r5, #24]
   1b756:	766c      	strb	r4, [r5, #25]
   1b758:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b75a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b75c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b760:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b762:	f7f9 fc03 	bl	14f6c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b766:	f7f9 f949 	bl	149fc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b76a:	f04f 33ff 	mov.w	r3, #4294967295
   1b76e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b770:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1b772:	4d27      	ldr	r5, [pc, #156]	; (1b810 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1b774:	f240 1301 	movw	r3, #257	; 0x101
   1b778:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1b77c:	ab06      	add	r3, sp, #24
   1b77e:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b780:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1b782:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1b786:	f7ff feb5 	bl	1b4f4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b78a:	2001      	movs	r0, #1
   1b78c:	f7ff feb2 	bl	1b4f4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b790:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1b794:	f000 fcec 	bl	1c170 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b798:	4b1e      	ldr	r3, [pc, #120]	; (1b814 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1b79a:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b79c:	491e      	ldr	r1, [pc, #120]	; (1b818 <z_cstart+0xf4>)
   1b79e:	9305      	str	r3, [sp, #20]
   1b7a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b7a4:	4653      	mov	r3, sl
   1b7a6:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1b7aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1b7ae:	9400      	str	r4, [sp, #0]
   1b7b0:	4630      	mov	r0, r6
   1b7b2:	f000 fdc7 	bl	1c344 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b7b6:	7b73      	ldrb	r3, [r6, #13]
   1b7b8:	4680      	mov	r8, r0
   1b7ba:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1b7be:	4630      	mov	r0, r6
   1b7c0:	7373      	strb	r3, [r6, #13]
   1b7c2:	f004 f97c 	bl	1fabe <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1b7c6:	230f      	movs	r3, #15
   1b7c8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1b7cc:	4913      	ldr	r1, [pc, #76]	; (1b81c <z_cstart+0xf8>)
   1b7ce:	4b14      	ldr	r3, [pc, #80]	; (1b820 <z_cstart+0xfc>)
   1b7d0:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b7d4:	e9cd b404 	strd	fp, r4, [sp, #16]
   1b7d8:	e9cd 5400 	strd	r5, r4, [sp]
   1b7dc:	4638      	mov	r0, r7
   1b7de:	f000 fdb1 	bl	1c344 <z_setup_new_thread>
   1b7e2:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1b7e4:	60ef      	str	r7, [r5, #12]
   1b7e6:	f023 0304 	bic.w	r3, r3, #4
   1b7ea:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1b7ec:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1b7f0:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1b7f4:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1b7f6:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1b7fa:	4652      	mov	r2, sl
   1b7fc:	4641      	mov	r1, r8
   1b7fe:	4630      	mov	r0, r6
   1b800:	f7f9 f8e2 	bl	149c8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b804:	e000ed00 	.word	0xe000ed00
   1b808:	20002268 	.word	0x20002268
   1b80c:	200021e0 	.word	0x200021e0
   1b810:	20002674 	.word	0x20002674
   1b814:	00022277 	.word	0x00022277
   1b818:	200045a0 	.word	0x200045a0
   1b81c:	200047c0 	.word	0x200047c0
   1b820:	0001b67d 	.word	0x0001b67d
   1b824:	20005100 	.word	0x20005100
   1b828:	0001b6f1 	.word	0x0001b6f1

0001b82c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1b82c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b82e:	4c06      	ldr	r4, [pc, #24]	; (1b848 <statics_init+0x1c>)
   1b830:	4d06      	ldr	r5, [pc, #24]	; (1b84c <statics_init+0x20>)
   1b832:	42ac      	cmp	r4, r5
   1b834:	d301      	bcc.n	1b83a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1b836:	2000      	movs	r0, #0
   1b838:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1b83a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1b83e:	4620      	mov	r0, r4
   1b840:	f003 ff7d 	bl	1f73e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b844:	3414      	adds	r4, #20
   1b846:	e7f4      	b.n	1b832 <statics_init+0x6>
   1b848:	20000754 	.word	0x20000754
   1b84c:	20000754 	.word	0x20000754

0001b850 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1b850:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b852:	4b0e      	ldr	r3, [pc, #56]	; (1b88c <init_mem_slab_module+0x3c>)
   1b854:	4c0e      	ldr	r4, [pc, #56]	; (1b890 <init_mem_slab_module+0x40>)
   1b856:	42a3      	cmp	r3, r4
   1b858:	d301      	bcc.n	1b85e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1b85a:	2000      	movs	r0, #0
	return rc;
}
   1b85c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b85e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1b862:	ea41 0200 	orr.w	r2, r1, r0
   1b866:	f012 0203 	ands.w	r2, r2, #3
   1b86a:	d10b      	bne.n	1b884 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1b86c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1b86e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b870:	42aa      	cmp	r2, r5
   1b872:	d101      	bne.n	1b878 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b874:	331c      	adds	r3, #28
   1b876:	e7ee      	b.n	1b856 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1b878:	695e      	ldr	r6, [r3, #20]
   1b87a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b87c:	3201      	adds	r2, #1
		slab->free_list = p;
   1b87e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1b880:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1b882:	e7f5      	b.n	1b870 <init_mem_slab_module+0x20>
		return -EINVAL;
   1b884:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1b888:	e7e8      	b.n	1b85c <init_mem_slab_module+0xc>
   1b88a:	bf00      	nop
   1b88c:	20000700 	.word	0x20000700
   1b890:	20000754 	.word	0x20000754

0001b894 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1b894:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1b896:	460c      	mov	r4, r1
   1b898:	4616      	mov	r6, r2
   1b89a:	461f      	mov	r7, r3
   1b89c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b8a0:	f3ef 8111 	mrs	r1, BASEPRI
   1b8a4:	f383 8811 	msr	BASEPRI, r3
   1b8a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1b8ac:	6943      	ldr	r3, [r0, #20]
   1b8ae:	b15b      	cbz	r3, 1b8c8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1b8b0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b8b2:	681b      	ldr	r3, [r3, #0]
   1b8b4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b8b6:	6983      	ldr	r3, [r0, #24]
   1b8b8:	3301      	adds	r3, #1
   1b8ba:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1b8bc:	2000      	movs	r0, #0
	__asm__ volatile(
   1b8be:	f381 8811 	msr	BASEPRI, r1
   1b8c2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1b8c6:	e011      	b.n	1b8ec <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b8c8:	ea56 0207 	orrs.w	r2, r6, r7
   1b8cc:	d103      	bne.n	1b8d6 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1b8ce:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b8d0:	f06f 000b 	mvn.w	r0, #11
   1b8d4:	e7f3      	b.n	1b8be <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1b8d6:	4602      	mov	r2, r0
   1b8d8:	e9cd 6700 	strd	r6, r7, [sp]
   1b8dc:	4804      	ldr	r0, [pc, #16]	; (1b8f0 <k_mem_slab_alloc+0x5c>)
   1b8de:	f000 fbb5 	bl	1c04c <z_pend_curr>
		if (result == 0) {
   1b8e2:	b918      	cbnz	r0, 1b8ec <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1b8e4:	4b03      	ldr	r3, [pc, #12]	; (1b8f4 <k_mem_slab_alloc+0x60>)
   1b8e6:	689b      	ldr	r3, [r3, #8]
   1b8e8:	695b      	ldr	r3, [r3, #20]
   1b8ea:	6023      	str	r3, [r4, #0]
}
   1b8ec:	b002      	add	sp, #8
   1b8ee:	bdd0      	pop	{r4, r6, r7, pc}
   1b8f0:	20002ffc 	.word	0x20002ffc
   1b8f4:	20002674 	.word	0x20002674

0001b8f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8fa:	4604      	mov	r4, r0
   1b8fc:	460d      	mov	r5, r1
	__asm__ volatile(
   1b8fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b902:	f3ef 8611 	mrs	r6, BASEPRI
   1b906:	f383 8811 	msr	BASEPRI, r3
   1b90a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1b90e:	6947      	ldr	r7, [r0, #20]
   1b910:	b977      	cbnz	r7, 1b930 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1b912:	f004 f92f 	bl	1fb74 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1b916:	b158      	cbz	r0, 1b930 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1b918:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1b91a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b91c:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   1b920:	f004 f8cd 	bl	1fabe <z_ready_thread>
			z_reschedule(&lock, key);
   1b924:	4631      	mov	r1, r6
   1b926:	4809      	ldr	r0, [pc, #36]	; (1b94c <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1b928:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1b92c:	f000 b946 	b.w	1bbbc <z_reschedule>
	**(char ***) mem = slab->free_list;
   1b930:	682b      	ldr	r3, [r5, #0]
   1b932:	6962      	ldr	r2, [r4, #20]
   1b934:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1b936:	682b      	ldr	r3, [r5, #0]
   1b938:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1b93a:	69a3      	ldr	r3, [r4, #24]
   1b93c:	3b01      	subs	r3, #1
   1b93e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1b940:	f386 8811 	msr	BASEPRI, r6
   1b944:	f3bf 8f6f 	isb	sy
}
   1b948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b94a:	bf00      	nop
   1b94c:	20002ffc 	.word	0x20002ffc

0001b950 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1b950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b954:	4604      	mov	r4, r0
   1b956:	4616      	mov	r6, r2
   1b958:	461f      	mov	r7, r3
	__asm__ volatile(
   1b95a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b95e:	f3ef 8811 	mrs	r8, BASEPRI
   1b962:	f383 8811 	msr	BASEPRI, r3
   1b966:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b96a:	68c3      	ldr	r3, [r0, #12]
   1b96c:	4a32      	ldr	r2, [pc, #200]	; (1ba38 <z_impl_k_mutex_lock+0xe8>)
   1b96e:	b16b      	cbz	r3, 1b98c <z_impl_k_mutex_lock+0x3c>
   1b970:	6880      	ldr	r0, [r0, #8]
   1b972:	6891      	ldr	r1, [r2, #8]
   1b974:	4288      	cmp	r0, r1
   1b976:	d019      	beq.n	1b9ac <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1b978:	ea56 0307 	orrs.w	r3, r6, r7
   1b97c:	d118      	bne.n	1b9b0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1b97e:	f388 8811 	msr	BASEPRI, r8
   1b982:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b986:	f06f 000f 	mvn.w	r0, #15
   1b98a:	e00c      	b.n	1b9a6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1b98c:	6891      	ldr	r1, [r2, #8]
   1b98e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b992:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1b994:	3301      	adds	r3, #1
   1b996:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1b998:	6893      	ldr	r3, [r2, #8]
   1b99a:	60a3      	str	r3, [r4, #8]
   1b99c:	f388 8811 	msr	BASEPRI, r8
   1b9a0:	f3bf 8f6f 	isb	sy
		return 0;
   1b9a4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b9a6:	b002      	add	sp, #8
   1b9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1b9ac:	6921      	ldr	r1, [r4, #16]
   1b9ae:	e7f0      	b.n	1b992 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b9b0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b9b4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1b9b8:	4299      	cmp	r1, r3
   1b9ba:	bfa8      	it	ge
   1b9bc:	4619      	movge	r1, r3
   1b9be:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b9c2:	428b      	cmp	r3, r1
   1b9c4:	dd2c      	ble.n	1ba20 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1b9c6:	f000 fb8f 	bl	1c0e8 <z_set_prio>
   1b9ca:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b9cc:	e9cd 6700 	strd	r6, r7, [sp]
   1b9d0:	481a      	ldr	r0, [pc, #104]	; (1ba3c <z_impl_k_mutex_lock+0xec>)
   1b9d2:	4622      	mov	r2, r4
   1b9d4:	4641      	mov	r1, r8
   1b9d6:	f000 fb39 	bl	1c04c <z_pend_curr>
	if (got_mutex == 0) {
   1b9da:	2800      	cmp	r0, #0
   1b9dc:	d0e3      	beq.n	1b9a6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1b9de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9e2:	f3ef 8611 	mrs	r6, BASEPRI
   1b9e6:	f383 8811 	msr	BASEPRI, r3
   1b9ea:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b9ee:	6823      	ldr	r3, [r4, #0]
   1b9f0:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b9f2:	42a3      	cmp	r3, r4
   1b9f4:	d007      	beq.n	1ba06 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b9f6:	b133      	cbz	r3, 1ba06 <z_impl_k_mutex_lock+0xb6>
   1b9f8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b9fc:	4299      	cmp	r1, r3
   1b9fe:	bfa8      	it	ge
   1ba00:	4619      	movge	r1, r3
   1ba02:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ba06:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1ba08:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ba0c:	4299      	cmp	r1, r3
   1ba0e:	d109      	bne.n	1ba24 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1ba10:	b16d      	cbz	r5, 1ba2e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1ba12:	480a      	ldr	r0, [pc, #40]	; (1ba3c <z_impl_k_mutex_lock+0xec>)
   1ba14:	4631      	mov	r1, r6
   1ba16:	f000 f8d1 	bl	1bbbc <z_reschedule>
	return -EAGAIN;
   1ba1a:	f06f 000a 	mvn.w	r0, #10
   1ba1e:	e7c2      	b.n	1b9a6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1ba20:	2500      	movs	r5, #0
   1ba22:	e7d3      	b.n	1b9cc <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1ba24:	f000 fb60 	bl	1c0e8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ba28:	2800      	cmp	r0, #0
   1ba2a:	d1f2      	bne.n	1ba12 <z_impl_k_mutex_lock+0xc2>
   1ba2c:	e7f0      	b.n	1ba10 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1ba2e:	f386 8811 	msr	BASEPRI, r6
   1ba32:	f3bf 8f6f 	isb	sy
   1ba36:	e7f0      	b.n	1ba1a <z_impl_k_mutex_lock+0xca>
   1ba38:	20002674 	.word	0x20002674
   1ba3c:	20002ffc 	.word	0x20002ffc

0001ba40 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1ba40:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1ba42:	6883      	ldr	r3, [r0, #8]
{
   1ba44:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1ba46:	2b00      	cmp	r3, #0
   1ba48:	d037      	beq.n	1baba <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ba4a:	4a1f      	ldr	r2, [pc, #124]	; (1bac8 <z_impl_k_mutex_unlock+0x88>)
   1ba4c:	6892      	ldr	r2, [r2, #8]
   1ba4e:	4293      	cmp	r3, r2
   1ba50:	d136      	bne.n	1bac0 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1ba52:	7bda      	ldrb	r2, [r3, #15]
   1ba54:	3a01      	subs	r2, #1
   1ba56:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1ba58:	68c3      	ldr	r3, [r0, #12]
   1ba5a:	2b01      	cmp	r3, #1
   1ba5c:	d005      	beq.n	1ba6a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1ba5e:	3b01      	subs	r3, #1
   1ba60:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1ba62:	f000 f90f 	bl	1bc84 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1ba66:	2000      	movs	r0, #0
}
   1ba68:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1ba6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba6e:	f3ef 8511 	mrs	r5, BASEPRI
   1ba72:	f383 8811 	msr	BASEPRI, r3
   1ba76:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1ba7a:	6901      	ldr	r1, [r0, #16]
   1ba7c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1ba7e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ba82:	4299      	cmp	r1, r3
   1ba84:	d001      	beq.n	1ba8a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1ba86:	f000 fb2f 	bl	1c0e8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1ba8a:	4620      	mov	r0, r4
   1ba8c:	f004 f872 	bl	1fb74 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1ba90:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1ba92:	b160      	cbz	r0, 1baae <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1ba94:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1ba98:	6122      	str	r2, [r4, #16]
   1ba9a:	2200      	movs	r2, #0
   1ba9c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1baa0:	f004 f80d 	bl	1fabe <z_ready_thread>
		z_reschedule(&lock, key);
   1baa4:	4809      	ldr	r0, [pc, #36]	; (1bacc <z_impl_k_mutex_unlock+0x8c>)
   1baa6:	4629      	mov	r1, r5
   1baa8:	f000 f888 	bl	1bbbc <z_reschedule>
   1baac:	e7d9      	b.n	1ba62 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1baae:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1bab0:	f385 8811 	msr	BASEPRI, r5
   1bab4:	f3bf 8f6f 	isb	sy
   1bab8:	e7d3      	b.n	1ba62 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1baba:	f06f 0015 	mvn.w	r0, #21
   1babe:	e7d3      	b.n	1ba68 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1bac0:	f04f 30ff 	mov.w	r0, #4294967295
   1bac4:	e7d0      	b.n	1ba68 <z_impl_k_mutex_unlock+0x28>
   1bac6:	bf00      	nop
   1bac8:	20002674 	.word	0x20002674
   1bacc:	20002ffc 	.word	0x20002ffc

0001bad0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1bad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bad2:	4616      	mov	r6, r2
   1bad4:	461f      	mov	r7, r3
	__asm__ volatile(
   1bad6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bada:	f3ef 8511 	mrs	r5, BASEPRI
   1bade:	f383 8811 	msr	BASEPRI, r3
   1bae2:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1bae6:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1bae8:	b19c      	cbz	r4, 1bb12 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1baea:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1baec:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1baee:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1baf2:	4294      	cmp	r4, r2
	list->head = node;
   1baf4:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1baf6:	bf08      	it	eq
   1baf8:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1bafa:	2101      	movs	r1, #1
   1bafc:	4620      	mov	r0, r4
   1bafe:	f003 ff0a 	bl	1f916 <z_queue_node_peek>
   1bb02:	4604      	mov	r4, r0
	__asm__ volatile(
   1bb04:	f385 8811 	msr	BASEPRI, r5
   1bb08:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1bb0c:	4620      	mov	r0, r4
   1bb0e:	b003      	add	sp, #12
   1bb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bb12:	ea56 0307 	orrs.w	r3, r6, r7
   1bb16:	d0f5      	beq.n	1bb04 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1bb18:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1bb1c:	e9cd 6700 	strd	r6, r7, [sp]
   1bb20:	4629      	mov	r1, r5
   1bb22:	4610      	mov	r0, r2
   1bb24:	f000 fa92 	bl	1c04c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1bb28:	2800      	cmp	r0, #0
   1bb2a:	d1ef      	bne.n	1bb0c <z_impl_k_queue_get+0x3c>
   1bb2c:	4b01      	ldr	r3, [pc, #4]	; (1bb34 <z_impl_k_queue_get+0x64>)
   1bb2e:	689b      	ldr	r3, [r3, #8]
   1bb30:	695c      	ldr	r4, [r3, #20]
   1bb32:	e7eb      	b.n	1bb0c <z_impl_k_queue_get+0x3c>
   1bb34:	20002674 	.word	0x20002674

0001bb38 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1bb38:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1bb3a:	4c08      	ldr	r4, [pc, #32]	; (1bb5c <z_reset_time_slice+0x24>)
   1bb3c:	6823      	ldr	r3, [r4, #0]
   1bb3e:	b15b      	cbz	r3, 1bb58 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1bb40:	f7f8 fd08 	bl	14554 <z_clock_elapsed>
   1bb44:	4603      	mov	r3, r0
   1bb46:	6820      	ldr	r0, [r4, #0]
   1bb48:	4a05      	ldr	r2, [pc, #20]	; (1bb60 <z_reset_time_slice+0x28>)
   1bb4a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1bb4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1bb50:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1bb52:	2100      	movs	r1, #0
   1bb54:	f004 b900 	b.w	1fd58 <z_set_timeout_expiry>
}
   1bb58:	bd10      	pop	{r4, pc}
   1bb5a:	bf00      	nop
   1bb5c:	200026b0 	.word	0x200026b0
   1bb60:	20002674 	.word	0x20002674

0001bb64 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb66:	4605      	mov	r5, r0
   1bb68:	460c      	mov	r4, r1
	__asm__ volatile(
   1bb6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb6e:	f3ef 8611 	mrs	r6, BASEPRI
   1bb72:	f383 8811 	msr	BASEPRI, r3
   1bb76:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1bb7a:	4b0d      	ldr	r3, [pc, #52]	; (1bbb0 <k_sched_time_slice_set+0x4c>)
   1bb7c:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1bb7e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1bb82:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bb86:	2100      	movs	r1, #0
   1bb88:	615a      	str	r2, [r3, #20]
   1bb8a:	fbe7 0105 	umlal	r0, r1, r7, r5
   1bb8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bb92:	2300      	movs	r3, #0
   1bb94:	f7e4 faa4 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1bb98:	4b06      	ldr	r3, [pc, #24]	; (1bbb4 <k_sched_time_slice_set+0x50>)
   1bb9a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1bb9c:	4b06      	ldr	r3, [pc, #24]	; (1bbb8 <k_sched_time_slice_set+0x54>)
   1bb9e:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1bba0:	f7ff ffca 	bl	1bb38 <z_reset_time_slice>
	__asm__ volatile(
   1bba4:	f386 8811 	msr	BASEPRI, r6
   1bba8:	f3bf 8f6f 	isb	sy
	}
}
   1bbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbae:	bf00      	nop
   1bbb0:	20002674 	.word	0x20002674
   1bbb4:	200026b0 	.word	0x200026b0
   1bbb8:	200026ac 	.word	0x200026ac

0001bbbc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1bbbc:	b949      	cbnz	r1, 1bbd2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bbbe:	f3ef 8005 	mrs	r0, IPSR
   1bbc2:	b930      	cbnz	r0, 1bbd2 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1bbc4:	4b05      	ldr	r3, [pc, #20]	; (1bbdc <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1bbc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1bbc8:	689b      	ldr	r3, [r3, #8]
   1bbca:	429a      	cmp	r2, r3
   1bbcc:	d001      	beq.n	1bbd2 <z_reschedule+0x16>
	ret = arch_swap(key);
   1bbce:	f7f8 be37 	b.w	14840 <arch_swap>
   1bbd2:	f381 8811 	msr	BASEPRI, r1
   1bbd6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1bbda:	4770      	bx	lr
   1bbdc:	20002674 	.word	0x20002674

0001bbe0 <k_sched_lock>:
	__asm__ volatile(
   1bbe0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bbe4:	f3ef 8111 	mrs	r1, BASEPRI
   1bbe8:	f383 8811 	msr	BASEPRI, r3
   1bbec:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1bbf0:	4b04      	ldr	r3, [pc, #16]	; (1bc04 <k_sched_lock+0x24>)
   1bbf2:	689a      	ldr	r2, [r3, #8]
   1bbf4:	7bd3      	ldrb	r3, [r2, #15]
   1bbf6:	3b01      	subs	r3, #1
   1bbf8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1bbfa:	f381 8811 	msr	BASEPRI, r1
   1bbfe:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1bc02:	4770      	bx	lr
   1bc04:	20002674 	.word	0x20002674

0001bc08 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1bc08:	4b09      	ldr	r3, [pc, #36]	; (1bc30 <z_priq_dumb_remove+0x28>)
   1bc0a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1bc0e:	4282      	cmp	r2, r0
   1bc10:	d105      	bne.n	1bc1e <z_priq_dumb_remove+0x16>
   1bc12:	689b      	ldr	r3, [r3, #8]
   1bc14:	428b      	cmp	r3, r1
   1bc16:	d102      	bne.n	1bc1e <z_priq_dumb_remove+0x16>
   1bc18:	7b4b      	ldrb	r3, [r1, #13]
   1bc1a:	06db      	lsls	r3, r3, #27
   1bc1c:	d106      	bne.n	1bc2c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1bc1e:	e9d1 3200 	ldrd	r3, r2, [r1]
   1bc22:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1bc24:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bc26:	2300      	movs	r3, #0
	node->prev = NULL;
   1bc28:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1bc2c:	4770      	bx	lr
   1bc2e:	bf00      	nop
   1bc30:	20002674 	.word	0x20002674

0001bc34 <update_cache>:
{
   1bc34:	b538      	push	{r3, r4, r5, lr}
   1bc36:	4c12      	ldr	r4, [pc, #72]	; (1bc80 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1bc38:	6923      	ldr	r3, [r4, #16]
   1bc3a:	68a2      	ldr	r2, [r4, #8]
{
   1bc3c:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1bc3e:	b10b      	cbz	r3, 1bc44 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1bc40:	68e5      	ldr	r5, [r4, #12]
   1bc42:	e00c      	b.n	1bc5e <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1bc44:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1bc48:	f003 ff2f 	bl	1faaa <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1bc4c:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1bc4e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1bc50:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1bc52:	bf44      	itt	mi
   1bc54:	f043 0308 	orrmi.w	r3, r3, #8
   1bc58:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1bc5a:	2d00      	cmp	r5, #0
   1bc5c:	d0f0      	beq.n	1bc40 <update_cache+0xc>
	if (preempt_ok != 0) {
   1bc5e:	b949      	cbnz	r1, 1bc74 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1bc60:	7b53      	ldrb	r3, [r2, #13]
   1bc62:	06db      	lsls	r3, r3, #27
   1bc64:	d106      	bne.n	1bc74 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1bc66:	69ab      	ldr	r3, [r5, #24]
   1bc68:	b923      	cbnz	r3, 1bc74 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1bc6a:	89d3      	ldrh	r3, [r2, #14]
   1bc6c:	2b7f      	cmp	r3, #127	; 0x7f
   1bc6e:	d901      	bls.n	1bc74 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1bc70:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1bc72:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1bc74:	4295      	cmp	r5, r2
   1bc76:	d001      	beq.n	1bc7c <update_cache+0x48>
			z_reset_time_slice();
   1bc78:	f7ff ff5e 	bl	1bb38 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1bc7c:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1bc7e:	e7f8      	b.n	1bc72 <update_cache+0x3e>
   1bc80:	20002674 	.word	0x20002674

0001bc84 <k_sched_unlock>:
{
   1bc84:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bc86:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc8a:	f3ef 8411 	mrs	r4, BASEPRI
   1bc8e:	f383 8811 	msr	BASEPRI, r3
   1bc92:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1bc96:	4b08      	ldr	r3, [pc, #32]	; (1bcb8 <k_sched_unlock+0x34>)
   1bc98:	689a      	ldr	r2, [r3, #8]
   1bc9a:	7bd3      	ldrb	r3, [r2, #15]
   1bc9c:	3301      	adds	r3, #1
   1bc9e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1bca0:	2000      	movs	r0, #0
   1bca2:	f7ff ffc7 	bl	1bc34 <update_cache>
	__asm__ volatile(
   1bca6:	f384 8811 	msr	BASEPRI, r4
   1bcaa:	f3bf 8f6f 	isb	sy
}
   1bcae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1bcb2:	f003 bece 	b.w	1fa52 <z_reschedule_unlocked>
   1bcb6:	bf00      	nop
   1bcb8:	20002674 	.word	0x20002674

0001bcbc <ready_thread>:
{
   1bcbc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1bcbe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1bcc2:	7b43      	ldrb	r3, [r0, #13]
   1bcc4:	2a00      	cmp	r2, #0
   1bcc6:	db2c      	blt.n	1bd22 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1bcc8:	06db      	lsls	r3, r3, #27
   1bcca:	d12a      	bne.n	1bd22 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1bccc:	6983      	ldr	r3, [r0, #24]
   1bcce:	bb43      	cbnz	r3, 1bd22 <ready_thread+0x66>
	return list->head == list;
   1bcd0:	4a15      	ldr	r2, [pc, #84]	; (1bd28 <ready_thread+0x6c>)
   1bcd2:	4611      	mov	r1, r2
   1bcd4:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bcd8:	428c      	cmp	r4, r1
   1bcda:	bf18      	it	ne
   1bcdc:	4623      	movne	r3, r4
   1bcde:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bce0:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1bce2:	bf38      	it	cc
   1bce4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bce6:	b1b3      	cbz	r3, 1bd16 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1bce8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1bcec:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1bcf0:	42ae      	cmp	r6, r5
   1bcf2:	db03      	blt.n	1bcfc <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1bcf4:	42a3      	cmp	r3, r4
   1bcf6:	d00e      	beq.n	1bd16 <ready_thread+0x5a>
   1bcf8:	681b      	ldr	r3, [r3, #0]
   1bcfa:	e7f4      	b.n	1bce6 <ready_thread+0x2a>
	node->prev = successor->prev;
   1bcfc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bcfe:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1bd02:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1bd04:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1bd06:	7b43      	ldrb	r3, [r0, #13]
   1bd08:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bd0c:	7343      	strb	r3, [r0, #13]
}
   1bd0e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1bd10:	2000      	movs	r0, #0
   1bd12:	f7ff bf8f 	b.w	1bc34 <update_cache>
	node->prev = list->tail;
   1bd16:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1bd1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1bd1c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1bd1e:	6310      	str	r0, [r2, #48]	; 0x30
}
   1bd20:	e7f1      	b.n	1bd06 <ready_thread+0x4a>
}
   1bd22:	bc70      	pop	{r4, r5, r6}
   1bd24:	4770      	bx	lr
   1bd26:	bf00      	nop
   1bd28:	20002674 	.word	0x20002674

0001bd2c <z_sched_start>:
{
   1bd2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bd2e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1bd32:	f3ef 8411 	mrs	r4, BASEPRI
   1bd36:	f382 8811 	msr	BASEPRI, r2
   1bd3a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1bd3e:	7b42      	ldrb	r2, [r0, #13]
   1bd40:	0751      	lsls	r1, r2, #29
   1bd42:	d404      	bmi.n	1bd4e <z_sched_start+0x22>
	__asm__ volatile(
   1bd44:	f384 8811 	msr	BASEPRI, r4
   1bd48:	f3bf 8f6f 	isb	sy
}
   1bd4c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1bd4e:	f022 0204 	bic.w	r2, r2, #4
   1bd52:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1bd54:	f7ff ffb2 	bl	1bcbc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1bd58:	4621      	mov	r1, r4
   1bd5a:	4802      	ldr	r0, [pc, #8]	; (1bd64 <z_sched_start+0x38>)
}
   1bd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1bd60:	f7ff bf2c 	b.w	1bbbc <z_reschedule>
   1bd64:	20002ffc 	.word	0x20002ffc

0001bd68 <move_thread_to_end_of_prio_q>:
{
   1bd68:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1bd6a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1bd6e:	2b00      	cmp	r3, #0
{
   1bd70:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1bd72:	da02      	bge.n	1bd7a <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1bd74:	4817      	ldr	r0, [pc, #92]	; (1bdd4 <move_thread_to_end_of_prio_q+0x6c>)
   1bd76:	f7ff ff47 	bl	1bc08 <z_priq_dumb_remove>
	return list->head == list;
   1bd7a:	4a17      	ldr	r2, [pc, #92]	; (1bdd8 <move_thread_to_end_of_prio_q+0x70>)
   1bd7c:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bd7e:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   1bd80:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd84:	4283      	cmp	r3, r0
   1bd86:	bf08      	it	eq
   1bd88:	2300      	moveq	r3, #0
   1bd8a:	2b00      	cmp	r3, #0
   1bd8c:	bf38      	it	cc
   1bd8e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bd90:	b1d3      	cbz	r3, 1bdc8 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1bd92:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1bd96:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1bd9a:	42ae      	cmp	r6, r5
   1bd9c:	db03      	blt.n	1bda6 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1bd9e:	42a3      	cmp	r3, r4
   1bda0:	d012      	beq.n	1bdc8 <move_thread_to_end_of_prio_q+0x60>
   1bda2:	681b      	ldr	r3, [r3, #0]
   1bda4:	e7f4      	b.n	1bd90 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1bda6:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1bda8:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1bdac:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1bdae:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1bdb0:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1bdb2:	6890      	ldr	r0, [r2, #8]
   1bdb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bdb8:	734b      	strb	r3, [r1, #13]
   1bdba:	1a43      	subs	r3, r0, r1
   1bdbc:	4258      	negs	r0, r3
}
   1bdbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1bdc2:	4158      	adcs	r0, r3
   1bdc4:	f7ff bf36 	b.w	1bc34 <update_cache>
	node->prev = list->tail;
   1bdc8:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1bdcc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1bdce:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1bdd0:	6311      	str	r1, [r2, #48]	; 0x30
}
   1bdd2:	e7ed      	b.n	1bdb0 <move_thread_to_end_of_prio_q+0x48>
   1bdd4:	200026a0 	.word	0x200026a0
   1bdd8:	20002674 	.word	0x20002674

0001bddc <z_time_slice>:
{
   1bddc:	b570      	push	{r4, r5, r6, lr}
   1bdde:	4601      	mov	r1, r0
	__asm__ volatile(
   1bde0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bde4:	f3ef 8411 	mrs	r4, BASEPRI
   1bde8:	f383 8811 	msr	BASEPRI, r3
   1bdec:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1bdf0:	4b16      	ldr	r3, [pc, #88]	; (1be4c <z_time_slice+0x70>)
   1bdf2:	4a17      	ldr	r2, [pc, #92]	; (1be50 <z_time_slice+0x74>)
   1bdf4:	6898      	ldr	r0, [r3, #8]
   1bdf6:	6815      	ldr	r5, [r2, #0]
   1bdf8:	42a8      	cmp	r0, r5
   1bdfa:	461d      	mov	r5, r3
   1bdfc:	d106      	bne.n	1be0c <z_time_slice+0x30>
			z_reset_time_slice();
   1bdfe:	f7ff fe9b 	bl	1bb38 <z_reset_time_slice>
	__asm__ volatile(
   1be02:	f384 8811 	msr	BASEPRI, r4
   1be06:	f3bf 8f6f 	isb	sy
}
   1be0a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1be0c:	2600      	movs	r6, #0
   1be0e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1be10:	4a10      	ldr	r2, [pc, #64]	; (1be54 <z_time_slice+0x78>)
   1be12:	6812      	ldr	r2, [r2, #0]
   1be14:	b1ba      	cbz	r2, 1be46 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1be16:	89c2      	ldrh	r2, [r0, #14]
   1be18:	2a7f      	cmp	r2, #127	; 0x7f
   1be1a:	d814      	bhi.n	1be46 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1be1c:	7b42      	ldrb	r2, [r0, #13]
   1be1e:	06d2      	lsls	r2, r2, #27
   1be20:	d111      	bne.n	1be46 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1be22:	4a0d      	ldr	r2, [pc, #52]	; (1be58 <z_time_slice+0x7c>)
   1be24:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1be28:	6812      	ldr	r2, [r2, #0]
   1be2a:	4296      	cmp	r6, r2
   1be2c:	db0b      	blt.n	1be46 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1be2e:	4a0b      	ldr	r2, [pc, #44]	; (1be5c <z_time_slice+0x80>)
   1be30:	4290      	cmp	r0, r2
   1be32:	d008      	beq.n	1be46 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1be34:	695a      	ldr	r2, [r3, #20]
   1be36:	428a      	cmp	r2, r1
   1be38:	dc02      	bgt.n	1be40 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1be3a:	f7ff ff95 	bl	1bd68 <move_thread_to_end_of_prio_q>
   1be3e:	e7de      	b.n	1bdfe <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1be40:	1a52      	subs	r2, r2, r1
   1be42:	615a      	str	r2, [r3, #20]
   1be44:	e7dd      	b.n	1be02 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1be46:	2300      	movs	r3, #0
   1be48:	616b      	str	r3, [r5, #20]
   1be4a:	e7da      	b.n	1be02 <z_time_slice+0x26>
   1be4c:	20002674 	.word	0x20002674
   1be50:	200026a8 	.word	0x200026a8
   1be54:	200026b0 	.word	0x200026b0
   1be58:	200026ac 	.word	0x200026ac
   1be5c:	200021e0 	.word	0x200021e0

0001be60 <z_impl_k_thread_suspend>:
{
   1be60:	b570      	push	{r4, r5, r6, lr}
   1be62:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1be64:	3018      	adds	r0, #24
   1be66:	f003 ff51 	bl	1fd0c <z_abort_timeout>
	__asm__ volatile(
   1be6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be6e:	f3ef 8611 	mrs	r6, BASEPRI
   1be72:	f383 8811 	msr	BASEPRI, r3
   1be76:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1be7a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1be7e:	2b00      	cmp	r3, #0
   1be80:	da07      	bge.n	1be92 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1be82:	480f      	ldr	r0, [pc, #60]	; (1bec0 <z_impl_k_thread_suspend+0x60>)
   1be84:	4621      	mov	r1, r4
   1be86:	f7ff febf 	bl	1bc08 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1be8a:	7b63      	ldrb	r3, [r4, #13]
   1be8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1be90:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1be92:	4d0c      	ldr	r5, [pc, #48]	; (1bec4 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1be94:	7b63      	ldrb	r3, [r4, #13]
   1be96:	68a8      	ldr	r0, [r5, #8]
   1be98:	f043 0310 	orr.w	r3, r3, #16
   1be9c:	7363      	strb	r3, [r4, #13]
   1be9e:	1b03      	subs	r3, r0, r4
   1bea0:	4258      	negs	r0, r3
   1bea2:	4158      	adcs	r0, r3
   1bea4:	f7ff fec6 	bl	1bc34 <update_cache>
	__asm__ volatile(
   1bea8:	f386 8811 	msr	BASEPRI, r6
   1beac:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1beb0:	68ab      	ldr	r3, [r5, #8]
   1beb2:	42a3      	cmp	r3, r4
   1beb4:	d103      	bne.n	1bebe <z_impl_k_thread_suspend+0x5e>
}
   1beb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1beba:	f003 bdca 	b.w	1fa52 <z_reschedule_unlocked>
}
   1bebe:	bd70      	pop	{r4, r5, r6, pc}
   1bec0:	200026a0 	.word	0x200026a0
   1bec4:	20002674 	.word	0x20002674

0001bec8 <z_thread_single_abort>:
{
   1bec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1becc:	4604      	mov	r4, r0
	__asm__ volatile(
   1bece:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bed2:	f3ef 8211 	mrs	r2, BASEPRI
   1bed6:	f383 8811 	msr	BASEPRI, r3
   1beda:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1bede:	7b43      	ldrb	r3, [r0, #13]
   1bee0:	f013 0f28 	tst.w	r3, #40	; 0x28
   1bee4:	d005      	beq.n	1bef2 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1bee6:	f382 8811 	msr	BASEPRI, r2
   1beea:	f3bf 8f6f 	isb	sy
}
   1beee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1bef2:	f043 0320 	orr.w	r3, r3, #32
   1bef6:	7343      	strb	r3, [r0, #13]
   1bef8:	f382 8811 	msr	BASEPRI, r2
   1befc:	f3bf 8f6f 	isb	sy
   1bf00:	3018      	adds	r0, #24
   1bf02:	f003 ff03 	bl	1fd0c <z_abort_timeout>
	__asm__ volatile(
   1bf06:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf0a:	f3ef 8611 	mrs	r6, BASEPRI
   1bf0e:	f383 8811 	msr	BASEPRI, r3
   1bf12:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1bf16:	7b63      	ldrb	r3, [r4, #13]
   1bf18:	06d8      	lsls	r0, r3, #27
   1bf1a:	d116      	bne.n	1bf4a <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1bf1c:	69a2      	ldr	r2, [r4, #24]
   1bf1e:	b9a2      	cbnz	r2, 1bf4a <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1bf20:	0619      	lsls	r1, r3, #24
   1bf22:	d507      	bpl.n	1bf34 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1bf24:	4826      	ldr	r0, [pc, #152]	; (1bfc0 <z_thread_single_abort+0xf8>)
   1bf26:	4621      	mov	r1, r4
   1bf28:	f7ff fe6e 	bl	1bc08 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1bf2c:	7b63      	ldrb	r3, [r4, #13]
   1bf2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bf32:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1bf34:	4b23      	ldr	r3, [pc, #140]	; (1bfc4 <z_thread_single_abort+0xfc>)
   1bf36:	6898      	ldr	r0, [r3, #8]
   1bf38:	1b02      	subs	r2, r0, r4
   1bf3a:	4250      	negs	r0, r2
   1bf3c:	4150      	adcs	r0, r2
   1bf3e:	f7ff fe79 	bl	1bc34 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1bf42:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1bf46:	2700      	movs	r7, #0
   1bf48:	e01e      	b.n	1bf88 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1bf4a:	079b      	lsls	r3, r3, #30
   1bf4c:	d5f9      	bpl.n	1bf42 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1bf4e:	68a0      	ldr	r0, [r4, #8]
   1bf50:	4621      	mov	r1, r4
   1bf52:	f7ff fe59 	bl	1bc08 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1bf56:	7b63      	ldrb	r3, [r4, #13]
   1bf58:	f023 0302 	bic.w	r3, r3, #2
   1bf5c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1bf5e:	2300      	movs	r3, #0
   1bf60:	60a3      	str	r3, [r4, #8]
   1bf62:	e7ee      	b.n	1bf42 <z_thread_single_abort+0x7a>
   1bf64:	f105 0018 	add.w	r0, r5, #24
   1bf68:	f003 fed0 	bl	1fd0c <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1bf6c:	68a8      	ldr	r0, [r5, #8]
   1bf6e:	4629      	mov	r1, r5
   1bf70:	f7ff fe4a 	bl	1bc08 <z_priq_dumb_remove>
   1bf74:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1bf76:	60af      	str	r7, [r5, #8]
   1bf78:	f023 0302 	bic.w	r3, r3, #2
   1bf7c:	736b      	strb	r3, [r5, #13]
   1bf7e:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1bf82:	4628      	mov	r0, r5
   1bf84:	f7ff fe9a 	bl	1bcbc <ready_thread>
	return list->head == list;
   1bf88:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf8a:	4545      	cmp	r5, r8
   1bf8c:	d001      	beq.n	1bf92 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1bf8e:	2d00      	cmp	r5, #0
   1bf90:	d1e8      	bne.n	1bf64 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1bf92:	4b0c      	ldr	r3, [pc, #48]	; (1bfc4 <z_thread_single_abort+0xfc>)
   1bf94:	689a      	ldr	r2, [r3, #8]
   1bf96:	4b0c      	ldr	r3, [pc, #48]	; (1bfc8 <z_thread_single_abort+0x100>)
   1bf98:	429a      	cmp	r2, r3
   1bf9a:	d102      	bne.n	1bfa2 <z_thread_single_abort+0xda>
			update_cache(1);
   1bf9c:	2001      	movs	r0, #1
   1bf9e:	f7ff fe49 	bl	1bc34 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1bfa2:	7b63      	ldrb	r3, [r4, #13]
   1bfa4:	f043 0308 	orr.w	r3, r3, #8
   1bfa8:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1bfaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1bfac:	f386 8811 	msr	BASEPRI, r6
   1bfb0:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1bfb4:	2b00      	cmp	r3, #0
   1bfb6:	d09a      	beq.n	1beee <z_thread_single_abort+0x26>
		fn_abort(thread);
   1bfb8:	4620      	mov	r0, r4
}
   1bfba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1bfbe:	4718      	bx	r3
   1bfc0:	200026a0 	.word	0x200026a0
   1bfc4:	20002674 	.word	0x20002674
   1bfc8:	200021e0 	.word	0x200021e0

0001bfcc <unready_thread>:
{
   1bfcc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1bfce:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1bfd2:	2b00      	cmp	r3, #0
{
   1bfd4:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1bfd6:	da06      	bge.n	1bfe6 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1bfd8:	4807      	ldr	r0, [pc, #28]	; (1bff8 <unready_thread+0x2c>)
   1bfda:	f7ff fe15 	bl	1bc08 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1bfde:	7b4b      	ldrb	r3, [r1, #13]
   1bfe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bfe4:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1bfe6:	4b05      	ldr	r3, [pc, #20]	; (1bffc <unready_thread+0x30>)
   1bfe8:	6898      	ldr	r0, [r3, #8]
   1bfea:	1a43      	subs	r3, r0, r1
   1bfec:	4258      	negs	r0, r3
   1bfee:	4158      	adcs	r0, r3
}
   1bff0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1bff4:	f7ff be1e 	b.w	1bc34 <update_cache>
   1bff8:	200026a0 	.word	0x200026a0
   1bffc:	20002674 	.word	0x20002674

0001c000 <pend>:
{
   1c000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c004:	4606      	mov	r6, r0
   1c006:	4614      	mov	r4, r2
   1c008:	461d      	mov	r5, r3
	__asm__ volatile(
   1c00a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c00e:	f3ef 8711 	mrs	r7, BASEPRI
   1c012:	f383 8811 	msr	BASEPRI, r3
   1c016:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1c01a:	f003 fd80 	bl	1fb1e <add_to_waitq_locked>
	__asm__ volatile(
   1c01e:	f387 8811 	msr	BASEPRI, r7
   1c022:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c026:	1c6b      	adds	r3, r5, #1
   1c028:	bf08      	it	eq
   1c02a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1c02e:	d008      	beq.n	1c042 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1c030:	4622      	mov	r2, r4
   1c032:	462b      	mov	r3, r5
   1c034:	f106 0018 	add.w	r0, r6, #24
   1c038:	4903      	ldr	r1, [pc, #12]	; (1c048 <pend+0x48>)
}
   1c03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c03e:	f000 bb2d 	b.w	1c69c <z_add_timeout>
   1c042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c046:	bf00      	nop
   1c048:	0001fadf 	.word	0x0001fadf

0001c04c <z_pend_curr>:
{
   1c04c:	b510      	push	{r4, lr}
	pending_current = _current;
   1c04e:	4b07      	ldr	r3, [pc, #28]	; (1c06c <z_pend_curr+0x20>)
   1c050:	6898      	ldr	r0, [r3, #8]
   1c052:	4b07      	ldr	r3, [pc, #28]	; (1c070 <z_pend_curr+0x24>)
{
   1c054:	460c      	mov	r4, r1
	pending_current = _current;
   1c056:	6018      	str	r0, [r3, #0]
{
   1c058:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1c05a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c05e:	f7ff ffcf 	bl	1c000 <pend>
   1c062:	4620      	mov	r0, r4
}
   1c064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c068:	f7f8 bbea 	b.w	14840 <arch_swap>
   1c06c:	20002674 	.word	0x20002674
   1c070:	200026a8 	.word	0x200026a8

0001c074 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1c074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c078:	4605      	mov	r5, r0
   1c07a:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1c07c:	f003 fe86 	bl	1fd8c <z_tick_get_32>
   1c080:	4604      	mov	r4, r0
	__asm__ volatile(
   1c082:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c086:	f3ef 8811 	mrs	r8, BASEPRI
   1c08a:	f383 8811 	msr	BASEPRI, r3
   1c08e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1c092:	4e12      	ldr	r6, [pc, #72]	; (1c0dc <z_tick_sleep.part.0+0x68>)
   1c094:	4b12      	ldr	r3, [pc, #72]	; (1c0e0 <z_tick_sleep.part.0+0x6c>)
   1c096:	68b0      	ldr	r0, [r6, #8]
   1c098:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1c09a:	f7ff ff97 	bl	1bfcc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1c09e:	68b0      	ldr	r0, [r6, #8]
   1c0a0:	4910      	ldr	r1, [pc, #64]	; (1c0e4 <z_tick_sleep.part.0+0x70>)
   1c0a2:	462a      	mov	r2, r5
   1c0a4:	463b      	mov	r3, r7
   1c0a6:	3018      	adds	r0, #24
   1c0a8:	f000 faf8 	bl	1c69c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1c0ac:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c0ae:	7b53      	ldrb	r3, [r2, #13]
   1c0b0:	f043 0310 	orr.w	r3, r3, #16
   1c0b4:	7353      	strb	r3, [r2, #13]
   1c0b6:	4640      	mov	r0, r8
   1c0b8:	f7f8 fbc2 	bl	14840 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1c0bc:	f003 fe66 	bl	1fd8c <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1c0c0:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1c0c2:	1a24      	subs	r4, r4, r0
   1c0c4:	f04f 0500 	mov.w	r5, #0
   1c0c8:	f165 0500 	sbc.w	r5, r5, #0
   1c0cc:	2c00      	cmp	r4, #0
   1c0ce:	f175 0300 	sbcs.w	r3, r5, #0
   1c0d2:	bfb8      	it	lt
   1c0d4:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1c0d6:	4620      	mov	r0, r4
   1c0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c0dc:	20002674 	.word	0x20002674
   1c0e0:	200026a8 	.word	0x200026a8
   1c0e4:	0001fadf 	.word	0x0001fadf

0001c0e8 <z_set_prio>:
{
   1c0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0ec:	4604      	mov	r4, r0
   1c0ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c0f2:	f3ef 8811 	mrs	r8, BASEPRI
   1c0f6:	f383 8811 	msr	BASEPRI, r3
   1c0fa:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c0fe:	7b43      	ldrb	r3, [r0, #13]
   1c100:	06db      	lsls	r3, r3, #27
   1c102:	b24e      	sxtb	r6, r1
   1c104:	d12e      	bne.n	1c164 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1c106:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1c108:	bb65      	cbnz	r5, 1c164 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c10a:	4f18      	ldr	r7, [pc, #96]	; (1c16c <z_set_prio+0x84>)
   1c10c:	4621      	mov	r1, r4
   1c10e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1c112:	f7ff fd79 	bl	1bc08 <z_priq_dumb_remove>
	return list->head == list;
   1c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
				thread->base.prio = prio;
   1c11a:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c11c:	4283      	cmp	r3, r0
   1c11e:	bf18      	it	ne
   1c120:	461d      	movne	r5, r3
   1c122:	2d00      	cmp	r5, #0
   1c124:	bf38      	it	cc
   1c126:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c128:	b1b5      	cbz	r5, 1c158 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c12a:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1c12e:	42b1      	cmp	r1, r6
   1c130:	dc03      	bgt.n	1c13a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1c132:	42aa      	cmp	r2, r5
   1c134:	d010      	beq.n	1c158 <z_set_prio+0x70>
   1c136:	682d      	ldr	r5, [r5, #0]
   1c138:	e7f6      	b.n	1c128 <z_set_prio+0x40>
	node->prev = successor->prev;
   1c13a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1c13c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1c140:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c142:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1c144:	2001      	movs	r0, #1
   1c146:	f7ff fd75 	bl	1bc34 <update_cache>
   1c14a:	2001      	movs	r0, #1
	__asm__ volatile(
   1c14c:	f388 8811 	msr	BASEPRI, r8
   1c150:	f3bf 8f6f 	isb	sy
}
   1c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1c158:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c15e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c160:	633c      	str	r4, [r7, #48]	; 0x30
}
   1c162:	e7ef      	b.n	1c144 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1c164:	73a6      	strb	r6, [r4, #14]
   1c166:	2000      	movs	r0, #0
   1c168:	e7f0      	b.n	1c14c <z_set_prio+0x64>
   1c16a:	bf00      	nop
   1c16c:	20002674 	.word	0x20002674

0001c170 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1c170:	4b04      	ldr	r3, [pc, #16]	; (1c184 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1c172:	2100      	movs	r1, #0
   1c174:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1c178:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1c17c:	4608      	mov	r0, r1
   1c17e:	f7ff bcf1 	b.w	1bb64 <k_sched_time_slice_set>
   1c182:	bf00      	nop
   1c184:	20002674 	.word	0x20002674

0001c188 <z_impl_k_yield>:
{
   1c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1c18a:	4c24      	ldr	r4, [pc, #144]	; (1c21c <z_impl_k_yield+0x94>)
   1c18c:	4b24      	ldr	r3, [pc, #144]	; (1c220 <z_impl_k_yield+0x98>)
   1c18e:	68a2      	ldr	r2, [r4, #8]
   1c190:	429a      	cmp	r2, r3
   1c192:	d030      	beq.n	1c1f6 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1c194:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c198:	f3ef 8511 	mrs	r5, BASEPRI
   1c19c:	f383 8811 	msr	BASEPRI, r3
   1c1a0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1c1a4:	68a1      	ldr	r1, [r4, #8]
   1c1a6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1c1aa:	f7ff fd2d 	bl	1bc08 <z_priq_dumb_remove>
	return list->head == list;
   1c1ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1c1b0:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c1b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c1b4:	4283      	cmp	r3, r0
   1c1b6:	bf08      	it	eq
   1c1b8:	2300      	moveq	r3, #0
   1c1ba:	2b00      	cmp	r3, #0
   1c1bc:	bf38      	it	cc
   1c1be:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c1c0:	b32b      	cbz	r3, 1c20e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c1c2:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1c1c6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1c1ca:	42b7      	cmp	r7, r6
   1c1cc:	db03      	blt.n	1c1d6 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1c1ce:	428b      	cmp	r3, r1
   1c1d0:	d01d      	beq.n	1c20e <z_impl_k_yield+0x86>
   1c1d2:	681b      	ldr	r3, [r3, #0]
   1c1d4:	e7f4      	b.n	1c1c0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1c1d6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1c1d8:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1c1dc:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1c1de:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1c1e0:	7b53      	ldrb	r3, [r2, #13]
   1c1e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c1e6:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1c1e8:	2001      	movs	r0, #1
   1c1ea:	f7ff fd23 	bl	1bc34 <update_cache>
	__asm__ volatile(
   1c1ee:	f385 8811 	msr	BASEPRI, r5
   1c1f2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c1f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c1fa:	f3ef 8011 	mrs	r0, BASEPRI
   1c1fe:	f383 8811 	msr	BASEPRI, r3
   1c202:	f3bf 8f6f 	isb	sy
}
   1c206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c20a:	f7f8 bb19 	b.w	14840 <arch_swap>
	node->prev = list->tail;
   1c20e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1c212:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c214:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c216:	6322      	str	r2, [r4, #48]	; 0x30
}
   1c218:	e7e2      	b.n	1c1e0 <z_impl_k_yield+0x58>
   1c21a:	bf00      	nop
   1c21c:	20002674 	.word	0x20002674
   1c220:	200021e0 	.word	0x200021e0

0001c224 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c224:	f1b1 3fff 	cmp.w	r1, #4294967295
   1c228:	bf08      	it	eq
   1c22a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1c22e:	b508      	push	{r3, lr}
   1c230:	4602      	mov	r2, r0
   1c232:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c234:	d106      	bne.n	1c244 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1c236:	4b0b      	ldr	r3, [pc, #44]	; (1c264 <z_impl_k_sleep+0x40>)
   1c238:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1c23a:	f7ff fe11 	bl	1be60 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1c23e:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1c242:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1c244:	4313      	orrs	r3, r2
   1c246:	d10a      	bne.n	1c25e <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1c248:	f7ff ff9e 	bl	1c188 <z_impl_k_yield>
		return 0;
   1c24c:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
   1c24e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c252:	fb80 2303 	smull	r2, r3, r0, r3
   1c256:	0bd0      	lsrs	r0, r2, #15
   1c258:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1c25c:	e7f1      	b.n	1c242 <z_impl_k_sleep+0x1e>
   1c25e:	f7ff ff09 	bl	1c074 <z_tick_sleep.part.0>
   1c262:	e7f4      	b.n	1c24e <z_impl_k_sleep+0x2a>
   1c264:	20002674 	.word	0x20002674

0001c268 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1c268:	4b01      	ldr	r3, [pc, #4]	; (1c270 <z_impl_k_current_get+0x8>)
   1c26a:	6898      	ldr	r0, [r3, #8]
   1c26c:	4770      	bx	lr
   1c26e:	bf00      	nop
   1c270:	20002674 	.word	0x20002674

0001c274 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1c274:	b538      	push	{r3, r4, r5, lr}
   1c276:	4604      	mov	r4, r0
   1c278:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c27c:	f3ef 8511 	mrs	r5, BASEPRI
   1c280:	f383 8811 	msr	BASEPRI, r3
   1c284:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1c288:	f003 fc74 	bl	1fb74 <z_unpend_first_thread>

	if (thread != NULL) {
   1c28c:	b150      	cbz	r0, 1c2a4 <z_impl_k_sem_give+0x30>
   1c28e:	2200      	movs	r2, #0
   1c290:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1c294:	f003 fc13 	bl	1fabe <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1c298:	4629      	mov	r1, r5
   1c29a:	4808      	ldr	r0, [pc, #32]	; (1c2bc <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1c29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1c2a0:	f7ff bc8c 	b.w	1bbbc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1c2a4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1c2a8:	429a      	cmp	r2, r3
   1c2aa:	bf18      	it	ne
   1c2ac:	3301      	addne	r3, #1
   1c2ae:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1c2b0:	2102      	movs	r1, #2
   1c2b2:	f104 0010 	add.w	r0, r4, #16
   1c2b6:	f003 ff08 	bl	200ca <z_handle_obj_poll_events>
}
   1c2ba:	e7ed      	b.n	1c298 <z_impl_k_sem_give+0x24>
   1c2bc:	20002ffc 	.word	0x20002ffc

0001c2c0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1c2c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c2c2:	4614      	mov	r4, r2
   1c2c4:	461d      	mov	r5, r3
   1c2c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c2ca:	f3ef 8111 	mrs	r1, BASEPRI
   1c2ce:	f383 8811 	msr	BASEPRI, r3
   1c2d2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1c2d6:	6883      	ldr	r3, [r0, #8]
   1c2d8:	b143      	cbz	r3, 1c2ec <z_impl_k_sem_take+0x2c>
		sem->count--;
   1c2da:	3b01      	subs	r3, #1
   1c2dc:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1c2de:	f381 8811 	msr	BASEPRI, r1
   1c2e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1c2e6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1c2e8:	b003      	add	sp, #12
   1c2ea:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c2ec:	ea54 0305 	orrs.w	r3, r4, r5
   1c2f0:	d106      	bne.n	1c300 <z_impl_k_sem_take+0x40>
   1c2f2:	f381 8811 	msr	BASEPRI, r1
   1c2f6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1c2fa:	f06f 000f 	mvn.w	r0, #15
   1c2fe:	e7f3      	b.n	1c2e8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1c300:	4602      	mov	r2, r0
   1c302:	e9cd 4500 	strd	r4, r5, [sp]
   1c306:	4802      	ldr	r0, [pc, #8]	; (1c310 <z_impl_k_sem_take+0x50>)
   1c308:	f7ff fea0 	bl	1c04c <z_pend_curr>
	return ret;
   1c30c:	e7ec      	b.n	1c2e8 <z_impl_k_sem_take+0x28>
   1c30e:	bf00      	nop
   1c310:	20002ffc 	.word	0x20002ffc

0001c314 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1c314:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1c316:	4c08      	ldr	r4, [pc, #32]	; (1c338 <k_sys_work_q_init+0x24>)
   1c318:	4908      	ldr	r1, [pc, #32]	; (1c33c <k_sys_work_q_init+0x28>)
   1c31a:	f04f 33ff 	mov.w	r3, #4294967295
   1c31e:	f44f 7240 	mov.w	r2, #768	; 0x300
   1c322:	4620      	mov	r0, r4
   1c324:	f000 f8de 	bl	1c4e4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1c328:	4905      	ldr	r1, [pc, #20]	; (1c340 <k_sys_work_q_init+0x2c>)
   1c32a:	f104 0018 	add.w	r0, r4, #24
   1c32e:	f003 fc70 	bl	1fc12 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1c332:	2000      	movs	r0, #0
   1c334:	bd10      	pop	{r4, pc}
   1c336:	bf00      	nop
   1c338:	200022f0 	.word	0x200022f0
   1c33c:	20005100 	.word	0x20005100
   1c340:	0002227f 	.word	0x0002227f

0001c344 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1c344:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1c348:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1c34c:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1c350:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c352:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1c354:	2504      	movs	r5, #4
   1c356:	7345      	strb	r5, [r0, #13]
{
   1c358:	460f      	mov	r7, r1

	thread_base->prio = priority;
   1c35a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1c35c:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c35e:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   1c360:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1c364:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c366:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1c36a:	3720      	adds	r7, #32
	node->prev = NULL;
   1c36c:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1c370:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   1c374:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c376:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c37a:	9202      	str	r2, [sp, #8]
   1c37c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c37e:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1c380:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c384:	9200      	str	r2, [sp, #0]
   1c386:	4642      	mov	r2, r8
{
   1c388:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c38a:	f7f8 fae7 	bl	1495c <arch_new_thread>
	if (!_current) {
   1c38e:	4b05      	ldr	r3, [pc, #20]	; (1c3a4 <z_setup_new_thread+0x60>)
   1c390:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1c392:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1c396:	b103      	cbz	r3, 1c39a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1c398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   1c39a:	67a3      	str	r3, [r4, #120]	; 0x78
}
   1c39c:	4640      	mov	r0, r8
   1c39e:	b004      	add	sp, #16
   1c3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c3a4:	20002674 	.word	0x20002674

0001c3a8 <z_impl_k_thread_create>:
{
   1c3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3aa:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c3ac:	2500      	movs	r5, #0
   1c3ae:	9505      	str	r5, [sp, #20]
   1c3b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1c3b2:	9504      	str	r5, [sp, #16]
   1c3b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1c3b6:	9503      	str	r5, [sp, #12]
   1c3b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c3ba:	9502      	str	r5, [sp, #8]
{
   1c3bc:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c3c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1c3c2:	9501      	str	r5, [sp, #4]
   1c3c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1c3c6:	9500      	str	r5, [sp, #0]
{
   1c3c8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c3ca:	f7ff ffbb 	bl	1c344 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1c3ce:	1c7b      	adds	r3, r7, #1
   1c3d0:	bf08      	it	eq
   1c3d2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1c3d6:	d005      	beq.n	1c3e4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c3d8:	ea56 0307 	orrs.w	r3, r6, r7
   1c3dc:	d105      	bne.n	1c3ea <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1c3de:	4620      	mov	r0, r4
   1c3e0:	f7ff fca4 	bl	1bd2c <z_sched_start>
}
   1c3e4:	4620      	mov	r0, r4
   1c3e6:	b007      	add	sp, #28
   1c3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1c3ea:	4904      	ldr	r1, [pc, #16]	; (1c3fc <z_impl_k_thread_create+0x54>)
   1c3ec:	4632      	mov	r2, r6
   1c3ee:	463b      	mov	r3, r7
   1c3f0:	f104 0018 	add.w	r0, r4, #24
   1c3f4:	f000 f952 	bl	1c69c <z_add_timeout>
   1c3f8:	e7f4      	b.n	1c3e4 <z_impl_k_thread_create+0x3c>
   1c3fa:	bf00      	nop
   1c3fc:	0001fadf 	.word	0x0001fadf

0001c400 <z_init_static_threads>:
{
   1c400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1c404:	4e2a      	ldr	r6, [pc, #168]	; (1c4b0 <z_init_static_threads+0xb0>)
   1c406:	4d2b      	ldr	r5, [pc, #172]	; (1c4b4 <z_init_static_threads+0xb4>)
{
   1c408:	b086      	sub	sp, #24
   1c40a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1c40c:	42b5      	cmp	r5, r6
   1c40e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1c412:	d310      	bcc.n	1c436 <z_init_static_threads+0x36>
	k_sched_lock();
   1c414:	f7ff fbe4 	bl	1bbe0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c418:	4c26      	ldr	r4, [pc, #152]	; (1c4b4 <z_init_static_threads+0xb4>)
   1c41a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1c4b8 <z_init_static_threads+0xb8>
   1c41e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1c422:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c426:	2700      	movs	r7, #0
   1c428:	4544      	cmp	r4, r8
   1c42a:	d321      	bcc.n	1c470 <z_init_static_threads+0x70>
}
   1c42c:	b006      	add	sp, #24
   1c42e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1c432:	f7ff bc27 	b.w	1bc84 <k_sched_unlock>
		z_setup_new_thread(
   1c436:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c43a:	9305      	str	r3, [sp, #20]
   1c43c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1c440:	9304      	str	r3, [sp, #16]
   1c442:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c446:	9303      	str	r3, [sp, #12]
   1c448:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1c44c:	9302      	str	r3, [sp, #8]
   1c44e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1c452:	9301      	str	r3, [sp, #4]
   1c454:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1c458:	9300      	str	r3, [sp, #0]
   1c45a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1c45e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1c462:	f7ff ff6f 	bl	1c344 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1c466:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1c46a:	65dd      	str	r5, [r3, #92]	; 0x5c
   1c46c:	4625      	mov	r5, r4
   1c46e:	e7cd      	b.n	1c40c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1c470:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c472:	1c5a      	adds	r2, r3, #1
   1c474:	d00d      	beq.n	1c492 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1c476:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c47a:	4630      	mov	r0, r6
   1c47c:	4639      	mov	r1, r7
   1c47e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c482:	42b9      	cmp	r1, r7
   1c484:	bf08      	it	eq
   1c486:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1c488:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c48a:	d104      	bne.n	1c496 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1c48c:	4628      	mov	r0, r5
   1c48e:	f7ff fc4d 	bl	1bd2c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c492:	3430      	adds	r4, #48	; 0x30
   1c494:	e7c8      	b.n	1c428 <z_init_static_threads+0x28>
   1c496:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c49a:	2300      	movs	r3, #0
   1c49c:	f7e3 fe20 	bl	e0 <__aeabi_uldivmod>
   1c4a0:	4602      	mov	r2, r0
   1c4a2:	460b      	mov	r3, r1
   1c4a4:	f105 0018 	add.w	r0, r5, #24
   1c4a8:	4651      	mov	r1, sl
   1c4aa:	f000 f8f7 	bl	1c69c <z_add_timeout>
   1c4ae:	e7f0      	b.n	1c492 <z_init_static_threads+0x92>
   1c4b0:	20000700 	.word	0x20000700
   1c4b4:	20000700 	.word	0x20000700
   1c4b8:	0001fadf 	.word	0x0001fadf

0001c4bc <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1c4bc:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c4be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c4c2:	f3ef 8411 	mrs	r4, BASEPRI
   1c4c6:	f383 8811 	msr	BASEPRI, r3
   1c4ca:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1c4ce:	4b04      	ldr	r3, [pc, #16]	; (1c4e0 <z_self_abort+0x24>)
   1c4d0:	6898      	ldr	r0, [r3, #8]
   1c4d2:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1c4d4:	f7ff fcc4 	bl	1be60 <z_impl_k_thread_suspend>
   1c4d8:	4620      	mov	r0, r4
   1c4da:	f7f8 f9b1 	bl	14840 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1c4de:	bf00      	nop
   1c4e0:	20002674 	.word	0x20002674

0001c4e4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1c4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4e8:	4604      	mov	r4, r0
   1c4ea:	b088      	sub	sp, #32
   1c4ec:	460d      	mov	r5, r1
   1c4ee:	4616      	mov	r6, r2
   1c4f0:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1c4f2:	f003 fa1c 	bl	1f92e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1c4f6:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c4fa:	2200      	movs	r2, #0
   1c4fc:	2300      	movs	r3, #0
   1c4fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c502:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1c506:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1c50a:	4b07      	ldr	r3, [pc, #28]	; (1c528 <k_work_q_start+0x44>)
   1c50c:	9400      	str	r4, [sp, #0]
   1c50e:	4632      	mov	r2, r6
   1c510:	4629      	mov	r1, r5
   1c512:	4640      	mov	r0, r8
   1c514:	f7ff ff48 	bl	1c3a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1c518:	4904      	ldr	r1, [pc, #16]	; (1c52c <k_work_q_start+0x48>)
   1c51a:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1c51c:	b008      	add	sp, #32
   1c51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c522:	f003 bb76 	b.w	1fc12 <z_impl_k_thread_name_set>
   1c526:	bf00      	nop
   1c528:	0001cd47 	.word	0x0001cd47
   1c52c:	00022288 	.word	0x00022288

0001c530 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c534:	4606      	mov	r6, r0
   1c536:	460d      	mov	r5, r1
   1c538:	4690      	mov	r8, r2
   1c53a:	4699      	mov	r9, r3
   1c53c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c540:	f3ef 8711 	mrs	r7, BASEPRI
   1c544:	f383 8811 	msr	BASEPRI, r3
   1c548:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1c54c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1c54e:	b17b      	cbz	r3, 1c570 <k_delayed_work_submit_to_queue+0x40>
   1c550:	4283      	cmp	r3, r0
   1c552:	d128      	bne.n	1c5a6 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1c554:	4628      	mov	r0, r5
   1c556:	f003 fb7e 	bl	1fc56 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1c55a:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1c55e:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1c560:	d008      	beq.n	1c574 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1c562:	2800      	cmp	r0, #0
   1c564:	da07      	bge.n	1c576 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1c566:	f387 8811 	msr	BASEPRI, r7
   1c56a:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1c56e:	e00f      	b.n	1c590 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1c570:	2800      	cmp	r0, #0
   1c572:	d0ef      	beq.n	1c554 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1c574:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c576:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1c57a:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c57c:	d10b      	bne.n	1c596 <k_delayed_work_submit_to_queue+0x66>
   1c57e:	f387 8811 	msr	BASEPRI, r7
   1c582:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1c586:	4629      	mov	r1, r5
   1c588:	4630      	mov	r0, r6
   1c58a:	f003 fb47 	bl	1fc1c <k_work_submit_to_queue>
		return 0;
   1c58e:	2400      	movs	r4, #0
}
   1c590:	4620      	mov	r0, r4
   1c592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1c596:	4905      	ldr	r1, [pc, #20]	; (1c5ac <k_delayed_work_submit_to_queue+0x7c>)
   1c598:	4642      	mov	r2, r8
   1c59a:	464b      	mov	r3, r9
   1c59c:	f105 0010 	add.w	r0, r5, #16
   1c5a0:	f000 f87c 	bl	1c69c <z_add_timeout>
   1c5a4:	e7df      	b.n	1c566 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1c5a6:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1c5aa:	e7dc      	b.n	1c566 <k_delayed_work_submit_to_queue+0x36>
   1c5ac:	0001fc4d 	.word	0x0001fc4d

0001c5b0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c5b0:	4a02      	ldr	r2, [pc, #8]	; (1c5bc <boot_banner+0xc>)
   1c5b2:	4903      	ldr	r1, [pc, #12]	; (1c5c0 <boot_banner+0x10>)
   1c5b4:	4803      	ldr	r0, [pc, #12]	; (1c5c4 <boot_banner+0x14>)
   1c5b6:	f000 baf7 	b.w	1cba8 <printk>
   1c5ba:	bf00      	nop
   1c5bc:	00020b9d 	.word	0x00020b9d
   1c5c0:	00022292 	.word	0x00022292
   1c5c4:	0002229f 	.word	0x0002229f

0001c5c8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1c5c8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1c5ca:	4806      	ldr	r0, [pc, #24]	; (1c5e4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1c5cc:	4a06      	ldr	r2, [pc, #24]	; (1c5e8 <z_data_copy+0x20>)
   1c5ce:	4907      	ldr	r1, [pc, #28]	; (1c5ec <z_data_copy+0x24>)
   1c5d0:	1a12      	subs	r2, r2, r0
   1c5d2:	f001 fd21 	bl	1e018 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1c5d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1c5da:	4a05      	ldr	r2, [pc, #20]	; (1c5f0 <z_data_copy+0x28>)
   1c5dc:	4905      	ldr	r1, [pc, #20]	; (1c5f4 <z_data_copy+0x2c>)
   1c5de:	4806      	ldr	r0, [pc, #24]	; (1c5f8 <z_data_copy+0x30>)
   1c5e0:	f001 bd1a 	b.w	1e018 <memcpy>
   1c5e4:	20000000 	.word	0x20000000
   1c5e8:	200008d0 	.word	0x200008d0
   1c5ec:	000222c8 	.word	0x000222c8
   1c5f0:	00000000 	.word	0x00000000
   1c5f4:	000222c8 	.word	0x000222c8
   1c5f8:	20000000 	.word	0x20000000

0001c5fc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1c5fc:	4b03      	ldr	r3, [pc, #12]	; (1c60c <elapsed+0x10>)
   1c5fe:	681b      	ldr	r3, [r3, #0]
   1c600:	b90b      	cbnz	r3, 1c606 <elapsed+0xa>
   1c602:	f7f7 bfa7 	b.w	14554 <z_clock_elapsed>
}
   1c606:	2000      	movs	r0, #0
   1c608:	4770      	bx	lr
   1c60a:	bf00      	nop
   1c60c:	200026b4 	.word	0x200026b4

0001c610 <remove_timeout>:
{
   1c610:	b530      	push	{r4, r5, lr}
   1c612:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c614:	b168      	cbz	r0, 1c632 <remove_timeout+0x22>
   1c616:	4a0a      	ldr	r2, [pc, #40]	; (1c640 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1c618:	6852      	ldr	r2, [r2, #4]
   1c61a:	4290      	cmp	r0, r2
   1c61c:	d009      	beq.n	1c632 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1c61e:	b143      	cbz	r3, 1c632 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1c620:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1c624:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c628:	1912      	adds	r2, r2, r4
   1c62a:	eb45 0101 	adc.w	r1, r5, r1
   1c62e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1c632:	6842      	ldr	r2, [r0, #4]
   1c634:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c636:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c638:	2300      	movs	r3, #0
	node->prev = NULL;
   1c63a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c63e:	bd30      	pop	{r4, r5, pc}
   1c640:	20000600 	.word	0x20000600

0001c644 <next_timeout>:

static int32_t next_timeout(void)
{
   1c644:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1c646:	4b13      	ldr	r3, [pc, #76]	; (1c694 <next_timeout+0x50>)
   1c648:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c64a:	429c      	cmp	r4, r3
   1c64c:	bf08      	it	eq
   1c64e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1c650:	f7ff ffd4 	bl	1c5fc <elapsed>
   1c654:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1c656:	b1bc      	cbz	r4, 1c688 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c658:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1c65c:	1b40      	subs	r0, r0, r5
   1c65e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1c662:	2801      	cmp	r0, #1
   1c664:	f171 0300 	sbcs.w	r3, r1, #0
   1c668:	db11      	blt.n	1c68e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c66a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1c66e:	2300      	movs	r3, #0
   1c670:	4282      	cmp	r2, r0
   1c672:	eb73 0401 	sbcs.w	r4, r3, r1
   1c676:	da00      	bge.n	1c67a <next_timeout+0x36>
   1c678:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c67a:	4b07      	ldr	r3, [pc, #28]	; (1c698 <next_timeout+0x54>)
   1c67c:	695b      	ldr	r3, [r3, #20]
   1c67e:	b113      	cbz	r3, 1c686 <next_timeout+0x42>
   1c680:	4298      	cmp	r0, r3
   1c682:	bfa8      	it	ge
   1c684:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c686:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1c688:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c68c:	e7f5      	b.n	1c67a <next_timeout+0x36>
   1c68e:	2000      	movs	r0, #0
   1c690:	e7f3      	b.n	1c67a <next_timeout+0x36>
   1c692:	bf00      	nop
   1c694:	20000600 	.word	0x20000600
   1c698:	20002674 	.word	0x20002674

0001c69c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1c69c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6a0:	9101      	str	r1, [sp, #4]
   1c6a2:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c6a4:	1c4b      	adds	r3, r1, #1
   1c6a6:	bf08      	it	eq
   1c6a8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1c6ac:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c6ae:	d071      	beq.n	1c794 <z_add_timeout+0xf8>

#ifdef KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   1c6b0:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1c6b2:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1c6b6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1c6ba:	f04f 3bff 	mov.w	fp, #4294967295
   1c6be:	ebb3 0804 	subs.w	r8, r3, r4
   1c6c2:	eb6b 0905 	sbc.w	r9, fp, r5
   1c6c6:	f1b8 0f00 	cmp.w	r8, #0
   1c6ca:	f179 0300 	sbcs.w	r3, r9, #0
   1c6ce:	db0f      	blt.n	1c6f0 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1c6d0:	f7ff ff94 	bl	1c5fc <elapsed>
   1c6d4:	4a36      	ldr	r2, [pc, #216]	; (1c7b0 <z_add_timeout+0x114>)
   1c6d6:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1c6da:	f06f 0301 	mvn.w	r3, #1
   1c6de:	1a5b      	subs	r3, r3, r1
   1c6e0:	eb6b 020c 	sbc.w	r2, fp, ip
   1c6e4:	1b1e      	subs	r6, r3, r4
   1c6e6:	eb62 0705 	sbc.w	r7, r2, r5
   1c6ea:	1a34      	subs	r4, r6, r0
   1c6ec:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c6f0:	9b01      	ldr	r3, [sp, #4]
   1c6f2:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1c6f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c6fa:	f3ef 8611 	mrs	r6, BASEPRI
   1c6fe:	f383 8811 	msr	BASEPRI, r3
   1c702:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1c706:	f7ff ff79 	bl	1c5fc <elapsed>
	ticks = MAX(1, ticks);
   1c70a:	2c01      	cmp	r4, #1
   1c70c:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1c710:	4b28      	ldr	r3, [pc, #160]	; (1c7b4 <z_add_timeout+0x118>)
   1c712:	bfb8      	it	lt
   1c714:	2401      	movlt	r4, #1
   1c716:	681a      	ldr	r2, [r3, #0]
   1c718:	bfb8      	it	lt
   1c71a:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1c71c:	1824      	adds	r4, r4, r0
   1c71e:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c722:	429a      	cmp	r2, r3
   1c724:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1c728:	d001      	beq.n	1c72e <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c72a:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1c72c:	b952      	cbnz	r2, 1c744 <z_add_timeout+0xa8>
	node->prev = list->tail;
   1c72e:	685a      	ldr	r2, [r3, #4]
   1c730:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1c734:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1c736:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1c73a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1c73e:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1c742:	e014      	b.n	1c76e <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   1c744:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1c748:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1c74c:	4544      	cmp	r4, r8
   1c74e:	eb75 0109 	sbcs.w	r1, r5, r9
   1c752:	da22      	bge.n	1c79a <z_add_timeout+0xfe>
				t->dticks -= to->dticks;
   1c754:	ebb8 0004 	subs.w	r0, r8, r4
   1c758:	eb69 0105 	sbc.w	r1, r9, r5
   1c75c:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1c760:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1c762:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1c766:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1c76a:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1c76e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c770:	429a      	cmp	r2, r3
   1c772:	d00b      	beq.n	1c78c <z_add_timeout+0xf0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c774:	4592      	cmp	sl, r2
   1c776:	d109      	bne.n	1c78c <z_add_timeout+0xf0>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1c778:	f7ff ff64 	bl	1c644 <next_timeout>

			if (next_time == 0 ||
   1c77c:	b118      	cbz	r0, 1c786 <z_add_timeout+0xea>
			    _current_cpu->slice_ticks != next_time) {
   1c77e:	4b0e      	ldr	r3, [pc, #56]	; (1c7b8 <z_add_timeout+0x11c>)
			if (next_time == 0 ||
   1c780:	695b      	ldr	r3, [r3, #20]
   1c782:	4283      	cmp	r3, r0
   1c784:	d002      	beq.n	1c78c <z_add_timeout+0xf0>
				z_clock_set_timeout(next_time, false);
   1c786:	2100      	movs	r1, #0
   1c788:	f7f7 feb2 	bl	144f0 <z_clock_set_timeout>
	__asm__ volatile(
   1c78c:	f386 8811 	msr	BASEPRI, r6
   1c790:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1c794:	b003      	add	sp, #12
   1c796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1c79a:	ebb4 0008 	subs.w	r0, r4, r8
   1c79e:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1c7a2:	42ba      	cmp	r2, r7
   1c7a4:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1c7a8:	d0c1      	beq.n	1c72e <z_add_timeout+0x92>
   1c7aa:	6812      	ldr	r2, [r2, #0]
   1c7ac:	e7be      	b.n	1c72c <z_add_timeout+0x90>
   1c7ae:	bf00      	nop
   1c7b0:	20002390 	.word	0x20002390
   1c7b4:	20000600 	.word	0x20000600
   1c7b8:	20002674 	.word	0x20002674

0001c7bc <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1c7bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7c0:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c7c2:	f7ff fb0b 	bl	1bddc <z_time_slice>
	__asm__ volatile(
   1c7c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7ca:	f3ef 8411 	mrs	r4, BASEPRI
   1c7ce:	f383 8811 	msr	BASEPRI, r3
   1c7d2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c7d6:	4d2c      	ldr	r5, [pc, #176]	; (1c888 <z_clock_announce+0xcc>)
   1c7d8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1c88c <z_clock_announce+0xd0>
	return list->head == list;
   1c7dc:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1c890 <z_clock_announce+0xd4>
   1c7e0:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c7e2:	4651      	mov	r1, sl
   1c7e4:	f8d5 c000 	ldr.w	ip, [r5]
   1c7e8:	f8db 0000 	ldr.w	r0, [fp]
   1c7ec:	4662      	mov	r2, ip
   1c7ee:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c7f0:	4558      	cmp	r0, fp
   1c7f2:	e9da 8900 	ldrd	r8, r9, [sl]
   1c7f6:	e9cd 2300 	strd	r2, r3, [sp]
   1c7fa:	d00d      	beq.n	1c818 <z_clock_announce+0x5c>
   1c7fc:	b160      	cbz	r0, 1c818 <z_clock_announce+0x5c>
   1c7fe:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1c802:	45b4      	cmp	ip, r6
   1c804:	41bb      	sbcs	r3, r7
   1c806:	da1e      	bge.n	1c846 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c808:	9b00      	ldr	r3, [sp, #0]
   1c80a:	ebb6 0c03 	subs.w	ip, r6, r3
   1c80e:	9b01      	ldr	r3, [sp, #4]
   1c810:	eb67 0603 	sbc.w	r6, r7, r3
   1c814:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1c818:	9b00      	ldr	r3, [sp, #0]
   1c81a:	eb13 0208 	adds.w	r2, r3, r8
   1c81e:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1c820:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1c824:	eb43 0309 	adc.w	r3, r3, r9
   1c828:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1c82c:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1c82e:	f7ff ff09 	bl	1c644 <next_timeout>
   1c832:	4631      	mov	r1, r6
   1c834:	f7f7 fe5c 	bl	144f0 <z_clock_set_timeout>
	__asm__ volatile(
   1c838:	f384 8811 	msr	BASEPRI, r4
   1c83c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c840:	b003      	add	sp, #12
   1c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1c846:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1c84a:	f04f 0200 	mov.w	r2, #0
   1c84e:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1c852:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1c856:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1c85a:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1c85e:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1c862:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1c864:	f7ff fed4 	bl	1c610 <remove_timeout>
   1c868:	f384 8811 	msr	BASEPRI, r4
   1c86c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c870:	6883      	ldr	r3, [r0, #8]
   1c872:	4798      	blx	r3
	__asm__ volatile(
   1c874:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c878:	f3ef 8411 	mrs	r4, BASEPRI
   1c87c:	f383 8811 	msr	BASEPRI, r3
   1c880:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1c884:	4901      	ldr	r1, [pc, #4]	; (1c88c <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c886:	e7ad      	b.n	1c7e4 <z_clock_announce+0x28>
   1c888:	200026b4 	.word	0x200026b4
   1c88c:	20002390 	.word	0x20002390
   1c890:	20000600 	.word	0x20000600

0001c894 <z_tick_get>:

int64_t z_tick_get(void)
{
   1c894:	b510      	push	{r4, lr}
   1c896:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c89a:	f3ef 8411 	mrs	r4, BASEPRI
   1c89e:	f383 8811 	msr	BASEPRI, r3
   1c8a2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1c8a6:	f7f7 fe55 	bl	14554 <z_clock_elapsed>
   1c8aa:	4b06      	ldr	r3, [pc, #24]	; (1c8c4 <z_tick_get+0x30>)
   1c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c8b0:	1812      	adds	r2, r2, r0
   1c8b2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1c8b6:	f384 8811 	msr	BASEPRI, r4
   1c8ba:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c8be:	4610      	mov	r0, r2
   1c8c0:	4619      	mov	r1, r3
   1c8c2:	bd10      	pop	{r4, pc}
   1c8c4:	20002390 	.word	0x20002390

0001c8c8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1c8ca:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1c8ce:	1c56      	adds	r6, r2, #1
   1c8d0:	f143 0700 	adc.w	r7, r3, #0
   1c8d4:	2f00      	cmp	r7, #0
   1c8d6:	bf08      	it	eq
   1c8d8:	2e02      	cmpeq	r6, #2
{
   1c8da:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1c8dc:	d302      	bcc.n	1c8e4 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c8de:	490c      	ldr	r1, [pc, #48]	; (1c910 <z_timer_expiration_handler+0x48>)
   1c8e0:	f7ff fedc 	bl	1c69c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1c8e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c8e6:	3301      	adds	r3, #1
   1c8e8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c8ea:	6a23      	ldr	r3, [r4, #32]
   1c8ec:	b10b      	cbz	r3, 1c8f2 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1c8ee:	4620      	mov	r0, r4
   1c8f0:	4798      	blx	r3
	return list->head == list;
   1c8f2:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c8f6:	42a5      	cmp	r5, r4
   1c8f8:	d009      	beq.n	1c90e <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c8fa:	b145      	cbz	r5, 1c90e <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1c8fc:	4628      	mov	r0, r5
   1c8fe:	f003 f88c 	bl	1fa1a <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1c902:	4628      	mov	r0, r5
   1c904:	f003 f8db 	bl	1fabe <z_ready_thread>
   1c908:	2300      	movs	r3, #0
   1c90a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   1c90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c910:	0001c8c9 	.word	0x0001c8c9

0001c914 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1c914:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1c918:	4619      	mov	r1, r3
   1c91a:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c91c:	1c4c      	adds	r4, r1, #1
{
   1c91e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c920:	bf08      	it	eq
   1c922:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1c926:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1c92a:	4680      	mov	r8, r0
   1c92c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c92e:	d047      	beq.n	1c9c0 <z_impl_k_timer_start+0xac>
   1c930:	4614      	mov	r4, r2
   1c932:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1c934:	ea54 0305 	orrs.w	r3, r4, r5
   1c938:	d016      	beq.n	1c968 <z_impl_k_timer_start+0x54>
   1c93a:	f06f 0301 	mvn.w	r3, #1
   1c93e:	ebb3 0a02 	subs.w	sl, r3, r2
   1c942:	f04f 33ff 	mov.w	r3, #4294967295
   1c946:	eb63 0b05 	sbc.w	fp, r3, r5
   1c94a:	f1ba 0f00 	cmp.w	sl, #0
   1c94e:	f17b 0300 	sbcs.w	r3, fp, #0
   1c952:	da09      	bge.n	1c968 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1c954:	f112 34ff 	adds.w	r4, r2, #4294967295
   1c958:	f145 35ff 	adc.w	r5, r5, #4294967295
   1c95c:	2c01      	cmp	r4, #1
   1c95e:	f175 0300 	sbcs.w	r3, r5, #0
   1c962:	bfbc      	itt	lt
   1c964:	2401      	movlt	r4, #1
   1c966:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1c968:	f06f 0301 	mvn.w	r3, #1
   1c96c:	1a1b      	subs	r3, r3, r0
   1c96e:	9300      	str	r3, [sp, #0]
   1c970:	f04f 33ff 	mov.w	r3, #4294967295
   1c974:	eb63 0301 	sbc.w	r3, r3, r1
   1c978:	9301      	str	r3, [sp, #4]
   1c97a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1c97e:	2a00      	cmp	r2, #0
   1c980:	f173 0300 	sbcs.w	r3, r3, #0
   1c984:	da0c      	bge.n	1c9a0 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1c986:	f110 38ff 	adds.w	r8, r0, #4294967295
   1c98a:	f141 39ff 	adc.w	r9, r1, #4294967295
   1c98e:	f1b8 0f00 	cmp.w	r8, #0
   1c992:	f179 0300 	sbcs.w	r3, r9, #0
   1c996:	bfbc      	itt	lt
   1c998:	f04f 0800 	movlt.w	r8, #0
   1c99c:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1c9a0:	4630      	mov	r0, r6
   1c9a2:	f003 f9b3 	bl	1fd0c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1c9a6:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c9a8:	4907      	ldr	r1, [pc, #28]	; (1c9c8 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   1c9aa:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c9ac:	4642      	mov	r2, r8
   1c9ae:	464b      	mov	r3, r9
   1c9b0:	4630      	mov	r0, r6
	timer->period = period;
   1c9b2:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1c9b6:	b002      	add	sp, #8
   1c9b8:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c9bc:	f7ff be6e 	b.w	1c69c <z_add_timeout>
}
   1c9c0:	b002      	add	sp, #8
   1c9c2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1c9c6:	bf00      	nop
   1c9c8:	0001c8c9 	.word	0x0001c8c9

0001c9cc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1c9d0:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c9d2:	4b2a      	ldr	r3, [pc, #168]	; (1ca7c <z_impl_k_poll+0xb0>)
   1c9d4:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1c9d6:	2301      	movs	r3, #1
   1c9d8:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   1c9dc:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1c9e0:	ea52 0307 	orrs.w	r3, r2, r7
{
   1c9e4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1c9e6:	bf0c      	ite	eq
   1c9e8:	2301      	moveq	r3, #1
   1c9ea:	2300      	movne	r3, #0
   1c9ec:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   1c9f0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1c9f2:	f003 fafa 	bl	1ffea <register_events>
   1c9f6:	4681      	mov	r9, r0
	__asm__ volatile(
   1c9f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c9fc:	f3ef 8a11 	mrs	sl, BASEPRI
   1ca00:	f383 8811 	msr	BASEPRI, r3
   1ca04:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1ca08:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   1ca0c:	b964      	cbnz	r4, 1ca28 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1ca0e:	4601      	mov	r1, r0
   1ca10:	4652      	mov	r2, sl
   1ca12:	4640      	mov	r0, r8
   1ca14:	f003 fa15 	bl	1fe42 <clear_event_registrations>
	__asm__ volatile(
   1ca18:	f38a 8811 	msr	BASEPRI, sl
   1ca1c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1ca20:	4620      	mov	r0, r4
   1ca22:	b004      	add	sp, #16
   1ca24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1ca28:	2300      	movs	r3, #0
   1ca2a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ca2e:	ea56 0307 	orrs.w	r3, r6, r7
   1ca32:	d106      	bne.n	1ca42 <z_impl_k_poll+0x76>
   1ca34:	f38a 8811 	msr	BASEPRI, sl
   1ca38:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1ca3c:	f06f 040a 	mvn.w	r4, #10
   1ca40:	e7ee      	b.n	1ca20 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1ca42:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1ca44:	e9cd 6700 	strd	r6, r7, [sp]
   1ca48:	4651      	mov	r1, sl
   1ca4a:	480d      	ldr	r0, [pc, #52]	; (1ca80 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1ca4c:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1ca50:	f7ff fafc 	bl	1c04c <z_pend_curr>
   1ca54:	4604      	mov	r4, r0
	__asm__ volatile(
   1ca56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca5a:	f3ef 8511 	mrs	r5, BASEPRI
   1ca5e:	f383 8811 	msr	BASEPRI, r3
   1ca62:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1ca66:	462a      	mov	r2, r5
   1ca68:	4649      	mov	r1, r9
   1ca6a:	4640      	mov	r0, r8
   1ca6c:	f003 f9e9 	bl	1fe42 <clear_event_registrations>
	__asm__ volatile(
   1ca70:	f385 8811 	msr	BASEPRI, r5
   1ca74:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1ca78:	e7d2      	b.n	1ca20 <z_impl_k_poll+0x54>
   1ca7a:	bf00      	nop
   1ca7c:	20002674 	.word	0x20002674
   1ca80:	20002ffc 	.word	0x20002ffc

0001ca84 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1ca84:	b538      	push	{r3, r4, r5, lr}
   1ca86:	4603      	mov	r3, r0
	__asm__ volatile(
   1ca88:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ca8c:	f3ef 8511 	mrs	r5, BASEPRI
   1ca90:	f382 8811 	msr	BASEPRI, r2
   1ca94:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1ca98:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1ca9a:	2101      	movs	r1, #1
   1ca9c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1ca9e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1caa0:	4283      	cmp	r3, r0
   1caa2:	d106      	bne.n	1cab2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1caa4:	f385 8811 	msr	BASEPRI, r5
   1caa8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1caac:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1caae:	4620      	mov	r0, r4
   1cab0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1cab2:	e9d0 3200 	ldrd	r3, r2, [r0]
   1cab6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1cab8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1caba:	2300      	movs	r3, #0
	node->prev = NULL;
   1cabc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1cac0:	f003 fa02 	bl	1fec8 <signal_poll_event>
	z_reschedule(&lock, key);
   1cac4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1cac6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1cac8:	4801      	ldr	r0, [pc, #4]	; (1cad0 <z_impl_k_poll_signal_raise+0x4c>)
   1caca:	f7ff f877 	bl	1bbbc <z_reschedule>
	return rc;
   1cace:	e7ee      	b.n	1caae <z_impl_k_poll_signal_raise+0x2a>
   1cad0:	20002ffc 	.word	0x20002ffc

0001cad4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1cad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cad6:	4607      	mov	r7, r0
   1cad8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1cada:	f003 f890 	bl	1fbfe <k_is_in_isr>
   1cade:	b998      	cbnz	r0, 1cb08 <z_thread_aligned_alloc+0x34>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1cae0:	4b0f      	ldr	r3, [pc, #60]	; (1cb20 <z_thread_aligned_alloc+0x4c>)
   1cae2:	689b      	ldr	r3, [r3, #8]
   1cae4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
	}

	if (heap) {
   1cae6:	b1bc      	cbz	r4, 1cb18 <z_thread_aligned_alloc+0x44>
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1cae8:	2f04      	cmp	r7, #4
   1caea:	463e      	mov	r6, r7
   1caec:	bf38      	it	cc
   1caee:	2604      	movcc	r6, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1caf0:	19aa      	adds	r2, r5, r6
   1caf2:	d209      	bcs.n	1cb08 <z_thread_aligned_alloc+0x34>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1caf4:	2000      	movs	r0, #0
   1caf6:	2100      	movs	r1, #0
   1caf8:	e9cd 0100 	strd	r0, r1, [sp]
   1cafc:	4639      	mov	r1, r7
   1cafe:	4620      	mov	r0, r4
   1cb00:	f002 fe25 	bl	1f74e <k_heap_aligned_alloc>
	if (mem == NULL) {
   1cb04:	4605      	mov	r5, r0
   1cb06:	b908      	cbnz	r0, 1cb0c <z_thread_aligned_alloc+0x38>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1cb08:	2400      	movs	r4, #0
	}

	return ret;
   1cb0a:	e005      	b.n	1cb18 <z_thread_aligned_alloc+0x44>
	memset(mem, 0xff, excess);
   1cb0c:	4632      	mov	r2, r6
   1cb0e:	21ff      	movs	r1, #255	; 0xff
   1cb10:	f001 faad 	bl	1e06e <memset>
	*heap_ref = heap;
   1cb14:	602c      	str	r4, [r5, #0]
	return mem + excess;
   1cb16:	19ac      	adds	r4, r5, r6
}
   1cb18:	4620      	mov	r0, r4
   1cb1a:	b003      	add	sp, #12
   1cb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb1e:	bf00      	nop
   1cb20:	20002674 	.word	0x20002674

0001cb24 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1cb24:	4603      	mov	r3, r0
   1cb26:	b140      	cbz	r0, 1cb3a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cb28:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cb2a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1cb2e:	2a02      	cmp	r2, #2
   1cb30:	d006      	beq.n	1cb40 <sys_notify_validate+0x1c>
   1cb32:	2a03      	cmp	r2, #3
   1cb34:	d004      	beq.n	1cb40 <sys_notify_validate+0x1c>
   1cb36:	2a01      	cmp	r2, #1
   1cb38:	d005      	beq.n	1cb46 <sys_notify_validate+0x22>
		return -EINVAL;
   1cb3a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1cb3e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1cb40:	681a      	ldr	r2, [r3, #0]
   1cb42:	2a00      	cmp	r2, #0
   1cb44:	d0f9      	beq.n	1cb3a <sys_notify_validate+0x16>
		notify->result = 0;
   1cb46:	2000      	movs	r0, #0
   1cb48:	6098      	str	r0, [r3, #8]
   1cb4a:	4770      	bx	lr

0001cb4c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cb4c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cb4e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1cb52:	2a02      	cmp	r2, #2
{
   1cb54:	b510      	push	{r4, lr}
   1cb56:	4603      	mov	r3, r0
	notify->result = res;
   1cb58:	6081      	str	r1, [r0, #8]
	switch (method) {
   1cb5a:	d00a      	beq.n	1cb72 <sys_notify_finalize+0x26>
   1cb5c:	2a03      	cmp	r2, #3
   1cb5e:	d10b      	bne.n	1cb78 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1cb60:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1cb62:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1cb64:	2200      	movs	r2, #0
   1cb66:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1cb68:	b108      	cbz	r0, 1cb6e <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   1cb6a:	f7ff ff8b 	bl	1ca84 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1cb6e:	4620      	mov	r0, r4
   1cb70:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1cb72:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1cb74:	2400      	movs	r4, #0
		break;
   1cb76:	e7f5      	b.n	1cb64 <sys_notify_finalize+0x18>
	switch (method) {
   1cb78:	2400      	movs	r4, #0
   1cb7a:	4620      	mov	r0, r4
   1cb7c:	e7f2      	b.n	1cb64 <sys_notify_finalize+0x18>

0001cb7e <arch_printk_char_out>:
}
   1cb7e:	2000      	movs	r0, #0
   1cb80:	4770      	bx	lr

0001cb82 <str_out>:
{
   1cb82:	b530      	push	{r4, r5, lr}
   1cb84:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1cb86:	680c      	ldr	r4, [r1, #0]
   1cb88:	1c55      	adds	r5, r2, #1
   1cb8a:	b114      	cbz	r4, 1cb92 <str_out+0x10>
   1cb8c:	684b      	ldr	r3, [r1, #4]
   1cb8e:	4293      	cmp	r3, r2
   1cb90:	dc01      	bgt.n	1cb96 <str_out+0x14>
		ctx->count++;
   1cb92:	608d      	str	r5, [r1, #8]
}
   1cb94:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1cb96:	3b01      	subs	r3, #1
   1cb98:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1cb9a:	bf08      	it	eq
   1cb9c:	2200      	moveq	r2, #0
   1cb9e:	608d      	str	r5, [r1, #8]
   1cba0:	bf0c      	ite	eq
   1cba2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1cba4:	54a0      	strbne	r0, [r4, r2]
   1cba6:	e7f5      	b.n	1cb94 <str_out+0x12>

0001cba8 <printk>:
{
   1cba8:	b40f      	push	{r0, r1, r2, r3}
   1cbaa:	b507      	push	{r0, r1, r2, lr}
   1cbac:	a904      	add	r1, sp, #16
   1cbae:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1cbb2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1cbb4:	f7f5 ff80 	bl	12ab8 <vprintk>
}
   1cbb8:	b003      	add	sp, #12
   1cbba:	f85d eb04 	ldr.w	lr, [sp], #4
   1cbbe:	b004      	add	sp, #16
   1cbc0:	4770      	bx	lr

0001cbc2 <snprintk>:
{
   1cbc2:	b40c      	push	{r2, r3}
   1cbc4:	b507      	push	{r0, r1, r2, lr}
   1cbc6:	ab04      	add	r3, sp, #16
   1cbc8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1cbcc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1cbce:	f7f5 ff81 	bl	12ad4 <vsnprintk>
}
   1cbd2:	b003      	add	sp, #12
   1cbd4:	f85d eb04 	ldr.w	lr, [sp], #4
   1cbd8:	b002      	add	sp, #8
   1cbda:	4770      	bx	lr

0001cbdc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1cbdc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1cbde:	f013 0307 	ands.w	r3, r3, #7
   1cbe2:	d105      	bne.n	1cbf0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1cbe4:	6803      	ldr	r3, [r0, #0]
   1cbe6:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1cbe8:	bf0c      	ite	eq
   1cbea:	2000      	moveq	r0, #0
   1cbec:	2003      	movne	r0, #3
   1cbee:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1cbf0:	2b02      	cmp	r3, #2
   1cbf2:	d105      	bne.n	1cc00 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1cbf4:	8b43      	ldrh	r3, [r0, #26]
   1cbf6:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1cbf8:	bf14      	ite	ne
   1cbfa:	2000      	movne	r0, #0
   1cbfc:	2004      	moveq	r0, #4
   1cbfe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1cc00:	2b01      	cmp	r3, #1
   1cc02:	d105      	bne.n	1cc10 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1cc04:	6803      	ldr	r3, [r0, #0]
   1cc06:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1cc08:	bf0c      	ite	eq
   1cc0a:	2000      	moveq	r0, #0
   1cc0c:	2005      	movne	r0, #5
   1cc0e:	4770      	bx	lr
	int evt = EVT_NOP;
   1cc10:	2000      	movs	r0, #0
}
   1cc12:	4770      	bx	lr

0001cc14 <notify_one>:
{
   1cc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc18:	460d      	mov	r5, r1
   1cc1a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1cc1c:	4619      	mov	r1, r3
   1cc1e:	1d28      	adds	r0, r5, #4
{
   1cc20:	4690      	mov	r8, r2
   1cc22:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1cc24:	f7ff ff92 	bl	1cb4c <sys_notify_finalize>
	if (cb) {
   1cc28:	4604      	mov	r4, r0
   1cc2a:	b138      	cbz	r0, 1cc3c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1cc2c:	4633      	mov	r3, r6
   1cc2e:	4642      	mov	r2, r8
   1cc30:	4629      	mov	r1, r5
   1cc32:	4638      	mov	r0, r7
   1cc34:	46a4      	mov	ip, r4
}
   1cc36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1cc3a:	4760      	bx	ip
}
   1cc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cc40 <transition_complete>:
{
   1cc40:	b410      	push	{r4}
	__asm__ volatile(
   1cc42:	f04f 0440 	mov.w	r4, #64	; 0x40
   1cc46:	f3ef 8211 	mrs	r2, BASEPRI
   1cc4a:	f384 8811 	msr	BASEPRI, r4
   1cc4e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1cc52:	6141      	str	r1, [r0, #20]
}
   1cc54:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1cc56:	2101      	movs	r1, #1
   1cc58:	f7f5 bf50 	b.w	12afc <process_event>

0001cc5c <validate_args>:
{
   1cc5c:	b510      	push	{r4, lr}
   1cc5e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1cc60:	b140      	cbz	r0, 1cc74 <validate_args+0x18>
   1cc62:	b139      	cbz	r1, 1cc74 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1cc64:	1d08      	adds	r0, r1, #4
   1cc66:	f7ff ff5d 	bl	1cb24 <sys_notify_validate>
	if ((rv == 0)
   1cc6a:	b928      	cbnz	r0, 1cc78 <validate_args+0x1c>
	    && ((cli->notify.flags
   1cc6c:	68a3      	ldr	r3, [r4, #8]
   1cc6e:	f033 0303 	bics.w	r3, r3, #3
   1cc72:	d001      	beq.n	1cc78 <validate_args+0x1c>
		rv = -EINVAL;
   1cc74:	f06f 0015 	mvn.w	r0, #21
}
   1cc78:	bd10      	pop	{r4, pc}

0001cc7a <onoff_manager_init>:
{
   1cc7a:	b538      	push	{r3, r4, r5, lr}
   1cc7c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1cc7e:	4605      	mov	r5, r0
   1cc80:	b158      	cbz	r0, 1cc9a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1cc82:	b151      	cbz	r1, 1cc9a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1cc84:	680b      	ldr	r3, [r1, #0]
   1cc86:	b143      	cbz	r3, 1cc9a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1cc88:	684b      	ldr	r3, [r1, #4]
   1cc8a:	b133      	cbz	r3, 1cc9a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1cc8c:	221c      	movs	r2, #28
   1cc8e:	2100      	movs	r1, #0
   1cc90:	f001 f9ed 	bl	1e06e <memset>
   1cc94:	612c      	str	r4, [r5, #16]
	return 0;
   1cc96:	2000      	movs	r0, #0
}
   1cc98:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1cc9a:	f06f 0015 	mvn.w	r0, #21
   1cc9e:	e7fb      	b.n	1cc98 <onoff_manager_init+0x1e>

0001cca0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1cca0:	b570      	push	{r4, r5, r6, lr}
   1cca2:	4604      	mov	r4, r0
   1cca4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1cca6:	f7ff ffd9 	bl	1cc5c <validate_args>

	if (rv < 0) {
   1ccaa:	1e05      	subs	r5, r0, #0
   1ccac:	db31      	blt.n	1cd12 <onoff_request+0x72>
   1ccae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ccb2:	f3ef 8111 	mrs	r1, BASEPRI
   1ccb6:	f383 8811 	msr	BASEPRI, r3
   1ccba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ccbe:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ccc0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ccc2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1ccc6:	42ab      	cmp	r3, r5
   1ccc8:	f000 0207 	and.w	r2, r0, #7
   1cccc:	d02e      	beq.n	1cd2c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1ccce:	2a02      	cmp	r2, #2
   1ccd0:	d10e      	bne.n	1ccf0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1ccd2:	3301      	adds	r3, #1
   1ccd4:	8363      	strh	r3, [r4, #26]
	rv = state;
   1ccd6:	4615      	mov	r5, r2
		notify = true;
   1ccd8:	2301      	movs	r3, #1
	__asm__ volatile(
   1ccda:	f381 8811 	msr	BASEPRI, r1
   1ccde:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1cce2:	b1b3      	cbz	r3, 1cd12 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1cce4:	2300      	movs	r3, #0
   1cce6:	4631      	mov	r1, r6
   1cce8:	4620      	mov	r0, r4
   1ccea:	f7ff ff93 	bl	1cc14 <notify_one>
   1ccee:	e010      	b.n	1cd12 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1ccf0:	0783      	lsls	r3, r0, #30
   1ccf2:	d001      	beq.n	1ccf8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1ccf4:	2a06      	cmp	r2, #6
   1ccf6:	d10e      	bne.n	1cd16 <onoff_request+0x76>
	parent->next = child;
   1ccf8:	2300      	movs	r3, #0
   1ccfa:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1ccfc:	6863      	ldr	r3, [r4, #4]
   1ccfe:	b993      	cbnz	r3, 1cd26 <onoff_request+0x86>
	list->head = node;
   1cd00:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1cd04:	4615      	mov	r5, r2
   1cd06:	b962      	cbnz	r2, 1cd22 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1cd08:	460a      	mov	r2, r1
   1cd0a:	4620      	mov	r0, r4
   1cd0c:	2102      	movs	r1, #2
   1cd0e:	f7f5 fef5 	bl	12afc <process_event>
		}
	}

	return rv;
}
   1cd12:	4628      	mov	r0, r5
   1cd14:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1cd16:	2a05      	cmp	r2, #5
   1cd18:	bf0c      	ite	eq
   1cd1a:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1cd1e:	f06f 0504 	mvnne.w	r5, #4
   1cd22:	2300      	movs	r3, #0
   1cd24:	e7d9      	b.n	1ccda <onoff_request+0x3a>
	parent->next = child;
   1cd26:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1cd28:	6066      	str	r6, [r4, #4]
}
   1cd2a:	e7eb      	b.n	1cd04 <onoff_request+0x64>
		rv = -EAGAIN;
   1cd2c:	f06f 050a 	mvn.w	r5, #10
   1cd30:	e7f7      	b.n	1cd22 <onoff_request+0x82>

0001cd32 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1cd32:	4604      	mov	r4, r0
   1cd34:	b508      	push	{r3, lr}
   1cd36:	4608      	mov	r0, r1
   1cd38:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1cd3a:	461a      	mov	r2, r3
   1cd3c:	47a0      	blx	r4
	return z_impl_k_current_get();
   1cd3e:	f7ff fa93 	bl	1c268 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1cd42:	f7f8 f935 	bl	14fb0 <z_impl_k_thread_abort>

0001cd46 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1cd46:	b510      	push	{r4, lr}
   1cd48:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1cd4a:	f04f 33ff 	mov.w	r3, #4294967295
   1cd4e:	f04f 32ff 	mov.w	r2, #4294967295
   1cd52:	4620      	mov	r0, r4
   1cd54:	f7fe febc 	bl	1bad0 <z_impl_k_queue_get>
   1cd58:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1cd5a:	2800      	cmp	r0, #0
   1cd5c:	d0f5      	beq.n	1cd4a <z_work_q_main+0x4>
   1cd5e:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1cd60:	6842      	ldr	r2, [r0, #4]
   1cd62:	f3bf 8f5b 	dmb	ish
   1cd66:	e853 1f00 	ldrex	r1, [r3]
   1cd6a:	f021 0c01 	bic.w	ip, r1, #1
   1cd6e:	e843 ce00 	strex	lr, ip, [r3]
   1cd72:	f1be 0f00 	cmp.w	lr, #0
   1cd76:	d1f6      	bne.n	1cd66 <z_work_q_main+0x20>
   1cd78:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1cd7c:	07cb      	lsls	r3, r1, #31
   1cd7e:	d500      	bpl.n	1cd82 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1cd80:	4790      	blx	r2
	z_impl_k_yield();
   1cd82:	f7ff fa01 	bl	1c188 <z_impl_k_yield>
   1cd86:	e7e0      	b.n	1cd4a <z_work_q_main+0x4>

0001cd88 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1cd88:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1cd8a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1cd8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1cd92:	bf2c      	ite	cs
   1cd94:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1cd98:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1cd9c:	4770      	bx	lr

0001cd9e <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1cd9e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1cda2:	6880      	ldr	r0, [r0, #8]
   1cda4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1cda8:	bf2c      	ite	cs
   1cdaa:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1cdae:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1cdb2:	4770      	bx	lr

0001cdb4 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1cdb4:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cdb6:	2201      	movs	r2, #1
   1cdb8:	f7ff ffe6 	bl	1cd88 <chunk_field>
}
   1cdbc:	0840      	lsrs	r0, r0, #1
   1cdbe:	bd08      	pop	{r3, pc}

0001cdc0 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1cdc0:	6883      	ldr	r3, [r0, #8]
   1cdc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1cdc6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1cdca:	d308      	bcc.n	1cdde <set_chunk_used+0x1e>
		if (used) {
   1cdcc:	684b      	ldr	r3, [r1, #4]
   1cdce:	b11a      	cbz	r2, 1cdd8 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cdd0:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cdd4:	604b      	str	r3, [r1, #4]
   1cdd6:	4770      	bx	lr
   1cdd8:	f023 0301 	bic.w	r3, r3, #1
   1cddc:	e7fa      	b.n	1cdd4 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1cdde:	884b      	ldrh	r3, [r1, #2]
   1cde0:	b11a      	cbz	r2, 1cdea <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cde2:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cde6:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1cde8:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cdea:	f023 0301 	bic.w	r3, r3, #1
   1cdee:	e7fa      	b.n	1cde6 <set_chunk_used+0x26>

0001cdf0 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1cdf0:	0053      	lsls	r3, r2, #1
   1cdf2:	2201      	movs	r2, #1
   1cdf4:	f7ff bfd3 	b.w	1cd9e <chunk_set>

0001cdf8 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1cdf8:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1cdfa:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cdfc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1ce00:	bf2c      	ite	cs
   1ce02:	2002      	movcs	r0, #2
   1ce04:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1ce06:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1ce08:	fab0 f080 	clz	r0, r0
}
   1ce0c:	f1c0 001f 	rsb	r0, r0, #31
   1ce10:	4770      	bx	lr

0001ce12 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1ce12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce16:	4616      	mov	r6, r2
   1ce18:	4604      	mov	r4, r0
   1ce1a:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ce1c:	f7ff ffca 	bl	1cdb4 <chunk_size>
   1ce20:	4631      	mov	r1, r6
   1ce22:	4605      	mov	r5, r0
   1ce24:	4620      	mov	r0, r4
   1ce26:	f7ff ffc5 	bl	1cdb4 <chunk_size>
   1ce2a:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1ce2c:	462a      	mov	r2, r5
   1ce2e:	4639      	mov	r1, r7
   1ce30:	4620      	mov	r0, r4
   1ce32:	f7ff ffdd 	bl	1cdf0 <set_chunk_size>
	return c + chunk_size(h, c);
   1ce36:	4631      	mov	r1, r6
   1ce38:	4620      	mov	r0, r4
   1ce3a:	f7ff ffbb 	bl	1cdb4 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ce3e:	462b      	mov	r3, r5
   1ce40:	1831      	adds	r1, r6, r0
   1ce42:	2200      	movs	r2, #0
   1ce44:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1ce46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ce4a:	f7ff bfa8 	b.w	1cd9e <chunk_set>

0001ce4e <split_chunks>:
{
   1ce4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce52:	4614      	mov	r4, r2
   1ce54:	4605      	mov	r5, r0
   1ce56:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1ce58:	f7ff ffac 	bl	1cdb4 <chunk_size>
	size_t lsz = rc - lc;
   1ce5c:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1ce60:	1b37      	subs	r7, r6, r4
   1ce62:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1ce64:	4642      	mov	r2, r8
   1ce66:	4631      	mov	r1, r6
   1ce68:	4628      	mov	r0, r5
   1ce6a:	f7ff ffc1 	bl	1cdf0 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1ce6e:	463a      	mov	r2, r7
   1ce70:	4621      	mov	r1, r4
   1ce72:	4628      	mov	r0, r5
   1ce74:	f7ff ffbc 	bl	1cdf0 <set_chunk_size>
   1ce78:	4643      	mov	r3, r8
   1ce7a:	2200      	movs	r2, #0
   1ce7c:	4621      	mov	r1, r4
   1ce7e:	4628      	mov	r0, r5
   1ce80:	f7ff ff8d 	bl	1cd9e <chunk_set>
	return c + chunk_size(h, c);
   1ce84:	4621      	mov	r1, r4
   1ce86:	4628      	mov	r0, r5
   1ce88:	f7ff ff94 	bl	1cdb4 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ce8c:	463b      	mov	r3, r7
   1ce8e:	1821      	adds	r1, r4, r0
   1ce90:	2200      	movs	r2, #0
   1ce92:	4628      	mov	r0, r5
}
   1ce94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ce98:	f7ff bf81 	b.w	1cd9e <chunk_set>

0001ce9c <free_list_remove_bidx>:
{
   1ce9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cea0:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1cea2:	2203      	movs	r2, #3
   1cea4:	460e      	mov	r6, r1
   1cea6:	4604      	mov	r4, r0
   1cea8:	f7ff ff6e 	bl	1cd88 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1ceac:	4286      	cmp	r6, r0
   1ceae:	4605      	mov	r5, r0
   1ceb0:	f107 0804 	add.w	r8, r7, #4
   1ceb4:	d10b      	bne.n	1cece <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1ceb6:	2301      	movs	r3, #1
   1ceb8:	fa03 f707 	lsl.w	r7, r3, r7
   1cebc:	68e3      	ldr	r3, [r4, #12]
   1cebe:	ea23 0307 	bic.w	r3, r3, r7
   1cec2:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1cec4:	2300      	movs	r3, #0
   1cec6:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1ceca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1cece:	4631      	mov	r1, r6
   1ced0:	2202      	movs	r2, #2
   1ced2:	4620      	mov	r0, r4
   1ced4:	f7ff ff58 	bl	1cd88 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1ced8:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1ceda:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1cedc:	4601      	mov	r1, r0
		b->next = second;
   1cede:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1cee2:	4620      	mov	r0, r4
   1cee4:	2203      	movs	r2, #3
   1cee6:	f7ff ff5a 	bl	1cd9e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ceea:	4633      	mov	r3, r6
   1ceec:	4629      	mov	r1, r5
   1ceee:	4620      	mov	r0, r4
   1cef0:	2202      	movs	r2, #2
}
   1cef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cef6:	f7ff bf52 	b.w	1cd9e <chunk_set>

0001cefa <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1cefa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cefe:	4604      	mov	r4, r0
   1cf00:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1cf02:	f7ff ff79 	bl	1cdf8 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1cf06:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1cf08:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1cf0a:	4620      	mov	r0, r4
   1cf0c:	f7ff ff74 	bl	1cdf8 <bucket_idx>
   1cf10:	42a8      	cmp	r0, r5
   1cf12:	da03      	bge.n	1cf1c <alloc_chunk+0x22>
		return 0;
   1cf14:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1cf16:	4630      	mov	r0, r6
   1cf18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1cf1c:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1cf20:	f8da 9010 	ldr.w	r9, [sl, #16]
   1cf24:	f1b9 0f00 	cmp.w	r9, #0
   1cf28:	d019      	beq.n	1cf5e <alloc_chunk+0x64>
   1cf2a:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1cf2c:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1cf30:	4620      	mov	r0, r4
   1cf32:	4631      	mov	r1, r6
   1cf34:	f7ff ff3e 	bl	1cdb4 <chunk_size>
   1cf38:	4540      	cmp	r0, r8
   1cf3a:	d305      	bcc.n	1cf48 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   1cf3c:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1cf3e:	4631      	mov	r1, r6
   1cf40:	4620      	mov	r0, r4
   1cf42:	f7ff ffab 	bl	1ce9c <free_list_remove_bidx>
		return c;
   1cf46:	e7e6      	b.n	1cf16 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1cf48:	2203      	movs	r2, #3
   1cf4a:	4631      	mov	r1, r6
   1cf4c:	4620      	mov	r0, r4
   1cf4e:	f7ff ff1b 	bl	1cd88 <chunk_field>
		} while (--i && b->next != first);
   1cf52:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1cf54:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1cf58:	d001      	beq.n	1cf5e <alloc_chunk+0x64>
   1cf5a:	4581      	cmp	r9, r0
   1cf5c:	d1e6      	bne.n	1cf2c <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1cf5e:	68e3      	ldr	r3, [r4, #12]
   1cf60:	3501      	adds	r5, #1
   1cf62:	f04f 32ff 	mov.w	r2, #4294967295
   1cf66:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1cf68:	401a      	ands	r2, r3
   1cf6a:	d0d3      	beq.n	1cf14 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1cf6c:	fa92 f2a2 	rbit	r2, r2
   1cf70:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1cf74:	1d13      	adds	r3, r2, #4
   1cf76:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1cf7a:	e7e0      	b.n	1cf3e <alloc_chunk+0x44>

0001cf7c <free_list_add>:
{
   1cf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf80:	4604      	mov	r4, r0
   1cf82:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1cf84:	f7ff ff16 	bl	1cdb4 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1cf88:	68a3      	ldr	r3, [r4, #8]
   1cf8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cf8e:	4601      	mov	r1, r0
   1cf90:	d301      	bcc.n	1cf96 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1cf92:	2801      	cmp	r0, #1
   1cf94:	d035      	beq.n	1d002 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cf96:	4620      	mov	r0, r4
   1cf98:	f7ff ff2e 	bl	1cdf8 <bucket_idx>
	if (b->next == 0U) {
   1cf9c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1cfa0:	6916      	ldr	r6, [r2, #16]
   1cfa2:	b99e      	cbnz	r6, 1cfcc <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1cfa4:	2301      	movs	r3, #1
   1cfa6:	fa03 f000 	lsl.w	r0, r3, r0
   1cfaa:	68e3      	ldr	r3, [r4, #12]
   1cfac:	4303      	orrs	r3, r0
   1cfae:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1cfb0:	4629      	mov	r1, r5
		b->next = c;
   1cfb2:	6115      	str	r5, [r2, #16]
   1cfb4:	462b      	mov	r3, r5
   1cfb6:	2202      	movs	r2, #2
   1cfb8:	4620      	mov	r0, r4
   1cfba:	f7ff fef0 	bl	1cd9e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1cfbe:	2203      	movs	r2, #3
   1cfc0:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1cfc2:	4620      	mov	r0, r4
}
   1cfc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cfc8:	f7ff bee9 	b.w	1cd9e <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1cfcc:	2202      	movs	r2, #2
   1cfce:	4631      	mov	r1, r6
   1cfd0:	4620      	mov	r0, r4
   1cfd2:	f7ff fed9 	bl	1cd88 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1cfd6:	2202      	movs	r2, #2
   1cfd8:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1cfda:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1cfdc:	4629      	mov	r1, r5
   1cfde:	4620      	mov	r0, r4
   1cfe0:	f7ff fedd 	bl	1cd9e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1cfe4:	4633      	mov	r3, r6
   1cfe6:	2203      	movs	r2, #3
   1cfe8:	4629      	mov	r1, r5
   1cfea:	4620      	mov	r0, r4
   1cfec:	f7ff fed7 	bl	1cd9e <chunk_set>
   1cff0:	2203      	movs	r2, #3
   1cff2:	4639      	mov	r1, r7
   1cff4:	462b      	mov	r3, r5
   1cff6:	4620      	mov	r0, r4
   1cff8:	f7ff fed1 	bl	1cd9e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1cffc:	2202      	movs	r2, #2
   1cffe:	4631      	mov	r1, r6
   1d000:	e7df      	b.n	1cfc2 <free_list_add+0x46>
   1d002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d006 <free_list_remove>:
{
   1d006:	b538      	push	{r3, r4, r5, lr}
   1d008:	4604      	mov	r4, r0
   1d00a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1d00c:	f7ff fed2 	bl	1cdb4 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1d010:	68a3      	ldr	r3, [r4, #8]
   1d012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d016:	4601      	mov	r1, r0
   1d018:	d301      	bcc.n	1d01e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1d01a:	2801      	cmp	r0, #1
   1d01c:	d009      	beq.n	1d032 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d01e:	4620      	mov	r0, r4
   1d020:	f7ff feea 	bl	1cdf8 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1d024:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d026:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1d028:	4620      	mov	r0, r4
}
   1d02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1d02e:	f7ff bf35 	b.w	1ce9c <free_list_remove_bidx>
}
   1d032:	bd38      	pop	{r3, r4, r5, pc}

0001d034 <free_chunk>:
{
   1d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d036:	460c      	mov	r4, r1
   1d038:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1d03a:	f7ff febb 	bl	1cdb4 <chunk_size>
   1d03e:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d040:	2201      	movs	r2, #1
   1d042:	4631      	mov	r1, r6
   1d044:	4628      	mov	r0, r5
   1d046:	f7ff fe9f 	bl	1cd88 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1d04a:	07c3      	lsls	r3, r0, #31
   1d04c:	d40c      	bmi.n	1d068 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1d04e:	4631      	mov	r1, r6
   1d050:	4628      	mov	r0, r5
   1d052:	f7ff ffd8 	bl	1d006 <free_list_remove>
	return c + chunk_size(h, c);
   1d056:	4621      	mov	r1, r4
   1d058:	4628      	mov	r0, r5
   1d05a:	f7ff feab 	bl	1cdb4 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1d05e:	4621      	mov	r1, r4
   1d060:	1822      	adds	r2, r4, r0
   1d062:	4628      	mov	r0, r5
   1d064:	f7ff fed5 	bl	1ce12 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d068:	2200      	movs	r2, #0
   1d06a:	4621      	mov	r1, r4
   1d06c:	4628      	mov	r0, r5
   1d06e:	f7ff fe8b 	bl	1cd88 <chunk_field>
   1d072:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d074:	2201      	movs	r2, #1
   1d076:	4639      	mov	r1, r7
   1d078:	4628      	mov	r0, r5
   1d07a:	f7ff fe85 	bl	1cd88 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1d07e:	f010 0601 	ands.w	r6, r0, #1
   1d082:	d113      	bne.n	1d0ac <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1d084:	4639      	mov	r1, r7
   1d086:	4628      	mov	r0, r5
   1d088:	f7ff ffbd 	bl	1d006 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d08c:	4621      	mov	r1, r4
   1d08e:	4632      	mov	r2, r6
   1d090:	4628      	mov	r0, r5
   1d092:	f7ff fe79 	bl	1cd88 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1d096:	4622      	mov	r2, r4
   1d098:	1a21      	subs	r1, r4, r0
   1d09a:	4628      	mov	r0, r5
   1d09c:	f7ff feb9 	bl	1ce12 <merge_chunks>
   1d0a0:	4621      	mov	r1, r4
   1d0a2:	4632      	mov	r2, r6
   1d0a4:	4628      	mov	r0, r5
   1d0a6:	f7ff fe6f 	bl	1cd88 <chunk_field>
   1d0aa:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1d0ac:	4621      	mov	r1, r4
   1d0ae:	4628      	mov	r0, r5
}
   1d0b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1d0b4:	f7ff bf62 	b.w	1cf7c <free_list_add>

0001d0b8 <sys_heap_free>:
{
   1d0b8:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1d0ba:	b191      	cbz	r1, 1d0e2 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1d0bc:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1d0be:	6883      	ldr	r3, [r0, #8]
   1d0c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d0c4:	bf2c      	ite	cs
   1d0c6:	2408      	movcs	r4, #8
   1d0c8:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d0ca:	1b0c      	subs	r4, r1, r4
   1d0cc:	1a24      	subs	r4, r4, r0
   1d0ce:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1d0d0:	4621      	mov	r1, r4
   1d0d2:	2200      	movs	r2, #0
   1d0d4:	f7ff fe74 	bl	1cdc0 <set_chunk_used>
	free_chunk(h, c);
   1d0d8:	4621      	mov	r1, r4
}
   1d0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1d0de:	f7ff bfa9 	b.w	1d034 <free_chunk>
}
   1d0e2:	bd10      	pop	{r4, pc}

0001d0e4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1d0e4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1d0e6:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1d0e8:	b909      	cbnz	r1, 1d0ee <sys_heap_alloc+0xa>
		return NULL;
   1d0ea:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1d0ec:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1d0ee:	68ab      	ldr	r3, [r5, #8]
   1d0f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1d0f4:	d9f9      	bls.n	1d0ea <sys_heap_alloc+0x6>
   1d0f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d0fa:	bf2c      	ite	cs
   1d0fc:	2208      	movcs	r2, #8
   1d0fe:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d100:	1dcc      	adds	r4, r1, #7
   1d102:	4414      	add	r4, r2
   1d104:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1d106:	4621      	mov	r1, r4
   1d108:	4628      	mov	r0, r5
   1d10a:	f7ff fef6 	bl	1cefa <alloc_chunk>
	if (c == 0U) {
   1d10e:	4606      	mov	r6, r0
   1d110:	2800      	cmp	r0, #0
   1d112:	d0ea      	beq.n	1d0ea <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1d114:	4601      	mov	r1, r0
   1d116:	4628      	mov	r0, r5
   1d118:	f7ff fe4c 	bl	1cdb4 <chunk_size>
   1d11c:	42a0      	cmp	r0, r4
   1d11e:	d909      	bls.n	1d134 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1d120:	4434      	add	r4, r6
   1d122:	4631      	mov	r1, r6
   1d124:	4628      	mov	r0, r5
   1d126:	4622      	mov	r2, r4
   1d128:	f7ff fe91 	bl	1ce4e <split_chunks>
		free_list_add(h, c + chunk_sz);
   1d12c:	4621      	mov	r1, r4
   1d12e:	4628      	mov	r0, r5
   1d130:	f7ff ff24 	bl	1cf7c <free_list_add>
	set_chunk_used(h, c, true);
   1d134:	4628      	mov	r0, r5
   1d136:	2201      	movs	r2, #1
   1d138:	4631      	mov	r1, r6
   1d13a:	f7ff fe41 	bl	1cdc0 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1d13e:	68ab      	ldr	r3, [r5, #8]
   1d140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d144:	bf2c      	ite	cs
   1d146:	2008      	movcs	r0, #8
   1d148:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1d14a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1d14e:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1d150:	e7cc      	b.n	1d0ec <sys_heap_alloc+0x8>

0001d152 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1d152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap *h = heap->heap;
   1d156:	6805      	ldr	r5, [r0, #0]
   1d158:	68ab      	ldr	r3, [r5, #8]
   1d15a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
{
   1d15e:	4614      	mov	r4, r2
   1d160:	bf2c      	ite	cs
   1d162:	2208      	movcs	r2, #8
   1d164:	2204      	movcc	r2, #4

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (align <= chunk_header_bytes(h)) {
   1d166:	4291      	cmp	r1, r2
{
   1d168:	460f      	mov	r7, r1
	if (align <= chunk_header_bytes(h)) {
   1d16a:	d804      	bhi.n	1d176 <sys_heap_aligned_alloc+0x24>
		return sys_heap_alloc(heap, bytes);
   1d16c:	4621      	mov	r1, r4
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1d16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sys_heap_alloc(heap, bytes);
   1d172:	f7ff bfb7 	b.w	1d0e4 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1d176:	b91c      	cbnz	r4, 1d180 <sys_heap_aligned_alloc+0x2e>
		return NULL;
   1d178:	2600      	movs	r6, #0
}
   1d17a:	4630      	mov	r0, r6
   1d17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
   1d180:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1d184:	d9f8      	bls.n	1d178 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d186:	1de1      	adds	r1, r4, #7
   1d188:	4439      	add	r1, r7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1d18a:	08c9      	lsrs	r1, r1, #3
   1d18c:	4628      	mov	r0, r5
   1d18e:	f7ff feb4 	bl	1cefa <alloc_chunk>
	if (c0 == 0) {
   1d192:	4680      	mov	r8, r0
   1d194:	2800      	cmp	r0, #0
   1d196:	d0ef      	beq.n	1d178 <sys_heap_aligned_alloc+0x26>
	return big_heap(h) ? 8 : 4;
   1d198:	68ab      	ldr	r3, [r5, #8]
   1d19a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d19e:	bf2c      	ite	cs
   1d1a0:	2308      	movcs	r3, #8
   1d1a2:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1d1a4:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   1d1a8:	1e7a      	subs	r2, r7, #1
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1d1aa:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   1d1ac:	427f      	negs	r7, r7
   1d1ae:	4416      	add	r6, r2
   1d1b0:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d1b2:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d1b4:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d1b6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d1b8:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d1ba:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1d1be:	1b64      	subs	r4, r4, r5
	if (c > c0) {
   1d1c0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d1c4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1d1c8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1d1cc:	d208      	bcs.n	1d1e0 <sys_heap_aligned_alloc+0x8e>
		split_chunks(h, c0, c);
   1d1ce:	4601      	mov	r1, r0
   1d1d0:	463a      	mov	r2, r7
   1d1d2:	4628      	mov	r0, r5
   1d1d4:	f7ff fe3b 	bl	1ce4e <split_chunks>
		free_list_add(h, c0);
   1d1d8:	4641      	mov	r1, r8
   1d1da:	4628      	mov	r0, r5
   1d1dc:	f7ff fece 	bl	1cf7c <free_list_add>
	return c + chunk_size(h, c);
   1d1e0:	4639      	mov	r1, r7
   1d1e2:	4628      	mov	r0, r5
   1d1e4:	f7ff fde6 	bl	1cdb4 <chunk_size>
   1d1e8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1d1ea:	4284      	cmp	r4, r0
   1d1ec:	d208      	bcs.n	1d200 <sys_heap_aligned_alloc+0xae>
		split_chunks(h, c, c_end);
   1d1ee:	4639      	mov	r1, r7
   1d1f0:	4628      	mov	r0, r5
   1d1f2:	4622      	mov	r2, r4
   1d1f4:	f7ff fe2b 	bl	1ce4e <split_chunks>
		free_list_add(h, c_end);
   1d1f8:	4621      	mov	r1, r4
   1d1fa:	4628      	mov	r0, r5
   1d1fc:	f7ff febe 	bl	1cf7c <free_list_add>
	set_chunk_used(h, c, true);
   1d200:	2201      	movs	r2, #1
   1d202:	4639      	mov	r1, r7
   1d204:	4628      	mov	r0, r5
   1d206:	f7ff fddb 	bl	1cdc0 <set_chunk_used>
	return mem;
   1d20a:	e7b6      	b.n	1d17a <sys_heap_aligned_alloc+0x28>

0001d20c <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1d20c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1d210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d212:	bf2c      	ite	cs
   1d214:	2508      	movcs	r5, #8
   1d216:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1d218:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d21a:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d21c:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d21e:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d222:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1d226:	2200      	movs	r2, #0
   1d228:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1d22a:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1d22c:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1d22e:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1d230:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1d234:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1d236:	4629      	mov	r1, r5
	h->len = buf_sz;
   1d238:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1d23a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1d23c:	4620      	mov	r0, r4
   1d23e:	f7ff fddb 	bl	1cdf8 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1d242:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d244:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1d246:	1c41      	adds	r1, r0, #1
   1d248:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1d24a:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1d24e:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1d250:	428b      	cmp	r3, r1
   1d252:	db29      	blt.n	1d2a8 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1d254:	4632      	mov	r2, r6
   1d256:	4620      	mov	r0, r4
   1d258:	2100      	movs	r1, #0
   1d25a:	f7ff fdc9 	bl	1cdf0 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1d25e:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1d260:	4620      	mov	r0, r4
   1d262:	2201      	movs	r2, #1
   1d264:	2100      	movs	r1, #0
   1d266:	f7ff fdab 	bl	1cdc0 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1d26a:	463a      	mov	r2, r7
   1d26c:	4631      	mov	r1, r6
   1d26e:	f7ff fdbf 	bl	1cdf0 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d272:	4633      	mov	r3, r6
   1d274:	4631      	mov	r1, r6
   1d276:	4620      	mov	r0, r4
   1d278:	2200      	movs	r2, #0
   1d27a:	f7ff fd90 	bl	1cd9e <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1d27e:	4629      	mov	r1, r5
   1d280:	4620      	mov	r0, r4
   1d282:	2200      	movs	r2, #0
   1d284:	f7ff fdb4 	bl	1cdf0 <set_chunk_size>
   1d288:	463b      	mov	r3, r7
   1d28a:	4629      	mov	r1, r5
   1d28c:	4620      	mov	r0, r4
   1d28e:	2200      	movs	r2, #0
   1d290:	f7ff fd85 	bl	1cd9e <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1d294:	4629      	mov	r1, r5
   1d296:	4620      	mov	r0, r4
   1d298:	2201      	movs	r2, #1
   1d29a:	f7ff fd91 	bl	1cdc0 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1d29e:	4631      	mov	r1, r6
}
   1d2a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1d2a4:	f7ff be6a 	b.w	1cf7c <free_list_add>
		h->buckets[i].next = 0;
   1d2a8:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1d2ac:	3301      	adds	r3, #1
   1d2ae:	e7cf      	b.n	1d250 <sys_heap_init+0x44>

0001d2b0 <encode_uint>:
{
   1d2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2b4:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1d2b6:	78d3      	ldrb	r3, [r2, #3]
{
   1d2b8:	4614      	mov	r4, r2
	switch (specifier) {
   1d2ba:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d2bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1d2c0:	4606      	mov	r6, r0
   1d2c2:	460f      	mov	r7, r1
   1d2c4:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1d2c6:	d02d      	beq.n	1d324 <encode_uint+0x74>
   1d2c8:	d828      	bhi.n	1d31c <encode_uint+0x6c>
		return 16;
   1d2ca:	2b58      	cmp	r3, #88	; 0x58
   1d2cc:	bf14      	ite	ne
   1d2ce:	250a      	movne	r5, #10
   1d2d0:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1d2d2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1d2d6:	46aa      	mov	sl, r5
   1d2d8:	f04f 0b00 	mov.w	fp, #0
   1d2dc:	4652      	mov	r2, sl
   1d2de:	465b      	mov	r3, fp
   1d2e0:	4630      	mov	r0, r6
   1d2e2:	4639      	mov	r1, r7
   1d2e4:	f7e2 fefc 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d2e8:	2a09      	cmp	r2, #9
   1d2ea:	b2d3      	uxtb	r3, r2
   1d2ec:	d81f      	bhi.n	1d32e <encode_uint+0x7e>
   1d2ee:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1d2f0:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d2f2:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1d2f4:	bf08      	it	eq
   1d2f6:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d2f8:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1d2fc:	d301      	bcc.n	1d302 <encode_uint+0x52>
   1d2fe:	45c8      	cmp	r8, r9
   1d300:	d812      	bhi.n	1d328 <encode_uint+0x78>
	if (conv->flag_hash) {
   1d302:	7823      	ldrb	r3, [r4, #0]
   1d304:	069b      	lsls	r3, r3, #26
   1d306:	d505      	bpl.n	1d314 <encode_uint+0x64>
		if (radix == 8) {
   1d308:	2d08      	cmp	r5, #8
   1d30a:	d116      	bne.n	1d33a <encode_uint+0x8a>
			conv->altform_0 = true;
   1d30c:	78a3      	ldrb	r3, [r4, #2]
   1d30e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1d312:	70a3      	strb	r3, [r4, #2]
}
   1d314:	4640      	mov	r0, r8
   1d316:	b003      	add	sp, #12
   1d318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1d31c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1d320:	2b70      	cmp	r3, #112	; 0x70
   1d322:	e7d3      	b.n	1d2cc <encode_uint+0x1c>
	switch (specifier) {
   1d324:	2508      	movs	r5, #8
   1d326:	e7d4      	b.n	1d2d2 <encode_uint+0x22>
		value /= radix;
   1d328:	4606      	mov	r6, r0
   1d32a:	460f      	mov	r7, r1
   1d32c:	e7d6      	b.n	1d2dc <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d32e:	9a01      	ldr	r2, [sp, #4]
   1d330:	2a19      	cmp	r2, #25
   1d332:	bf94      	ite	ls
   1d334:	3337      	addls	r3, #55	; 0x37
   1d336:	3357      	addhi	r3, #87	; 0x57
   1d338:	e7da      	b.n	1d2f0 <encode_uint+0x40>
		} else if (radix == 16) {
   1d33a:	2d10      	cmp	r5, #16
   1d33c:	d1ea      	bne.n	1d314 <encode_uint+0x64>
			conv->altform_0c = true;
   1d33e:	78a3      	ldrb	r3, [r4, #2]
   1d340:	f043 0310 	orr.w	r3, r3, #16
   1d344:	e7e5      	b.n	1d312 <encode_uint+0x62>

0001d346 <outs>:
{
   1d346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d34a:	4607      	mov	r7, r0
   1d34c:	4688      	mov	r8, r1
   1d34e:	4615      	mov	r5, r2
   1d350:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1d352:	4614      	mov	r4, r2
   1d354:	42b4      	cmp	r4, r6
   1d356:	eba4 0005 	sub.w	r0, r4, r5
   1d35a:	d302      	bcc.n	1d362 <outs+0x1c>
   1d35c:	b93e      	cbnz	r6, 1d36e <outs+0x28>
   1d35e:	7823      	ldrb	r3, [r4, #0]
   1d360:	b12b      	cbz	r3, 1d36e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1d362:	f814 0b01 	ldrb.w	r0, [r4], #1
   1d366:	4641      	mov	r1, r8
   1d368:	47b8      	blx	r7
		if (rc < 0) {
   1d36a:	2800      	cmp	r0, #0
   1d36c:	daf2      	bge.n	1d354 <outs+0xe>
}
   1d36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d372 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1d372:	4770      	bx	lr

0001d374 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1d374:	2300      	movs	r3, #0
	list->head = NULL;
   1d376:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d37a:	4770      	bx	lr

0001d37c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1d37c:	6803      	ldr	r3, [r0, #0]
   1d37e:	b923      	cbnz	r3, 1d38a <log_list_add_tail+0xe>
		list->head = msg;
   1d380:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1d382:	2300      	movs	r3, #0
	list->tail = msg;
   1d384:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1d386:	600b      	str	r3, [r1, #0]
}
   1d388:	4770      	bx	lr
		list->tail->next = msg;
   1d38a:	6843      	ldr	r3, [r0, #4]
   1d38c:	6019      	str	r1, [r3, #0]
   1d38e:	e7f8      	b.n	1d382 <log_list_add_tail+0x6>

0001d390 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1d390:	6800      	ldr	r0, [r0, #0]
   1d392:	4770      	bx	lr

0001d394 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1d394:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1d396:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1d398:	b108      	cbz	r0, 1d39e <log_list_head_get+0xa>
		list->head = list->head->next;
   1d39a:	6802      	ldr	r2, [r0, #0]
   1d39c:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1d39e:	4770      	bx	lr

0001d3a0 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1d3a0:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1d3a2:	f7f6 fb0f 	bl	139c4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1d3a6:	b118      	cbz	r0, 1d3b0 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1d3a8:	2301      	movs	r3, #1
   1d3aa:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1d3ac:	2300      	movs	r3, #0
   1d3ae:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1d3b0:	bd08      	pop	{r3, pc}

0001d3b2 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1d3b2:	f7f7 b8e9 	b.w	14588 <z_timer_cycle_get_32>

0001d3b6 <dummy_timestamp>:
   1d3b6:	2000      	movs	r0, #0
   1d3b8:	4770      	bx	lr

0001d3ba <z_log_get_s_mask>:
{
   1d3ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3bc:	4605      	mov	r5, r0
	uint32_t mask = 0;
   1d3be:	2000      	movs	r0, #0
	uint32_t arg = 0;
   1d3c0:	4603      	mov	r3, r0
	bool arm = false;
   1d3c2:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1d3c4:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1d3c6:	f815 4b01 	ldrb.w	r4, [r5], #1
   1d3ca:	b10c      	cbz	r4, 1d3d0 <z_log_get_s_mask+0x16>
   1d3cc:	428b      	cmp	r3, r1
   1d3ce:	d300      	bcc.n	1d3d2 <z_log_get_s_mask+0x18>
}
   1d3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1d3d2:	2c25      	cmp	r4, #37	; 0x25
   1d3d4:	d102      	bne.n	1d3dc <z_log_get_s_mask+0x22>
			arm = !arm;
   1d3d6:	f082 0201 	eor.w	r2, r2, #1
   1d3da:	e7f4      	b.n	1d3c6 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1d3dc:	2a00      	cmp	r2, #0
   1d3de:	d0f2      	beq.n	1d3c6 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d3e0:	f044 0620 	orr.w	r6, r4, #32
   1d3e4:	3e61      	subs	r6, #97	; 0x61
   1d3e6:	2e19      	cmp	r6, #25
   1d3e8:	d8ed      	bhi.n	1d3c6 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1d3ea:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1d3ec:	bf04      	itt	eq
   1d3ee:	fa07 f203 	lsleq.w	r2, r7, r3
   1d3f2:	4310      	orreq	r0, r2
			arg++;
   1d3f4:	3301      	adds	r3, #1
			arm = false;
   1d3f6:	2200      	movs	r2, #0
   1d3f8:	e7e5      	b.n	1d3c6 <z_log_get_s_mask+0xc>

0001d3fa <log_0>:
{
   1d3fa:	b538      	push	{r3, r4, r5, lr}
   1d3fc:	4605      	mov	r5, r0
   1d3fe:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1d400:	f7ff ffce 	bl	1d3a0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d404:	b128      	cbz	r0, 1d412 <log_0+0x18>
		msg->str = str;
   1d406:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1d408:	4621      	mov	r1, r4
}
   1d40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1d40e:	f7f6 b9f3 	b.w	137f8 <msg_finalize>
}
   1d412:	bd38      	pop	{r3, r4, r5, pc}

0001d414 <log_1>:
{
   1d414:	b570      	push	{r4, r5, r6, lr}
   1d416:	4606      	mov	r6, r0
   1d418:	460d      	mov	r5, r1
   1d41a:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1d41c:	f7ff ffc0 	bl	1d3a0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d420:	b158      	cbz	r0, 1d43a <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1d422:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1d424:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1d426:	2101      	movs	r1, #1
   1d428:	f361 1207 	bfi	r2, r1, #4, #4
   1d42c:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1d42e:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1d430:	4621      	mov	r1, r4
}
   1d432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1d436:	f7f6 b9df 	b.w	137f8 <msg_finalize>
}
   1d43a:	bd70      	pop	{r4, r5, r6, pc}

0001d43c <log_2>:
{
   1d43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d440:	4680      	mov	r8, r0
   1d442:	460f      	mov	r7, r1
   1d444:	4616      	mov	r6, r2
   1d446:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1d448:	f7ff ffaa 	bl	1d3a0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d44c:	b168      	cbz	r0, 1d46a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1d44e:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1d450:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1d454:	2202      	movs	r2, #2
   1d456:	f362 1307 	bfi	r3, r2, #4, #4
   1d45a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1d45c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1d460:	4629      	mov	r1, r5
}
   1d462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1d466:	f7f6 b9c7 	b.w	137f8 <msg_finalize>
}
   1d46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d46e <log_3>:
{
   1d46e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d472:	4680      	mov	r8, r0
   1d474:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1d478:	460f      	mov	r7, r1
   1d47a:	4616      	mov	r6, r2
   1d47c:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1d47e:	f7ff ff8f 	bl	1d3a0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d482:	b170      	cbz	r0, 1d4a2 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1d484:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1d486:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1d48a:	2203      	movs	r2, #3
   1d48c:	f362 1307 	bfi	r3, r2, #4, #4
   1d490:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1d492:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1d496:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1d498:	4649      	mov	r1, r9
}
   1d49a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1d49e:	f7f6 b9ab 	b.w	137f8 <msg_finalize>
}
   1d4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d4a6 <log_n>:
{
   1d4a6:	b510      	push	{r4, lr}
   1d4a8:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1d4aa:	f000 f8ac 	bl	1d606 <log_msg_create_n>
		if (msg == NULL) {
   1d4ae:	b120      	cbz	r0, 1d4ba <log_n+0x14>
		msg_finalize(msg, src_level);
   1d4b0:	4621      	mov	r1, r4
}
   1d4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1d4b6:	f7f6 b99f 	b.w	137f8 <msg_finalize>
}
   1d4ba:	bd10      	pop	{r4, pc}

0001d4bc <log_hexdump>:
{
   1d4bc:	b510      	push	{r4, lr}
   1d4be:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   1d4c0:	f000 f8f5 	bl	1d6ae <log_msg_hexdump_create>
		if (msg == NULL) {
   1d4c4:	b120      	cbz	r0, 1d4d0 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   1d4c6:	4621      	mov	r1, r4
}
   1d4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1d4cc:	f7f6 b994 	b.w	137f8 <msg_finalize>
}
   1d4d0:	bd10      	pop	{r4, pc}

0001d4d2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1d4d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d4d6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1d4d8:	8903      	ldrh	r3, [r0, #8]
{
   1d4da:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1d4de:	460e      	mov	r6, r1
   1d4e0:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1d4e2:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1d4e6:	42a2      	cmp	r2, r4
   1d4e8:	d803      	bhi.n	1d4f2 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1d4ea:	2300      	movs	r3, #0
   1d4ec:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1d4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1d4f2:	680b      	ldr	r3, [r1, #0]
   1d4f4:	4423      	add	r3, r4
   1d4f6:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1d4f8:	bf84      	itt	hi
   1d4fa:	1b13      	subhi	r3, r2, r4
   1d4fc:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1d4fe:	2a0c      	cmp	r2, #12
	req_len = *length;
   1d500:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1d504:	d92a      	bls.n	1d55c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1d506:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1d508:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1d50c:	d82d      	bhi.n	1d56a <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1d50e:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1d510:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1d512:	454a      	cmp	r2, r9
   1d514:	bf28      	it	cs
   1d516:	464a      	movcs	r2, r9
   1d518:	4615      	mov	r5, r2
		if (put_op) {
   1d51a:	4420      	add	r0, r4
   1d51c:	b317      	cbz	r7, 1d564 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1d51e:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1d520:	f000 fd7a 	bl	1e018 <memcpy>
		req_len -= cpy_len;
   1d524:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1d528:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1d52a:	f1b9 0f00 	cmp.w	r9, #0
   1d52e:	d0de      	beq.n	1d4ee <log_msg_hexdump_data_op+0x1c>
   1d530:	f1b8 0f00 	cmp.w	r8, #0
   1d534:	d0db      	beq.n	1d4ee <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1d536:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1d53a:	454d      	cmp	r5, r9
   1d53c:	bf28      	it	cs
   1d53e:	464d      	movcs	r5, r9
		if (put_op) {
   1d540:	1d20      	adds	r0, r4, #4
   1d542:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1d544:	462a      	mov	r2, r5
		if (put_op) {
   1d546:	b1bf      	cbz	r7, 1d578 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1d548:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1d54a:	f000 fd65 	bl	1e018 <memcpy>
		req_len -= cpy_len;
   1d54e:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1d552:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1d556:	442e      	add	r6, r5
		offset = 0;
   1d558:	2400      	movs	r4, #0
   1d55a:	e7e6      	b.n	1d52a <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1d55c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1d55e:	f04f 0800 	mov.w	r8, #0
   1d562:	e7d6      	b.n	1d512 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1d564:	4601      	mov	r1, r0
   1d566:	4630      	mov	r0, r6
   1d568:	e7da      	b.n	1d520 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1d56a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1d56c:	2c1b      	cmp	r4, #27
   1d56e:	d9dc      	bls.n	1d52a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1d570:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1d574:	3c1c      	subs	r4, #28
   1d576:	e7f9      	b.n	1d56c <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1d578:	4601      	mov	r1, r0
   1d57a:	4630      	mov	r0, r6
   1d57c:	e7e5      	b.n	1d54a <log_msg_hexdump_data_op+0x78>

0001d57e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d57e:	3004      	adds	r0, #4
   1d580:	f3bf 8f5b 	dmb	ish
   1d584:	e850 3f00 	ldrex	r3, [r0]
   1d588:	3301      	adds	r3, #1
   1d58a:	e840 3200 	strex	r2, r3, [r0]
   1d58e:	2a00      	cmp	r2, #0
   1d590:	d1f8      	bne.n	1d584 <log_msg_get+0x6>
   1d592:	f3bf 8f5b 	dmb	ish
}
   1d596:	4770      	bx	lr

0001d598 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1d598:	7a40      	ldrb	r0, [r0, #9]
}
   1d59a:	0900      	lsrs	r0, r0, #4
   1d59c:	4770      	bx	lr

0001d59e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1d59e:	7a43      	ldrb	r3, [r0, #9]
   1d5a0:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1d5a4:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1d5a8:	d216      	bcs.n	1d5d8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d5aa:	2a03      	cmp	r2, #3
   1d5ac:	d803      	bhi.n	1d5b6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1d5ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d5b2:	6948      	ldr	r0, [r1, #20]
   1d5b4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1d5b6:	2901      	cmp	r1, #1
   1d5b8:	d803      	bhi.n	1d5c2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1d5ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d5be:	6988      	ldr	r0, [r1, #24]
   1d5c0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1d5c2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d5c4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1d5c6:	2906      	cmp	r1, #6
   1d5c8:	d803      	bhi.n	1d5d2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1d5ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1d5ce:	6848      	ldr	r0, [r1, #4]
   1d5d0:	4770      	bx	lr
		cont = cont->next;
   1d5d2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1d5d4:	3907      	subs	r1, #7
		cont = cont->next;
   1d5d6:	e7f6      	b.n	1d5c6 <log_msg_arg_get+0x28>
		return 0;
   1d5d8:	2000      	movs	r0, #0
}
   1d5da:	4770      	bx	lr

0001d5dc <log_msg_put>:
{
   1d5dc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1d5de:	1d02      	adds	r2, r0, #4
   1d5e0:	f3bf 8f5b 	dmb	ish
   1d5e4:	e852 1f00 	ldrex	r1, [r2]
   1d5e8:	3901      	subs	r1, #1
   1d5ea:	e842 1c00 	strex	ip, r1, [r2]
   1d5ee:	f1bc 0f00 	cmp.w	ip, #0
   1d5f2:	d1f7      	bne.n	1d5e4 <log_msg_put+0x8>
   1d5f4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1d5f8:	685b      	ldr	r3, [r3, #4]
   1d5fa:	b90b      	cbnz	r3, 1d600 <log_msg_put+0x24>
		msg_free(msg);
   1d5fc:	f7f6 b9f6 	b.w	139ec <msg_free>
}
   1d600:	4770      	bx	lr

0001d602 <log_msg_str_get>:
}
   1d602:	6900      	ldr	r0, [r0, #16]
   1d604:	4770      	bx	lr

0001d606 <log_msg_create_n>:
{
   1d606:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d60a:	4681      	mov	r9, r0
   1d60c:	4688      	mov	r8, r1
   1d60e:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1d610:	f7f6 f9d8 	bl	139c4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1d614:	4604      	mov	r4, r0
   1d616:	b330      	cbz	r0, 1d666 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1d618:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1d61a:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d61c:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1d61e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1d620:	8107      	strh	r7, [r0, #8]
   1d622:	d909      	bls.n	1d638 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1d624:	2202      	movs	r2, #2
   1d626:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d628:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1d62c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1d630:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1d632:	f1ba 0f00 	cmp.w	sl, #0
   1d636:	dc0e      	bgt.n	1d656 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1d638:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1d63a:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1d63e:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d642:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1d644:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d646:	d818      	bhi.n	1d67a <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1d648:	00aa      	lsls	r2, r5, #2
   1d64a:	4641      	mov	r1, r8
   1d64c:	f104 0014 	add.w	r0, r4, #20
   1d650:	f000 fce2 	bl	1e018 <memcpy>
	while (nargs != 0U) {
   1d654:	e007      	b.n	1d666 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1d656:	f7f6 f9b5 	bl	139c4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1d65a:	4606      	mov	r6, r0
   1d65c:	b930      	cbnz	r0, 1d66c <log_msg_create_n+0x66>
			msg_free(msg);
   1d65e:	4620      	mov	r0, r4
   1d660:	f7f6 f9c4 	bl	139ec <msg_free>
			return NULL;
   1d664:	4634      	mov	r4, r6
}
   1d666:	4620      	mov	r0, r4
   1d668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1d66c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1d670:	f1aa 0a07 	sub.w	sl, sl, #7
   1d674:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1d676:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1d678:	e7db      	b.n	1d632 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1d67a:	4641      	mov	r1, r8
   1d67c:	2208      	movs	r2, #8
   1d67e:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1d682:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1d684:	f000 fcc8 	bl	1e018 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d688:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1d68a:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1d68e:	2d07      	cmp	r5, #7
   1d690:	462e      	mov	r6, r5
   1d692:	bf28      	it	cs
   1d694:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1d696:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1d69a:	4641      	mov	r1, r8
   1d69c:	1d38      	adds	r0, r7, #4
   1d69e:	464a      	mov	r2, r9
   1d6a0:	f000 fcba 	bl	1e018 <memcpy>
	while (nargs != 0U) {
   1d6a4:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1d6a6:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1d6a8:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1d6aa:	d1f0      	bne.n	1d68e <log_msg_create_n+0x88>
   1d6ac:	e7db      	b.n	1d666 <log_msg_create_n+0x60>

0001d6ae <log_msg_hexdump_create>:
{
   1d6ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1d6b2:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1d6b6:	4295      	cmp	r5, r2
{
   1d6b8:	4680      	mov	r8, r0
   1d6ba:	460e      	mov	r6, r1
   1d6bc:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1d6be:	bf28      	it	cs
   1d6c0:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1d6c2:	f7f6 f97f 	bl	139c4 <log_msg_chunk_alloc>
	if (msg == NULL) {
   1d6c6:	4604      	mov	r4, r0
   1d6c8:	b380      	cbz	r0, 1d72c <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1d6ca:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   1d6cc:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1d6d0:	2301      	movs	r3, #1
   1d6d2:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1d6d4:	00ab      	lsls	r3, r5, #2
   1d6d6:	f043 0301 	orr.w	r3, r3, #1
   1d6da:	f002 0202 	and.w	r2, r2, #2
   1d6de:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1d6e0:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1d6e2:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1d6e4:	f100 0814 	add.w	r8, r0, #20
   1d6e8:	d917      	bls.n	1d71a <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   1d6ea:	2208      	movs	r2, #8
   1d6ec:	4631      	mov	r1, r6
   1d6ee:	3018      	adds	r0, #24
   1d6f0:	f000 fc92 	bl	1e018 <memcpy>
		msg->hdr.params.generic.ext = 1;
   1d6f4:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   1d6f6:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   1d6f8:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   1d6fc:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   1d6fe:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1d700:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1d702:	3d08      	subs	r5, #8
	while (length > 0) {
   1d704:	4699      	mov	r9, r3
   1d706:	b18d      	cbz	r5, 1d72c <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1d708:	f7f6 f95c 	bl	139c4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1d70c:	4607      	mov	r7, r0
   1d70e:	b980      	cbnz	r0, 1d732 <log_msg_hexdump_create+0x84>
			msg_free(msg);
   1d710:	4620      	mov	r0, r4
   1d712:	f7f6 f96b 	bl	139ec <msg_free>
			return NULL;
   1d716:	463c      	mov	r4, r7
   1d718:	e008      	b.n	1d72c <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1d71a:	462a      	mov	r2, r5
   1d71c:	4631      	mov	r1, r6
   1d71e:	4640      	mov	r0, r8
   1d720:	f000 fc7a 	bl	1e018 <memcpy>
		msg->hdr.params.generic.ext = 0;
   1d724:	7a23      	ldrb	r3, [r4, #8]
   1d726:	f36f 0341 	bfc	r3, #1, #1
   1d72a:	7223      	strb	r3, [r4, #8]
}
   1d72c:	4620      	mov	r0, r4
   1d72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1d732:	2d1c      	cmp	r5, #28
   1d734:	462f      	mov	r7, r5
   1d736:	bf28      	it	cs
   1d738:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1d73a:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1d73e:	4631      	mov	r1, r6
		cont->next = NULL;
   1d740:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1d744:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1d746:	463a      	mov	r2, r7
   1d748:	3004      	adds	r0, #4
   1d74a:	f000 fc65 	bl	1e018 <memcpy>
		data += chunk_length;
   1d74e:	443e      	add	r6, r7
		length -= chunk_length;
   1d750:	1bed      	subs	r5, r5, r7
   1d752:	e7d8      	b.n	1d706 <log_msg_hexdump_create+0x58>

0001d754 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1d754:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1d756:	2400      	movs	r4, #0
   1d758:	9400      	str	r4, [sp, #0]
   1d75a:	f7ff feba 	bl	1d4d2 <log_msg_hexdump_data_op>
}
   1d75e:	b002      	add	sp, #8
   1d760:	bd10      	pop	{r4, pc}

0001d762 <buffer_write>:
{
   1d762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d764:	4606      	mov	r6, r0
   1d766:	460d      	mov	r5, r1
   1d768:	4614      	mov	r4, r2
   1d76a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1d76c:	4621      	mov	r1, r4
   1d76e:	4628      	mov	r0, r5
   1d770:	463a      	mov	r2, r7
   1d772:	47b0      	blx	r6
	} while (len != 0);
   1d774:	1a24      	subs	r4, r4, r0
		buf += processed;
   1d776:	4405      	add	r5, r0
	} while (len != 0);
   1d778:	d1f8      	bne.n	1d76c <buffer_write+0xa>
}
   1d77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d77c <std_print>:
{
   1d77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d780:	b08e      	sub	sp, #56	; 0x38
   1d782:	af0e      	add	r7, sp, #56	; 0x38
   1d784:	4680      	mov	r8, r0
   1d786:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1d788:	f7ff ff3b 	bl	1d602 <log_msg_str_get>
   1d78c:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1d78e:	4640      	mov	r0, r8
   1d790:	f7ff ff02 	bl	1d598 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1d794:	0083      	lsls	r3, r0, #2
   1d796:	3307      	adds	r3, #7
   1d798:	f023 0307 	bic.w	r3, r3, #7
   1d79c:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1d7a0:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1d7a2:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1d7a4:	f04f 0900 	mov.w	r9, #0
   1d7a8:	45d1      	cmp	r9, sl
   1d7aa:	d116      	bne.n	1d7da <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1d7ac:	4640      	mov	r0, r8
   1d7ae:	f7ff fef3 	bl	1d598 <log_msg_nargs_get>
   1d7b2:	280f      	cmp	r0, #15
   1d7b4:	d81e      	bhi.n	1d7f4 <std_print+0x78>
   1d7b6:	e8df f010 	tbh	[pc, r0, lsl #1]
   1d7ba:	0019      	.short	0x0019
   1d7bc:	00260020 	.word	0x00260020
   1d7c0:	0036002d 	.word	0x0036002d
   1d7c4:	004e0041 	.word	0x004e0041
   1d7c8:	006e005d 	.word	0x006e005d
   1d7cc:	00960081 	.word	0x00960081
   1d7d0:	00c600ad 	.word	0x00c600ad
   1d7d4:	00fe00e1 	.word	0x00fe00e1
   1d7d8:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1d7da:	4649      	mov	r1, r9
   1d7dc:	4640      	mov	r0, r8
   1d7de:	f7ff fede 	bl	1d59e <log_msg_arg_get>
   1d7e2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1d7e6:	f109 0901 	add.w	r9, r9, #1
   1d7ea:	e7dd      	b.n	1d7a8 <std_print+0x2c>
		print_formatted(log_output, str);
   1d7ec:	4631      	mov	r1, r6
   1d7ee:	4628      	mov	r0, r5
   1d7f0:	f7f6 f93a 	bl	13a68 <print_formatted>
}
   1d7f4:	46bd      	mov	sp, r7
   1d7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1d7fa:	6822      	ldr	r2, [r4, #0]
   1d7fc:	4631      	mov	r1, r6
   1d7fe:	4628      	mov	r0, r5
   1d800:	f7f6 f932 	bl	13a68 <print_formatted>
		break;
   1d804:	e7f6      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1d806:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d80a:	4631      	mov	r1, r6
   1d80c:	4628      	mov	r0, r5
   1d80e:	f7f6 f92b 	bl	13a68 <print_formatted>
		break;
   1d812:	e7ef      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1d814:	68a3      	ldr	r3, [r4, #8]
   1d816:	9300      	str	r3, [sp, #0]
   1d818:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d81c:	4631      	mov	r1, r6
   1d81e:	4628      	mov	r0, r5
   1d820:	f7f6 f922 	bl	13a68 <print_formatted>
		break;
   1d824:	e7e6      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d826:	68e3      	ldr	r3, [r4, #12]
   1d828:	9301      	str	r3, [sp, #4]
   1d82a:	68a3      	ldr	r3, [r4, #8]
   1d82c:	9300      	str	r3, [sp, #0]
   1d82e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d832:	4631      	mov	r1, r6
   1d834:	4628      	mov	r0, r5
   1d836:	f7f6 f917 	bl	13a68 <print_formatted>
		break;
   1d83a:	e7db      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d83c:	6923      	ldr	r3, [r4, #16]
   1d83e:	9302      	str	r3, [sp, #8]
   1d840:	68e3      	ldr	r3, [r4, #12]
   1d842:	9301      	str	r3, [sp, #4]
   1d844:	68a3      	ldr	r3, [r4, #8]
   1d846:	9300      	str	r3, [sp, #0]
   1d848:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d84c:	4631      	mov	r1, r6
   1d84e:	4628      	mov	r0, r5
   1d850:	f7f6 f90a 	bl	13a68 <print_formatted>
		break;
   1d854:	e7ce      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d856:	6963      	ldr	r3, [r4, #20]
   1d858:	9303      	str	r3, [sp, #12]
   1d85a:	6923      	ldr	r3, [r4, #16]
   1d85c:	9302      	str	r3, [sp, #8]
   1d85e:	68e3      	ldr	r3, [r4, #12]
   1d860:	9301      	str	r3, [sp, #4]
   1d862:	68a3      	ldr	r3, [r4, #8]
   1d864:	9300      	str	r3, [sp, #0]
   1d866:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d86a:	4631      	mov	r1, r6
   1d86c:	4628      	mov	r0, r5
   1d86e:	f7f6 f8fb 	bl	13a68 <print_formatted>
		break;
   1d872:	e7bf      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d874:	69a3      	ldr	r3, [r4, #24]
   1d876:	9304      	str	r3, [sp, #16]
   1d878:	6963      	ldr	r3, [r4, #20]
   1d87a:	9303      	str	r3, [sp, #12]
   1d87c:	6923      	ldr	r3, [r4, #16]
   1d87e:	9302      	str	r3, [sp, #8]
   1d880:	68e3      	ldr	r3, [r4, #12]
   1d882:	9301      	str	r3, [sp, #4]
   1d884:	68a3      	ldr	r3, [r4, #8]
   1d886:	9300      	str	r3, [sp, #0]
   1d888:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d88c:	4631      	mov	r1, r6
   1d88e:	4628      	mov	r0, r5
   1d890:	f7f6 f8ea 	bl	13a68 <print_formatted>
		break;
   1d894:	e7ae      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d896:	69e3      	ldr	r3, [r4, #28]
   1d898:	9305      	str	r3, [sp, #20]
   1d89a:	69a3      	ldr	r3, [r4, #24]
   1d89c:	9304      	str	r3, [sp, #16]
   1d89e:	6963      	ldr	r3, [r4, #20]
   1d8a0:	9303      	str	r3, [sp, #12]
   1d8a2:	6923      	ldr	r3, [r4, #16]
   1d8a4:	9302      	str	r3, [sp, #8]
   1d8a6:	68e3      	ldr	r3, [r4, #12]
   1d8a8:	9301      	str	r3, [sp, #4]
   1d8aa:	68a3      	ldr	r3, [r4, #8]
   1d8ac:	9300      	str	r3, [sp, #0]
   1d8ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d8b2:	4631      	mov	r1, r6
   1d8b4:	4628      	mov	r0, r5
   1d8b6:	f7f6 f8d7 	bl	13a68 <print_formatted>
		break;
   1d8ba:	e79b      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d8bc:	6a23      	ldr	r3, [r4, #32]
   1d8be:	9306      	str	r3, [sp, #24]
   1d8c0:	69e3      	ldr	r3, [r4, #28]
   1d8c2:	9305      	str	r3, [sp, #20]
   1d8c4:	69a3      	ldr	r3, [r4, #24]
   1d8c6:	9304      	str	r3, [sp, #16]
   1d8c8:	6963      	ldr	r3, [r4, #20]
   1d8ca:	9303      	str	r3, [sp, #12]
   1d8cc:	6923      	ldr	r3, [r4, #16]
   1d8ce:	9302      	str	r3, [sp, #8]
   1d8d0:	68e3      	ldr	r3, [r4, #12]
   1d8d2:	9301      	str	r3, [sp, #4]
   1d8d4:	68a3      	ldr	r3, [r4, #8]
   1d8d6:	9300      	str	r3, [sp, #0]
   1d8d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d8dc:	4631      	mov	r1, r6
   1d8de:	4628      	mov	r0, r5
   1d8e0:	f7f6 f8c2 	bl	13a68 <print_formatted>
		break;
   1d8e4:	e786      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d8e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d8e8:	9307      	str	r3, [sp, #28]
   1d8ea:	6a23      	ldr	r3, [r4, #32]
   1d8ec:	9306      	str	r3, [sp, #24]
   1d8ee:	69e3      	ldr	r3, [r4, #28]
   1d8f0:	9305      	str	r3, [sp, #20]
   1d8f2:	69a3      	ldr	r3, [r4, #24]
   1d8f4:	9304      	str	r3, [sp, #16]
   1d8f6:	6963      	ldr	r3, [r4, #20]
   1d8f8:	9303      	str	r3, [sp, #12]
   1d8fa:	6923      	ldr	r3, [r4, #16]
   1d8fc:	9302      	str	r3, [sp, #8]
   1d8fe:	68e3      	ldr	r3, [r4, #12]
   1d900:	9301      	str	r3, [sp, #4]
   1d902:	68a3      	ldr	r3, [r4, #8]
   1d904:	9300      	str	r3, [sp, #0]
   1d906:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d90a:	4631      	mov	r1, r6
   1d90c:	4628      	mov	r0, r5
   1d90e:	f7f6 f8ab 	bl	13a68 <print_formatted>
		break;
   1d912:	e76f      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d914:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d916:	9308      	str	r3, [sp, #32]
   1d918:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d91a:	9307      	str	r3, [sp, #28]
   1d91c:	6a23      	ldr	r3, [r4, #32]
   1d91e:	9306      	str	r3, [sp, #24]
   1d920:	69e3      	ldr	r3, [r4, #28]
   1d922:	9305      	str	r3, [sp, #20]
   1d924:	69a3      	ldr	r3, [r4, #24]
   1d926:	9304      	str	r3, [sp, #16]
   1d928:	6963      	ldr	r3, [r4, #20]
   1d92a:	9303      	str	r3, [sp, #12]
   1d92c:	6923      	ldr	r3, [r4, #16]
   1d92e:	9302      	str	r3, [sp, #8]
   1d930:	68e3      	ldr	r3, [r4, #12]
   1d932:	9301      	str	r3, [sp, #4]
   1d934:	68a3      	ldr	r3, [r4, #8]
   1d936:	9300      	str	r3, [sp, #0]
   1d938:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d93c:	4631      	mov	r1, r6
   1d93e:	4628      	mov	r0, r5
   1d940:	f7f6 f892 	bl	13a68 <print_formatted>
		break;
   1d944:	e756      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d948:	9309      	str	r3, [sp, #36]	; 0x24
   1d94a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d94c:	9308      	str	r3, [sp, #32]
   1d94e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d950:	9307      	str	r3, [sp, #28]
   1d952:	6a23      	ldr	r3, [r4, #32]
   1d954:	9306      	str	r3, [sp, #24]
   1d956:	69e3      	ldr	r3, [r4, #28]
   1d958:	9305      	str	r3, [sp, #20]
   1d95a:	69a3      	ldr	r3, [r4, #24]
   1d95c:	9304      	str	r3, [sp, #16]
   1d95e:	6963      	ldr	r3, [r4, #20]
   1d960:	9303      	str	r3, [sp, #12]
   1d962:	6923      	ldr	r3, [r4, #16]
   1d964:	9302      	str	r3, [sp, #8]
   1d966:	68e3      	ldr	r3, [r4, #12]
   1d968:	9301      	str	r3, [sp, #4]
   1d96a:	68a3      	ldr	r3, [r4, #8]
   1d96c:	9300      	str	r3, [sp, #0]
   1d96e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d972:	4631      	mov	r1, r6
   1d974:	4628      	mov	r0, r5
   1d976:	f7f6 f877 	bl	13a68 <print_formatted>
		break;
   1d97a:	e73b      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d97c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d97e:	930a      	str	r3, [sp, #40]	; 0x28
   1d980:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d982:	9309      	str	r3, [sp, #36]	; 0x24
   1d984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d986:	9308      	str	r3, [sp, #32]
   1d988:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d98a:	9307      	str	r3, [sp, #28]
   1d98c:	6a23      	ldr	r3, [r4, #32]
   1d98e:	9306      	str	r3, [sp, #24]
   1d990:	69e3      	ldr	r3, [r4, #28]
   1d992:	9305      	str	r3, [sp, #20]
   1d994:	69a3      	ldr	r3, [r4, #24]
   1d996:	9304      	str	r3, [sp, #16]
   1d998:	6963      	ldr	r3, [r4, #20]
   1d99a:	9303      	str	r3, [sp, #12]
   1d99c:	6923      	ldr	r3, [r4, #16]
   1d99e:	9302      	str	r3, [sp, #8]
   1d9a0:	68e3      	ldr	r3, [r4, #12]
   1d9a2:	9301      	str	r3, [sp, #4]
   1d9a4:	68a3      	ldr	r3, [r4, #8]
   1d9a6:	9300      	str	r3, [sp, #0]
   1d9a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d9ac:	4631      	mov	r1, r6
   1d9ae:	4628      	mov	r0, r5
   1d9b0:	f7f6 f85a 	bl	13a68 <print_formatted>
		break;
   1d9b4:	e71e      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d9b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d9b8:	930b      	str	r3, [sp, #44]	; 0x2c
   1d9ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d9bc:	930a      	str	r3, [sp, #40]	; 0x28
   1d9be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d9c0:	9309      	str	r3, [sp, #36]	; 0x24
   1d9c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d9c4:	9308      	str	r3, [sp, #32]
   1d9c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d9c8:	9307      	str	r3, [sp, #28]
   1d9ca:	6a23      	ldr	r3, [r4, #32]
   1d9cc:	9306      	str	r3, [sp, #24]
   1d9ce:	69e3      	ldr	r3, [r4, #28]
   1d9d0:	9305      	str	r3, [sp, #20]
   1d9d2:	69a3      	ldr	r3, [r4, #24]
   1d9d4:	9304      	str	r3, [sp, #16]
   1d9d6:	6963      	ldr	r3, [r4, #20]
   1d9d8:	9303      	str	r3, [sp, #12]
   1d9da:	6923      	ldr	r3, [r4, #16]
   1d9dc:	9302      	str	r3, [sp, #8]
   1d9de:	68e3      	ldr	r3, [r4, #12]
   1d9e0:	9301      	str	r3, [sp, #4]
   1d9e2:	68a3      	ldr	r3, [r4, #8]
   1d9e4:	9300      	str	r3, [sp, #0]
   1d9e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d9ea:	4631      	mov	r1, r6
   1d9ec:	4628      	mov	r0, r5
   1d9ee:	f7f6 f83b 	bl	13a68 <print_formatted>
		break;
   1d9f2:	e6ff      	b.n	1d7f4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d9f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d9f6:	930c      	str	r3, [sp, #48]	; 0x30
   1d9f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d9fa:	930b      	str	r3, [sp, #44]	; 0x2c
   1d9fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d9fe:	930a      	str	r3, [sp, #40]	; 0x28
   1da00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1da02:	9309      	str	r3, [sp, #36]	; 0x24
   1da04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1da06:	9308      	str	r3, [sp, #32]
   1da08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1da0a:	9307      	str	r3, [sp, #28]
   1da0c:	6a23      	ldr	r3, [r4, #32]
   1da0e:	9306      	str	r3, [sp, #24]
   1da10:	69e3      	ldr	r3, [r4, #28]
   1da12:	9305      	str	r3, [sp, #20]
   1da14:	69a3      	ldr	r3, [r4, #24]
   1da16:	9304      	str	r3, [sp, #16]
   1da18:	6963      	ldr	r3, [r4, #20]
   1da1a:	9303      	str	r3, [sp, #12]
   1da1c:	6923      	ldr	r3, [r4, #16]
   1da1e:	9302      	str	r3, [sp, #8]
   1da20:	68e3      	ldr	r3, [r4, #12]
   1da22:	9301      	str	r3, [sp, #4]
   1da24:	68a3      	ldr	r3, [r4, #8]
   1da26:	9300      	str	r3, [sp, #0]
   1da28:	e9d4 2300 	ldrd	r2, r3, [r4]
   1da2c:	4631      	mov	r1, r6
   1da2e:	4628      	mov	r0, r5
   1da30:	f7f6 f81a 	bl	13a68 <print_formatted>
}
   1da34:	e6de      	b.n	1d7f4 <std_print+0x78>

0001da36 <log_output_flush>:
		     log_output->control_block->offset,
   1da36:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   1da38:	6881      	ldr	r1, [r0, #8]
{
   1da3a:	b510      	push	{r4, lr}
   1da3c:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1da3e:	e9d2 2300 	ldrd	r2, r3, [r2]
   1da42:	6800      	ldr	r0, [r0, #0]
   1da44:	f7ff fe8d 	bl	1d762 <buffer_write>
	log_output->control_block->offset = 0;
   1da48:	6863      	ldr	r3, [r4, #4]
   1da4a:	2200      	movs	r2, #0
   1da4c:	601a      	str	r2, [r3, #0]
}
   1da4e:	bd10      	pop	{r4, pc}

0001da50 <out_func>:
{
   1da50:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1da52:	684b      	ldr	r3, [r1, #4]
   1da54:	681a      	ldr	r2, [r3, #0]
   1da56:	68cb      	ldr	r3, [r1, #12]
   1da58:	429a      	cmp	r2, r3
{
   1da5a:	4605      	mov	r5, r0
   1da5c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1da5e:	d102      	bne.n	1da66 <out_func+0x16>
		log_output_flush(out_ctx);
   1da60:	4608      	mov	r0, r1
   1da62:	f7ff ffe8 	bl	1da36 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1da66:	6863      	ldr	r3, [r4, #4]
   1da68:	f3bf 8f5b 	dmb	ish
   1da6c:	e853 2f00 	ldrex	r2, [r3]
   1da70:	1c51      	adds	r1, r2, #1
   1da72:	e843 1000 	strex	r0, r1, [r3]
   1da76:	2800      	cmp	r0, #0
   1da78:	d1f8      	bne.n	1da6c <out_func+0x1c>
   1da7a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1da7e:	68a3      	ldr	r3, [r4, #8]
   1da80:	549d      	strb	r5, [r3, r2]
}
   1da82:	2000      	movs	r0, #0
   1da84:	bd38      	pop	{r3, r4, r5, pc}

0001da86 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1da86:	68c2      	ldr	r2, [r0, #12]
   1da88:	b2cb      	uxtb	r3, r1
   1da8a:	210c      	movs	r1, #12
   1da8c:	fb03 2101 	mla	r1, r3, r1, r2
   1da90:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1da92:	f000 0007 	and.w	r0, r0, #7
   1da96:	4770      	bx	lr

0001da98 <set_off_state>:
	__asm__ volatile(
   1da98:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da9c:	f3ef 8211 	mrs	r2, BASEPRI
   1daa0:	f383 8811 	msr	BASEPRI, r3
   1daa4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1daa8:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1daaa:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1daae:	d001      	beq.n	1dab4 <set_off_state+0x1c>
   1dab0:	428b      	cmp	r3, r1
   1dab2:	d107      	bne.n	1dac4 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1dab4:	2301      	movs	r3, #1
   1dab6:	6003      	str	r3, [r0, #0]
	int err = 0;
   1dab8:	2000      	movs	r0, #0
	__asm__ volatile(
   1daba:	f382 8811 	msr	BASEPRI, r2
   1dabe:	f3bf 8f6f 	isb	sy
}
   1dac2:	4770      	bx	lr
		err = -EPERM;
   1dac4:	f04f 30ff 	mov.w	r0, #4294967295
   1dac8:	e7f7      	b.n	1daba <set_off_state+0x22>

0001daca <set_starting_state>:
{
   1daca:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dacc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dad0:	f3ef 8211 	mrs	r2, BASEPRI
   1dad4:	f383 8811 	msr	BASEPRI, r3
   1dad8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1dadc:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1dade:	f003 0407 	and.w	r4, r3, #7
   1dae2:	2c01      	cmp	r4, #1
   1dae4:	d106      	bne.n	1daf4 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1dae6:	6001      	str	r1, [r0, #0]
	int err = 0;
   1dae8:	2000      	movs	r0, #0
	__asm__ volatile(
   1daea:	f382 8811 	msr	BASEPRI, r2
   1daee:	f3bf 8f6f 	isb	sy
}
   1daf2:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1daf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1daf8:	428b      	cmp	r3, r1
		err = -EALREADY;
   1dafa:	bf14      	ite	ne
   1dafc:	f04f 30ff 	movne.w	r0, #4294967295
   1db00:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   1db04:	e7f1      	b.n	1daea <set_starting_state+0x20>

0001db06 <set_on_state>:
	__asm__ volatile(
   1db06:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db0a:	f3ef 8211 	mrs	r2, BASEPRI
   1db0e:	f383 8811 	msr	BASEPRI, r3
   1db12:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1db16:	6803      	ldr	r3, [r0, #0]
   1db18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1db1c:	f043 0302 	orr.w	r3, r3, #2
   1db20:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1db22:	f382 8811 	msr	BASEPRI, r2
   1db26:	f3bf 8f6f 	isb	sy
}
   1db2a:	4770      	bx	lr

0001db2c <onoff_started_callback>:
	return &data->mgr[type];
   1db2c:	68c0      	ldr	r0, [r0, #12]
{
   1db2e:	b410      	push	{r4}
	return &data->mgr[type];
   1db30:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1db32:	241c      	movs	r4, #28
   1db34:	fb03 0004 	mla	r0, r3, r4, r0
   1db38:	2100      	movs	r1, #0
}
   1db3a:	bc10      	pop	{r4}
	notify(mgr, 0);
   1db3c:	4710      	bx	r2

0001db3e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1db3e:	2000      	movs	r0, #0
   1db40:	f7fd bb74 	b.w	1b22c <nrfx_clock_start>

0001db44 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1db44:	2000      	movs	r0, #0
   1db46:	f001 bded 	b.w	1f724 <nrfx_clock_stop>

0001db4a <blocking_start_callback>:
{
   1db4a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1db4c:	f7fe bb92 	b.w	1c274 <z_impl_k_sem_give>

0001db50 <api_stop>:
{
   1db50:	b538      	push	{r3, r4, r5, lr}
   1db52:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1db54:	240c      	movs	r4, #12
   1db56:	434c      	muls	r4, r1
{
   1db58:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1db5a:	68c0      	ldr	r0, [r0, #12]
   1db5c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1db60:	2180      	movs	r1, #128	; 0x80
   1db62:	4418      	add	r0, r3
   1db64:	f7ff ff98 	bl	1da98 <set_off_state>
	if (err < 0) {
   1db68:	2800      	cmp	r0, #0
   1db6a:	db04      	blt.n	1db76 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1db6c:	6869      	ldr	r1, [r5, #4]
   1db6e:	440c      	add	r4, r1
   1db70:	6863      	ldr	r3, [r4, #4]
   1db72:	4798      	blx	r3
	return 0;
   1db74:	2000      	movs	r0, #0
}
   1db76:	bd38      	pop	{r3, r4, r5, pc}

0001db78 <api_start>:
{
   1db78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db7c:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1db7e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1db80:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   1db82:	434c      	muls	r4, r1
{
   1db84:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1db86:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1db8a:	2180      	movs	r1, #128	; 0x80
   1db8c:	4428      	add	r0, r5
{
   1db8e:	4690      	mov	r8, r2
   1db90:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1db92:	f7ff ff9a 	bl	1daca <set_starting_state>
	if (err < 0) {
   1db96:	2800      	cmp	r0, #0
   1db98:	db06      	blt.n	1dba8 <api_start+0x30>
	subdata->cb = cb;
   1db9a:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1db9c:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1dba0:	6873      	ldr	r3, [r6, #4]
   1dba2:	591b      	ldr	r3, [r3, r4]
   1dba4:	4798      	blx	r3
	return 0;
   1dba6:	2000      	movs	r0, #0
}
   1dba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dbac <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1dbac:	4770      	bx	lr

0001dbae <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1dbae:	4770      	bx	lr

0001dbb0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1dbb0:	f7f6 bd04 	b.w	145bc <_DoInit>

0001dbb4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1dbb4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1dbb6:	f7ff fffb 	bl	1dbb0 <SEGGER_RTT_Init>

	return 0;
}
   1dbba:	2000      	movs	r0, #0
   1dbbc:	bd08      	pop	{r3, pc}

0001dbbe <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1dbbe:	b538      	push	{r3, r4, r5, lr}
   1dbc0:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1dbc2:	42ab      	cmp	r3, r5
{
   1dbc4:	4611      	mov	r1, r2
   1dbc6:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1dbc8:	d804      	bhi.n	1dbd4 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1dbca:	461a      	mov	r2, r3
   1dbcc:	f000 fa24 	bl	1e018 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1dbd0:	4620      	mov	r0, r4
   1dbd2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1dbd4:	2400      	movs	r4, #0
   1dbd6:	e7fb      	b.n	1dbd0 <_copy+0x12>

0001dbd8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1dbd8:	f000 ba49 	b.w	1e06e <memset>

0001dbdc <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1dbdc:	09c3      	lsrs	r3, r0, #7
   1dbde:	005a      	lsls	r2, r3, #1
   1dbe0:	4413      	add	r3, r2
   1dbe2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1dbe6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1dbea:	b2c0      	uxtb	r0, r0
   1dbec:	4770      	bx	lr

0001dbee <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1dbee:	78cb      	ldrb	r3, [r1, #3]
   1dbf0:	7802      	ldrb	r2, [r0, #0]
   1dbf2:	4053      	eors	r3, r2
   1dbf4:	7003      	strb	r3, [r0, #0]
   1dbf6:	884b      	ldrh	r3, [r1, #2]
   1dbf8:	7842      	ldrb	r2, [r0, #1]
   1dbfa:	4053      	eors	r3, r2
   1dbfc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1dbfe:	680a      	ldr	r2, [r1, #0]
   1dc00:	7883      	ldrb	r3, [r0, #2]
   1dc02:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dc06:	7083      	strb	r3, [r0, #2]
   1dc08:	680a      	ldr	r2, [r1, #0]
   1dc0a:	78c3      	ldrb	r3, [r0, #3]
   1dc0c:	4053      	eors	r3, r2
   1dc0e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1dc10:	79cb      	ldrb	r3, [r1, #7]
   1dc12:	7902      	ldrb	r2, [r0, #4]
   1dc14:	4053      	eors	r3, r2
   1dc16:	7103      	strb	r3, [r0, #4]
   1dc18:	88cb      	ldrh	r3, [r1, #6]
   1dc1a:	7942      	ldrb	r2, [r0, #5]
   1dc1c:	4053      	eors	r3, r2
   1dc1e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1dc20:	684a      	ldr	r2, [r1, #4]
   1dc22:	7983      	ldrb	r3, [r0, #6]
   1dc24:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dc28:	7183      	strb	r3, [r0, #6]
   1dc2a:	684a      	ldr	r2, [r1, #4]
   1dc2c:	79c3      	ldrb	r3, [r0, #7]
   1dc2e:	4053      	eors	r3, r2
   1dc30:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1dc32:	7acb      	ldrb	r3, [r1, #11]
   1dc34:	7a02      	ldrb	r2, [r0, #8]
   1dc36:	4053      	eors	r3, r2
   1dc38:	7203      	strb	r3, [r0, #8]
   1dc3a:	7a42      	ldrb	r2, [r0, #9]
   1dc3c:	894b      	ldrh	r3, [r1, #10]
   1dc3e:	4053      	eors	r3, r2
   1dc40:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1dc42:	688a      	ldr	r2, [r1, #8]
   1dc44:	7a83      	ldrb	r3, [r0, #10]
   1dc46:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dc4a:	7283      	strb	r3, [r0, #10]
   1dc4c:	688a      	ldr	r2, [r1, #8]
   1dc4e:	7ac3      	ldrb	r3, [r0, #11]
   1dc50:	4053      	eors	r3, r2
   1dc52:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1dc54:	7bcb      	ldrb	r3, [r1, #15]
   1dc56:	7b02      	ldrb	r2, [r0, #12]
   1dc58:	4053      	eors	r3, r2
   1dc5a:	7303      	strb	r3, [r0, #12]
   1dc5c:	89cb      	ldrh	r3, [r1, #14]
   1dc5e:	7b42      	ldrb	r2, [r0, #13]
   1dc60:	4053      	eors	r3, r2
   1dc62:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1dc64:	68ca      	ldr	r2, [r1, #12]
   1dc66:	7b83      	ldrb	r3, [r0, #14]
   1dc68:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dc6c:	7383      	strb	r3, [r0, #14]
   1dc6e:	68ca      	ldr	r2, [r1, #12]
   1dc70:	7bc3      	ldrb	r3, [r0, #15]
   1dc72:	4053      	eors	r3, r2
   1dc74:	73c3      	strb	r3, [r0, #15]
}
   1dc76:	4770      	bx	lr

0001dc78 <shift_rows>:
{
   1dc78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1dc7a:	7802      	ldrb	r2, [r0, #0]
   1dc7c:	f88d 2000 	strb.w	r2, [sp]
   1dc80:	7942      	ldrb	r2, [r0, #5]
   1dc82:	f88d 2001 	strb.w	r2, [sp, #1]
   1dc86:	7a82      	ldrb	r2, [r0, #10]
   1dc88:	f88d 2002 	strb.w	r2, [sp, #2]
   1dc8c:	7bc2      	ldrb	r2, [r0, #15]
   1dc8e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1dc92:	7902      	ldrb	r2, [r0, #4]
   1dc94:	f88d 2004 	strb.w	r2, [sp, #4]
   1dc98:	7a42      	ldrb	r2, [r0, #9]
   1dc9a:	f88d 2005 	strb.w	r2, [sp, #5]
   1dc9e:	7b82      	ldrb	r2, [r0, #14]
   1dca0:	f88d 2006 	strb.w	r2, [sp, #6]
   1dca4:	78c2      	ldrb	r2, [r0, #3]
   1dca6:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1dcaa:	7a02      	ldrb	r2, [r0, #8]
   1dcac:	f88d 2008 	strb.w	r2, [sp, #8]
   1dcb0:	7b42      	ldrb	r2, [r0, #13]
   1dcb2:	f88d 2009 	strb.w	r2, [sp, #9]
   1dcb6:	7882      	ldrb	r2, [r0, #2]
   1dcb8:	f88d 200a 	strb.w	r2, [sp, #10]
   1dcbc:	79c2      	ldrb	r2, [r0, #7]
   1dcbe:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1dcc2:	7b02      	ldrb	r2, [r0, #12]
   1dcc4:	f88d 200c 	strb.w	r2, [sp, #12]
   1dcc8:	7842      	ldrb	r2, [r0, #1]
   1dcca:	7ac3      	ldrb	r3, [r0, #11]
   1dccc:	f88d 200d 	strb.w	r2, [sp, #13]
   1dcd0:	7982      	ldrb	r2, [r0, #6]
   1dcd2:	f88d 200e 	strb.w	r2, [sp, #14]
   1dcd6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1dcda:	2310      	movs	r3, #16
   1dcdc:	466a      	mov	r2, sp
   1dcde:	4619      	mov	r1, r3
   1dce0:	f7ff ff6d 	bl	1dbbe <_copy>
}
   1dce4:	b005      	add	sp, #20
   1dce6:	f85d fb04 	ldr.w	pc, [sp], #4

0001dcea <mult_row_column>:
{
   1dcea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcec:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1dcee:	7808      	ldrb	r0, [r1, #0]
{
   1dcf0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1dcf2:	f7ff ff73 	bl	1dbdc <_double_byte>
   1dcf6:	4605      	mov	r5, r0
   1dcf8:	7860      	ldrb	r0, [r4, #1]
   1dcfa:	f7ff ff6f 	bl	1dbdc <_double_byte>
   1dcfe:	78a2      	ldrb	r2, [r4, #2]
   1dd00:	7863      	ldrb	r3, [r4, #1]
   1dd02:	4053      	eors	r3, r2
   1dd04:	78e2      	ldrb	r2, [r4, #3]
   1dd06:	4053      	eors	r3, r2
   1dd08:	405d      	eors	r5, r3
   1dd0a:	4045      	eors	r5, r0
   1dd0c:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1dd0e:	7860      	ldrb	r0, [r4, #1]
   1dd10:	7827      	ldrb	r7, [r4, #0]
   1dd12:	f7ff ff63 	bl	1dbdc <_double_byte>
   1dd16:	4605      	mov	r5, r0
   1dd18:	78a0      	ldrb	r0, [r4, #2]
   1dd1a:	f7ff ff5f 	bl	1dbdc <_double_byte>
   1dd1e:	78a3      	ldrb	r3, [r4, #2]
   1dd20:	405f      	eors	r7, r3
   1dd22:	78e3      	ldrb	r3, [r4, #3]
   1dd24:	405f      	eors	r7, r3
   1dd26:	407d      	eors	r5, r7
   1dd28:	4045      	eors	r5, r0
   1dd2a:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1dd2c:	78a0      	ldrb	r0, [r4, #2]
   1dd2e:	7865      	ldrb	r5, [r4, #1]
   1dd30:	7827      	ldrb	r7, [r4, #0]
   1dd32:	f7ff ff53 	bl	1dbdc <_double_byte>
   1dd36:	406f      	eors	r7, r5
   1dd38:	4605      	mov	r5, r0
   1dd3a:	78e0      	ldrb	r0, [r4, #3]
   1dd3c:	f7ff ff4e 	bl	1dbdc <_double_byte>
   1dd40:	78e3      	ldrb	r3, [r4, #3]
   1dd42:	405f      	eors	r7, r3
   1dd44:	407d      	eors	r5, r7
   1dd46:	4045      	eors	r5, r0
   1dd48:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1dd4a:	7820      	ldrb	r0, [r4, #0]
   1dd4c:	f7ff ff46 	bl	1dbdc <_double_byte>
   1dd50:	7863      	ldrb	r3, [r4, #1]
   1dd52:	7825      	ldrb	r5, [r4, #0]
   1dd54:	405d      	eors	r5, r3
   1dd56:	78a3      	ldrb	r3, [r4, #2]
   1dd58:	405d      	eors	r5, r3
   1dd5a:	4045      	eors	r5, r0
   1dd5c:	78e0      	ldrb	r0, [r4, #3]
   1dd5e:	f7ff ff3d 	bl	1dbdc <_double_byte>
   1dd62:	b2ed      	uxtb	r5, r5
   1dd64:	4045      	eors	r5, r0
   1dd66:	70f5      	strb	r5, [r6, #3]
}
   1dd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dd6a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1dd6a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dd6c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1dd6e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1dd70:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1dd74:	2b00      	cmp	r3, #0
   1dd76:	bfb4      	ite	lt
   1dd78:	2387      	movlt	r3, #135	; 0x87
   1dd7a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1dd7c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1dd80:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1dd84:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1dd86:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1dd8a:	d002      	beq.n	1dd92 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1dd8c:	7813      	ldrb	r3, [r2, #0]
   1dd8e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1dd90:	e7f4      	b.n	1dd7c <gf_double+0x12>
	}
}
   1dd92:	bd10      	pop	{r4, pc}

0001dd94 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1dd94:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1dd96:	b120      	cbz	r0, 1dda2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1dd98:	2258      	movs	r2, #88	; 0x58
   1dd9a:	2100      	movs	r1, #0
   1dd9c:	f7ff ff1c 	bl	1dbd8 <_set>
   1dda0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1dda2:	bd08      	pop	{r3, pc}

0001dda4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1dda4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1dda6:	4604      	mov	r4, r0
   1dda8:	b188      	cbz	r0, 1ddce <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ddaa:	2210      	movs	r2, #16
   1ddac:	2100      	movs	r1, #0
   1ddae:	f7ff ff13 	bl	1dbd8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1ddb2:	2210      	movs	r2, #16
   1ddb4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ddb8:	2100      	movs	r1, #0
   1ddba:	f7ff ff0d 	bl	1dbd8 <_set>
	s->leftover_offset = 0;
   1ddbe:	2300      	movs	r3, #0
   1ddc0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1ddc2:	2200      	movs	r2, #0
   1ddc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ddc8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1ddcc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1ddce:	bd10      	pop	{r4, pc}

0001ddd0 <tc_cmac_setup>:
{
   1ddd0:	b570      	push	{r4, r5, r6, lr}
   1ddd2:	460d      	mov	r5, r1
   1ddd4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1ddd6:	4604      	mov	r4, r0
   1ddd8:	b310      	cbz	r0, 1de20 <tc_cmac_setup+0x50>
   1ddda:	b311      	cbz	r1, 1de22 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1dddc:	2258      	movs	r2, #88	; 0x58
   1ddde:	2100      	movs	r1, #0
   1dde0:	f7ff fefa 	bl	1dbd8 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1dde4:	4629      	mov	r1, r5
	s->sched = sched;
   1dde6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1dde8:	4630      	mov	r0, r6
   1ddea:	f7f6 fc6d 	bl	146c8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ddee:	2210      	movs	r2, #16
   1ddf0:	2100      	movs	r1, #0
   1ddf2:	4620      	mov	r0, r4
   1ddf4:	f7ff fef0 	bl	1dbd8 <_set>
	gf_double (s->K1, s->iv);
   1ddf8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ddfc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ddfe:	4621      	mov	r1, r4
   1de00:	4620      	mov	r0, r4
   1de02:	f7f6 fcb3 	bl	1476c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1de06:	4621      	mov	r1, r4
   1de08:	4628      	mov	r0, r5
   1de0a:	f7ff ffae 	bl	1dd6a <gf_double>
	gf_double (s->K2, s->K1);
   1de0e:	4629      	mov	r1, r5
   1de10:	f104 0020 	add.w	r0, r4, #32
   1de14:	f7ff ffa9 	bl	1dd6a <gf_double>
	tc_cmac_init(s);
   1de18:	4620      	mov	r0, r4
   1de1a:	f7ff ffc3 	bl	1dda4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1de1e:	2001      	movs	r0, #1
}
   1de20:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1de22:	4608      	mov	r0, r1
   1de24:	e7fc      	b.n	1de20 <tc_cmac_setup+0x50>

0001de26 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1de26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de2a:	460d      	mov	r5, r1
   1de2c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1de2e:	4604      	mov	r4, r0
   1de30:	2800      	cmp	r0, #0
   1de32:	d062      	beq.n	1defa <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1de34:	b912      	cbnz	r2, 1de3c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1de36:	2001      	movs	r0, #1
}
   1de38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1de3c:	2900      	cmp	r1, #0
   1de3e:	d05c      	beq.n	1defa <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1de40:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1de44:	ea50 0301 	orrs.w	r3, r0, r1
   1de48:	d057      	beq.n	1defa <tc_cmac_update+0xd4>
	s->countdown--;
   1de4a:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   1de4e:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1de52:	f141 33ff 	adc.w	r3, r1, #4294967295
   1de56:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1de5a:	f1b8 0f00 	cmp.w	r8, #0
   1de5e:	d02a      	beq.n	1deb6 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1de60:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1de64:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1de68:	42be      	cmp	r6, r7
   1de6a:	4420      	add	r0, r4
   1de6c:	d208      	bcs.n	1de80 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1de6e:	462a      	mov	r2, r5
   1de70:	4633      	mov	r3, r6
   1de72:	4631      	mov	r1, r6
   1de74:	f7ff fea3 	bl	1dbbe <_copy>
			s->leftover_offset += data_length;
   1de78:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1de7a:	4432      	add	r2, r6
   1de7c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1de7e:	e7da      	b.n	1de36 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1de80:	463b      	mov	r3, r7
   1de82:	462a      	mov	r2, r5
   1de84:	4639      	mov	r1, r7
   1de86:	f7ff fe9a 	bl	1dbbe <_copy>
		data_length -= remaining_space;
   1de8a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1de8c:	2300      	movs	r3, #0
   1de8e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1de90:	4446      	add	r6, r8
		data += remaining_space;
   1de92:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1de94:	1e63      	subs	r3, r4, #1
   1de96:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1de9a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1de9e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dea2:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1dea4:	ea82 0200 	eor.w	r2, r2, r0
   1dea8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1deaa:	d1f6      	bne.n	1de9a <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1deac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1deae:	4621      	mov	r1, r4
   1deb0:	4620      	mov	r0, r4
   1deb2:	f7f6 fc5b 	bl	1476c <tc_aes_encrypt>
   1deb6:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1deba:	2e10      	cmp	r6, #16
   1debc:	d80a      	bhi.n	1ded4 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1debe:	2e00      	cmp	r6, #0
   1dec0:	d0b9      	beq.n	1de36 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1dec2:	4633      	mov	r3, r6
   1dec4:	462a      	mov	r2, r5
   1dec6:	4631      	mov	r1, r6
   1dec8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1decc:	f7ff fe77 	bl	1dbbe <_copy>
		s->leftover_offset = data_length;
   1ded0:	6466      	str	r6, [r4, #68]	; 0x44
   1ded2:	e7b0      	b.n	1de36 <tc_cmac_update+0x10>
   1ded4:	1e63      	subs	r3, r4, #1
   1ded6:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1ded8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dedc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dee0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1dee2:	ea82 0200 	eor.w	r2, r2, r0
   1dee6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dee8:	d1f6      	bne.n	1ded8 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1deea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1deec:	4621      	mov	r1, r4
   1deee:	4620      	mov	r0, r4
   1def0:	f7f6 fc3c 	bl	1476c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1def4:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1def6:	3e10      	subs	r6, #16
   1def8:	e7df      	b.n	1deba <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1defa:	2000      	movs	r0, #0
   1defc:	e79c      	b.n	1de38 <tc_cmac_update+0x12>

0001defe <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1defe:	b570      	push	{r4, r5, r6, lr}
   1df00:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1df02:	4605      	mov	r5, r0
   1df04:	b1e8      	cbz	r0, 1df42 <tc_cmac_final+0x44>
   1df06:	b369      	cbz	r1, 1df64 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1df08:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1df0a:	2a10      	cmp	r2, #16
   1df0c:	d11a      	bne.n	1df44 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1df0e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df10:	1e63      	subs	r3, r4, #1
   1df12:	3901      	subs	r1, #1
   1df14:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1df18:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1df1c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1df20:	4072      	eors	r2, r6
   1df22:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df26:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1df28:	ea82 0206 	eor.w	r2, r2, r6
   1df2c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1df2e:	d1f3      	bne.n	1df18 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1df30:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1df32:	4621      	mov	r1, r4
   1df34:	4628      	mov	r0, r5
   1df36:	f7f6 fc19 	bl	1476c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1df3a:	4620      	mov	r0, r4
   1df3c:	f7ff ff2a 	bl	1dd94 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1df40:	2001      	movs	r0, #1
}
   1df42:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1df44:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1df48:	2100      	movs	r1, #0
   1df4a:	f1c2 0210 	rsb	r2, r2, #16
   1df4e:	4420      	add	r0, r4
   1df50:	f7ff fe42 	bl	1dbd8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1df54:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1df56:	4423      	add	r3, r4
   1df58:	2280      	movs	r2, #128	; 0x80
   1df5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1df5e:	f104 0120 	add.w	r1, r4, #32
   1df62:	e7d5      	b.n	1df10 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1df64:	4608      	mov	r0, r1
   1df66:	e7ec      	b.n	1df42 <tc_cmac_final+0x44>

0001df68 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1df68:	2100      	movs	r1, #0
   1df6a:	2001      	movs	r0, #1
   1df6c:	f7f6 bd64 	b.w	14a38 <z_arm_fatal_error>

0001df70 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1df70:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1df72:	6800      	ldr	r0, [r0, #0]
   1df74:	f7f6 bd60 	b.w	14a38 <z_arm_fatal_error>

0001df78 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1df78:	b508      	push	{r3, lr}
	handler();
   1df7a:	f7f6 fd95 	bl	14aa8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1df7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1df82:	f7f6 bffb 	b.w	14f7c <z_arm_exc_exit>

0001df86 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1df86:	3901      	subs	r1, #1
   1df88:	4603      	mov	r3, r0
   1df8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1df8e:	b90a      	cbnz	r2, 1df94 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1df90:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1df92:	4770      	bx	lr
		*d = *s;
   1df94:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1df98:	e7f7      	b.n	1df8a <strcpy+0x4>

0001df9a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1df9a:	b570      	push	{r4, r5, r6, lr}
   1df9c:	3901      	subs	r1, #1
   1df9e:	4605      	mov	r5, r0
   1dfa0:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1dfa2:	b142      	cbz	r2, 1dfb6 <strncpy+0x1c>
   1dfa4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1dfa8:	1e56      	subs	r6, r2, #1
   1dfaa:	b92b      	cbnz	r3, 1dfb8 <strncpy+0x1e>
   1dfac:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1dfae:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1dfb2:	42a2      	cmp	r2, r4
   1dfb4:	d1fb      	bne.n	1dfae <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1dfb6:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1dfb8:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1dfbc:	4632      	mov	r2, r6
   1dfbe:	e7ef      	b.n	1dfa0 <strncpy+0x6>

0001dfc0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1dfc0:	4603      	mov	r3, r0
	size_t n = 0;
   1dfc2:	2000      	movs	r0, #0

	while (*s != '\0') {
   1dfc4:	5c1a      	ldrb	r2, [r3, r0]
   1dfc6:	b902      	cbnz	r2, 1dfca <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1dfc8:	4770      	bx	lr
		n++;
   1dfca:	3001      	adds	r0, #1
   1dfcc:	e7fa      	b.n	1dfc4 <strlen+0x4>

0001dfce <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1dfce:	4603      	mov	r3, r0
	size_t n = 0;
   1dfd0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1dfd2:	5c1a      	ldrb	r2, [r3, r0]
   1dfd4:	b10a      	cbz	r2, 1dfda <strnlen+0xc>
   1dfd6:	4288      	cmp	r0, r1
   1dfd8:	d100      	bne.n	1dfdc <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1dfda:	4770      	bx	lr
		n++;
   1dfdc:	3001      	adds	r0, #1
   1dfde:	e7f8      	b.n	1dfd2 <strnlen+0x4>

0001dfe0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1dfe0:	1e43      	subs	r3, r0, #1
   1dfe2:	3901      	subs	r1, #1
   1dfe4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1dfe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1dfec:	4282      	cmp	r2, r0
   1dfee:	d101      	bne.n	1dff4 <strcmp+0x14>
   1dff0:	2a00      	cmp	r2, #0
   1dff2:	d1f7      	bne.n	1dfe4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1dff4:	1a10      	subs	r0, r2, r0
   1dff6:	4770      	bx	lr

0001dff8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1dff8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1dffa:	b15a      	cbz	r2, 1e014 <memcmp+0x1c>
   1dffc:	3901      	subs	r1, #1
   1dffe:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1e000:	f810 2b01 	ldrb.w	r2, [r0], #1
   1e004:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1e008:	42a0      	cmp	r0, r4
   1e00a:	d001      	beq.n	1e010 <memcmp+0x18>
   1e00c:	429a      	cmp	r2, r3
   1e00e:	d0f7      	beq.n	1e000 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1e010:	1ad0      	subs	r0, r2, r3
}
   1e012:	bd10      	pop	{r4, pc}
		return 0;
   1e014:	4610      	mov	r0, r2
   1e016:	e7fc      	b.n	1e012 <memcmp+0x1a>

0001e018 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1e018:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1e01a:	ea81 0400 	eor.w	r4, r1, r0
   1e01e:	07a5      	lsls	r5, r4, #30
   1e020:	4603      	mov	r3, r0
   1e022:	d00b      	beq.n	1e03c <memcpy+0x24>
   1e024:	3b01      	subs	r3, #1
   1e026:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1e028:	4291      	cmp	r1, r2
   1e02a:	d11b      	bne.n	1e064 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1e02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1e02e:	2a00      	cmp	r2, #0
   1e030:	d0fc      	beq.n	1e02c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1e032:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e036:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1e03a:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1e03c:	079c      	lsls	r4, r3, #30
   1e03e:	d1f6      	bne.n	1e02e <memcpy+0x16>
   1e040:	f022 0403 	bic.w	r4, r2, #3
   1e044:	1f1d      	subs	r5, r3, #4
   1e046:	0896      	lsrs	r6, r2, #2
   1e048:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1e04a:	42b9      	cmp	r1, r7
   1e04c:	d105      	bne.n	1e05a <memcpy+0x42>
   1e04e:	f06f 0503 	mvn.w	r5, #3
   1e052:	fb05 2206 	mla	r2, r5, r6, r2
   1e056:	4423      	add	r3, r4
   1e058:	e7e4      	b.n	1e024 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1e05a:	f851 cb04 	ldr.w	ip, [r1], #4
   1e05e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1e062:	e7f2      	b.n	1e04a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1e064:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e068:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1e06c:	e7dc      	b.n	1e028 <memcpy+0x10>

0001e06e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1e06e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1e070:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1e072:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1e074:	079c      	lsls	r4, r3, #30
   1e076:	d111      	bne.n	1e09c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1e078:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1e07c:	f022 0603 	bic.w	r6, r2, #3
   1e080:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1e084:	441e      	add	r6, r3
   1e086:	0894      	lsrs	r4, r2, #2
   1e088:	42b3      	cmp	r3, r6
   1e08a:	d10d      	bne.n	1e0a8 <memset+0x3a>
   1e08c:	f06f 0503 	mvn.w	r5, #3
   1e090:	fb05 2204 	mla	r2, r5, r4, r2
   1e094:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1e096:	4293      	cmp	r3, r2
   1e098:	d109      	bne.n	1e0ae <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1e09a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1e09c:	2a00      	cmp	r2, #0
   1e09e:	d0fc      	beq.n	1e09a <memset+0x2c>
		*(d_byte++) = c_byte;
   1e0a0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e0a4:	3a01      	subs	r2, #1
   1e0a6:	e7e5      	b.n	1e074 <memset+0x6>
		*(d_word++) = c_word;
   1e0a8:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1e0ac:	e7ec      	b.n	1e088 <memset+0x1a>
		*(d_byte++) = c_byte;
   1e0ae:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e0b2:	e7f0      	b.n	1e096 <memset+0x28>

0001e0b4 <_stdout_hook_default>:
}
   1e0b4:	f04f 30ff 	mov.w	r0, #4294967295
   1e0b8:	4770      	bx	lr

0001e0ba <nordicsemi_nrf52_init>:
	__asm__ volatile(
   1e0ba:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e0be:	f3ef 8311 	mrs	r3, BASEPRI
   1e0c2:	f382 8811 	msr	BASEPRI, r2
   1e0c6:	f3bf 8f6f 	isb	sy
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1e0ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e0ce:	2101      	movs	r1, #1
   1e0d0:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
	__asm__ volatile(
   1e0d4:	f383 8811 	msr	BASEPRI, r3
   1e0d8:	f3bf 8f6f 	isb	sy
}
   1e0dc:	2000      	movs	r0, #0
   1e0de:	4770      	bx	lr

0001e0e0 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1e0e0:	f7fd b8d2 	b.w	1b288 <SystemInit>

0001e0e4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1e0e4:	b510      	push	{r4, lr}
   1e0e6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1e0e8:	7801      	ldrb	r1, [r0, #0]
   1e0ea:	7822      	ldrb	r2, [r4, #0]
   1e0ec:	428a      	cmp	r2, r1
{
   1e0ee:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1e0f0:	d00e      	beq.n	1e110 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1e0f2:	4669      	mov	r1, sp
   1e0f4:	f7f7 f8dc 	bl	152b0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1e0f8:	a905      	add	r1, sp, #20
   1e0fa:	4620      	mov	r0, r4
   1e0fc:	f7f7 f8d8 	bl	152b0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1e100:	2210      	movs	r2, #16
   1e102:	f10d 0115 	add.w	r1, sp, #21
   1e106:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e10a:	f7ff ff75 	bl	1dff8 <memcmp>
   1e10e:	e007      	b.n	1e120 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1e110:	2a01      	cmp	r2, #1
   1e112:	d007      	beq.n	1e124 <bt_uuid_cmp+0x40>
   1e114:	2a02      	cmp	r2, #2
   1e116:	d008      	beq.n	1e12a <bt_uuid_cmp+0x46>
   1e118:	b95a      	cbnz	r2, 1e132 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1e11a:	8840      	ldrh	r0, [r0, #2]
   1e11c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e11e:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1e120:	b00a      	add	sp, #40	; 0x28
   1e122:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e124:	6840      	ldr	r0, [r0, #4]
   1e126:	6863      	ldr	r3, [r4, #4]
   1e128:	e7f9      	b.n	1e11e <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e12a:	2210      	movs	r2, #16
   1e12c:	1c61      	adds	r1, r4, #1
   1e12e:	3001      	adds	r0, #1
   1e130:	e7eb      	b.n	1e10a <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1e132:	f06f 0015 	mvn.w	r0, #21
   1e136:	e7f3      	b.n	1e120 <bt_uuid_cmp+0x3c>

0001e138 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1e138:	2a04      	cmp	r2, #4
{
   1e13a:	b538      	push	{r3, r4, r5, lr}
   1e13c:	460c      	mov	r4, r1
	switch (data_len) {
   1e13e:	d00d      	beq.n	1e15c <bt_uuid_create+0x24>
   1e140:	2a10      	cmp	r2, #16
   1e142:	d019      	beq.n	1e178 <bt_uuid_create+0x40>
   1e144:	2a02      	cmp	r2, #2
   1e146:	f04f 0300 	mov.w	r3, #0
   1e14a:	d11b      	bne.n	1e184 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1e14c:	7003      	strb	r3, [r0, #0]
   1e14e:	784a      	ldrb	r2, [r1, #1]
   1e150:	780b      	ldrb	r3, [r1, #0]
   1e152:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1e156:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1e158:	2001      	movs	r0, #1
}
   1e15a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1e15c:	2301      	movs	r3, #1
   1e15e:	7003      	strb	r3, [r0, #0]
   1e160:	78a2      	ldrb	r2, [r4, #2]
   1e162:	78c9      	ldrb	r1, [r1, #3]
   1e164:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e166:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1e16a:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e16c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1e170:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1e174:	6042      	str	r2, [r0, #4]
		break;
   1e176:	e7ef      	b.n	1e158 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1e178:	2302      	movs	r3, #2
   1e17a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1e17e:	f7ff ff4b 	bl	1e018 <memcpy>
		break;
   1e182:	e7e9      	b.n	1e158 <bt_uuid_create+0x20>
	switch (data_len) {
   1e184:	4618      	mov	r0, r3
   1e186:	e7e8      	b.n	1e15a <bt_uuid_create+0x22>

0001e188 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1e188:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1e18a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1e18c:	2106      	movs	r1, #6
{
   1e18e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1e190:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1e194:	f7fc ff9a 	bl	1b0cc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1e198:	b918      	cbnz	r0, 1e1a2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1e19a:	79a3      	ldrb	r3, [r4, #6]
   1e19c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e1a0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1e1a2:	bd10      	pop	{r4, pc}

0001e1a4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1e1a4:	280f      	cmp	r0, #15
   1e1a6:	d806      	bhi.n	1e1b6 <bt_hci_evt_get_flags+0x12>
   1e1a8:	280d      	cmp	r0, #13
   1e1aa:	d80b      	bhi.n	1e1c4 <bt_hci_evt_get_flags+0x20>
   1e1ac:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1e1ae:	bf14      	ite	ne
   1e1b0:	2002      	movne	r0, #2
   1e1b2:	2003      	moveq	r0, #3
   1e1b4:	4770      	bx	lr
	switch (evt) {
   1e1b6:	2813      	cmp	r0, #19
   1e1b8:	d004      	beq.n	1e1c4 <bt_hci_evt_get_flags+0x20>
   1e1ba:	281a      	cmp	r0, #26
   1e1bc:	bf14      	ite	ne
   1e1be:	2002      	movne	r0, #2
   1e1c0:	2001      	moveq	r0, #1
   1e1c2:	4770      	bx	lr
   1e1c4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1e1c6:	4770      	bx	lr

0001e1c8 <get_adv_channel_map>:
{
   1e1c8:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1e1ca:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1e1ce:	bf0c      	ite	eq
   1e1d0:	2007      	moveq	r0, #7
   1e1d2:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1e1d4:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1e1d6:	bf48      	it	mi
   1e1d8:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1e1dc:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1e1de:	bf48      	it	mi
   1e1e0:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1e1e4:	4770      	bx	lr

0001e1e6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e1e6:	f3bf 8f5b 	dmb	ish
   1e1ea:	6800      	ldr	r0, [r0, #0]
   1e1ec:	f3bf 8f5b 	dmb	ish
}
   1e1f0:	4770      	bx	lr

0001e1f2 <bt_addr_le_copy>:
   1e1f2:	2207      	movs	r2, #7
   1e1f4:	f7ff bf10 	b.w	1e018 <memcpy>

0001e1f8 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1e1f8:	2207      	movs	r2, #7
   1e1fa:	f7ff befd 	b.w	1dff8 <memcmp>

0001e1fe <atomic_or>:
{
   1e1fe:	4603      	mov	r3, r0
}
   1e200:	f3bf 8f5b 	dmb	ish
   1e204:	e853 0f00 	ldrex	r0, [r3]
   1e208:	ea40 0201 	orr.w	r2, r0, r1
   1e20c:	e843 2c00 	strex	ip, r2, [r3]
   1e210:	f1bc 0f00 	cmp.w	ip, #0
   1e214:	d1f6      	bne.n	1e204 <atomic_or+0x6>
   1e216:	f3bf 8f5b 	dmb	ish
   1e21a:	4770      	bx	lr

0001e21c <atomic_and>:
{
   1e21c:	4603      	mov	r3, r0
}
   1e21e:	f3bf 8f5b 	dmb	ish
   1e222:	e853 0f00 	ldrex	r0, [r3]
   1e226:	ea00 0201 	and.w	r2, r0, r1
   1e22a:	e843 2c00 	strex	ip, r2, [r3]
   1e22e:	f1bc 0f00 	cmp.w	ip, #0
   1e232:	d1f6      	bne.n	1e222 <atomic_and+0x6>
   1e234:	f3bf 8f5b 	dmb	ish
   1e238:	4770      	bx	lr

0001e23a <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1e23a:	460b      	mov	r3, r1
   1e23c:	b410      	push	{r4}
   1e23e:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e240:	f001 041f 	and.w	r4, r1, #31
   1e244:	2101      	movs	r1, #1
   1e246:	40a1      	lsls	r1, r4

	if (val) {
   1e248:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1e24c:	b112      	cbz	r2, 1e254 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1e24e:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e250:	f7ff bfd5 	b.w	1e1fe <atomic_or>
}
   1e254:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e256:	43c9      	mvns	r1, r1
   1e258:	f7ff bfe0 	b.w	1e21c <atomic_and>

0001e25c <bt_hci_disconnect>:
{
   1e25c:	b570      	push	{r4, r5, r6, lr}
   1e25e:	4606      	mov	r6, r0
   1e260:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e262:	f240 4006 	movw	r0, #1030	; 0x406
   1e266:	2103      	movs	r1, #3
   1e268:	f7f7 fd02 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   1e26c:	4604      	mov	r4, r0
   1e26e:	b168      	cbz	r0, 1e28c <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1e270:	2103      	movs	r1, #3
   1e272:	3008      	adds	r0, #8
   1e274:	f001 f8df 	bl	1f436 <net_buf_simple_add>
	disconn->reason = reason;
   1e278:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1e27a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e27c:	4621      	mov	r1, r4
   1e27e:	2200      	movs	r2, #0
}
   1e280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e284:	f240 4006 	movw	r0, #1030	; 0x406
   1e288:	f7f7 bd2a 	b.w	15ce0 <bt_hci_cmd_send_sync>
}
   1e28c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e290:	bd70      	pop	{r4, r5, r6, pc}

0001e292 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e292:	8802      	ldrh	r2, [r0, #0]
   1e294:	8843      	ldrh	r3, [r0, #2]
   1e296:	429a      	cmp	r2, r3
{
   1e298:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e29a:	d818      	bhi.n	1e2ce <bt_le_conn_params_valid+0x3c>
   1e29c:	2a05      	cmp	r2, #5
   1e29e:	d916      	bls.n	1e2ce <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e2a0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1e2a4:	d813      	bhi.n	1e2ce <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1e2a6:	8884      	ldrh	r4, [r0, #4]
   1e2a8:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1e2ac:	d20f      	bcs.n	1e2ce <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e2ae:	88c1      	ldrh	r1, [r0, #6]
   1e2b0:	f1a1 020a 	sub.w	r2, r1, #10
   1e2b4:	b292      	uxth	r2, r2
   1e2b6:	f640 4076 	movw	r0, #3190	; 0xc76
   1e2ba:	4282      	cmp	r2, r0
   1e2bc:	d807      	bhi.n	1e2ce <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1e2be:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e2c2:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1e2c6:	bf34      	ite	cc
   1e2c8:	2001      	movcc	r0, #1
   1e2ca:	2000      	movcs	r0, #0
}
   1e2cc:	bd10      	pop	{r4, pc}
		return false;
   1e2ce:	2000      	movs	r0, #0
   1e2d0:	e7fc      	b.n	1e2cc <bt_le_conn_params_valid+0x3a>

0001e2d2 <bt_le_set_data_len>:
{
   1e2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2d4:	4607      	mov	r7, r0
   1e2d6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e2d8:	f242 0022 	movw	r0, #8226	; 0x2022
   1e2dc:	2106      	movs	r1, #6
{
   1e2de:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e2e0:	f7f7 fcc6 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   1e2e4:	4604      	mov	r4, r0
   1e2e6:	b170      	cbz	r0, 1e306 <bt_le_set_data_len+0x34>
   1e2e8:	2106      	movs	r1, #6
   1e2ea:	3008      	adds	r0, #8
   1e2ec:	f001 f8a3 	bl	1f436 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e2f0:	883b      	ldrh	r3, [r7, #0]
   1e2f2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e2f4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e2f6:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e2f8:	4621      	mov	r1, r4
   1e2fa:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1e2fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e302:	f7f7 bf33 	b.w	1616c <bt_hci_cmd_send>
}
   1e306:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e30c <bt_le_set_phy>:
{
   1e30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e310:	4680      	mov	r8, r0
   1e312:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e314:	f242 0032 	movw	r0, #8242	; 0x2032
   1e318:	2107      	movs	r1, #7
{
   1e31a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1e31e:	4616      	mov	r6, r2
   1e320:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e322:	f7f7 fca5 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   1e326:	4604      	mov	r4, r0
   1e328:	b190      	cbz	r0, 1e350 <bt_le_set_phy+0x44>
   1e32a:	2107      	movs	r1, #7
   1e32c:	3008      	adds	r0, #8
   1e32e:	f001 f882 	bl	1f436 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e332:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1e336:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e338:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e33a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e33c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1e33e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e342:	4621      	mov	r1, r4
   1e344:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1e348:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e34c:	f7f7 bf0e 	b.w	1616c <bt_hci_cmd_send>
}
   1e350:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e358 <bt_addr_le_is_bonded>:
}
   1e358:	2000      	movs	r0, #0
   1e35a:	4770      	bx	lr

0001e35c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1e35c:	6880      	ldr	r0, [r0, #8]
   1e35e:	f7f9 b807 	b.w	17370 <enh_conn_complete>

0001e362 <le_legacy_conn_complete>:
{
   1e362:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e364:	6881      	ldr	r1, [r0, #8]
{
   1e366:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1e368:	780b      	ldrb	r3, [r1, #0]
   1e36a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1e36e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1e372:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1e376:	78cb      	ldrb	r3, [r1, #3]
   1e378:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1e37c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1e380:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1e384:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1e388:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1e38c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1e390:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1e394:	7c4b      	ldrb	r3, [r1, #17]
   1e396:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e39a:	a803      	add	r0, sp, #12
   1e39c:	3104      	adds	r1, #4
   1e39e:	f7ff ff28 	bl	1e1f2 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e3a2:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1e3a4:	4669      	mov	r1, sp
   1e3a6:	2206      	movs	r2, #6
   1e3a8:	f10d 0013 	add.w	r0, sp, #19
   1e3ac:	9400      	str	r4, [sp, #0]
   1e3ae:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e3b2:	f7ff fe31 	bl	1e018 <memcpy>
   1e3b6:	2206      	movs	r2, #6
   1e3b8:	4669      	mov	r1, sp
   1e3ba:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1e3be:	9400      	str	r4, [sp, #0]
   1e3c0:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e3c4:	f7ff fe28 	bl	1e018 <memcpy>
	enh_conn_complete(&enh);
   1e3c8:	a802      	add	r0, sp, #8
   1e3ca:	f7f8 ffd1 	bl	17370 <enh_conn_complete>
}
   1e3ce:	b00a      	add	sp, #40	; 0x28
   1e3d0:	bd10      	pop	{r4, pc}

0001e3d2 <tx_notify>:
{
   1e3d2:	b570      	push	{r4, r5, r6, lr}
   1e3d4:	4604      	mov	r4, r0
	__asm__ volatile(
   1e3d6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e3da:	f3ef 8311 	mrs	r3, BASEPRI
   1e3de:	f382 8811 	msr	BASEPRI, r2
   1e3e2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1e3e6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1e3e8:	b920      	cbnz	r0, 1e3f4 <tx_notify+0x22>
	__asm__ volatile(
   1e3ea:	f383 8811 	msr	BASEPRI, r3
   1e3ee:	f3bf 8f6f 	isb	sy
}
   1e3f2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e3f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e3f6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e3f8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e3fa:	4288      	cmp	r0, r1
	list->tail = node;
   1e3fc:	bf08      	it	eq
   1e3fe:	6262      	streq	r2, [r4, #36]	; 0x24
   1e400:	f383 8811 	msr	BASEPRI, r3
   1e404:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1e408:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1e40c:	f7f9 f878 	bl	17500 <tx_free>
		cb(conn, user_data);
   1e410:	4631      	mov	r1, r6
   1e412:	4620      	mov	r0, r4
   1e414:	47a8      	blx	r5
	while (1) {
   1e416:	e7de      	b.n	1e3d6 <tx_notify+0x4>

0001e418 <tx_complete_work>:
	tx_notify(conn);
   1e418:	3828      	subs	r0, #40	; 0x28
   1e41a:	f7ff bfda 	b.w	1e3d2 <tx_notify>

0001e41e <bt_conn_new>:
{
   1e41e:	b538      	push	{r3, r4, r5, lr}
   1e420:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1e422:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e424:	2501      	movs	r5, #1
   1e426:	428b      	cmp	r3, r1
   1e428:	d102      	bne.n	1e430 <bt_conn_new+0x12>
		return NULL;
   1e42a:	2400      	movs	r4, #0
}
   1e42c:	4620      	mov	r0, r4
   1e42e:	bd38      	pop	{r3, r4, r5, pc}
   1e430:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1e434:	f3bf 8f5b 	dmb	ish
   1e438:	e852 0f00 	ldrex	r0, [r2]
   1e43c:	2800      	cmp	r0, #0
   1e43e:	d104      	bne.n	1e44a <bt_conn_new+0x2c>
   1e440:	e842 5c00 	strex	ip, r5, [r2]
   1e444:	f1bc 0f00 	cmp.w	ip, #0
   1e448:	d1f6      	bne.n	1e438 <bt_conn_new+0x1a>
   1e44a:	f3bf 8f5b 	dmb	ish
   1e44e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1e452:	d002      	beq.n	1e45a <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1e454:	3301      	adds	r3, #1
   1e456:	4604      	mov	r4, r0
   1e458:	e7e5      	b.n	1e426 <bt_conn_new+0x8>
	if (!conn) {
   1e45a:	2c00      	cmp	r4, #0
   1e45c:	d0e6      	beq.n	1e42c <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1e45e:	22b8      	movs	r2, #184	; 0xb8
   1e460:	2100      	movs	r1, #0
   1e462:	4620      	mov	r0, r4
   1e464:	f7ff fe03 	bl	1e06e <memset>
	return conn;
   1e468:	e7e0      	b.n	1e42c <bt_conn_new+0xe>

0001e46a <bt_conn_get_security>:
}
   1e46a:	2001      	movs	r0, #1
   1e46c:	4770      	bx	lr

0001e46e <bt_conn_reset_rx_state>:
{
   1e46e:	b510      	push	{r4, lr}
   1e470:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e472:	6900      	ldr	r0, [r0, #16]
   1e474:	b118      	cbz	r0, 1e47e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e476:	f7fb fd85 	bl	19f84 <net_buf_unref>
	conn->rx = NULL;
   1e47a:	2300      	movs	r3, #0
   1e47c:	6123      	str	r3, [r4, #16]
}
   1e47e:	bd10      	pop	{r4, pc}

0001e480 <bt_conn_is_peer_addr_le>:
{
   1e480:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e482:	7a03      	ldrb	r3, [r0, #8]
   1e484:	428b      	cmp	r3, r1
{
   1e486:	4604      	mov	r4, r0
   1e488:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e48a:	d115      	bne.n	1e4b8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e48c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e490:	2207      	movs	r2, #7
   1e492:	4628      	mov	r0, r5
   1e494:	f7ff fdb0 	bl	1dff8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1e498:	b180      	cbz	r0, 1e4bc <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1e49a:	78e3      	ldrb	r3, [r4, #3]
   1e49c:	2207      	movs	r2, #7
   1e49e:	b943      	cbnz	r3, 1e4b2 <bt_conn_is_peer_addr_le+0x32>
   1e4a0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1e4a4:	4628      	mov	r0, r5
   1e4a6:	f7ff fda7 	bl	1dff8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1e4aa:	fab0 f080 	clz	r0, r0
   1e4ae:	0940      	lsrs	r0, r0, #5
}
   1e4b0:	bd38      	pop	{r3, r4, r5, pc}
   1e4b2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e4b6:	e7f5      	b.n	1e4a4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e4b8:	2000      	movs	r0, #0
   1e4ba:	e7f9      	b.n	1e4b0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e4bc:	2001      	movs	r0, #1
   1e4be:	e7f7      	b.n	1e4b0 <bt_conn_is_peer_addr_le+0x30>

0001e4c0 <bt_conn_ref>:
{
   1e4c0:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1e4c2:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e4c6:	f3bf 8f5b 	dmb	ish
   1e4ca:	6813      	ldr	r3, [r2, #0]
   1e4cc:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1e4d0:	b17b      	cbz	r3, 1e4f2 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e4d2:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1e4d6:	1c59      	adds	r1, r3, #1
   1e4d8:	e852 4f00 	ldrex	r4, [r2]
   1e4dc:	429c      	cmp	r4, r3
   1e4de:	d104      	bne.n	1e4ea <bt_conn_ref+0x2a>
   1e4e0:	e842 1c00 	strex	ip, r1, [r2]
   1e4e4:	f1bc 0f00 	cmp.w	ip, #0
   1e4e8:	d1f6      	bne.n	1e4d8 <bt_conn_ref+0x18>
   1e4ea:	f3bf 8f5b 	dmb	ish
   1e4ee:	d1ea      	bne.n	1e4c6 <bt_conn_ref+0x6>
}
   1e4f0:	bd10      	pop	{r4, pc}
			return NULL;
   1e4f2:	4618      	mov	r0, r3
   1e4f4:	e7fc      	b.n	1e4f0 <bt_conn_ref+0x30>

0001e4f6 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   1e4f6:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e4fa:	f3bf 8f5b 	dmb	ish
   1e4fe:	e853 2f00 	ldrex	r2, [r3]
   1e502:	3a01      	subs	r2, #1
   1e504:	e843 2100 	strex	r1, r2, [r3]
   1e508:	2900      	cmp	r1, #0
   1e50a:	d1f8      	bne.n	1e4fe <bt_conn_unref+0x8>
   1e50c:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e510:	f3bf 8f5b 	dmb	ish
   1e514:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1e518:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1e51c:	b90b      	cbnz	r3, 1e522 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   1e51e:	f7f8 bef1 	b.w	17304 <bt_le_adv_resume>
}
   1e522:	4770      	bx	lr

0001e524 <conn_lookup_handle>:
{
   1e524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e528:	4607      	mov	r7, r0
   1e52a:	460e      	mov	r6, r1
   1e52c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e52e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e530:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1e534:	42b4      	cmp	r4, r6
   1e536:	d103      	bne.n	1e540 <conn_lookup_handle+0x1c>
	return NULL;
   1e538:	2300      	movs	r3, #0
}
   1e53a:	4618      	mov	r0, r3
   1e53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e540:	fb09 7004 	mla	r0, r9, r4, r7
   1e544:	f7ff ffbc 	bl	1e4c0 <bt_conn_ref>
   1e548:	4603      	mov	r3, r0
		if (!conn) {
   1e54a:	b158      	cbz	r0, 1e564 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1e54c:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e54e:	2d01      	cmp	r5, #1
   1e550:	d002      	beq.n	1e558 <conn_lookup_handle+0x34>
   1e552:	3d07      	subs	r5, #7
   1e554:	2d01      	cmp	r5, #1
   1e556:	d803      	bhi.n	1e560 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1e558:	881a      	ldrh	r2, [r3, #0]
   1e55a:	4542      	cmp	r2, r8
   1e55c:	d0ed      	beq.n	1e53a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e55e:	4618      	mov	r0, r3
   1e560:	f7ff ffc9 	bl	1e4f6 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e564:	3401      	adds	r4, #1
   1e566:	e7e5      	b.n	1e534 <conn_lookup_handle+0x10>

0001e568 <bt_conn_le_conn_update>:
{
   1e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e56a:	4607      	mov	r7, r0
   1e56c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e56e:	f242 0013 	movw	r0, #8211	; 0x2013
   1e572:	210e      	movs	r1, #14
   1e574:	f7f7 fb7c 	bl	15c70 <bt_hci_cmd_create>
	if (!buf) {
   1e578:	4606      	mov	r6, r0
   1e57a:	b1d0      	cbz	r0, 1e5b2 <bt_conn_le_conn_update+0x4a>
   1e57c:	210e      	movs	r1, #14
   1e57e:	3008      	adds	r0, #8
   1e580:	f000 ff59 	bl	1f436 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1e584:	220e      	movs	r2, #14
   1e586:	4604      	mov	r4, r0
   1e588:	2100      	movs	r1, #0
   1e58a:	f7ff fd70 	bl	1e06e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e58e:	883b      	ldrh	r3, [r7, #0]
   1e590:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e592:	882b      	ldrh	r3, [r5, #0]
   1e594:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e596:	886b      	ldrh	r3, [r5, #2]
   1e598:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e59a:	88ab      	ldrh	r3, [r5, #4]
   1e59c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e59e:	88eb      	ldrh	r3, [r5, #6]
   1e5a0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e5a2:	4631      	mov	r1, r6
   1e5a4:	2200      	movs	r2, #0
}
   1e5a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e5aa:	f242 0013 	movw	r0, #8211	; 0x2013
   1e5ae:	f7f7 bb97 	b.w	15ce0 <bt_hci_cmd_send_sync>
}
   1e5b2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e5b8 <l2cap_connected>:
}
   1e5b8:	4770      	bx	lr

0001e5ba <l2cap_disconnected>:
   1e5ba:	4770      	bx	lr

0001e5bc <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e5bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1e5be:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e5c0:	b17b      	cbz	r3, 1e5e2 <bt_l2cap_chan_remove+0x26>
   1e5c2:	3b08      	subs	r3, #8
   1e5c4:	2200      	movs	r2, #0
   1e5c6:	b163      	cbz	r3, 1e5e2 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1e5c8:	428b      	cmp	r3, r1
   1e5ca:	f103 0408 	add.w	r4, r3, #8
   1e5ce:	d10f      	bne.n	1e5f0 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1e5d0:	688b      	ldr	r3, [r1, #8]
   1e5d2:	b93a      	cbnz	r2, 1e5e4 <bt_l2cap_chan_remove+0x28>
   1e5d4:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   1e5d6:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   1e5d8:	4294      	cmp	r4, r2
   1e5da:	d100      	bne.n	1e5de <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1e5dc:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   1e5de:	2300      	movs	r3, #0
   1e5e0:	608b      	str	r3, [r1, #8]
}
   1e5e2:	bd10      	pop	{r4, pc}
   1e5e4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e5e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1e5e8:	429c      	cmp	r4, r3
	list->tail = node;
   1e5ea:	bf08      	it	eq
   1e5ec:	6502      	streq	r2, [r0, #80]	; 0x50
}
   1e5ee:	e7f6      	b.n	1e5de <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e5f0:	2c00      	cmp	r4, #0
   1e5f2:	d0f6      	beq.n	1e5e2 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e5f4:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e5f6:	2b00      	cmp	r3, #0
   1e5f8:	d0f3      	beq.n	1e5e2 <bt_l2cap_chan_remove+0x26>
   1e5fa:	3b08      	subs	r3, #8
   1e5fc:	4622      	mov	r2, r4
   1e5fe:	e7e2      	b.n	1e5c6 <bt_l2cap_chan_remove+0xa>

0001e600 <bt_l2cap_chan_del>:
{
   1e600:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1e602:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1e606:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e608:	b123      	cbz	r3, 1e614 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e60a:	686b      	ldr	r3, [r5, #4]
   1e60c:	b103      	cbz	r3, 1e610 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e60e:	4798      	blx	r3
	chan->conn = NULL;
   1e610:	2300      	movs	r3, #0
   1e612:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e614:	68e3      	ldr	r3, [r4, #12]
   1e616:	b10b      	cbz	r3, 1e61c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e618:	4620      	mov	r0, r4
   1e61a:	4798      	blx	r3
	if (ops->released) {
   1e61c:	69eb      	ldr	r3, [r5, #28]
   1e61e:	b11b      	cbz	r3, 1e628 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e620:	4620      	mov	r0, r4
}
   1e622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e626:	4718      	bx	r3
}
   1e628:	bd70      	pop	{r4, r5, r6, pc}

0001e62a <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e62a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1e62c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e62e:	b18b      	cbz	r3, 1e654 <bt_l2cap_disconnected+0x2a>
   1e630:	f1b3 0008 	subs.w	r0, r3, #8
   1e634:	d00e      	beq.n	1e654 <bt_l2cap_disconnected+0x2a>
   1e636:	681c      	ldr	r4, [r3, #0]
   1e638:	b104      	cbz	r4, 1e63c <bt_l2cap_disconnected+0x12>
   1e63a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e63c:	f7ff ffe0 	bl	1e600 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e640:	b144      	cbz	r4, 1e654 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e642:	f114 0308 	adds.w	r3, r4, #8
   1e646:	d002      	beq.n	1e64e <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e648:	68a3      	ldr	r3, [r4, #8]
   1e64a:	b103      	cbz	r3, 1e64e <bt_l2cap_disconnected+0x24>
   1e64c:	3b08      	subs	r3, #8
{
   1e64e:	4620      	mov	r0, r4
   1e650:	461c      	mov	r4, r3
   1e652:	e7f3      	b.n	1e63c <bt_l2cap_disconnected+0x12>
}
   1e654:	bd10      	pop	{r4, pc}

0001e656 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1e656:	3104      	adds	r1, #4
   1e658:	f7f9 bbca 	b.w	17df0 <bt_conn_create_pdu_timeout>

0001e65c <bt_l2cap_send_cb>:
{
   1e65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e660:	4614      	mov	r4, r2
   1e662:	4605      	mov	r5, r0
   1e664:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1e666:	f102 0008 	add.w	r0, r2, #8
   1e66a:	2104      	movs	r1, #4
   1e66c:	461e      	mov	r6, r3
   1e66e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e672:	f000 fef7 	bl	1f464 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e676:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1e678:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e67a:	3a04      	subs	r2, #4
   1e67c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e67e:	4643      	mov	r3, r8
   1e680:	4632      	mov	r2, r6
   1e682:	4621      	mov	r1, r4
   1e684:	4628      	mov	r0, r5
}
   1e686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e68a:	f7f9 b8fd 	b.w	17888 <bt_conn_send_cb>

0001e68e <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e68e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1e690:	b160      	cbz	r0, 1e6ac <bt_l2cap_le_lookup_tx_cid+0x1e>
   1e692:	3808      	subs	r0, #8
   1e694:	b900      	cbnz	r0, 1e698 <bt_l2cap_le_lookup_tx_cid+0xa>
   1e696:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1e698:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1e69c:	428b      	cmp	r3, r1
   1e69e:	d005      	beq.n	1e6ac <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e6a0:	f110 0308 	adds.w	r3, r0, #8
   1e6a4:	d001      	beq.n	1e6aa <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e6a6:	6880      	ldr	r0, [r0, #8]
   1e6a8:	e7f2      	b.n	1e690 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1e6aa:	4618      	mov	r0, r3
}
   1e6ac:	4770      	bx	lr

0001e6ae <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e6ae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1e6b0:	b160      	cbz	r0, 1e6cc <bt_l2cap_le_lookup_rx_cid+0x1e>
   1e6b2:	3808      	subs	r0, #8
   1e6b4:	b900      	cbnz	r0, 1e6b8 <bt_l2cap_le_lookup_rx_cid+0xa>
   1e6b6:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e6b8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1e6bc:	428b      	cmp	r3, r1
   1e6be:	d005      	beq.n	1e6cc <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e6c0:	f110 0308 	adds.w	r3, r0, #8
   1e6c4:	d001      	beq.n	1e6ca <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e6c6:	6880      	ldr	r0, [r0, #8]
   1e6c8:	e7f2      	b.n	1e6b0 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1e6ca:	4618      	mov	r0, r3
}
   1e6cc:	4770      	bx	lr

0001e6ce <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1e6ce:	4770      	bx	lr

0001e6d0 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1e6d0:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1e6d2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1e6d4:	b128      	cbz	r0, 1e6e2 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e6d6:	6859      	ldr	r1, [r3, #4]
   1e6d8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e6da:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e6dc:	4288      	cmp	r0, r1
	list->tail = node;
   1e6de:	bf08      	it	eq
   1e6e0:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1e6e2:	4770      	bx	lr

0001e6e4 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e6e4:	4603      	mov	r3, r0
   1e6e6:	6800      	ldr	r0, [r0, #0]
   1e6e8:	2200      	movs	r2, #0
   1e6ea:	b900      	cbnz	r0, 1e6ee <sys_slist_find_and_remove+0xa>
   1e6ec:	4770      	bx	lr
   1e6ee:	4288      	cmp	r0, r1
   1e6f0:	d110      	bne.n	1e714 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1e6f2:	6808      	ldr	r0, [r1, #0]
   1e6f4:	b942      	cbnz	r2, 1e708 <sys_slist_find_and_remove+0x24>
   1e6f6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1e6f8:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e6fa:	4291      	cmp	r1, r2
   1e6fc:	d100      	bne.n	1e700 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1e6fe:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1e700:	2300      	movs	r3, #0
   1e702:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e704:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1e706:	4770      	bx	lr
	parent->next = child;
   1e708:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e70a:	6858      	ldr	r0, [r3, #4]
   1e70c:	4281      	cmp	r1, r0
	list->tail = node;
   1e70e:	bf08      	it	eq
   1e710:	605a      	streq	r2, [r3, #4]
}
   1e712:	e7f5      	b.n	1e700 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e714:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e716:	6800      	ldr	r0, [r0, #0]
   1e718:	e7e7      	b.n	1e6ea <sys_slist_find_and_remove+0x6>

0001e71a <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1e71a:	4603      	mov	r3, r0
	size_t bytes = 0;
   1e71c:	2000      	movs	r0, #0

	while (buf) {
   1e71e:	b903      	cbnz	r3, 1e722 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1e720:	4770      	bx	lr
		bytes += buf->len;
   1e722:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1e724:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1e726:	4410      	add	r0, r2
		buf = buf->frags;
   1e728:	e7f9      	b.n	1e71e <net_buf_frags_len+0x4>

0001e72a <att_sent>:
	if (chan->ops->sent) {
   1e72a:	684b      	ldr	r3, [r1, #4]
   1e72c:	695b      	ldr	r3, [r3, #20]
{
   1e72e:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1e730:	b103      	cbz	r3, 1e734 <att_sent+0xa>
		chan->ops->sent(chan);
   1e732:	4718      	bx	r3
}
   1e734:	4770      	bx	lr

0001e736 <attr_read_type_cb>:
{
   1e736:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1e738:	68d4      	ldr	r4, [r2, #12]
   1e73a:	7823      	ldrb	r3, [r4, #0]
   1e73c:	3102      	adds	r1, #2
   1e73e:	b913      	cbnz	r3, 1e746 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1e740:	7021      	strb	r1, [r4, #0]
	return true;
   1e742:	2001      	movs	r0, #1
   1e744:	e006      	b.n	1e754 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1e746:	428b      	cmp	r3, r1
   1e748:	d0fb      	beq.n	1e742 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1e74a:	8983      	ldrh	r3, [r0, #12]
   1e74c:	3b02      	subs	r3, #2
   1e74e:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1e750:	2000      	movs	r0, #0
   1e752:	6110      	str	r0, [r2, #16]
}
   1e754:	bd10      	pop	{r4, pc}

0001e756 <att_prepare_write_req>:
}
   1e756:	2006      	movs	r0, #6
   1e758:	4770      	bx	lr

0001e75a <att_op_get_type>:
	switch (op) {
   1e75a:	281e      	cmp	r0, #30
   1e75c:	d816      	bhi.n	1e78c <att_op_get_type+0x32>
   1e75e:	b308      	cbz	r0, 1e7a4 <att_op_get_type+0x4a>
   1e760:	1e43      	subs	r3, r0, #1
   1e762:	2b1d      	cmp	r3, #29
   1e764:	d81e      	bhi.n	1e7a4 <att_op_get_type+0x4a>
   1e766:	e8df f003 	tbb	[pc, r3]
   1e76a:	2317      	.short	0x2317
   1e76c:	23172317 	.word	0x23172317
   1e770:	23172317 	.word	0x23172317
   1e774:	23172317 	.word	0x23172317
   1e778:	23172317 	.word	0x23172317
   1e77c:	231d1d17 	.word	0x231d1d17
   1e780:	1d172317 	.word	0x1d172317
   1e784:	0f1b1d19 	.word	0x0f1b1d19
   1e788:	2004      	movs	r0, #4
   1e78a:	4770      	bx	lr
   1e78c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1e790:	2b52      	cmp	r3, #82	; 0x52
   1e792:	d107      	bne.n	1e7a4 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1e794:	2000      	movs	r0, #0
}
   1e796:	4770      	bx	lr
		return ATT_RESPONSE;
   1e798:	2002      	movs	r0, #2
   1e79a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1e79c:	2003      	movs	r0, #3
   1e79e:	4770      	bx	lr
		return ATT_INDICATION;
   1e7a0:	2005      	movs	r0, #5
   1e7a2:	4770      	bx	lr
		return ATT_COMMAND;
   1e7a4:	f010 0f40 	tst.w	r0, #64	; 0x40
   1e7a8:	bf0c      	ite	eq
   1e7aa:	2006      	moveq	r0, #6
   1e7ac:	2000      	movne	r0, #0
   1e7ae:	4770      	bx	lr
		return ATT_REQUEST;
   1e7b0:	2001      	movs	r0, #1
   1e7b2:	4770      	bx	lr

0001e7b4 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1e7b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1e7b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1e7ba:	2300      	movs	r3, #0
   1e7bc:	9300      	str	r3, [sp, #0]
   1e7be:	461a      	mov	r2, r3
   1e7c0:	f7fb f8d2 	bl	19968 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1e7c4:	b005      	add	sp, #20
   1e7c6:	f85d fb04 	ldr.w	pc, [sp], #4

0001e7ca <att_chan_read>:
{
   1e7ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7ce:	4680      	mov	r8, r0
   1e7d0:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e7d2:	4610      	mov	r0, r2
{
   1e7d4:	4699      	mov	r9, r3
   1e7d6:	468b      	mov	fp, r1
   1e7d8:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e7da:	f7ff ff9e 	bl	1e71a <net_buf_frags_len>
   1e7de:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   1e7e2:	4283      	cmp	r3, r0
   1e7e4:	d97a      	bls.n	1e8dc <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1e7e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e7ea:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1e7ec:	4630      	mov	r0, r6
   1e7ee:	f000 fe00 	bl	1f3f2 <net_buf_frag_last>
	size_t len, total = 0;
   1e7f2:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1e7f6:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e7f8:	4630      	mov	r0, r6
   1e7fa:	f7ff ff8e 	bl	1e71a <net_buf_frags_len>
   1e7fe:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1e802:	f105 0708 	add.w	r7, r5, #8
   1e806:	1a24      	subs	r4, r4, r0
   1e808:	4638      	mov	r0, r7
   1e80a:	f000 fe4f 	bl	1f4ac <net_buf_simple_tailroom>
   1e80e:	4284      	cmp	r4, r0
   1e810:	d211      	bcs.n	1e836 <att_chan_read+0x6c>
   1e812:	4630      	mov	r0, r6
   1e814:	f7ff ff81 	bl	1e71a <net_buf_frags_len>
   1e818:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1e81c:	1a24      	subs	r4, r4, r0
		if (!len) {
   1e81e:	bb34      	cbnz	r4, 1e86e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1e820:	79b0      	ldrb	r0, [r6, #6]
   1e822:	f7fb faf3 	bl	19e0c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e826:	2200      	movs	r2, #0
   1e828:	2300      	movs	r3, #0
   1e82a:	f000 fdae 	bl	1f38a <net_buf_alloc_fixed>
			if (!frag) {
   1e82e:	4605      	mov	r5, r0
   1e830:	b930      	cbnz	r0, 1e840 <att_chan_read+0x76>
	return total;
   1e832:	4657      	mov	r7, sl
   1e834:	e02c      	b.n	1e890 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1e836:	4638      	mov	r0, r7
   1e838:	f000 fe38 	bl	1f4ac <net_buf_simple_tailroom>
   1e83c:	4604      	mov	r4, r0
   1e83e:	e7ee      	b.n	1e81e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1e840:	4601      	mov	r1, r0
   1e842:	4630      	mov	r0, r6
   1e844:	f000 fde6 	bl	1f414 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e848:	4630      	mov	r0, r6
   1e84a:	f7ff ff66 	bl	1e71a <net_buf_frags_len>
   1e84e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1e852:	f105 0708 	add.w	r7, r5, #8
   1e856:	1a24      	subs	r4, r4, r0
   1e858:	4638      	mov	r0, r7
   1e85a:	f000 fe27 	bl	1f4ac <net_buf_simple_tailroom>
   1e85e:	4284      	cmp	r4, r0
   1e860:	d21a      	bcs.n	1e898 <att_chan_read+0xce>
   1e862:	4630      	mov	r0, r6
   1e864:	f7ff ff59 	bl	1e71a <net_buf_frags_len>
   1e868:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1e86c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1e86e:	68a9      	ldr	r1, [r5, #8]
   1e870:	89aa      	ldrh	r2, [r5, #12]
   1e872:	f8db 7004 	ldr.w	r7, [fp, #4]
   1e876:	9803      	ldr	r0, [sp, #12]
   1e878:	f8cd 9000 	str.w	r9, [sp]
   1e87c:	440a      	add	r2, r1
   1e87e:	b2a3      	uxth	r3, r4
   1e880:	4659      	mov	r1, fp
   1e882:	47b8      	blx	r7
		if (read < 0) {
   1e884:	1e07      	subs	r7, r0, #0
   1e886:	da0c      	bge.n	1e8a2 <att_chan_read+0xd8>
				return total;
   1e888:	f1ba 0f00 	cmp.w	sl, #0
   1e88c:	bf18      	it	ne
   1e88e:	4657      	movne	r7, sl
}
   1e890:	4638      	mov	r0, r7
   1e892:	b005      	add	sp, #20
   1e894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e898:	4638      	mov	r0, r7
   1e89a:	f000 fe07 	bl	1f4ac <net_buf_simple_tailroom>
   1e89e:	4604      	mov	r4, r0
   1e8a0:	e7e5      	b.n	1e86e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1e8a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e8a4:	b993      	cbnz	r3, 1e8cc <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1e8a6:	4639      	mov	r1, r7
   1e8a8:	f105 0008 	add.w	r0, r5, #8
   1e8ac:	f000 fdc3 	bl	1f436 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e8b0:	4630      	mov	r0, r6
   1e8b2:	f7ff ff32 	bl	1e71a <net_buf_frags_len>
   1e8b6:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1e8ba:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e8bc:	4283      	cmp	r3, r0
		total += read;
   1e8be:	44ba      	add	sl, r7
		offset += read;
   1e8c0:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e8c4:	d9b5      	bls.n	1e832 <att_chan_read+0x68>
   1e8c6:	42a7      	cmp	r7, r4
   1e8c8:	d096      	beq.n	1e7f8 <att_chan_read+0x2e>
   1e8ca:	e7b2      	b.n	1e832 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1e8cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e8ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e8d0:	4639      	mov	r1, r7
   1e8d2:	4628      	mov	r0, r5
   1e8d4:	4798      	blx	r3
   1e8d6:	2800      	cmp	r0, #0
   1e8d8:	d1e5      	bne.n	1e8a6 <att_chan_read+0xdc>
   1e8da:	e7aa      	b.n	1e832 <att_chan_read+0x68>
		return 0;
   1e8dc:	2700      	movs	r7, #0
   1e8de:	e7d7      	b.n	1e890 <att_chan_read+0xc6>

0001e8e0 <find_info_cb>:
{
   1e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1e8e2:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1e8e4:	6817      	ldr	r7, [r2, #0]
{
   1e8e6:	4605      	mov	r5, r0
   1e8e8:	460e      	mov	r6, r1
   1e8ea:	4614      	mov	r4, r2
	if (!data->rsp) {
   1e8ec:	b963      	cbnz	r3, 1e908 <find_info_cb+0x28>
   1e8ee:	6850      	ldr	r0, [r2, #4]
   1e8f0:	2101      	movs	r1, #1
   1e8f2:	3008      	adds	r0, #8
   1e8f4:	f000 fd9f 	bl	1f436 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e8f8:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1e8fa:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e8fc:	781b      	ldrb	r3, [r3, #0]
   1e8fe:	2b00      	cmp	r3, #0
   1e900:	bf0c      	ite	eq
   1e902:	2301      	moveq	r3, #1
   1e904:	2302      	movne	r3, #2
   1e906:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1e908:	68a3      	ldr	r3, [r4, #8]
   1e90a:	781b      	ldrb	r3, [r3, #0]
   1e90c:	2b01      	cmp	r3, #1
   1e90e:	d003      	beq.n	1e918 <find_info_cb+0x38>
   1e910:	2b02      	cmp	r3, #2
   1e912:	d019      	beq.n	1e948 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1e914:	2000      	movs	r0, #0
   1e916:	e016      	b.n	1e946 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1e918:	682b      	ldr	r3, [r5, #0]
   1e91a:	781b      	ldrb	r3, [r3, #0]
   1e91c:	2b00      	cmp	r3, #0
   1e91e:	d1f9      	bne.n	1e914 <find_info_cb+0x34>
   1e920:	6860      	ldr	r0, [r4, #4]
   1e922:	2104      	movs	r1, #4
   1e924:	3008      	adds	r0, #8
   1e926:	f000 fd86 	bl	1f436 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e92a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1e92c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e92e:	885b      	ldrh	r3, [r3, #2]
   1e930:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1e932:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1e934:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1e936:	899b      	ldrh	r3, [r3, #12]
   1e938:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1e93c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e93e:	2804      	cmp	r0, #4
   1e940:	bf94      	ite	ls
   1e942:	2000      	movls	r0, #0
   1e944:	2001      	movhi	r0, #1
}
   1e946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1e948:	682b      	ldr	r3, [r5, #0]
   1e94a:	781b      	ldrb	r3, [r3, #0]
   1e94c:	2b02      	cmp	r3, #2
   1e94e:	d1e1      	bne.n	1e914 <find_info_cb+0x34>
   1e950:	6860      	ldr	r0, [r4, #4]
   1e952:	2112      	movs	r1, #18
   1e954:	3008      	adds	r0, #8
   1e956:	f000 fd6e 	bl	1f436 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e95a:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1e95c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e95e:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1e960:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e964:	3101      	adds	r1, #1
   1e966:	f7ff fb57 	bl	1e018 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1e96a:	6863      	ldr	r3, [r4, #4]
   1e96c:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1e970:	899b      	ldrh	r3, [r3, #12]
   1e972:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e974:	2812      	cmp	r0, #18
   1e976:	e7e3      	b.n	1e940 <find_info_cb+0x60>

0001e978 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1e978:	68d0      	ldr	r0, [r2, #12]
   1e97a:	7803      	ldrb	r3, [r0, #0]
   1e97c:	3104      	adds	r1, #4
   1e97e:	b913      	cbnz	r3, 1e986 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1e980:	7001      	strb	r1, [r0, #0]
	return true;
   1e982:	2001      	movs	r0, #1
}
   1e984:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1e986:	428b      	cmp	r3, r1
   1e988:	d0fb      	beq.n	1e982 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1e98a:	6891      	ldr	r1, [r2, #8]
   1e98c:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1e98e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1e990:	3b04      	subs	r3, #4
   1e992:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1e994:	6110      	str	r0, [r2, #16]
		return false;
   1e996:	4770      	bx	lr

0001e998 <process_queue>:
{
   1e998:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1e99a:	2200      	movs	r2, #0
{
   1e99c:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1e99e:	2300      	movs	r3, #0
   1e9a0:	4608      	mov	r0, r1
{
   1e9a2:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1e9a4:	f000 fcf6 	bl	1f394 <net_buf_get>
	if (buf) {
   1e9a8:	4605      	mov	r5, r0
   1e9aa:	b160      	cbz	r0, 1e9c6 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1e9ac:	4601      	mov	r1, r0
   1e9ae:	2200      	movs	r2, #0
   1e9b0:	4620      	mov	r0, r4
   1e9b2:	f7f9 fe2f 	bl	18614 <chan_send>
		if (err) {
   1e9b6:	4604      	mov	r4, r0
   1e9b8:	b118      	cbz	r0, 1e9c2 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1e9ba:	4629      	mov	r1, r5
   1e9bc:	4630      	mov	r0, r6
   1e9be:	f000 ffcd 	bl	1f95c <k_queue_prepend>
}
   1e9c2:	4620      	mov	r0, r4
   1e9c4:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e9c6:	f06f 0401 	mvn.w	r4, #1
   1e9ca:	e7fa      	b.n	1e9c2 <process_queue+0x2a>

0001e9cc <att_exec_write_req>:
   1e9cc:	2006      	movs	r0, #6
   1e9ce:	4770      	bx	lr

0001e9d0 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e9d0:	30c0      	adds	r0, #192	; 0xc0
   1e9d2:	f3bf 8f5b 	dmb	ish
   1e9d6:	e850 3f00 	ldrex	r3, [r0]
   1e9da:	f023 0301 	bic.w	r3, r3, #1
   1e9de:	e840 3200 	strex	r2, r3, [r0]
   1e9e2:	2a00      	cmp	r2, #0
   1e9e4:	d1f7      	bne.n	1e9d6 <chan_rsp_sent+0x6>
   1e9e6:	f3bf 8f5b 	dmb	ish
}
   1e9ea:	4770      	bx	lr

0001e9ec <chan_cfm_sent>:
   1e9ec:	30c0      	adds	r0, #192	; 0xc0
   1e9ee:	f3bf 8f5b 	dmb	ish
   1e9f2:	e850 3f00 	ldrex	r3, [r0]
   1e9f6:	f023 0302 	bic.w	r3, r3, #2
   1e9fa:	e840 3200 	strex	r2, r3, [r0]
   1e9fe:	2a00      	cmp	r2, #0
   1ea00:	d1f7      	bne.n	1e9f2 <chan_cfm_sent+0x6>
   1ea02:	f3bf 8f5b 	dmb	ish
}
   1ea06:	4770      	bx	lr

0001ea08 <chan_req_send>:
{
   1ea08:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ea0a:	690e      	ldr	r6, [r1, #16]
{
   1ea0c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ea0e:	4630      	mov	r0, r6
{
   1ea10:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ea12:	f7ff fe82 	bl	1e71a <net_buf_frags_len>
   1ea16:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1ea1a:	4283      	cmp	r3, r0
   1ea1c:	d317      	bcc.n	1ea4e <chan_req_send+0x46>
	chan->req = req;
   1ea1e:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   1ea22:	f106 0008 	add.w	r0, r6, #8
   1ea26:	f000 fd3d 	bl	1f4a4 <net_buf_simple_headroom>
	state->len = buf->len;
   1ea2a:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1ea2c:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1ea2e:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1ea30:	6920      	ldr	r0, [r4, #16]
   1ea32:	f000 fcda 	bl	1f3ea <net_buf_ref>
   1ea36:	2200      	movs	r2, #0
   1ea38:	4601      	mov	r1, r0
   1ea3a:	4628      	mov	r0, r5
   1ea3c:	f7f9 fdea 	bl	18614 <chan_send>
	if (err) {
   1ea40:	4605      	mov	r5, r0
   1ea42:	b110      	cbz	r0, 1ea4a <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1ea44:	6920      	ldr	r0, [r4, #16]
   1ea46:	f7fb fa9d 	bl	19f84 <net_buf_unref>
}
   1ea4a:	4628      	mov	r0, r5
   1ea4c:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1ea4e:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1ea52:	e7fa      	b.n	1ea4a <chan_req_send+0x42>

0001ea54 <bt_att_chan_req_send>:
{
   1ea54:	b570      	push	{r4, r5, r6, lr}
   1ea56:	4604      	mov	r4, r0
   1ea58:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1ea5a:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   1ea5e:	2200      	movs	r2, #0
   1ea60:	2300      	movs	r3, #0
   1ea62:	4630      	mov	r0, r6
   1ea64:	f7fd fc2c 	bl	1c2c0 <z_impl_k_sem_take>
   1ea68:	2800      	cmp	r0, #0
   1ea6a:	db0a      	blt.n	1ea82 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   1ea6c:	4620      	mov	r0, r4
   1ea6e:	4629      	mov	r1, r5
   1ea70:	f7ff ffca 	bl	1ea08 <chan_req_send>
	if (err < 0) {
   1ea74:	1e04      	subs	r4, r0, #0
   1ea76:	da02      	bge.n	1ea7e <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   1ea78:	4630      	mov	r0, r6
   1ea7a:	f7fd fbfb 	bl	1c274 <z_impl_k_sem_give>
}
   1ea7e:	4620      	mov	r0, r4
   1ea80:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1ea82:	f06f 040a 	mvn.w	r4, #10
   1ea86:	e7fa      	b.n	1ea7e <bt_att_chan_req_send+0x2a>

0001ea88 <bt_att_status>:
{
   1ea88:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ea8a:	f3bf 8f5b 	dmb	ish
   1ea8e:	680b      	ldr	r3, [r1, #0]
   1ea90:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1ea94:	07db      	lsls	r3, r3, #31
{
   1ea96:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1ea98:	d519      	bpl.n	1eace <bt_att_status+0x46>
	if (!chan->att) {
   1ea9a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1ea9e:	b1b0      	cbz	r0, 1eace <bt_att_status+0x46>
	if (chan->req) {
   1eaa0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1eaa4:	b99b      	cbnz	r3, 1eace <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1eaa6:	3004      	adds	r0, #4
   1eaa8:	f7ff fe12 	bl	1e6d0 <sys_slist_get>
	if (!node) {
   1eaac:	4604      	mov	r4, r0
   1eaae:	b170      	cbz	r0, 1eace <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1eab0:	4601      	mov	r1, r0
   1eab2:	f1a5 0008 	sub.w	r0, r5, #8
   1eab6:	f7ff ffcd 	bl	1ea54 <bt_att_chan_req_send>
   1eaba:	2800      	cmp	r0, #0
   1eabc:	da07      	bge.n	1eace <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1eabe:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1eac2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1eac4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1eac6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1eac8:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1eaca:	b902      	cbnz	r2, 1eace <bt_att_status+0x46>
	list->tail = node;
   1eacc:	609c      	str	r4, [r3, #8]
}
   1eace:	bd38      	pop	{r3, r4, r5, pc}

0001ead0 <write_cb>:
{
   1ead0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ead2:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1ead4:	4601      	mov	r1, r0
{
   1ead6:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1ead8:	222a      	movs	r2, #42	; 0x2a
   1eada:	6820      	ldr	r0, [r4, #0]
   1eadc:	f000 fbd7 	bl	1f28e <bt_gatt_check_perm>
   1eae0:	4605      	mov	r5, r0
   1eae2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1eae4:	bb00      	cbnz	r0, 1eb28 <write_cb+0x58>
	if (!data->req) {
   1eae6:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1eae8:	68b7      	ldr	r7, [r6, #8]
   1eaea:	68e2      	ldr	r2, [r4, #12]
   1eaec:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1eaee:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1eaf0:	bf14      	ite	ne
   1eaf2:	2300      	movne	r3, #0
   1eaf4:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1eaf6:	9301      	str	r3, [sp, #4]
   1eaf8:	8a63      	ldrh	r3, [r4, #18]
   1eafa:	9300      	str	r3, [sp, #0]
   1eafc:	4631      	mov	r1, r6
   1eafe:	8a23      	ldrh	r3, [r4, #16]
   1eb00:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1eb02:	1e03      	subs	r3, r0, #0
   1eb04:	db05      	blt.n	1eb12 <write_cb+0x42>
   1eb06:	8a22      	ldrh	r2, [r4, #16]
   1eb08:	4293      	cmp	r3, r2
   1eb0a:	d10b      	bne.n	1eb24 <write_cb+0x54>
	data->err = 0U;
   1eb0c:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1eb0e:	2501      	movs	r5, #1
   1eb10:	e005      	b.n	1eb1e <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1eb12:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1eb16:	d305      	bcc.n	1eb24 <write_cb+0x54>
		return -err;
   1eb18:	425b      	negs	r3, r3
   1eb1a:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1eb1c:	7523      	strb	r3, [r4, #20]
}
   1eb1e:	4628      	mov	r0, r5
   1eb20:	b003      	add	sp, #12
   1eb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1eb24:	230e      	movs	r3, #14
   1eb26:	e7f9      	b.n	1eb1c <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1eb28:	2500      	movs	r5, #0
   1eb2a:	e7f8      	b.n	1eb1e <write_cb+0x4e>

0001eb2c <bt_att_sent>:
{
   1eb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1eb2e:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   1eb32:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1eb36:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1eb38:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1eb3c:	b10b      	cbz	r3, 1eb42 <bt_att_sent+0x16>
		chan->sent(chan);
   1eb3e:	4638      	mov	r0, r7
   1eb40:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1eb42:	f3bf 8f5b 	dmb	ish
   1eb46:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1eb4a:	e853 2f00 	ldrex	r2, [r3]
   1eb4e:	f022 0210 	bic.w	r2, r2, #16
   1eb52:	e843 2100 	strex	r1, r2, [r3]
   1eb56:	2900      	cmp	r1, #0
   1eb58:	d1f7      	bne.n	1eb4a <bt_att_sent+0x1e>
   1eb5a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1eb5e:	b335      	cbz	r5, 1ebae <bt_att_sent+0x82>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1eb60:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1eb64:	b98b      	cbnz	r3, 1eb8a <bt_att_sent+0x5e>
   1eb66:	686b      	ldr	r3, [r5, #4]
   1eb68:	b17b      	cbz	r3, 1eb8a <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1eb6a:	1d28      	adds	r0, r5, #4
   1eb6c:	f7ff fdb0 	bl	1e6d0 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1eb70:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1eb72:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1eb74:	4638      	mov	r0, r7
   1eb76:	f7ff ff47 	bl	1ea08 <chan_req_send>
   1eb7a:	2800      	cmp	r0, #0
   1eb7c:	da17      	bge.n	1ebae <bt_att_sent+0x82>
Z_GENLIST_PREPEND(slist, snode)
   1eb7e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1eb80:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1eb82:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1eb84:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1eb86:	b903      	cbnz	r3, 1eb8a <bt_att_sent+0x5e>
	list->tail = node;
   1eb88:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1eb8a:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   1eb8e:	4638      	mov	r0, r7
   1eb90:	f7ff ff02 	bl	1e998 <process_queue>
	if (!err) {
   1eb94:	b158      	cbz	r0, 1ebae <bt_att_sent+0x82>
	err = process_queue(chan, &att->tx_queue);
   1eb96:	f105 010c 	add.w	r1, r5, #12
   1eb9a:	4638      	mov	r0, r7
   1eb9c:	f7ff fefc 	bl	1e998 <process_queue>
	if (!err) {
   1eba0:	b128      	cbz	r0, 1ebae <bt_att_sent+0x82>
   1eba2:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   1eba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ebaa:	f7fd bb63 	b.w	1c274 <z_impl_k_sem_give>
   1ebae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ebb0 <read_cb>:
{
   1ebb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1ebb4:	f8d2 8000 	ldr.w	r8, [r2]
{
   1ebb8:	4606      	mov	r6, r0
	data->err = 0x00;
   1ebba:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1ebbc:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1ebc0:	7317      	strb	r7, [r2, #12]
{
   1ebc2:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ebc4:	4631      	mov	r1, r6
   1ebc6:	2215      	movs	r2, #21
   1ebc8:	f000 fb61 	bl	1f28e <bt_gatt_check_perm>
   1ebcc:	4604      	mov	r4, r0
   1ebce:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1ebd0:	b9a0      	cbnz	r0, 1ebfc <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1ebd2:	e9cd 0000 	strd	r0, r0, [sp]
   1ebd6:	88ab      	ldrh	r3, [r5, #4]
   1ebd8:	68aa      	ldr	r2, [r5, #8]
   1ebda:	4631      	mov	r1, r6
   1ebdc:	4640      	mov	r0, r8
   1ebde:	f7ff fdf4 	bl	1e7ca <att_chan_read>
	if (ret < 0) {
   1ebe2:	1e03      	subs	r3, r0, #0
   1ebe4:	da0c      	bge.n	1ec00 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1ebe6:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1ebea:	bf26      	itte	cs
   1ebec:	425b      	negcs	r3, r3
   1ebee:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1ebf0:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1ebf2:	732b      	strb	r3, [r5, #12]
}
   1ebf4:	4620      	mov	r0, r4
   1ebf6:	b002      	add	sp, #8
   1ebf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1ebfc:	463c      	mov	r4, r7
   1ebfe:	e7f9      	b.n	1ebf4 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1ec00:	2401      	movs	r4, #1
   1ec02:	e7f7      	b.n	1ebf4 <read_cb+0x44>

0001ec04 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1ec04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec08:	4688      	mov	r8, r1
   1ec0a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1ec0c:	2101      	movs	r1, #1
   1ec0e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1ec10:	4605      	mov	r5, r0
   1ec12:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1ec14:	f7f9 feac 	bl	18970 <bt_att_chan_create_pdu>
	if (!buf) {
   1ec18:	4604      	mov	r4, r0
   1ec1a:	b170      	cbz	r0, 1ec3a <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   1ec1c:	2104      	movs	r1, #4
   1ec1e:	3008      	adds	r0, #8
   1ec20:	f000 fc09 	bl	1f436 <net_buf_simple_add>
	rsp->request = req;
   1ec24:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1ec28:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1ec2a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1ec2e:	4621      	mov	r1, r4
   1ec30:	4628      	mov	r0, r5
}
   1ec32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1ec36:	f7f9 be1d 	b.w	18874 <bt_att_chan_send_rsp.constprop.0>
}
   1ec3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ec3e <att_read_blob_req>:
{
   1ec3e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1ec40:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1ec42:	8813      	ldrh	r3, [r2, #0]
   1ec44:	8852      	ldrh	r2, [r2, #2]
   1ec46:	9200      	str	r2, [sp, #0]
   1ec48:	210c      	movs	r1, #12
   1ec4a:	220d      	movs	r2, #13
   1ec4c:	f7fa f8da 	bl	18e04 <att_read_rsp>
}
   1ec50:	b003      	add	sp, #12
   1ec52:	f85d fb04 	ldr.w	pc, [sp], #4

0001ec56 <att_read_req>:
{
   1ec56:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1ec58:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1ec5a:	2200      	movs	r2, #0
   1ec5c:	881b      	ldrh	r3, [r3, #0]
   1ec5e:	9200      	str	r2, [sp, #0]
   1ec60:	210a      	movs	r1, #10
   1ec62:	220b      	movs	r2, #11
   1ec64:	f7fa f8ce 	bl	18e04 <att_read_rsp>
}
   1ec68:	b003      	add	sp, #12
   1ec6a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ec6e <att_mtu_req>:
{
   1ec6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1ec70:	6803      	ldr	r3, [r0, #0]
{
   1ec72:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1ec74:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ec76:	f3bf 8f5b 	dmb	ish
   1ec7a:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   1ec7e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1ec82:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1ec86:	071b      	lsls	r3, r3, #28
   1ec88:	d41a      	bmi.n	1ecc0 <att_mtu_req+0x52>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1ec8a:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1ec8c:	881b      	ldrh	r3, [r3, #0]
   1ec8e:	2b16      	cmp	r3, #22
   1ec90:	d918      	bls.n	1ecc4 <att_mtu_req+0x56>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1ec92:	2202      	movs	r2, #2
   1ec94:	2103      	movs	r1, #3
   1ec96:	f7f9 ffb9 	bl	18c0c <bt_att_create_pdu>
	if (!pdu) {
   1ec9a:	4606      	mov	r6, r0
   1ec9c:	b1a0      	cbz	r0, 1ecc8 <att_mtu_req+0x5a>
   1ec9e:	2102      	movs	r1, #2
   1eca0:	3008      	adds	r0, #8
   1eca2:	f000 fbc8 	bl	1f436 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1eca6:	2717      	movs	r7, #23
   1eca8:	7007      	strb	r7, [r0, #0]
   1ecaa:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1ecac:	4631      	mov	r1, r6
   1ecae:	4628      	mov	r0, r5
   1ecb0:	f7f9 fde0 	bl	18874 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1ecb4:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1ecb8:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
	return 0;
   1ecbc:	4620      	mov	r0, r4
}
   1ecbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1ecc0:	2006      	movs	r0, #6
   1ecc2:	e7fc      	b.n	1ecbe <att_mtu_req+0x50>
		return BT_ATT_ERR_INVALID_PDU;
   1ecc4:	2004      	movs	r0, #4
   1ecc6:	e7fa      	b.n	1ecbe <att_mtu_req+0x50>
		return BT_ATT_ERR_UNLIKELY;
   1ecc8:	200e      	movs	r0, #14
   1ecca:	e7f8      	b.n	1ecbe <att_mtu_req+0x50>

0001eccc <bt_att_init>:
	bt_gatt_init();
   1eccc:	f7fa bdc2 	b.w	19854 <bt_gatt_init>

0001ecd0 <att_req_destroy>:
{
   1ecd0:	b510      	push	{r4, lr}
   1ecd2:	4604      	mov	r4, r0
	if (req->buf) {
   1ecd4:	6900      	ldr	r0, [r0, #16]
   1ecd6:	b108      	cbz	r0, 1ecdc <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1ecd8:	f7fb f954 	bl	19f84 <net_buf_unref>
	if (req->destroy) {
   1ecdc:	68a3      	ldr	r3, [r4, #8]
   1ecde:	b10b      	cbz	r3, 1ece4 <att_req_destroy+0x14>
		req->destroy(req);
   1ece0:	4620      	mov	r0, r4
   1ece2:	4798      	blx	r3
	bt_att_req_free(req);
   1ece4:	4620      	mov	r0, r4
}
   1ece6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1ecea:	f7fa b9eb 	b.w	190c4 <bt_att_req_free>

0001ecee <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1ecee:	898a      	ldrh	r2, [r1, #12]
   1ecf0:	6889      	ldr	r1, [r1, #8]
   1ecf2:	2300      	movs	r3, #0
   1ecf4:	f7fa b9f2 	b.w	190dc <att_handle_rsp>

0001ecf8 <att_chan_detach>:
{
   1ecf8:	b538      	push	{r3, r4, r5, lr}
   1ecfa:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1ecfc:	6800      	ldr	r0, [r0, #0]
   1ecfe:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   1ed02:	3024      	adds	r0, #36	; 0x24
   1ed04:	f7ff fcee 	bl	1e6e4 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   1ed08:	f504 7588 	add.w	r5, r4, #272	; 0x110
   1ed0c:	4628      	mov	r0, r5
   1ed0e:	f7fd fab1 	bl	1c274 <z_impl_k_sem_give>
   1ed12:	4628      	mov	r0, r5
   1ed14:	f7fd faae 	bl	1c274 <z_impl_k_sem_give>
   1ed18:	4628      	mov	r0, r5
   1ed1a:	f7fd faab 	bl	1c274 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1ed1e:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   1ed22:	2200      	movs	r2, #0
   1ed24:	2300      	movs	r3, #0
   1ed26:	4628      	mov	r0, r5
   1ed28:	f000 fb34 	bl	1f394 <net_buf_get>
   1ed2c:	4602      	mov	r2, r0
   1ed2e:	b950      	cbnz	r0, 1ed46 <att_chan_detach+0x4e>
	if (chan->req) {
   1ed30:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1ed34:	b123      	cbz	r3, 1ed40 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1ed36:	4601      	mov	r1, r0
   1ed38:	230e      	movs	r3, #14
   1ed3a:	4620      	mov	r0, r4
   1ed3c:	f7fa f9ce 	bl	190dc <att_handle_rsp>
	chan->att = NULL;
   1ed40:	2300      	movs	r3, #0
   1ed42:	6023      	str	r3, [r4, #0]
}
   1ed44:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1ed46:	f7fb f91d 	bl	19f84 <net_buf_unref>
   1ed4a:	e7ea      	b.n	1ed22 <att_chan_detach+0x2a>

0001ed4c <bt_att_disconnected>:
{
   1ed4c:	b538      	push	{r3, r4, r5, lr}
   1ed4e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1ed50:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1ed54:	f7ff ffd0 	bl	1ecf8 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1ed58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ed5a:	b93b      	cbnz	r3, 1ed6c <bt_att_disconnected+0x20>
	att_reset(att);
   1ed5c:	4628      	mov	r0, r5
   1ed5e:	f7fa fa37 	bl	191d0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1ed62:	6820      	ldr	r0, [r4, #0]
}
   1ed64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1ed68:	f7fa bffe 	b.w	19d68 <bt_gatt_disconnected>
}
   1ed6c:	bd38      	pop	{r3, r4, r5, pc}

0001ed6e <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1ed6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ed72:	4605      	mov	r5, r0
   1ed74:	460e      	mov	r6, r1
   1ed76:	4614      	mov	r4, r2
   1ed78:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1ed7a:	f7f9 fcc1 	bl	18700 <att_get>
	if (!att) {
   1ed7e:	4607      	mov	r7, r0
   1ed80:	b938      	cbnz	r0, 1ed92 <bt_att_send+0x24>
		net_buf_unref(buf);
   1ed82:	4630      	mov	r0, r6
   1ed84:	f7fb f8fe 	bl	19f84 <net_buf_unref>
		return -ENOTCONN;
   1ed88:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   1ed8c:	b002      	add	sp, #8
   1ed8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1ed92:	b144      	cbz	r4, 1eda6 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1ed94:	f8cd 8000 	str.w	r8, [sp]
   1ed98:	4623      	mov	r3, r4
   1ed9a:	4632      	mov	r2, r6
   1ed9c:	2104      	movs	r1, #4
   1ed9e:	4628      	mov	r0, r5
   1eda0:	f7ff fc5c 	bl	1e65c <bt_l2cap_send_cb>
   1eda4:	e7f2      	b.n	1ed8c <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1eda6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1eda8:	b184      	cbz	r4, 1edcc <bt_att_send+0x5e>
   1edaa:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   1edae:	d00f      	beq.n	1edd0 <bt_att_send+0x62>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1edb0:	6824      	ldr	r4, [r4, #0]
   1edb2:	b10c      	cbz	r4, 1edb8 <bt_att_send+0x4a>
   1edb4:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   1edb8:	2000      	movs	r0, #0
   1edba:	b95d      	cbnz	r5, 1edd4 <bt_att_send+0x66>
	if (ret < 0) {
   1edbc:	b1c8      	cbz	r0, 1edf2 <bt_att_send+0x84>
		net_buf_put(&att->tx_queue, buf);
   1edbe:	f107 000c 	add.w	r0, r7, #12
   1edc2:	4631      	mov	r1, r6
   1edc4:	f000 fb04 	bl	1f3d0 <net_buf_put>
	return 0;
   1edc8:	4628      	mov	r0, r5
   1edca:	e7df      	b.n	1ed8c <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1edcc:	4625      	mov	r5, r4
   1edce:	e7f3      	b.n	1edb8 <bt_att_send+0x4a>
   1edd0:	462c      	mov	r4, r5
   1edd2:	e7f1      	b.n	1edb8 <bt_att_send+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   1edd4:	2200      	movs	r2, #0
   1edd6:	2300      	movs	r3, #0
   1edd8:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1eddc:	f7fd fa70 	bl	1c2c0 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1ede0:	2800      	cmp	r0, #0
   1ede2:	db08      	blt.n	1edf6 <bt_att_send+0x88>
	return chan_send(chan, buf, cb);
   1ede4:	2200      	movs	r2, #0
   1ede6:	4631      	mov	r1, r6
   1ede8:	4628      	mov	r0, r5
   1edea:	f7f9 fc13 	bl	18614 <chan_send>
		if (ret >= 0) {
   1edee:	2800      	cmp	r0, #0
   1edf0:	db03      	blt.n	1edfa <bt_att_send+0x8c>
	return 0;
   1edf2:	2000      	movs	r0, #0
   1edf4:	e7ca      	b.n	1ed8c <bt_att_send+0x1e>
			return -EAGAIN;
   1edf6:	f06f 000a 	mvn.w	r0, #10
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1edfa:	b154      	cbz	r4, 1ee12 <bt_att_send+0xa4>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1edfc:	f514 7296 	adds.w	r2, r4, #300	; 0x12c
   1ee00:	d004      	beq.n	1ee0c <bt_att_send+0x9e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ee02:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   1ee06:	b10a      	cbz	r2, 1ee0c <bt_att_send+0x9e>
   1ee08:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
   1ee0c:	4625      	mov	r5, r4
   1ee0e:	4614      	mov	r4, r2
   1ee10:	e7d3      	b.n	1edba <bt_att_send+0x4c>
   1ee12:	4622      	mov	r2, r4
   1ee14:	e7fa      	b.n	1ee0c <bt_att_send+0x9e>

0001ee16 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1ee16:	b570      	push	{r4, r5, r6, lr}
   1ee18:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1ee1a:	f7f9 fc71 	bl	18700 <att_get>
	if (!att) {
   1ee1e:	4605      	mov	r5, r0
   1ee20:	b930      	cbnz	r0, 1ee30 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   1ee22:	6920      	ldr	r0, [r4, #16]
   1ee24:	f7fb f8ae 	bl	19f84 <net_buf_unref>
		req->buf = NULL;
   1ee28:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   1ee2a:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   1ee2e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee30:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ee32:	b153      	cbz	r3, 1ee4a <bt_att_req_send+0x34>
   1ee34:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1ee38:	d007      	beq.n	1ee4a <bt_att_req_send+0x34>
   1ee3a:	681e      	ldr	r6, [r3, #0]
   1ee3c:	b10e      	cbz	r6, 1ee42 <bt_att_req_send+0x2c>
   1ee3e:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   1ee42:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1ee46:	b143      	cbz	r3, 1ee5a <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee48:	b96e      	cbnz	r6, 1ee66 <bt_att_req_send+0x50>
	parent->next = child;
   1ee4a:	2000      	movs	r0, #0
   1ee4c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1ee4e:	68ab      	ldr	r3, [r5, #8]
   1ee50:	b9a3      	cbnz	r3, 1ee7c <bt_att_req_send+0x66>
	list->head = node;
   1ee52:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   1ee56:	4618      	mov	r0, r3
}
   1ee58:	e7e9      	b.n	1ee2e <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   1ee5a:	4621      	mov	r1, r4
   1ee5c:	f7ff fdfa 	bl	1ea54 <bt_att_chan_req_send>
			if (ret >= 0) {
   1ee60:	2800      	cmp	r0, #0
   1ee62:	dbf1      	blt.n	1ee48 <bt_att_req_send+0x32>
   1ee64:	e7e3      	b.n	1ee2e <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee66:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   1ee6a:	d004      	beq.n	1ee76 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ee6c:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee70:	b10b      	cbz	r3, 1ee76 <bt_att_req_send+0x60>
   1ee72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   1ee76:	4630      	mov	r0, r6
   1ee78:	461e      	mov	r6, r3
   1ee7a:	e7e2      	b.n	1ee42 <bt_att_req_send+0x2c>
	parent->next = child;
   1ee7c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ee7e:	60ac      	str	r4, [r5, #8]
}
   1ee80:	e7d5      	b.n	1ee2e <bt_att_req_send+0x18>

0001ee82 <gatt_ccc_changed>:
{
   1ee82:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1ee84:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1ee86:	895a      	ldrh	r2, [r3, #10]
   1ee88:	428a      	cmp	r2, r1
   1ee8a:	d003      	beq.n	1ee94 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1ee8c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1ee8e:	68db      	ldr	r3, [r3, #12]
   1ee90:	b103      	cbz	r3, 1ee94 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1ee92:	4718      	bx	r3
}
   1ee94:	4770      	bx	lr

0001ee96 <gatt_indicate_rsp>:
{
   1ee96:	b510      	push	{r4, lr}
   1ee98:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   1ee9a:	7da3      	ldrb	r3, [r4, #22]
   1ee9c:	3b01      	subs	r3, #1
{
   1ee9e:	460a      	mov	r2, r1
	params->_ref--;
   1eea0:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1eea2:	4621      	mov	r1, r4
   1eea4:	68a3      	ldr	r3, [r4, #8]
   1eea6:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1eea8:	68e3      	ldr	r3, [r4, #12]
   1eeaa:	b12b      	cbz	r3, 1eeb8 <gatt_indicate_rsp+0x22>
   1eeac:	7da2      	ldrb	r2, [r4, #22]
   1eeae:	b91a      	cbnz	r2, 1eeb8 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1eeb0:	4620      	mov	r0, r4
}
   1eeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1eeb6:	4718      	bx	r3
}
   1eeb8:	bd10      	pop	{r4, pc}

0001eeba <match_uuid>:
	data->attr = attr;
   1eeba:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1eebc:	8091      	strh	r1, [r2, #4]
}
   1eebe:	2000      	movs	r0, #0
   1eec0:	4770      	bx	lr

0001eec2 <gen_hash_m>:
{
   1eec2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1eec4:	6807      	ldr	r7, [r0, #0]
   1eec6:	783d      	ldrb	r5, [r7, #0]
{
   1eec8:	b089      	sub	sp, #36	; 0x24
   1eeca:	4606      	mov	r6, r0
   1eecc:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1eece:	b10d      	cbz	r5, 1eed4 <gen_hash_m+0x12>
	switch (u16->val) {
   1eed0:	2501      	movs	r5, #1
   1eed2:	e014      	b.n	1eefe <gen_hash_m+0x3c>
   1eed4:	887b      	ldrh	r3, [r7, #2]
   1eed6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1eeda:	d004      	beq.n	1eee6 <gen_hash_m+0x24>
   1eedc:	d812      	bhi.n	1ef04 <gen_hash_m+0x42>
   1eede:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1eee2:	2b03      	cmp	r3, #3
   1eee4:	d8f4      	bhi.n	1eed0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1eee6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1eeea:	2202      	movs	r2, #2
   1eeec:	f10d 010e 	add.w	r1, sp, #14
   1eef0:	4620      	mov	r0, r4
   1eef2:	f7fe ff98 	bl	1de26 <tc_cmac_update>
   1eef6:	b9e0      	cbnz	r0, 1ef32 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1eef8:	f06f 0315 	mvn.w	r3, #21
   1eefc:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1eefe:	4628      	mov	r0, r5
   1ef00:	b009      	add	sp, #36	; 0x24
   1ef02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1ef04:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1ef08:	33ff      	adds	r3, #255	; 0xff
   1ef0a:	b29b      	uxth	r3, r3
   1ef0c:	2b04      	cmp	r3, #4
   1ef0e:	d8df      	bhi.n	1eed0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1ef10:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ef14:	2202      	movs	r2, #2
   1ef16:	f10d 010e 	add.w	r1, sp, #14
   1ef1a:	4620      	mov	r0, r4
   1ef1c:	f7fe ff83 	bl	1de26 <tc_cmac_update>
   1ef20:	2800      	cmp	r0, #0
   1ef22:	d0e9      	beq.n	1eef8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1ef24:	887b      	ldrh	r3, [r7, #2]
   1ef26:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ef2a:	2202      	movs	r2, #2
   1ef2c:	f10d 010e 	add.w	r1, sp, #14
   1ef30:	e017      	b.n	1ef62 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1ef32:	887b      	ldrh	r3, [r7, #2]
   1ef34:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ef38:	2202      	movs	r2, #2
   1ef3a:	f10d 010e 	add.w	r1, sp, #14
   1ef3e:	4620      	mov	r0, r4
   1ef40:	f7fe ff71 	bl	1de26 <tc_cmac_update>
   1ef44:	2800      	cmp	r0, #0
   1ef46:	d0d7      	beq.n	1eef8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ef48:	2000      	movs	r0, #0
   1ef4a:	2310      	movs	r3, #16
   1ef4c:	eb0d 0203 	add.w	r2, sp, r3
   1ef50:	6877      	ldr	r7, [r6, #4]
   1ef52:	9000      	str	r0, [sp, #0]
   1ef54:	4631      	mov	r1, r6
   1ef56:	47b8      	blx	r7
		if (len < 0) {
   1ef58:	1e02      	subs	r2, r0, #0
   1ef5a:	da01      	bge.n	1ef60 <gen_hash_m+0x9e>
			state->err = len;
   1ef5c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1ef5e:	e7ce      	b.n	1eefe <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1ef60:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ef62:	4620      	mov	r0, r4
   1ef64:	f7fe ff5f 	bl	1de26 <tc_cmac_update>
   1ef68:	2800      	cmp	r0, #0
   1ef6a:	d1b1      	bne.n	1eed0 <gen_hash_m+0xe>
   1ef6c:	e7c4      	b.n	1eef8 <gen_hash_m+0x36>

0001ef6e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ef6e:	2301      	movs	r3, #1
   1ef70:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ef72:	f3bf 8f5b 	dmb	ish
   1ef76:	e850 2f00 	ldrex	r2, [r0]
   1ef7a:	431a      	orrs	r2, r3
   1ef7c:	e840 2100 	strex	r1, r2, [r0]
   1ef80:	2900      	cmp	r1, #0
   1ef82:	d1f8      	bne.n	1ef76 <atomic_set_bit+0x8>
   1ef84:	f3bf 8f5b 	dmb	ish
}
   1ef88:	4770      	bx	lr

0001ef8a <sc_restore_rsp>:
{
   1ef8a:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1ef8c:	f7fa fa02 	bl	19394 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1ef90:	b140      	cbz	r0, 1efa4 <sc_restore_rsp+0x1a>
   1ef92:	7a03      	ldrb	r3, [r0, #8]
   1ef94:	07db      	lsls	r3, r3, #31
   1ef96:	d505      	bpl.n	1efa4 <sc_restore_rsp+0x1a>
}
   1ef98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ef9c:	2100      	movs	r1, #0
   1ef9e:	300c      	adds	r0, #12
   1efa0:	f7ff bfe5 	b.w	1ef6e <atomic_set_bit>
}
   1efa4:	bd08      	pop	{r3, pc}

0001efa6 <find_ccc_cfg>:
{
   1efa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1efa8:	460c      	mov	r4, r1
   1efaa:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1efac:	b148      	cbz	r0, 1efc2 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1efae:	7809      	ldrb	r1, [r1, #0]
   1efb0:	462a      	mov	r2, r5
   1efb2:	f7ff fa65 	bl	1e480 <bt_conn_is_peer_addr_le>
   1efb6:	2800      	cmp	r0, #0
	return NULL;
   1efb8:	bf08      	it	eq
   1efba:	2400      	moveq	r4, #0
}
   1efbc:	4620      	mov	r0, r4
   1efbe:	b003      	add	sp, #12
   1efc0:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1efc2:	9000      	str	r0, [sp, #0]
   1efc4:	2207      	movs	r2, #7
   1efc6:	f8cd 0003 	str.w	r0, [sp, #3]
   1efca:	4669      	mov	r1, sp
   1efcc:	4628      	mov	r0, r5
   1efce:	f7ff f813 	bl	1dff8 <memcmp>
   1efd2:	2800      	cmp	r0, #0
	return NULL;
   1efd4:	bf18      	it	ne
   1efd6:	2400      	movne	r4, #0
   1efd8:	e7f0      	b.n	1efbc <find_ccc_cfg+0x16>

0001efda <clear_cf_cfg>:
{
   1efda:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1efdc:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1efde:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   1efe0:	2207      	movs	r2, #7
   1efe2:	4669      	mov	r1, sp
   1efe4:	3001      	adds	r0, #1
   1efe6:	9500      	str	r5, [sp, #0]
   1efe8:	f8cd 5003 	str.w	r5, [sp, #3]
   1efec:	f7ff f814 	bl	1e018 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1eff0:	f104 0008 	add.w	r0, r4, #8
   1eff4:	2201      	movs	r2, #1
   1eff6:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1eff8:	340c      	adds	r4, #12
   1effa:	f7ff f838 	bl	1e06e <memset>
   1effe:	f3bf 8f5b 	dmb	ish
   1f002:	e854 3f00 	ldrex	r3, [r4]
   1f006:	e844 5200 	strex	r2, r5, [r4]
   1f00a:	2a00      	cmp	r2, #0
   1f00c:	d1f9      	bne.n	1f002 <clear_cf_cfg+0x28>
   1f00e:	f3bf 8f5b 	dmb	ish
}
   1f012:	b003      	add	sp, #12
   1f014:	bd30      	pop	{r4, r5, pc}

0001f016 <read_appearance>:
{
   1f016:	b513      	push	{r0, r1, r4, lr}
   1f018:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f01c:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f01e:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f020:	f240 3241 	movw	r2, #833	; 0x341
   1f024:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f028:	d80d      	bhi.n	1f046 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1f02a:	f1c1 0402 	rsb	r4, r1, #2
   1f02e:	429c      	cmp	r4, r3
   1f030:	bfa8      	it	ge
   1f032:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f034:	f10d 0306 	add.w	r3, sp, #6
   1f038:	4622      	mov	r2, r4
   1f03a:	4419      	add	r1, r3
   1f03c:	f7fe ffec 	bl	1e018 <memcpy>
}
   1f040:	4620      	mov	r0, r4
   1f042:	b002      	add	sp, #8
   1f044:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f046:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f04a:	e7f9      	b.n	1f040 <read_appearance+0x2a>

0001f04c <read_name>:
{
   1f04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f050:	4698      	mov	r8, r3
   1f052:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1f056:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1f058:	f7f7 fbf2 	bl	16840 <bt_get_name>
   1f05c:	4607      	mov	r7, r0
				 strlen(name));
   1f05e:	f7fe ffaf 	bl	1dfc0 <strlen>
	if (offset > value_len) {
   1f062:	b283      	uxth	r3, r0
   1f064:	42b3      	cmp	r3, r6
   1f066:	d30c      	bcc.n	1f082 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1f068:	1b9c      	subs	r4, r3, r6
   1f06a:	4544      	cmp	r4, r8
   1f06c:	bfa8      	it	ge
   1f06e:	4644      	movge	r4, r8
   1f070:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f072:	4622      	mov	r2, r4
   1f074:	19b9      	adds	r1, r7, r6
   1f076:	4628      	mov	r0, r5
   1f078:	f7fe ffce 	bl	1e018 <memcpy>
}
   1f07c:	4620      	mov	r0, r4
   1f07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f082:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f086:	e7f9      	b.n	1f07c <read_name+0x30>

0001f088 <bt_gatt_attr_read_ccc>:
{
   1f088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f08a:	68c9      	ldr	r1, [r1, #12]
{
   1f08c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1f090:	4615      	mov	r5, r2
   1f092:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1f094:	f7ff ff87 	bl	1efa6 <find_ccc_cfg>
	if (cfg) {
   1f098:	b100      	cbz	r0, 1f09c <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1f09a:	8900      	ldrh	r0, [r0, #8]
   1f09c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1f0a0:	2e02      	cmp	r6, #2
   1f0a2:	d80e      	bhi.n	1f0c2 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1f0a4:	f1c6 0402 	rsb	r4, r6, #2
   1f0a8:	42bc      	cmp	r4, r7
   1f0aa:	bfa8      	it	ge
   1f0ac:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f0ae:	f10d 0306 	add.w	r3, sp, #6
   1f0b2:	4622      	mov	r2, r4
   1f0b4:	1999      	adds	r1, r3, r6
   1f0b6:	4628      	mov	r0, r5
   1f0b8:	f7fe ffae 	bl	1e018 <memcpy>
}
   1f0bc:	4620      	mov	r0, r4
   1f0be:	b003      	add	sp, #12
   1f0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f0c2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f0c6:	e7f9      	b.n	1f0bc <bt_gatt_attr_read_ccc+0x34>

0001f0c8 <cf_read>:
{
   1f0c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f0ca:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1f0cc:	2300      	movs	r3, #0
{
   1f0ce:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1f0d2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f0d6:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1f0d8:	f7fa f95c 	bl	19394 <find_cf_cfg>
	if (cfg) {
   1f0dc:	b128      	cbz	r0, 1f0ea <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1f0de:	f100 0108 	add.w	r1, r0, #8
   1f0e2:	2201      	movs	r2, #1
   1f0e4:	a801      	add	r0, sp, #4
   1f0e6:	f7fe ff97 	bl	1e018 <memcpy>
	if (offset > value_len) {
   1f0ea:	2e01      	cmp	r6, #1
   1f0ec:	d80d      	bhi.n	1f10a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1f0ee:	f1c6 0401 	rsb	r4, r6, #1
   1f0f2:	42bc      	cmp	r4, r7
   1f0f4:	bfa8      	it	ge
   1f0f6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f0f8:	ab01      	add	r3, sp, #4
   1f0fa:	4622      	mov	r2, r4
   1f0fc:	1999      	adds	r1, r3, r6
   1f0fe:	4628      	mov	r0, r5
   1f100:	f7fe ff8a 	bl	1e018 <memcpy>
}
   1f104:	4620      	mov	r0, r4
   1f106:	b003      	add	sp, #12
   1f108:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f10a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f10e:	e7f9      	b.n	1f104 <cf_read+0x3c>

0001f110 <bt_gatt_attr_read_service>:
{
   1f110:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1f112:	68c9      	ldr	r1, [r1, #12]
{
   1f114:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1f118:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1f11a:	780b      	ldrb	r3, [r1, #0]
{
   1f11c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1f11e:	b993      	cbnz	r3, 1f146 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f120:	884b      	ldrh	r3, [r1, #2]
   1f122:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1f126:	2d02      	cmp	r5, #2
   1f128:	d819      	bhi.n	1f15e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f12a:	f1c5 0202 	rsb	r2, r5, #2
   1f12e:	4294      	cmp	r4, r2
   1f130:	bfa8      	it	ge
   1f132:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f134:	f10d 0306 	add.w	r3, sp, #6
   1f138:	4622      	mov	r2, r4
   1f13a:	1959      	adds	r1, r3, r5
   1f13c:	f7fe ff6c 	bl	1e018 <memcpy>
}
   1f140:	4620      	mov	r0, r4
   1f142:	b003      	add	sp, #12
   1f144:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1f146:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1f148:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1f14c:	d807      	bhi.n	1f15e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f14e:	f1c5 0210 	rsb	r2, r5, #16
   1f152:	4294      	cmp	r4, r2
   1f154:	bfa8      	it	ge
   1f156:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f158:	4622      	mov	r2, r4
   1f15a:	4429      	add	r1, r5
   1f15c:	e7ee      	b.n	1f13c <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f15e:	f06f 0406 	mvn.w	r4, #6
   1f162:	e7ed      	b.n	1f140 <bt_gatt_attr_read_service+0x30>

0001f164 <sc_clear>:
{
   1f164:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f166:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1f16a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f16c:	4631      	mov	r1, r6
   1f16e:	7a00      	ldrb	r0, [r0, #8]
   1f170:	f7ff f8f2 	bl	1e358 <bt_addr_le_is_bonded>
   1f174:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1f176:	4631      	mov	r1, r6
   1f178:	f7fa f8fc 	bl	19374 <find_sc_cfg>
	if (!cfg) {
   1f17c:	b128      	cbz	r0, 1f18a <sc_clear+0x26>
}
   1f17e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1f182:	220c      	movs	r2, #12
   1f184:	2100      	movs	r1, #0
   1f186:	f7fe bf72 	b.w	1e06e <memset>
}
   1f18a:	bd70      	pop	{r4, r5, r6, pc}

0001f18c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f18c:	2a02      	cmp	r2, #2
{
   1f18e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f190:	d108      	bne.n	1f1a4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f192:	2300      	movs	r3, #0
   1f194:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f198:	461a      	mov	r2, r3
   1f19a:	7a00      	ldrb	r0, [r0, #8]
   1f19c:	f7fa fa6c 	bl	19678 <sc_save>
}
   1f1a0:	2002      	movs	r0, #2
   1f1a2:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f1a4:	f7ff ffde 	bl	1f164 <sc_clear>
   1f1a8:	e7fa      	b.n	1f1a0 <sc_ccc_cfg_write+0x14>

0001f1aa <bt_gatt_attr_read>:
{
   1f1aa:	b538      	push	{r3, r4, r5, lr}
   1f1ac:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f1b0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1f1b4:	42a9      	cmp	r1, r5
{
   1f1b6:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f1b8:	d80b      	bhi.n	1f1d2 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1f1ba:	1a6d      	subs	r5, r5, r1
   1f1bc:	429d      	cmp	r5, r3
   1f1be:	bfa8      	it	ge
   1f1c0:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f1c2:	9b05      	ldr	r3, [sp, #20]
   1f1c4:	b2ad      	uxth	r5, r5
   1f1c6:	462a      	mov	r2, r5
   1f1c8:	4419      	add	r1, r3
   1f1ca:	f7fe ff25 	bl	1e018 <memcpy>
}
   1f1ce:	4628      	mov	r0, r5
   1f1d0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f1d2:	f06f 0506 	mvn.w	r5, #6
   1f1d6:	e7fa      	b.n	1f1ce <bt_gatt_attr_read+0x24>

0001f1d8 <bt_gatt_attr_value_handle>:
{
   1f1d8:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f1da:	4604      	mov	r4, r0
   1f1dc:	b910      	cbnz	r0, 1f1e4 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f1de:	2000      	movs	r0, #0
}
   1f1e0:	b002      	add	sp, #8
   1f1e2:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f1e4:	2300      	movs	r3, #0
   1f1e6:	f88d 3004 	strb.w	r3, [sp, #4]
   1f1ea:	6800      	ldr	r0, [r0, #0]
   1f1ec:	f642 0303 	movw	r3, #10243	; 0x2803
   1f1f0:	a901      	add	r1, sp, #4
   1f1f2:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f1f6:	f7fe ff75 	bl	1e0e4 <bt_uuid_cmp>
   1f1fa:	2800      	cmp	r0, #0
   1f1fc:	d1ef      	bne.n	1f1de <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f1fe:	68e3      	ldr	r3, [r4, #12]
   1f200:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f202:	2800      	cmp	r0, #0
   1f204:	d1ec      	bne.n	1f1e0 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f206:	4620      	mov	r0, r4
   1f208:	f7fa fb7e 	bl	19908 <bt_gatt_attr_get_handle>
   1f20c:	3001      	adds	r0, #1
   1f20e:	b280      	uxth	r0, r0
	return handle;
   1f210:	e7e6      	b.n	1f1e0 <bt_gatt_attr_value_handle+0x8>

0001f212 <bt_gatt_attr_read_chrc>:
{
   1f212:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f214:	68cf      	ldr	r7, [r1, #12]
{
   1f216:	b087      	sub	sp, #28
   1f218:	4608      	mov	r0, r1
   1f21a:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1f21c:	79bb      	ldrb	r3, [r7, #6]
   1f21e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f222:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1f226:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f228:	f7ff ffd6 	bl	1f1d8 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f22c:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f22e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f232:	780b      	ldrb	r3, [r1, #0]
   1f234:	b99b      	cbnz	r3, 1f25e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f236:	884b      	ldrh	r3, [r1, #2]
   1f238:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1f23c:	2105      	movs	r1, #5
	if (offset > value_len) {
   1f23e:	42b1      	cmp	r1, r6
   1f240:	d315      	bcc.n	1f26e <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1f242:	1b89      	subs	r1, r1, r6
   1f244:	42a1      	cmp	r1, r4
   1f246:	bfa8      	it	ge
   1f248:	4621      	movge	r1, r4
   1f24a:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1f24c:	ab01      	add	r3, sp, #4
   1f24e:	4622      	mov	r2, r4
   1f250:	1999      	adds	r1, r3, r6
   1f252:	4628      	mov	r0, r5
   1f254:	f7fe fee0 	bl	1e018 <memcpy>
}
   1f258:	4620      	mov	r0, r4
   1f25a:	b007      	add	sp, #28
   1f25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f25e:	3101      	adds	r1, #1
   1f260:	2210      	movs	r2, #16
   1f262:	f10d 0007 	add.w	r0, sp, #7
   1f266:	f7fe fed7 	bl	1e018 <memcpy>
		value_len += 16U;
   1f26a:	2113      	movs	r1, #19
   1f26c:	e7e7      	b.n	1f23e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f26e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f272:	e7f1      	b.n	1f258 <bt_gatt_attr_read_chrc+0x46>

0001f274 <bt_gatt_foreach_attr>:
{
   1f274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f276:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f27a:	2300      	movs	r3, #0
   1f27c:	9300      	str	r3, [sp, #0]
   1f27e:	461a      	mov	r2, r3
   1f280:	f7fa fb72 	bl	19968 <bt_gatt_foreach_attr_type>
}
   1f284:	b005      	add	sp, #20
   1f286:	f85d fb04 	ldr.w	pc, [sp], #4

0001f28a <db_hash_process>:
	db_hash_gen(true);
   1f28a:	f7fa bbc7 	b.w	19a1c <db_hash_gen.isra.0>

0001f28e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1f28e:	07d3      	lsls	r3, r2, #31
{
   1f290:	b510      	push	{r4, lr}
   1f292:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1f294:	d504      	bpl.n	1f2a0 <bt_gatt_check_perm+0x12>
   1f296:	f014 0f15 	tst.w	r4, #21
   1f29a:	d017      	beq.n	1f2cc <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f29c:	684b      	ldr	r3, [r1, #4]
   1f29e:	b1ab      	cbz	r3, 1f2cc <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1f2a0:	0793      	lsls	r3, r2, #30
   1f2a2:	d504      	bpl.n	1f2ae <bt_gatt_check_perm+0x20>
   1f2a4:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1f2a8:	d012      	beq.n	1f2d0 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1f2aa:	688b      	ldr	r3, [r1, #8]
   1f2ac:	b183      	cbz	r3, 1f2d0 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1f2ae:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1f2b0:	f014 0f30 	tst.w	r4, #48	; 0x30
   1f2b4:	d104      	bne.n	1f2c0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1f2b6:	f014 000c 	ands.w	r0, r4, #12
   1f2ba:	bf18      	it	ne
   1f2bc:	200f      	movne	r0, #15
}
   1f2be:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1f2c0:	f7ff f8d3 	bl	1e46a <bt_conn_get_security>
   1f2c4:	2802      	cmp	r0, #2
   1f2c6:	d8f6      	bhi.n	1f2b6 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1f2c8:	2005      	movs	r0, #5
   1f2ca:	e7f8      	b.n	1f2be <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1f2cc:	2002      	movs	r0, #2
   1f2ce:	e7f6      	b.n	1f2be <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1f2d0:	2003      	movs	r0, #3
   1f2d2:	e7f4      	b.n	1f2be <bt_gatt_check_perm+0x30>

0001f2d4 <bt_gatt_change_aware>:
{
   1f2d4:	b510      	push	{r4, lr}
   1f2d6:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1f2d8:	f7fa f85c 	bl	19394 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f2dc:	4603      	mov	r3, r0
   1f2de:	b910      	cbnz	r0, 1f2e6 <bt_gatt_change_aware+0x12>
		return true;
   1f2e0:	2401      	movs	r4, #1
}
   1f2e2:	4620      	mov	r0, r4
   1f2e4:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f2e6:	7a02      	ldrb	r2, [r0, #8]
   1f2e8:	07d2      	lsls	r2, r2, #31
   1f2ea:	d5f9      	bpl.n	1f2e0 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f2ec:	f3bf 8f5b 	dmb	ish
   1f2f0:	68d9      	ldr	r1, [r3, #12]
   1f2f2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1f2f6:	f011 0101 	ands.w	r1, r1, #1
   1f2fa:	f100 000c 	add.w	r0, r0, #12
   1f2fe:	d1ef      	bne.n	1f2e0 <bt_gatt_change_aware+0xc>
	if (!req) {
   1f300:	2c00      	cmp	r4, #0
   1f302:	d0ee      	beq.n	1f2e2 <bt_gatt_change_aware+0xe>
   1f304:	f3bf 8f5b 	dmb	ish
   1f308:	68db      	ldr	r3, [r3, #12]
   1f30a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f30e:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1f312:	079b      	lsls	r3, r3, #30
   1f314:	d50e      	bpl.n	1f334 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f316:	f3bf 8f5b 	dmb	ish
   1f31a:	e850 3f00 	ldrex	r3, [r0]
   1f31e:	f023 0302 	bic.w	r3, r3, #2
   1f322:	e840 3200 	strex	r2, r3, [r0]
   1f326:	2a00      	cmp	r2, #0
   1f328:	d1f7      	bne.n	1f31a <bt_gatt_change_aware+0x46>
   1f32a:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1f32e:	f7ff fe1e 	bl	1ef6e <atomic_set_bit>
	return false;
   1f332:	e7d6      	b.n	1f2e2 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1f334:	2101      	movs	r1, #1
   1f336:	e7fa      	b.n	1f32e <bt_gatt_change_aware+0x5a>

0001f338 <bt_smp_recv>:
{
   1f338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1f33a:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   1f33c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1f33e:	f04f 32ff 	mov.w	r2, #4294967295
   1f342:	f04f 33ff 	mov.w	r3, #4294967295
   1f346:	4608      	mov	r0, r1
   1f348:	f7ff f985 	bl	1e656 <bt_l2cap_create_pdu_timeout>
   1f34c:	f100 0608 	add.w	r6, r0, #8
   1f350:	4604      	mov	r4, r0
   1f352:	2101      	movs	r1, #1
   1f354:	4630      	mov	r0, r6
   1f356:	f000 f86e 	bl	1f436 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1f35a:	2505      	movs	r5, #5
   1f35c:	7005      	strb	r5, [r0, #0]
   1f35e:	2101      	movs	r1, #1
   1f360:	4630      	mov	r0, r6
   1f362:	f000 f868 	bl	1f436 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1f366:	7005      	strb	r5, [r0, #0]
   1f368:	2500      	movs	r5, #0
   1f36a:	9500      	str	r5, [sp, #0]
   1f36c:	462b      	mov	r3, r5
   1f36e:	4622      	mov	r2, r4
   1f370:	2106      	movs	r1, #6
   1f372:	4638      	mov	r0, r7
   1f374:	f7ff f972 	bl	1e65c <bt_l2cap_send_cb>
}
   1f378:	4628      	mov	r0, r5
   1f37a:	b003      	add	sp, #12
   1f37c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f37e <bt_smp_sign>:
   1f37e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1f382:	4770      	bx	lr

0001f384 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1f384:	2000      	movs	r0, #0
   1f386:	4770      	bx	lr

0001f388 <fixed_data_unref>:
}
   1f388:	4770      	bx	lr

0001f38a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f38a:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1f38c:	6849      	ldr	r1, [r1, #4]
   1f38e:	6809      	ldr	r1, [r1, #0]
   1f390:	f7fa bd6c 	b.w	19e6c <net_buf_alloc_len>

0001f394 <net_buf_get>:
{
   1f394:	b570      	push	{r4, r5, r6, lr}
   1f396:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1f398:	f7fc fb9a 	bl	1bad0 <z_impl_k_queue_get>
	if (!buf) {
   1f39c:	4605      	mov	r5, r0
   1f39e:	b128      	cbz	r0, 1f3ac <net_buf_get+0x18>
   1f3a0:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f3a2:	7963      	ldrb	r3, [r4, #5]
   1f3a4:	f013 0301 	ands.w	r3, r3, #1
   1f3a8:	d102      	bne.n	1f3b0 <net_buf_get+0x1c>
	frag->frags = NULL;
   1f3aa:	6023      	str	r3, [r4, #0]
}
   1f3ac:	4628      	mov	r0, r5
   1f3ae:	bd70      	pop	{r4, r5, r6, pc}
   1f3b0:	2300      	movs	r3, #0
   1f3b2:	2200      	movs	r2, #0
   1f3b4:	4630      	mov	r0, r6
   1f3b6:	f7fc fb8b 	bl	1bad0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1f3ba:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1f3bc:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1f3be:	f023 0301 	bic.w	r3, r3, #1
   1f3c2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f3c4:	4604      	mov	r4, r0
   1f3c6:	e7ec      	b.n	1f3a2 <net_buf_get+0xe>

0001f3c8 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1f3c8:	6883      	ldr	r3, [r0, #8]
   1f3ca:	440b      	add	r3, r1
   1f3cc:	6003      	str	r3, [r0, #0]
}
   1f3ce:	4770      	bx	lr

0001f3d0 <net_buf_put>:
{
   1f3d0:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1f3d2:	460a      	mov	r2, r1
   1f3d4:	6814      	ldr	r4, [r2, #0]
   1f3d6:	b914      	cbnz	r4, 1f3de <net_buf_put+0xe>
}
   1f3d8:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1f3da:	f000 bac9 	b.w	1f970 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1f3de:	7953      	ldrb	r3, [r2, #5]
   1f3e0:	f043 0301 	orr.w	r3, r3, #1
   1f3e4:	7153      	strb	r3, [r2, #5]
   1f3e6:	4622      	mov	r2, r4
   1f3e8:	e7f4      	b.n	1f3d4 <net_buf_put+0x4>

0001f3ea <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1f3ea:	7902      	ldrb	r2, [r0, #4]
   1f3ec:	3201      	adds	r2, #1
   1f3ee:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1f3f0:	4770      	bx	lr

0001f3f2 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1f3f2:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1f3f4:	4618      	mov	r0, r3
   1f3f6:	681b      	ldr	r3, [r3, #0]
   1f3f8:	2b00      	cmp	r3, #0
   1f3fa:	d1fb      	bne.n	1f3f4 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1f3fc:	4770      	bx	lr

0001f3fe <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1f3fe:	6802      	ldr	r2, [r0, #0]
{
   1f400:	b510      	push	{r4, lr}
	if (parent->frags) {
   1f402:	b12a      	cbz	r2, 1f410 <net_buf_frag_insert+0x12>
   1f404:	460b      	mov	r3, r1
	while (buf->frags) {
   1f406:	461c      	mov	r4, r3
   1f408:	681b      	ldr	r3, [r3, #0]
   1f40a:	2b00      	cmp	r3, #0
   1f40c:	d1fb      	bne.n	1f406 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1f40e:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1f410:	6001      	str	r1, [r0, #0]
}
   1f412:	bd10      	pop	{r4, pc}

0001f414 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1f414:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1f416:	4604      	mov	r4, r0
   1f418:	b920      	cbnz	r0, 1f424 <net_buf_frag_add+0x10>
	buf->ref++;
   1f41a:	790b      	ldrb	r3, [r1, #4]
   1f41c:	3301      	adds	r3, #1
   1f41e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1f420:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1f422:	bd10      	pop	{r4, pc}
   1f424:	4603      	mov	r3, r0
	while (buf->frags) {
   1f426:	4618      	mov	r0, r3
   1f428:	681b      	ldr	r3, [r3, #0]
   1f42a:	2b00      	cmp	r3, #0
   1f42c:	d1fb      	bne.n	1f426 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1f42e:	f7ff ffe6 	bl	1f3fe <net_buf_frag_insert>
   1f432:	4620      	mov	r0, r4
   1f434:	e7f5      	b.n	1f422 <net_buf_frag_add+0xe>

0001f436 <net_buf_simple_add>:
	return buf->data + buf->len;
   1f436:	8883      	ldrh	r3, [r0, #4]
   1f438:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1f43a:	4419      	add	r1, r3
   1f43c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1f43e:	18d0      	adds	r0, r2, r3
   1f440:	4770      	bx	lr

0001f442 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1f442:	b430      	push	{r4, r5}
   1f444:	8884      	ldrh	r4, [r0, #4]
   1f446:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1f448:	18a3      	adds	r3, r4, r2
   1f44a:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f44c:	1928      	adds	r0, r5, r4
}
   1f44e:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f450:	f7fe bde2 	b.w	1e018 <memcpy>

0001f454 <net_buf_simple_add_u8>:
   1f454:	8883      	ldrh	r3, [r0, #4]
   1f456:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1f458:	b510      	push	{r4, lr}
	buf->len += len;
   1f45a:	1c5c      	adds	r4, r3, #1
   1f45c:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1f45e:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1f460:	18d0      	adds	r0, r2, r3
   1f462:	bd10      	pop	{r4, pc}

0001f464 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1f464:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1f466:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1f468:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1f46a:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1f46c:	4411      	add	r1, r2
	buf->data -= len;
   1f46e:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1f470:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1f472:	4770      	bx	lr

0001f474 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1f474:	8882      	ldrh	r2, [r0, #4]
   1f476:	1a52      	subs	r2, r2, r1
{
   1f478:	4603      	mov	r3, r0
	buf->len -= len;
   1f47a:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1f47c:	6800      	ldr	r0, [r0, #0]
   1f47e:	4408      	add	r0, r1
   1f480:	6018      	str	r0, [r3, #0]
}
   1f482:	4770      	bx	lr

0001f484 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1f484:	4603      	mov	r3, r0
	void *data = buf->data;
   1f486:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1f488:	889a      	ldrh	r2, [r3, #4]
   1f48a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1f48c:	4401      	add	r1, r0
	buf->len -= len;
   1f48e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1f490:	6019      	str	r1, [r3, #0]

	return data;
}
   1f492:	4770      	bx	lr

0001f494 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1f494:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1f496:	6803      	ldr	r3, [r0, #0]
   1f498:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f49a:	2102      	movs	r1, #2
   1f49c:	f7ff ffea 	bl	1f474 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1f4a0:	4620      	mov	r0, r4
   1f4a2:	bd10      	pop	{r4, pc}

0001f4a4 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1f4a4:	6802      	ldr	r2, [r0, #0]
   1f4a6:	6880      	ldr	r0, [r0, #8]
}
   1f4a8:	1a10      	subs	r0, r2, r0
   1f4aa:	4770      	bx	lr

0001f4ac <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1f4ac:	8883      	ldrh	r3, [r0, #4]
   1f4ae:	88c2      	ldrh	r2, [r0, #6]
   1f4b0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1f4b2:	6803      	ldr	r3, [r0, #0]
   1f4b4:	6880      	ldr	r0, [r0, #8]
   1f4b6:	1a18      	subs	r0, r3, r0
}
   1f4b8:	1a10      	subs	r0, r2, r0
   1f4ba:	4770      	bx	lr

0001f4bc <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1f4bc:	f000 001f 	and.w	r0, r0, #31
   1f4c0:	0080      	lsls	r0, r0, #2
   1f4c2:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1f4c6:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1f4ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1f4ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1f4d2:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1f4d6:	4770      	bx	lr

0001f4d8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f4d8:	6843      	ldr	r3, [r0, #4]
   1f4da:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1f4dc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1f4e0:	600b      	str	r3, [r1, #0]
}
   1f4e2:	2000      	movs	r0, #0
   1f4e4:	4770      	bx	lr

0001f4e6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f4e6:	6843      	ldr	r3, [r0, #4]
   1f4e8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1f4ea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1f4ee:	4042      	eors	r2, r0
   1f4f0:	400a      	ands	r2, r1
   1f4f2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1f4f4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1f4f8:	2000      	movs	r0, #0
   1f4fa:	4770      	bx	lr

0001f4fc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f4fc:	6843      	ldr	r3, [r0, #4]
   1f4fe:	685b      	ldr	r3, [r3, #4]
}
   1f500:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1f502:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1f506:	4770      	bx	lr

0001f508 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f508:	6843      	ldr	r3, [r0, #4]
   1f50a:	685b      	ldr	r3, [r3, #4]
}
   1f50c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1f50e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1f512:	4770      	bx	lr

0001f514 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f514:	6843      	ldr	r3, [r0, #4]
   1f516:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1f518:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1f51c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1f51e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1f522:	2000      	movs	r0, #0
   1f524:	4770      	bx	lr

0001f526 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f526:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   1f528:	6858      	ldr	r0, [r3, #4]
{
   1f52a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1f52c:	b158      	cbz	r0, 1f546 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f52e:	2400      	movs	r4, #0
   1f530:	4281      	cmp	r1, r0
   1f532:	d113      	bne.n	1f55c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1f534:	6808      	ldr	r0, [r1, #0]
   1f536:	b95c      	cbnz	r4, 1f550 <gpio_nrfx_manage_callback+0x2a>
   1f538:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1f53a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f53c:	42a1      	cmp	r1, r4
   1f53e:	d100      	bne.n	1f542 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1f540:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f542:	2000      	movs	r0, #0
   1f544:	6008      	str	r0, [r1, #0]
	if (set) {
   1f546:	b972      	cbnz	r2, 1f566 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1f548:	2000      	movs	r0, #0
}
   1f54a:	bd30      	pop	{r4, r5, pc}
   1f54c:	4628      	mov	r0, r5
   1f54e:	e7ef      	b.n	1f530 <gpio_nrfx_manage_callback+0xa>
   1f550:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f552:	6898      	ldr	r0, [r3, #8]
   1f554:	4281      	cmp	r1, r0
	list->tail = node;
   1f556:	bf08      	it	eq
   1f558:	609c      	streq	r4, [r3, #8]
}
   1f55a:	e7f2      	b.n	1f542 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f55c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f55e:	4604      	mov	r4, r0
   1f560:	2d00      	cmp	r5, #0
   1f562:	d1f3      	bne.n	1f54c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1f564:	b13a      	cbz	r2, 1f576 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1f566:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f568:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f56a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1f56c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f56e:	2800      	cmp	r0, #0
   1f570:	d1ea      	bne.n	1f548 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1f572:	6099      	str	r1, [r3, #8]
}
   1f574:	e7e9      	b.n	1f54a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1f576:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f57a:	e7e6      	b.n	1f54a <gpio_nrfx_manage_callback+0x24>

0001f57c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1f57c:	6843      	ldr	r3, [r0, #4]
   1f57e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1f580:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1f584:	05d2      	lsls	r2, r2, #23
   1f586:	d518      	bpl.n	1f5ba <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f588:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1f58c:	b1aa      	cbz	r2, 1f5ba <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1f58e:	f04f 0140 	mov.w	r1, #64	; 0x40
   1f592:	f3ef 8211 	mrs	r2, BASEPRI
   1f596:	f381 8811 	msr	BASEPRI, r1
   1f59a:	f3bf 8f6f 	isb	sy
   1f59e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f5a2:	b131      	cbz	r1, 1f5b2 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f5a4:	2100      	movs	r1, #0
   1f5a6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1f5aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5ae:	2101      	movs	r1, #1
   1f5b0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1f5b2:	f382 8811 	msr	BASEPRI, r2
   1f5b6:	f3bf 8f6f 	isb	sy
}
   1f5ba:	4770      	bx	lr

0001f5bc <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1f5bc:	68c2      	ldr	r2, [r0, #12]
{
   1f5be:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1f5c0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1f5c4:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f5c8:	2000      	movs	r0, #0
   1f5ca:	4770      	bx	lr

0001f5cc <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1f5cc:	6843      	ldr	r3, [r0, #4]
   1f5ce:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f5d0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f5d4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1f5d8:	4770      	bx	lr

0001f5da <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1f5da:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1f5dc:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f5de:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f5e2:	b938      	cbnz	r0, 1f5f4 <is_tx_ready+0x1a>
   1f5e4:	7992      	ldrb	r2, [r2, #6]
   1f5e6:	b932      	cbnz	r2, 1f5f6 <is_tx_ready+0x1c>
   1f5e8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1f5ec:	3800      	subs	r0, #0
   1f5ee:	bf18      	it	ne
   1f5f0:	2001      	movne	r0, #1
   1f5f2:	4770      	bx	lr
   1f5f4:	2001      	movs	r0, #1
}
   1f5f6:	4770      	bx	lr

0001f5f8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1f5f8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f5fa:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f5fc:	681b      	ldr	r3, [r3, #0]
   1f5fe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f602:	b148      	cbz	r0, 1f618 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1f604:	7c52      	ldrb	r2, [r2, #17]
   1f606:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f608:	2000      	movs	r0, #0
   1f60a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f60e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f612:	2201      	movs	r2, #1
   1f614:	601a      	str	r2, [r3, #0]
	return 0;
   1f616:	4770      	bx	lr
		return -1;
   1f618:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f61c:	4770      	bx	lr

0001f61e <rng_driver_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1f61e:	07db      	lsls	r3, r3, #31
{
   1f620:	b570      	push	{r4, r5, r6, lr}
   1f622:	460e      	mov	r6, r1
   1f624:	4615      	mov	r5, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1f626:	d40f      	bmi.n	1f648 <rng_driver_get_entropy_isr+0x2a>
		errcode = MULTITHREADING_LOCK_ACQUIRE_NO_WAIT();
   1f628:	2000      	movs	r0, #0
   1f62a:	2100      	movs	r1, #0
   1f62c:	f7fb f85a 	bl	1a6e4 <multithreading_lock_acquire>
		if (!errcode) {
   1f630:	4604      	mov	r4, r0
   1f632:	b938      	cbnz	r0, 1f644 <rng_driver_get_entropy_isr+0x26>
			errcode = sdc_soc_rand_vector_poll(buf, len);
   1f634:	4629      	mov	r1, r5
   1f636:	4630      	mov	r0, r6
   1f638:	f7ef fdae 	bl	f198 <sdc_soc_rand_vector_poll>
   1f63c:	4604      	mov	r4, r0
			MULTITHREADING_LOCK_RELEASE();
   1f63e:	f7fb f859 	bl	1a6f4 <multithreading_lock_release>
	if (!errcode) {
   1f642:	b184      	cbz	r4, 1f666 <rng_driver_get_entropy_isr+0x48>
}
   1f644:	4620      	mov	r0, r4
   1f646:	bd70      	pop	{r4, r5, r6, pc}
		errcode = MULTITHREADING_LOCK_ACQUIRE_FOREVER_WAIT();
   1f648:	f04f 30ff 	mov.w	r0, #4294967295
   1f64c:	f04f 31ff 	mov.w	r1, #4294967295
   1f650:	f7fb f848 	bl	1a6e4 <multithreading_lock_acquire>
		if (!errcode) {
   1f654:	4604      	mov	r4, r0
   1f656:	2800      	cmp	r0, #0
   1f658:	d1f4      	bne.n	1f644 <rng_driver_get_entropy_isr+0x26>
			sdc_soc_rand_vector_get(buf, len);
   1f65a:	4629      	mov	r1, r5
   1f65c:	4630      	mov	r0, r6
   1f65e:	f7ef fd82 	bl	f166 <sdc_soc_rand_vector_get>
			MULTITHREADING_LOCK_RELEASE();
   1f662:	f7fb f847 	bl	1a6f4 <multithreading_lock_release>
		return len;
   1f666:	462c      	mov	r4, r5
   1f668:	e7ec      	b.n	1f644 <rng_driver_get_entropy_isr+0x26>

0001f66a <rng_driver_get_entropy>:
{
   1f66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);
   1f66e:	68c7      	ldr	r7, [r0, #12]
{
   1f670:	460e      	mov	r6, r1
	uint32_t bytes_left = len;
   1f672:	4614      	mov	r4, r2
	while (bytes_left > 0) {
   1f674:	b1c4      	cbz	r4, 1f6a8 <rng_driver_get_entropy+0x3e>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   1f676:	fa1f f884 	uxth.w	r8, r4
			int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f67a:	f04f 30ff 	mov.w	r0, #4294967295
   1f67e:	f04f 31ff 	mov.w	r1, #4294967295
   1f682:	f7fb f82f 	bl	1a6e4 <multithreading_lock_acquire>
			if (errcode) {
   1f686:	b980      	cbnz	r0, 1f6aa <rng_driver_get_entropy+0x40>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   1f688:	4641      	mov	r1, r8
   1f68a:	4630      	mov	r0, r6
   1f68c:	f7ef fd84 	bl	f198 <sdc_soc_rand_vector_poll>
   1f690:	4605      	mov	r5, r0
			MULTITHREADING_LOCK_RELEASE();
   1f692:	f7fb f82f 	bl	1a6f4 <multithreading_lock_release>
			if (!bytes_read) {
   1f696:	b955      	cbnz	r5, 1f6ae <rng_driver_get_entropy+0x44>
	return z_impl_k_sem_take(sem, timeout);
   1f698:	f04f 32ff 	mov.w	r2, #4294967295
   1f69c:	f04f 33ff 	mov.w	r3, #4294967295
   1f6a0:	4638      	mov	r0, r7
   1f6a2:	f7fc fe0d 	bl	1c2c0 <z_impl_k_sem_take>
		while (bytes_read == 0) {
   1f6a6:	e7e8      	b.n	1f67a <rng_driver_get_entropy+0x10>
	return 0;
   1f6a8:	4620      	mov	r0, r4
}
   1f6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_dst += bytes_read;
   1f6ae:	442e      	add	r6, r5
		bytes_left -= bytes_read;
   1f6b0:	1b64      	subs	r4, r4, r5
   1f6b2:	e7df      	b.n	1f674 <rng_driver_get_entropy+0xa>

0001f6b4 <rng_driver_init>:

static int rng_driver_init(const struct device *dev)
{
   1f6b4:	b508      	push	{r3, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);

	k_sem_init(&rng_dev->sem_sync, 0, 1);
   1f6b6:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f6b8:	2201      	movs	r2, #1
   1f6ba:	2100      	movs	r1, #0
   1f6bc:	f000 fa8f 	bl	1fbde <z_impl_k_sem_init>

	IRQ_CONNECT(RNG_IRQn,
   1f6c0:	2200      	movs	r2, #0
   1f6c2:	2105      	movs	r1, #5
   1f6c4:	200d      	movs	r0, #13
   1f6c6:	f7f5 f921 	bl	1490c <z_arm_irq_priority_set>
		    rng_driver_isr,
		    NULL,
		    0);

	return 0;
}
   1f6ca:	2000      	movs	r0, #0
   1f6cc:	bd08      	pop	{r3, pc}

0001f6ce <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1f6ce:	4668      	mov	r0, sp
   1f6d0:	f020 0107 	bic.w	r1, r0, #7
   1f6d4:	468d      	mov	sp, r1
   1f6d6:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1f6d8:	f7e3 f822 	bl	2720 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1f6dc:	f7f5 f930 	bl	14940 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1f6e0:	f7f5 fc4c 	bl	14f7c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1f6e4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f6e8:	4685      	mov	sp, r0
   1f6ea:	4770      	bx	lr

0001f6ec <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1f6ec:	4668      	mov	r0, sp
   1f6ee:	f020 0107 	bic.w	r1, r0, #7
   1f6f2:	468d      	mov	sp, r1
   1f6f4:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1f6f6:	f7e2 ffc5 	bl	2684 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1f6fa:	f7f5 f921 	bl	14940 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1f6fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f702:	4685      	mov	sp, r0
   1f704:	4770      	bx	lr

0001f706 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1f706:	4668      	mov	r0, sp
   1f708:	f020 0107 	bic.w	r1, r0, #7
   1f70c:	468d      	mov	sp, r1
   1f70e:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1f710:	f7ef fb5d 	bl	edce <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1f714:	f7f5 f914 	bl	14940 <_arch_isr_direct_pm>
   1f718:	f7f5 fc30 	bl	14f7c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1f71c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f720:	4685      	mov	sp, r0
   1f722:	4770      	bx	lr

0001f724 <nrfx_clock_stop>:
	switch (domain) {
   1f724:	2801      	cmp	r0, #1
   1f726:	d101      	bne.n	1f72c <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1f728:	f7e3 be0e 	b.w	3348 <mpsl_clock_hfclk_release>
}
   1f72c:	4770      	bx	lr

0001f72e <nrfx_clock_enable>:
}
   1f72e:	4770      	bx	lr

0001f730 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1f730:	f7e3 bc2a 	b.w	2f88 <MPSL_IRQ_CLOCK_Handler>

0001f734 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1f734:	4700      	bx	r0

0001f736 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1f736:	f000 ba68 	b.w	1fc0a <z_impl_k_busy_wait>

0001f73a <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1f73a:	f7fe ba38 	b.w	1dbae <z_clock_idle_exit>

0001f73e <k_heap_init>:
{
   1f73e:	b410      	push	{r4}
   1f740:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1f744:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1f748:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1f74a:	f7fd bd5f 	b.w	1d20c <sys_heap_init>

0001f74e <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1f74e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f752:	b087      	sub	sp, #28
   1f754:	4604      	mov	r4, r0
   1f756:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1f758:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   1f75c:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   1f75e:	f000 fb19 	bl	1fd94 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f762:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1f766:	4605      	mov	r5, r0
   1f768:	4688      	mov	r8, r1
	__asm__ volatile(
   1f76a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f76e:	f3ef 8b11 	mrs	fp, BASEPRI
   1f772:	f383 8811 	msr	BASEPRI, r3
   1f776:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f77a:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1f77e:	463a      	mov	r2, r7
   1f780:	4631      	mov	r1, r6
   1f782:	4620      	mov	r0, r4
   1f784:	f7fd fce5 	bl	1d152 <sys_heap_aligned_alloc>
   1f788:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   1f78a:	f7fd f883 	bl	1c894 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1f78e:	9b05      	ldr	r3, [sp, #20]
   1f790:	b13b      	cbz	r3, 1f7a2 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1f792:	f38b 8811 	msr	BASEPRI, fp
   1f796:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1f79a:	4618      	mov	r0, r3
   1f79c:	b007      	add	sp, #28
   1f79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1f7a2:	1a2a      	subs	r2, r5, r0
   1f7a4:	9202      	str	r2, [sp, #8]
   1f7a6:	eb68 0201 	sbc.w	r2, r8, r1
   1f7aa:	9203      	str	r2, [sp, #12]
   1f7ac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1f7b0:	2901      	cmp	r1, #1
   1f7b2:	f172 0200 	sbcs.w	r2, r2, #0
   1f7b6:	dbec      	blt.n	1f792 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f7b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1f7bc:	4659      	mov	r1, fp
   1f7be:	e9cd 2300 	strd	r2, r3, [sp]
   1f7c2:	4648      	mov	r0, r9
   1f7c4:	4652      	mov	r2, sl
   1f7c6:	f7fc fc41 	bl	1c04c <z_pend_curr>
	__asm__ volatile(
   1f7ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f7ce:	f3ef 8b11 	mrs	fp, BASEPRI
   1f7d2:	f383 8811 	msr	BASEPRI, r3
   1f7d6:	f3bf 8f6f 	isb	sy
   1f7da:	e7d0      	b.n	1f77e <k_heap_aligned_alloc+0x30>

0001f7dc <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1f7dc:	b538      	push	{r3, r4, r5, lr}
   1f7de:	4604      	mov	r4, r0
   1f7e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f7e4:	f3ef 8511 	mrs	r5, BASEPRI
   1f7e8:	f383 8811 	msr	BASEPRI, r3
   1f7ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1f7f0:	f7fd fc62 	bl	1d0b8 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1f7f4:	f104 000c 	add.w	r0, r4, #12
   1f7f8:	f000 f9e1 	bl	1fbbe <z_unpend_all>
   1f7fc:	b130      	cbz	r0, 1f80c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1f7fe:	4629      	mov	r1, r5
   1f800:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1f804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1f808:	f7fc b9d8 	b.w	1bbbc <z_reschedule>
	__asm__ volatile(
   1f80c:	f385 8811 	msr	BASEPRI, r5
   1f810:	f3bf 8f6f 	isb	sy
}
   1f814:	bd38      	pop	{r3, r4, r5, pc}

0001f816 <k_mem_slab_init>:
{
   1f816:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1f818:	2400      	movs	r4, #0
   1f81a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f81c:	ea41 0402 	orr.w	r4, r1, r2
   1f820:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1f824:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1f828:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f82a:	d10c      	bne.n	1f846 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1f82c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f82e:	42a3      	cmp	r3, r4
   1f830:	d103      	bne.n	1f83a <k_mem_slab_init+0x24>
   1f832:	e9c0 0000 	strd	r0, r0, [r0]
}
   1f836:	2000      	movs	r0, #0
}
   1f838:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1f83a:	6945      	ldr	r5, [r0, #20]
   1f83c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f83e:	3401      	adds	r4, #1
		slab->free_list = p;
   1f840:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1f842:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1f844:	e7f3      	b.n	1f82e <k_mem_slab_init+0x18>
		return -EINVAL;
   1f846:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1f84a:	e7f5      	b.n	1f838 <k_mem_slab_init+0x22>

0001f84c <queue_insert>:
{
   1f84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f850:	4699      	mov	r9, r3
   1f852:	4604      	mov	r4, r0
   1f854:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f858:	460d      	mov	r5, r1
   1f85a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f85c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1f860:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f864:	f3ef 8711 	mrs	r7, BASEPRI
   1f868:	f382 8811 	msr	BASEPRI, r2
   1f86c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1f870:	b103      	cbz	r3, 1f874 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1f872:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1f874:	4630      	mov	r0, r6
   1f876:	f000 f97d 	bl	1fb74 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1f87a:	b160      	cbz	r0, 1f896 <queue_insert+0x4a>
   1f87c:	2400      	movs	r4, #0
   1f87e:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   1f882:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1f886:	f000 f91a 	bl	1fabe <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1f88a:	4630      	mov	r0, r6
   1f88c:	4639      	mov	r1, r7
   1f88e:	f7fc f995 	bl	1bbbc <z_reschedule>
	return 0;
   1f892:	2000      	movs	r0, #0
   1f894:	e00c      	b.n	1f8b0 <queue_insert+0x64>
	if (alloc) {
   1f896:	f1b9 0f00 	cmp.w	r9, #0
   1f89a:	d01b      	beq.n	1f8d4 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   1f89c:	2108      	movs	r1, #8
   1f89e:	f7fd f919 	bl	1cad4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1f8a2:	b938      	cbnz	r0, 1f8b4 <queue_insert+0x68>
	__asm__ volatile(
   1f8a4:	f387 8811 	msr	BASEPRI, r7
   1f8a8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1f8ac:	f06f 000b 	mvn.w	r0, #11
}
   1f8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1f8b4:	2301      	movs	r3, #1
		anode->data = data;
   1f8b6:	f8c0 8004 	str.w	r8, [r0, #4]
   1f8ba:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1f8bc:	6803      	ldr	r3, [r0, #0]
   1f8be:	f003 0203 	and.w	r2, r3, #3
   1f8c2:	b95d      	cbnz	r5, 1f8dc <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f8c4:	6823      	ldr	r3, [r4, #0]
   1f8c6:	4313      	orrs	r3, r2
   1f8c8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f8ca:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1f8cc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f8ce:	b973      	cbnz	r3, 1f8ee <queue_insert+0xa2>
	list->tail = node;
   1f8d0:	6060      	str	r0, [r4, #4]
}
   1f8d2:	e00c      	b.n	1f8ee <queue_insert+0xa2>
	node->next_and_flags = flags;
   1f8d4:	f8c8 9000 	str.w	r9, [r8]
}
   1f8d8:	4640      	mov	r0, r8
   1f8da:	e7ef      	b.n	1f8bc <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f8dc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1f8de:	f033 0303 	bics.w	r3, r3, #3
   1f8e2:	d110      	bne.n	1f906 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f8e4:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1f8e6:	6862      	ldr	r2, [r4, #4]
   1f8e8:	b93a      	cbnz	r2, 1f8fa <queue_insert+0xae>
	list->head = node;
   1f8ea:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f8ee:	2104      	movs	r1, #4
   1f8f0:	f104 0010 	add.w	r0, r4, #16
   1f8f4:	f000 fbe9 	bl	200ca <z_handle_obj_poll_events>
   1f8f8:	e7c7      	b.n	1f88a <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f8fa:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f8fc:	f003 0303 	and.w	r3, r3, #3
   1f900:	4303      	orrs	r3, r0
   1f902:	6013      	str	r3, [r2, #0]
   1f904:	e7e4      	b.n	1f8d0 <queue_insert+0x84>
   1f906:	4313      	orrs	r3, r2
   1f908:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f90a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f90c:	f003 0303 	and.w	r3, r3, #3
   1f910:	4303      	orrs	r3, r0
   1f912:	602b      	str	r3, [r5, #0]
}
   1f914:	e7eb      	b.n	1f8ee <queue_insert+0xa2>

0001f916 <z_queue_node_peek>:
{
   1f916:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1f918:	4604      	mov	r4, r0
   1f91a:	b130      	cbz	r0, 1f92a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f91c:	6802      	ldr	r2, [r0, #0]
   1f91e:	0793      	lsls	r3, r2, #30
   1f920:	d003      	beq.n	1f92a <z_queue_node_peek+0x14>
		ret = anode->data;
   1f922:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1f924:	b109      	cbz	r1, 1f92a <z_queue_node_peek+0x14>
			k_free(anode);
   1f926:	f000 fbde 	bl	200e6 <k_free>
}
   1f92a:	4620      	mov	r0, r4
   1f92c:	bd10      	pop	{r4, pc}

0001f92e <z_impl_k_queue_init>:
	list->head = NULL;
   1f92e:	2300      	movs	r3, #0
	list->tail = NULL;
   1f930:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   1f934:	f100 0308 	add.w	r3, r0, #8
   1f938:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1f93c:	f100 0310 	add.w	r3, r0, #16
   1f940:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1f944:	4770      	bx	lr

0001f946 <k_queue_append>:
{
   1f946:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1f948:	2301      	movs	r3, #1
   1f94a:	9300      	str	r3, [sp, #0]
   1f94c:	2300      	movs	r3, #0
{
   1f94e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1f950:	4619      	mov	r1, r3
   1f952:	f7ff ff7b 	bl	1f84c <queue_insert>
}
   1f956:	b003      	add	sp, #12
   1f958:	f85d fb04 	ldr.w	pc, [sp], #4

0001f95c <k_queue_prepend>:
{
   1f95c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1f95e:	2300      	movs	r3, #0
{
   1f960:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1f962:	9300      	str	r3, [sp, #0]
   1f964:	4619      	mov	r1, r3
   1f966:	f7ff ff71 	bl	1f84c <queue_insert>
}
   1f96a:	b003      	add	sp, #12
   1f96c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f970 <k_queue_append_list>:
{
   1f970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f974:	4605      	mov	r5, r0
   1f976:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1f978:	460c      	mov	r4, r1
   1f97a:	b391      	cbz	r1, 1f9e2 <k_queue_append_list+0x72>
   1f97c:	b38a      	cbz	r2, 1f9e2 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f97e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1f982:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f986:	f3ef 8811 	mrs	r8, BASEPRI
   1f98a:	f383 8811 	msr	BASEPRI, r3
   1f98e:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1f992:	4638      	mov	r0, r7
   1f994:	f000 f8ee 	bl	1fb74 <z_unpend_first_thread>
   1f998:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1f99c:	b920      	cbnz	r0, 1f9a8 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f99e:	686b      	ldr	r3, [r5, #4]
   1f9a0:	b9cb      	cbnz	r3, 1f9d6 <k_queue_append_list+0x66>
	list->head = node;
   1f9a2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1f9a4:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f9a6:	e00a      	b.n	1f9be <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1f9a8:	6144      	str	r4, [r0, #20]
   1f9aa:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   1f9ae:	f000 f886 	bl	1fabe <z_ready_thread>
		head = *(void **)head;
   1f9b2:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1f9b4:	4638      	mov	r0, r7
   1f9b6:	f000 f8dd 	bl	1fb74 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1f9ba:	2c00      	cmp	r4, #0
   1f9bc:	d1ee      	bne.n	1f99c <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f9be:	2104      	movs	r1, #4
   1f9c0:	f105 0010 	add.w	r0, r5, #16
   1f9c4:	f000 fb81 	bl	200ca <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1f9c8:	4638      	mov	r0, r7
   1f9ca:	4641      	mov	r1, r8
   1f9cc:	f7fc f8f6 	bl	1bbbc <z_reschedule>
	return 0;
   1f9d0:	2000      	movs	r0, #0
}
   1f9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f9d6:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f9d8:	f001 0103 	and.w	r1, r1, #3
   1f9dc:	430c      	orrs	r4, r1
   1f9de:	601c      	str	r4, [r3, #0]
}
   1f9e0:	e7e0      	b.n	1f9a4 <k_queue_append_list+0x34>
		return -EINVAL;
   1f9e2:	f06f 0015 	mvn.w	r0, #21
   1f9e6:	e7f4      	b.n	1f9d2 <k_queue_append_list+0x62>

0001f9e8 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1f9e8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1f9ec:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1f9f0:	4298      	cmp	r0, r3
   1f9f2:	bfac      	ite	ge
   1f9f4:	2000      	movge	r0, #0
   1f9f6:	2001      	movlt	r0, #1
   1f9f8:	4770      	bx	lr

0001f9fa <z_find_first_thread_to_unpend>:
{
   1f9fa:	b510      	push	{r4, lr}
   1f9fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fa00:	f3ef 8411 	mrs	r4, BASEPRI
   1fa04:	f383 8811 	msr	BASEPRI, r3
   1fa08:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1fa0c:	f000 f84d 	bl	1faaa <z_priq_dumb_best>
	__asm__ volatile(
   1fa10:	f384 8811 	msr	BASEPRI, r4
   1fa14:	f3bf 8f6f 	isb	sy
}
   1fa18:	bd10      	pop	{r4, pc}

0001fa1a <z_unpend_thread_no_timeout>:
{
   1fa1a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fa1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fa20:	f3ef 8411 	mrs	r4, BASEPRI
   1fa24:	f383 8811 	msr	BASEPRI, r3
   1fa28:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1fa2c:	f000 f81b 	bl	1fa66 <unpend_thread_no_timeout>
	__asm__ volatile(
   1fa30:	f384 8811 	msr	BASEPRI, r4
   1fa34:	f3bf 8f6f 	isb	sy
}
   1fa38:	bd10      	pop	{r4, pc}

0001fa3a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1fa3a:	4603      	mov	r3, r0
   1fa3c:	b920      	cbnz	r0, 1fa48 <z_reschedule_irqlock+0xe>
   1fa3e:	f3ef 8205 	mrs	r2, IPSR
   1fa42:	b90a      	cbnz	r2, 1fa48 <z_reschedule_irqlock+0xe>
   1fa44:	f7f4 befc 	b.w	14840 <arch_swap>
   1fa48:	f383 8811 	msr	BASEPRI, r3
   1fa4c:	f3bf 8f6f 	isb	sy
}
   1fa50:	4770      	bx	lr

0001fa52 <z_reschedule_unlocked>:
	__asm__ volatile(
   1fa52:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fa56:	f3ef 8011 	mrs	r0, BASEPRI
   1fa5a:	f383 8811 	msr	BASEPRI, r3
   1fa5e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1fa62:	f7ff bfea 	b.w	1fa3a <z_reschedule_irqlock>

0001fa66 <unpend_thread_no_timeout>:
{
   1fa66:	4601      	mov	r1, r0
   1fa68:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1fa6a:	6880      	ldr	r0, [r0, #8]
   1fa6c:	f7fc f8cc 	bl	1bc08 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fa70:	7b4b      	ldrb	r3, [r1, #13]
   1fa72:	f023 0302 	bic.w	r3, r3, #2
   1fa76:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   1fa78:	2300      	movs	r3, #0
   1fa7a:	608b      	str	r3, [r1, #8]
}
   1fa7c:	bd08      	pop	{r3, pc}

0001fa7e <z_unpend_thread>:
{
   1fa7e:	b538      	push	{r3, r4, r5, lr}
   1fa80:	4604      	mov	r4, r0
   1fa82:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fa86:	f3ef 8511 	mrs	r5, BASEPRI
   1fa8a:	f383 8811 	msr	BASEPRI, r3
   1fa8e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1fa92:	f7ff ffe8 	bl	1fa66 <unpend_thread_no_timeout>
	__asm__ volatile(
   1fa96:	f385 8811 	msr	BASEPRI, r5
   1fa9a:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1fa9e:	f104 0018 	add.w	r0, r4, #24
}
   1faa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1faa6:	f000 b931 	b.w	1fd0c <z_abort_timeout>

0001faaa <z_priq_dumb_best>:
{
   1faaa:	4603      	mov	r3, r0
	return list->head == list;
   1faac:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1faae:	4283      	cmp	r3, r0
   1fab0:	d003      	beq.n	1faba <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1fab2:	2800      	cmp	r0, #0
   1fab4:	bf38      	it	cc
   1fab6:	2000      	movcc	r0, #0
   1fab8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1faba:	2000      	movs	r0, #0
}
   1fabc:	4770      	bx	lr

0001fabe <z_ready_thread>:
{
   1fabe:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fac0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fac4:	f3ef 8411 	mrs	r4, BASEPRI
   1fac8:	f383 8811 	msr	BASEPRI, r3
   1facc:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1fad0:	f7fc f8f4 	bl	1bcbc <ready_thread>
	__asm__ volatile(
   1fad4:	f384 8811 	msr	BASEPRI, r4
   1fad8:	f3bf 8f6f 	isb	sy
}
   1fadc:	bd10      	pop	{r4, pc}

0001fade <z_thread_timeout>:
{
   1fade:	b570      	push	{r4, r5, r6, lr}
   1fae0:	4604      	mov	r4, r0
	__asm__ volatile(
   1fae2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fae6:	f3ef 8611 	mrs	r6, BASEPRI
   1faea:	f383 8811 	msr	BASEPRI, r3
   1faee:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1faf2:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1faf6:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   1fafa:	b113      	cbz	r3, 1fb02 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   1fafc:	4628      	mov	r0, r5
   1fafe:	f7ff ffb2 	bl	1fa66 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1fb02:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1fb06:	f023 0314 	bic.w	r3, r3, #20
   1fb0a:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   1fb0e:	4628      	mov	r0, r5
   1fb10:	f7fc f8d4 	bl	1bcbc <ready_thread>
	__asm__ volatile(
   1fb14:	f386 8811 	msr	BASEPRI, r6
   1fb18:	f3bf 8f6f 	isb	sy
}
   1fb1c:	bd70      	pop	{r4, r5, r6, pc}

0001fb1e <add_to_waitq_locked>:
{
   1fb1e:	b538      	push	{r3, r4, r5, lr}
   1fb20:	4604      	mov	r4, r0
   1fb22:	460d      	mov	r5, r1
	unready_thread(thread);
   1fb24:	f7fc fa52 	bl	1bfcc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1fb28:	7b63      	ldrb	r3, [r4, #13]
   1fb2a:	f043 0302 	orr.w	r3, r3, #2
   1fb2e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1fb30:	b1c5      	cbz	r5, 1fb64 <add_to_waitq_locked+0x46>
	return list->head == list;
   1fb32:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1fb34:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fb36:	429d      	cmp	r5, r3
   1fb38:	bf08      	it	eq
   1fb3a:	2300      	moveq	r3, #0
   1fb3c:	2b00      	cmp	r3, #0
   1fb3e:	bf38      	it	cc
   1fb40:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fb42:	b183      	cbz	r3, 1fb66 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fb44:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1fb48:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1fb4c:	4291      	cmp	r1, r2
   1fb4e:	db04      	blt.n	1fb5a <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   1fb50:	686a      	ldr	r2, [r5, #4]
   1fb52:	429a      	cmp	r2, r3
   1fb54:	d007      	beq.n	1fb66 <add_to_waitq_locked+0x48>
   1fb56:	681b      	ldr	r3, [r3, #0]
   1fb58:	e7f3      	b.n	1fb42 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   1fb5a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fb5c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1fb60:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1fb62:	605c      	str	r4, [r3, #4]
}
   1fb64:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   1fb66:	686b      	ldr	r3, [r5, #4]
   1fb68:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1fb6a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1fb6c:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1fb6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1fb70:	606c      	str	r4, [r5, #4]
   1fb72:	e7f7      	b.n	1fb64 <add_to_waitq_locked+0x46>

0001fb74 <z_unpend_first_thread>:
{
   1fb74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1fb76:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb7a:	f3ef 8211 	mrs	r2, BASEPRI
   1fb7e:	f383 8811 	msr	BASEPRI, r3
   1fb82:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1fb86:	f7ff ff90 	bl	1faaa <z_priq_dumb_best>
   1fb8a:	4604      	mov	r4, r0
	__asm__ volatile(
   1fb8c:	f382 8811 	msr	BASEPRI, r2
   1fb90:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1fb94:	b188      	cbz	r0, 1fbba <z_unpend_first_thread+0x46>
	__asm__ volatile(
   1fb96:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb9a:	f3ef 8511 	mrs	r5, BASEPRI
   1fb9e:	f383 8811 	msr	BASEPRI, r3
   1fba2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1fba6:	f7ff ff5e 	bl	1fa66 <unpend_thread_no_timeout>
	__asm__ volatile(
   1fbaa:	f385 8811 	msr	BASEPRI, r5
   1fbae:	f3bf 8f6f 	isb	sy
   1fbb2:	f104 0018 	add.w	r0, r4, #24
   1fbb6:	f000 f8a9 	bl	1fd0c <z_abort_timeout>
}
   1fbba:	4620      	mov	r0, r4
   1fbbc:	bd38      	pop	{r3, r4, r5, pc}

0001fbbe <z_unpend_all>:
{
   1fbbe:	b538      	push	{r3, r4, r5, lr}
   1fbc0:	4605      	mov	r5, r0
	int need_sched = 0;
   1fbc2:	2000      	movs	r0, #0
	return list->head == list;
   1fbc4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fbc6:	42a5      	cmp	r5, r4
   1fbc8:	d000      	beq.n	1fbcc <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1fbca:	b904      	cbnz	r4, 1fbce <z_unpend_all+0x10>
}
   1fbcc:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1fbce:	4620      	mov	r0, r4
   1fbd0:	f7ff ff55 	bl	1fa7e <z_unpend_thread>
		z_ready_thread(thread);
   1fbd4:	4620      	mov	r0, r4
   1fbd6:	f7ff ff72 	bl	1fabe <z_ready_thread>
		need_sched = 1;
   1fbda:	2001      	movs	r0, #1
   1fbdc:	e7f2      	b.n	1fbc4 <z_unpend_all+0x6>

0001fbde <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1fbde:	b15a      	cbz	r2, 1fbf8 <z_impl_k_sem_init+0x1a>
   1fbe0:	428a      	cmp	r2, r1
   1fbe2:	d309      	bcc.n	1fbf8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1fbe4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1fbe8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1fbec:	e9c0 0000 	strd	r0, r0, [r0]
   1fbf0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1fbf4:	2000      	movs	r0, #0
   1fbf6:	4770      	bx	lr
		return -EINVAL;
   1fbf8:	f06f 0015 	mvn.w	r0, #21
}
   1fbfc:	4770      	bx	lr

0001fbfe <k_is_in_isr>:
   1fbfe:	f3ef 8005 	mrs	r0, IPSR
}
   1fc02:	3800      	subs	r0, #0
   1fc04:	bf18      	it	ne
   1fc06:	2001      	movne	r0, #1
   1fc08:	4770      	bx	lr

0001fc0a <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1fc0a:	b108      	cbz	r0, 1fc10 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1fc0c:	f7f5 bae6 	b.w	151dc <arch_busy_wait>
}
   1fc10:	4770      	bx	lr

0001fc12 <z_impl_k_thread_name_set>:
}
   1fc12:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1fc16:	4770      	bx	lr

0001fc18 <k_thread_name_get>:
}
   1fc18:	2000      	movs	r0, #0
   1fc1a:	4770      	bx	lr

0001fc1c <k_work_submit_to_queue>:
{
   1fc1c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fc1e:	f101 0308 	add.w	r3, r1, #8
   1fc22:	f3bf 8f5b 	dmb	ish
   1fc26:	e853 2f00 	ldrex	r2, [r3]
   1fc2a:	f042 0c01 	orr.w	ip, r2, #1
   1fc2e:	e843 ce00 	strex	lr, ip, [r3]
   1fc32:	f1be 0f00 	cmp.w	lr, #0
   1fc36:	d1f6      	bne.n	1fc26 <k_work_submit_to_queue+0xa>
   1fc38:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1fc3c:	07d3      	lsls	r3, r2, #31
   1fc3e:	d403      	bmi.n	1fc48 <k_work_submit_to_queue+0x2c>
}
   1fc40:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1fc44:	f7ff be7f 	b.w	1f946 <k_queue_append>
}
   1fc48:	f85d fb04 	ldr.w	pc, [sp], #4

0001fc4c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1fc4c:	f1a0 0110 	sub.w	r1, r0, #16
   1fc50:	6980      	ldr	r0, [r0, #24]
   1fc52:	f7ff bfe3 	b.w	1fc1c <k_work_submit_to_queue>

0001fc56 <work_cancel>:
{
   1fc56:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fc58:	f3bf 8f5b 	dmb	ish
   1fc5c:	6883      	ldr	r3, [r0, #8]
   1fc5e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1fc62:	07db      	lsls	r3, r3, #31
{
   1fc64:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1fc66:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   1fc6a:	d532      	bpl.n	1fcd2 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1fc6c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1fc6e:	6813      	ldr	r3, [r2, #0]
   1fc70:	2100      	movs	r1, #0
   1fc72:	b913      	cbnz	r3, 1fc7a <work_cancel+0x24>
			return -EINVAL;
   1fc74:	f06f 0015 	mvn.w	r0, #21
}
   1fc78:	bd70      	pop	{r4, r5, r6, pc}
   1fc7a:	429c      	cmp	r4, r3
   1fc7c:	d124      	bne.n	1fcc8 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   1fc7e:	6823      	ldr	r3, [r4, #0]
   1fc80:	6856      	ldr	r6, [r2, #4]
   1fc82:	f023 0003 	bic.w	r0, r3, #3
   1fc86:	b9b1      	cbnz	r1, 1fcb6 <work_cancel+0x60>
   1fc88:	42b4      	cmp	r4, r6
	list->head = node;
   1fc8a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1fc8c:	d100      	bne.n	1fc90 <work_cancel+0x3a>
	list->tail = node;
   1fc8e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fc90:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fc92:	f003 0303 	and.w	r3, r3, #3
   1fc96:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1fc98:	2000      	movs	r0, #0
   1fc9a:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fc9c:	f3bf 8f5b 	dmb	ish
   1fca0:	e855 3f00 	ldrex	r3, [r5]
   1fca4:	f023 0301 	bic.w	r3, r3, #1
   1fca8:	e845 3200 	strex	r2, r3, [r5]
   1fcac:	2a00      	cmp	r2, #0
   1fcae:	d1f7      	bne.n	1fca0 <work_cancel+0x4a>
   1fcb0:	f3bf 8f5b 	dmb	ish
   1fcb4:	e7e0      	b.n	1fc78 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fcb6:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fcb8:	f003 0303 	and.w	r3, r3, #3
   1fcbc:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   1fcbe:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fcc0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1fcc2:	bf08      	it	eq
   1fcc4:	6051      	streq	r1, [r2, #4]
}
   1fcc6:	e7e3      	b.n	1fc90 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fcc8:	6818      	ldr	r0, [r3, #0]
   1fcca:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1fccc:	f020 0303 	bic.w	r3, r0, #3
   1fcd0:	e7cf      	b.n	1fc72 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   1fcd2:	3010      	adds	r0, #16
   1fcd4:	f000 f81a 	bl	1fd0c <z_abort_timeout>
		if (err) {
   1fcd8:	2800      	cmp	r0, #0
   1fcda:	d0dd      	beq.n	1fc98 <work_cancel+0x42>
			return -EALREADY;
   1fcdc:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1fce0:	e7ca      	b.n	1fc78 <work_cancel+0x22>

0001fce2 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1fce2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fce4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1fce8:	f3ef 8411 	mrs	r4, BASEPRI
   1fcec:	f382 8811 	msr	BASEPRI, r2
   1fcf0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   1fcf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1fcf6:	b133      	cbz	r3, 1fd06 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   1fcf8:	f7ff ffad 	bl	1fc56 <work_cancel>
	__asm__ volatile(
   1fcfc:	f384 8811 	msr	BASEPRI, r4
   1fd00:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   1fd04:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1fd06:	f06f 0015 	mvn.w	r0, #21
   1fd0a:	e7f7      	b.n	1fcfc <k_delayed_work_cancel+0x1a>

0001fd0c <z_abort_timeout>:
{
   1fd0c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fd0e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1fd12:	f3ef 8411 	mrs	r4, BASEPRI
   1fd16:	f382 8811 	msr	BASEPRI, r2
   1fd1a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1fd1e:	6803      	ldr	r3, [r0, #0]
   1fd20:	b13b      	cbz	r3, 1fd32 <z_abort_timeout+0x26>
			remove_timeout(to);
   1fd22:	f7fc fc75 	bl	1c610 <remove_timeout>
			ret = 0;
   1fd26:	2000      	movs	r0, #0
	__asm__ volatile(
   1fd28:	f384 8811 	msr	BASEPRI, r4
   1fd2c:	f3bf 8f6f 	isb	sy
}
   1fd30:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1fd32:	f06f 0015 	mvn.w	r0, #21
   1fd36:	e7f7      	b.n	1fd28 <z_abort_timeout+0x1c>

0001fd38 <z_get_next_timeout_expiry>:
{
   1fd38:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fd3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd3e:	f3ef 8411 	mrs	r4, BASEPRI
   1fd42:	f383 8811 	msr	BASEPRI, r3
   1fd46:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1fd4a:	f7fc fc7b 	bl	1c644 <next_timeout>
	__asm__ volatile(
   1fd4e:	f384 8811 	msr	BASEPRI, r4
   1fd52:	f3bf 8f6f 	isb	sy
}
   1fd56:	bd10      	pop	{r4, pc}

0001fd58 <z_set_timeout_expiry>:
{
   1fd58:	b570      	push	{r4, r5, r6, lr}
   1fd5a:	4604      	mov	r4, r0
   1fd5c:	460d      	mov	r5, r1
	__asm__ volatile(
   1fd5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd62:	f3ef 8611 	mrs	r6, BASEPRI
   1fd66:	f383 8811 	msr	BASEPRI, r3
   1fd6a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1fd6e:	f7fc fc69 	bl	1c644 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1fd72:	2801      	cmp	r0, #1
   1fd74:	dd05      	ble.n	1fd82 <z_set_timeout_expiry+0x2a>
   1fd76:	42a0      	cmp	r0, r4
   1fd78:	dd03      	ble.n	1fd82 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   1fd7a:	4629      	mov	r1, r5
   1fd7c:	4620      	mov	r0, r4
   1fd7e:	f7f4 fbb7 	bl	144f0 <z_clock_set_timeout>
	__asm__ volatile(
   1fd82:	f386 8811 	msr	BASEPRI, r6
   1fd86:	f3bf 8f6f 	isb	sy
}
   1fd8a:	bd70      	pop	{r4, r5, r6, pc}

0001fd8c <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1fd8c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1fd8e:	f7fc fd81 	bl	1c894 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1fd92:	bd08      	pop	{r3, pc}

0001fd94 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   1fd94:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fd96:	1c4b      	adds	r3, r1, #1
   1fd98:	bf08      	it	eq
   1fd9a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1fd9e:	4604      	mov	r4, r0
   1fda0:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fda2:	d013      	beq.n	1fdcc <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fda4:	ea54 0105 	orrs.w	r1, r4, r5
   1fda8:	d103      	bne.n	1fdb2 <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1fdaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1fdae:	f7fc bd71 	b.w	1c894 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1fdb2:	f06f 0101 	mvn.w	r1, #1
   1fdb6:	1a0a      	subs	r2, r1, r0
   1fdb8:	f04f 31ff 	mov.w	r1, #4294967295
   1fdbc:	eb61 0305 	sbc.w	r3, r1, r5
   1fdc0:	2a00      	cmp	r2, #0
   1fdc2:	f173 0100 	sbcs.w	r1, r3, #0
   1fdc6:	db02      	blt.n	1fdce <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   1fdc8:	4610      	mov	r0, r2
   1fdca:	4619      	mov	r1, r3
}
   1fdcc:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   1fdce:	f7fc fd61 	bl	1c894 <z_tick_get>
   1fdd2:	2c01      	cmp	r4, #1
   1fdd4:	f175 0300 	sbcs.w	r3, r5, #0
   1fdd8:	bfbc      	itt	lt
   1fdda:	2401      	movlt	r4, #1
   1fddc:	2500      	movlt	r5, #0
   1fdde:	1820      	adds	r0, r4, r0
   1fde0:	eb45 0101 	adc.w	r1, r5, r1
   1fde4:	e7f2      	b.n	1fdcc <z_timeout_end_calc+0x38>

0001fde6 <k_timer_init>:
	timer->status = 0U;
   1fde6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1fde8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1fdec:	f100 0218 	add.w	r2, r0, #24
   1fdf0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1fdf4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1fdf8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1fdfa:	6343      	str	r3, [r0, #52]	; 0x34
}
   1fdfc:	4770      	bx	lr

0001fdfe <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1fdfe:	b510      	push	{r4, lr}
   1fe00:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1fe02:	f7ff ff83 	bl	1fd0c <z_abort_timeout>

	if (inactive) {
   1fe06:	b9d8      	cbnz	r0, 1fe40 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   1fe08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fe0a:	b10b      	cbz	r3, 1fe10 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1fe0c:	4620      	mov	r0, r4
   1fe0e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1fe10:	f104 0018 	add.w	r0, r4, #24
   1fe14:	2100      	movs	r1, #0
   1fe16:	f7ff fdf0 	bl	1f9fa <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1fe1a:	4604      	mov	r4, r0
   1fe1c:	b180      	cbz	r0, 1fe40 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   1fe1e:	f7ff fdfc 	bl	1fa1a <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   1fe22:	4620      	mov	r0, r4
   1fe24:	f7ff fe4b 	bl	1fabe <z_ready_thread>
	__asm__ volatile(
   1fe28:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe2c:	f3ef 8011 	mrs	r0, BASEPRI
   1fe30:	f383 8811 	msr	BASEPRI, r3
   1fe34:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1fe38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1fe3c:	f7ff bdfd 	b.w	1fa3a <z_reschedule_irqlock>
   1fe40:	bd10      	pop	{r4, pc}

0001fe42 <clear_event_registrations>:
	while (num_events--) {
   1fe42:	2314      	movs	r3, #20
{
   1fe44:	b530      	push	{r4, r5, lr}
   1fe46:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   1fe4a:	2400      	movs	r4, #0
	while (num_events--) {
   1fe4c:	4281      	cmp	r1, r0
   1fe4e:	d100      	bne.n	1fe52 <clear_event_registrations+0x10>
}
   1fe50:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   1fe52:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1fe56:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1fe5a:	f003 030f 	and.w	r3, r3, #15
   1fe5e:	2b02      	cmp	r3, #2
   1fe60:	d80a      	bhi.n	1fe78 <clear_event_registrations+0x36>
   1fe62:	b15b      	cbz	r3, 1fe7c <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1fe64:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1fe68:	b143      	cbz	r3, 1fe7c <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   1fe6a:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1fe6e:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1fe70:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1fe72:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   1fe76:	e001      	b.n	1fe7c <clear_event_registrations+0x3a>
	switch (event->type) {
   1fe78:	2b04      	cmp	r3, #4
   1fe7a:	d0f3      	beq.n	1fe64 <clear_event_registrations+0x22>
	__asm__ volatile(
   1fe7c:	f382 8811 	msr	BASEPRI, r2
   1fe80:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1fe84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe88:	f3ef 8211 	mrs	r2, BASEPRI
   1fe8c:	f383 8811 	msr	BASEPRI, r3
   1fe90:	f3bf 8f6f 	isb	sy
   1fe94:	3914      	subs	r1, #20
   1fe96:	e7d9      	b.n	1fe4c <clear_event_registrations+0xa>

0001fe98 <k_work_submit_to_queue>:
{
   1fe98:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fe9a:	f101 0308 	add.w	r3, r1, #8
   1fe9e:	f3bf 8f5b 	dmb	ish
   1fea2:	e853 2f00 	ldrex	r2, [r3]
   1fea6:	f042 0c01 	orr.w	ip, r2, #1
   1feaa:	e843 ce00 	strex	lr, ip, [r3]
   1feae:	f1be 0f00 	cmp.w	lr, #0
   1feb2:	d1f6      	bne.n	1fea2 <k_work_submit_to_queue+0xa>
   1feb4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1feb8:	07d3      	lsls	r3, r2, #31
   1feba:	d403      	bmi.n	1fec4 <k_work_submit_to_queue+0x2c>
}
   1febc:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1fec0:	f7ff bd41 	b.w	1f946 <k_queue_append>
}
   1fec4:	f85d fb04 	ldr.w	pc, [sp], #4

0001fec8 <signal_poll_event>:
{
   1fec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1fecc:	6884      	ldr	r4, [r0, #8]
{
   1fece:	4605      	mov	r5, r0
   1fed0:	460e      	mov	r6, r1
	if (poller) {
   1fed2:	b144      	cbz	r4, 1fee6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1fed4:	7863      	ldrb	r3, [r4, #1]
   1fed6:	2b01      	cmp	r3, #1
   1fed8:	d138      	bne.n	1ff4c <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   1feda:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1fede:	f013 0302 	ands.w	r3, r3, #2
   1fee2:	d10a      	bne.n	1fefa <signal_poll_event+0x32>
		poller->is_polling = false;
   1fee4:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1fee6:	68eb      	ldr	r3, [r5, #12]
   1fee8:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1feec:	430e      	orrs	r6, r1
	event->poller = NULL;
   1feee:	2000      	movs	r0, #0
	event->state |= state;
   1fef0:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   1fef4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1fef6:	60eb      	str	r3, [r5, #12]
	return retcode;
   1fef8:	e00d      	b.n	1ff16 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1fefa:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   1fefe:	f04f 31ff 	mov.w	r1, #4294967295
   1ff02:	f06f 0001 	mvn.w	r0, #1
   1ff06:	428b      	cmp	r3, r1
   1ff08:	bf08      	it	eq
   1ff0a:	4282      	cmpeq	r2, r0
   1ff0c:	d105      	bne.n	1ff1a <signal_poll_event+0x52>
		poller->is_polling = false;
   1ff0e:	2300      	movs	r3, #0
   1ff10:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1ff12:	f06f 000a 	mvn.w	r0, #10
}
   1ff16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ff1a:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   1ff1e:	4640      	mov	r0, r8
   1ff20:	f7ff fdad 	bl	1fa7e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ff24:	2e08      	cmp	r6, #8
   1ff26:	bf0c      	ite	eq
   1ff28:	f06f 0303 	mvneq.w	r3, #3
   1ff2c:	2300      	movne	r3, #0
   1ff2e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ff30:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1ff34:	06db      	lsls	r3, r3, #27
   1ff36:	d102      	bne.n	1ff3e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   1ff38:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   1ff3c:	b10f      	cbz	r7, 1ff42 <signal_poll_event+0x7a>
		poller->is_polling = false;
   1ff3e:	2300      	movs	r3, #0
   1ff40:	e7d0      	b.n	1fee4 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1ff42:	4640      	mov	r0, r8
   1ff44:	f7ff fdbb 	bl	1fabe <z_ready_thread>
		poller->is_polling = false;
   1ff48:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1ff4a:	e7cc      	b.n	1fee6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1ff4c:	2b02      	cmp	r3, #2
   1ff4e:	d1f6      	bne.n	1ff3e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1ff50:	7823      	ldrb	r3, [r4, #0]
   1ff52:	2b00      	cmp	r3, #0
   1ff54:	d0c7      	beq.n	1fee6 <signal_poll_event+0x1e>
   1ff56:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1ff5a:	2f00      	cmp	r7, #0
   1ff5c:	d0f4      	beq.n	1ff48 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1ff5e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1ff62:	f1a4 0910 	sub.w	r9, r4, #16
   1ff66:	f104 0010 	add.w	r0, r4, #16
   1ff6a:	f7ff fecf 	bl	1fd0c <z_abort_timeout>
		twork->poll_result = 0;
   1ff6e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1ff72:	4649      	mov	r1, r9
   1ff74:	4638      	mov	r0, r7
   1ff76:	f7ff ff8f 	bl	1fe98 <k_work_submit_to_queue>
		poller->is_polling = false;
   1ff7a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1ff7e:	e7b2      	b.n	1fee6 <signal_poll_event+0x1e>

0001ff80 <add_event>:
{
   1ff80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff82:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ff84:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ff88:	4290      	cmp	r0, r2
   1ff8a:	4604      	mov	r4, r0
   1ff8c:	460d      	mov	r5, r1
   1ff8e:	d106      	bne.n	1ff9e <add_event+0x1e>
	node->prev = list->tail;
   1ff90:	6863      	ldr	r3, [r4, #4]
   1ff92:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1ff94:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1ff96:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   1ff98:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ff9a:	6065      	str	r5, [r4, #4]
}
   1ff9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1ff9e:	2b00      	cmp	r3, #0
   1ffa0:	d0f6      	beq.n	1ff90 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1ffa2:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ffa4:	b100      	cbz	r0, 1ffa8 <add_event+0x28>
   1ffa6:	3864      	subs	r0, #100	; 0x64
   1ffa8:	b107      	cbz	r7, 1ffac <add_event+0x2c>
   1ffaa:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1ffac:	4639      	mov	r1, r7
   1ffae:	f7ff fd1b 	bl	1f9e8 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1ffb2:	2800      	cmp	r0, #0
   1ffb4:	d1ec      	bne.n	1ff90 <add_event+0x10>
	return list->head == list;
   1ffb6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ffb8:	42b4      	cmp	r4, r6
   1ffba:	d0e9      	beq.n	1ff90 <add_event+0x10>
   1ffbc:	2e00      	cmp	r6, #0
   1ffbe:	bf38      	it	cc
   1ffc0:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ffc2:	2e00      	cmp	r6, #0
   1ffc4:	d0e4      	beq.n	1ff90 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1ffc6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ffc8:	b101      	cbz	r1, 1ffcc <add_event+0x4c>
   1ffca:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1ffcc:	4638      	mov	r0, r7
   1ffce:	f7ff fd0b 	bl	1f9e8 <z_is_t1_higher_prio_than_t2>
   1ffd2:	b128      	cbz	r0, 1ffe0 <add_event+0x60>
	node->prev = successor->prev;
   1ffd4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ffd6:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1ffda:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ffdc:	6075      	str	r5, [r6, #4]
			return;
   1ffde:	e7dd      	b.n	1ff9c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1ffe0:	6863      	ldr	r3, [r4, #4]
   1ffe2:	42b3      	cmp	r3, r6
   1ffe4:	d0d4      	beq.n	1ff90 <add_event+0x10>
   1ffe6:	6836      	ldr	r6, [r6, #0]
   1ffe8:	e7eb      	b.n	1ffc2 <add_event+0x42>

0001ffea <register_events>:
{
   1ffea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1ffee:	f04f 0a00 	mov.w	sl, #0
{
   1fff2:	460e      	mov	r6, r1
   1fff4:	4614      	mov	r4, r2
   1fff6:	461f      	mov	r7, r3
   1fff8:	4683      	mov	fp, r0
	int events_registered = 0;
   1fffa:	4655      	mov	r5, sl
	event->poller = NULL;
   1fffc:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   1fffe:	45b2      	cmp	sl, r6
   20000:	db02      	blt.n	20008 <register_events+0x1e>
}
   20002:	4628      	mov	r0, r5
   20004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20008:	f04f 0340 	mov.w	r3, #64	; 0x40
   2000c:	f3ef 8911 	mrs	r9, BASEPRI
   20010:	f383 8811 	msr	BASEPRI, r3
   20014:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   20018:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2001c:	f002 020f 	and.w	r2, r2, #15
   20020:	2a02      	cmp	r2, #2
   20022:	d006      	beq.n	20032 <register_events+0x48>
   20024:	2a04      	cmp	r2, #4
   20026:	d008      	beq.n	2003a <register_events+0x50>
   20028:	2a01      	cmp	r2, #1
   2002a:	d120      	bne.n	2006e <register_events+0x84>
		if (event->signal->signaled != 0U) {
   2002c:	f8db 3010 	ldr.w	r3, [fp, #16]
   20030:	e001      	b.n	20036 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   20032:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   20036:	689b      	ldr	r3, [r3, #8]
   20038:	e002      	b.n	20040 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2003a:	f8db 3010 	ldr.w	r3, [fp, #16]
   2003e:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   20040:	b1ab      	cbz	r3, 2006e <register_events+0x84>
	event->state |= state;
   20042:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   20046:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2004a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2004e:	430a      	orrs	r2, r1
   20050:	f362 3310 	bfi	r3, r2, #12, #5
   20054:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   20058:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2005c:	f389 8811 	msr	BASEPRI, r9
   20060:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20064:	f10a 0a01 	add.w	sl, sl, #1
   20068:	f10b 0b14 	add.w	fp, fp, #20
   2006c:	e7c7      	b.n	1fffe <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   2006e:	2f00      	cmp	r7, #0
   20070:	d1f4      	bne.n	2005c <register_events+0x72>
   20072:	7823      	ldrb	r3, [r4, #0]
   20074:	2b00      	cmp	r3, #0
   20076:	d0f1      	beq.n	2005c <register_events+0x72>
	switch (event->type) {
   20078:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2007c:	f003 030f 	and.w	r3, r3, #15
   20080:	2b02      	cmp	r3, #2
   20082:	d008      	beq.n	20096 <register_events+0xac>
   20084:	2b04      	cmp	r3, #4
   20086:	d006      	beq.n	20096 <register_events+0xac>
   20088:	2b01      	cmp	r3, #1
   2008a:	d10b      	bne.n	200a4 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2008c:	f8db 0010 	ldr.w	r0, [fp, #16]
   20090:	4622      	mov	r2, r4
   20092:	4659      	mov	r1, fp
   20094:	e004      	b.n	200a0 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   20096:	f8db 0010 	ldr.w	r0, [fp, #16]
   2009a:	4622      	mov	r2, r4
   2009c:	4659      	mov	r1, fp
   2009e:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   200a0:	f7ff ff6e 	bl	1ff80 <add_event>
	event->poller = poller;
   200a4:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   200a8:	3501      	adds	r5, #1
   200aa:	e7d7      	b.n	2005c <register_events+0x72>

000200ac <k_poll_event_init>:
{
   200ac:	b510      	push	{r4, lr}
	event->type = type;
   200ae:	0452      	lsls	r2, r2, #17
   200b0:	0209      	lsls	r1, r1, #8
   200b2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   200b6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   200ba:	430a      	orrs	r2, r1
   200bc:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   200be:	2400      	movs	r4, #0
	event->type = type;
   200c0:	430a      	orrs	r2, r1
	event->obj = obj;
   200c2:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   200c6:	6084      	str	r4, [r0, #8]
}
   200c8:	bd10      	pop	{r4, pc}

000200ca <z_handle_obj_poll_events>:
{
   200ca:	4603      	mov	r3, r0
	return list->head == list;
   200cc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   200ce:	4283      	cmp	r3, r0
   200d0:	d008      	beq.n	200e4 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   200d2:	e9d0 3200 	ldrd	r3, r2, [r0]
   200d6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   200d8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   200da:	2300      	movs	r3, #0
	node->prev = NULL;
   200dc:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   200e0:	f7ff bef2 	b.w	1fec8 <signal_poll_event>
}
   200e4:	4770      	bx	lr

000200e6 <k_free>:
	if (ptr != NULL) {
   200e6:	b138      	cbz	r0, 200f8 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   200e8:	1f03      	subs	r3, r0, #4
   200ea:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   200ec:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   200f0:	1c42      	adds	r2, r0, #1
   200f2:	d0fa      	beq.n	200ea <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   200f4:	f7ff bb72 	b.w	1f7dc <k_heap_free>
}
   200f8:	4770      	bx	lr

000200fa <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   200fa:	4770      	bx	lr
